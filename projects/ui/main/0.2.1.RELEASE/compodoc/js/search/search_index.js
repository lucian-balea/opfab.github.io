var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/AcceptLogIn.html",[0,0.225,1,2.07]],["body/classes/AcceptLogIn.html",[0,0.392,1,3.002,2,0.547,3,0.063,4,0.055,5,0.118,6,1.623,7,1.452,8,1.463,9,3.948,10,2.532,11,3.257,12,2.723,13,3.473,14,3.956,15,2.254,16,3.682,17,2.047,18,3.682,19,3.257,20,3.036,21,2.765,22,2.642,23,3.336,24,2.62,25,3.371,26,3.682,27,3.238,28,1.461,29,3.316,30,3.519,31,3.682,32,0.361,33,1.273,34,0.189,35,0.51,36,1.138,37,1.824,38,1.413,39,0.311,40,1.197,41,3.215,42,0.291,43,4.68,44,0.399,45,0.01,46,0.341,47,0.375,48,3.124,49,0.547,50,0.463,51,0.141,52,0.504,53,2.52,54,1.403,55,0.157,56,0.713,57,1.561,58,2.608,59,1.452,60,1.313,61,3.168,62,3.271,63,3.791,64,3.371,65,2.703,66,1.764,67,2.254,68,2.897,69,2.36,70,3.215,71,2.703,72,0.929,73,1.804,74,1.357,75,1.234,76,1.403,77,1.403,78,1.452,79,1.505,80,1.505,81,1.846,82,1.505,83,1.846,84,1.846,85,1.505,86,1.846,87,1.386,88,1.386,89,1.282,90,1.764,91,1.846,92,1.846,93,1.623,94,1.273,95,0.929,96,1.764,97,2.608,98,2.765,99,2.608,100,2.431,101,1.764,102,1.008,103,1.764,104,1.764,105,1.561,106,3.371,107,0.954,108,1.846,109,1.69,110,1.764,111,2.765,112,1.156,113,1.846,114,1.846,115,3.682,116,1.764,117,1.846,118,2.765,119,1.69,120,1.846,121,2.642,122,1.69,123,1.846,124,1.764,125,1.846,126,1.764,127,1.846,128,2.642,129,2.642,130,1.846,131,1.846,132,1.69,133,0.004,134,0.005,135,0.004]],["title/classes/AcceptLogOut.html",[0,0.225,70,2.07]],["body/classes/AcceptLogOut.html",[0,0.395,1,2.751,2,0.563,3,0.065,4,0.057,5,0.112,6,1.671,7,1.495,8,1.469,9,3.917,10,1.74,11,2.939,12,2.721,13,3.41,14,3.999,15,1.549,16,3.736,17,2.124,18,3.736,19,3.141,20,2.588,21,1.9,22,1.816,23,3.161,24,2.401,25,3.089,26,3.374,27,2.967,28,1.339,29,2.826,30,3.224,31,2.826,32,0.354,33,1.284,34,0.194,35,0.522,36,0.973,37,1.487,38,1.424,39,0.379,41,2.304,42,0.248,45,0.01,49,0.563,50,0.477,51,0.145,52,0.519,53,2.564,54,1.445,55,0.158,56,0.735,57,1.608,58,2.654,59,1.495,60,1.352,61,3.224,62,3.344,63,3.832,64,3.421,65,2.751,66,1.816,67,2.304,68,3.141,69,2.401,70,3.533,71,2.751,72,0.956,73,1.83,74,1.397,75,1.249,76,1.445,77,1.445,78,1.495,79,1.549,80,1.549,81,1.9,82,1.549,83,1.9,84,1.9,85,1.549,86,1.9,87,1.411,88,1.411,89,1.304,90,1.816,91,1.9,92,1.9,93,1.671,94,1.31,95,0.956,96,1.816,97,2.654,98,2.826,99,2.654,100,2.485,101,1.816,102,1.038,103,1.816,104,1.816,105,1.608,106,3.656,107,0.982,108,1.9,109,1.74,110,1.816,111,2.826,112,1.182,113,1.9,114,1.9,115,4.185,116,1.816,117,1.9,118,2.826,119,1.74,120,1.9,121,2.701,122,1.74,123,2.826,124,2.701,125,2.826,126,2.701,127,2.826,128,3.224,129,3.224,130,1.9,131,1.9,132,1.74,133,0.004,134,0.005,135,0.004,136,4.784]],["title/classes/AcceptLogOutSuccess.html",[0,0.225,71,2.07]],["body/classes/AcceptLogOutSuccess.html",[0,0.395,1,2.749,2,0.563,3,0.065,4,0.057,5,0.119,6,1.669,7,1.493,8,1.469,9,3.974,10,1.738,11,3.14,12,2.734,13,3.502,14,3.997,15,1.548,16,3.372,17,2.066,18,3.372,19,3.14,20,2.585,21,1.898,22,1.814,23,3.159,24,2.657,25,3.419,26,3.734,27,3.283,28,1.482,29,2.824,30,3.568,31,2.824,32,0.357,33,1.284,34,0.194,35,0.521,36,0.973,37,1.486,38,1.423,39,0.213,41,2.302,42,0.166,45,0.01,49,0.563,50,0.476,51,0.144,52,0.518,53,2.563,54,1.443,55,0.158,56,0.734,57,1.606,58,2.653,59,1.493,60,1.351,61,3.222,62,3.294,63,3.83,64,3.419,65,2.749,66,1.814,67,2.302,68,2.938,69,2.399,70,3.41,71,3.044,72,0.955,73,1.829,74,1.396,75,1.249,76,1.443,77,1.443,78,1.493,79,1.548,80,1.548,81,1.898,82,1.548,83,1.898,84,1.898,85,1.548,86,1.898,87,1.41,88,1.41,89,1.303,90,1.814,91,1.898,92,1.898,93,1.669,94,1.309,95,0.955,96,1.814,97,2.653,98,2.824,99,2.653,100,2.483,101,1.814,102,1.036,103,1.814,104,1.814,105,1.606,106,3.419,107,0.981,108,1.898,109,1.738,110,1.814,111,3.372,112,1.41,113,1.898,114,1.898,115,3.991,116,1.814,117,1.898,118,3.372,119,1.738,120,1.898,121,2.698,122,1.738,123,1.898,124,1.814,125,1.898,126,1.814,127,1.898,128,3.222,129,3.222,130,2.824,131,2.824,132,1.738,133,0.004,134,0.005,135,0.004,137,3.213]],["title/classes/Action.html",[0,0.225,8,0.753]],["body/classes/Action.html",[0,0.388,2,0.708,3,0.081,4,0.071,5,0.071,8,0.988,32,0.306,38,1.675,39,0.508,42,0.209,44,0.517,45,0.01,46,0.615,47,0.486,50,0.836,51,0.196,55,0.161,56,1.484,75,1.618,97,3.02,133,0.005,134,0.006,135,0.005,138,2.508,139,3.556,140,4.598,141,4.368,142,4.811,143,4.505,144,3.282,145,4.505,146,4.505,147,3.514,148,3.267,149,4.505,150,4.505,151,4.505,152,4.505,153,4.505,154,4.043,155,4.03,156,1.597,157,1.504,158,2.804,159,1.723,160,2.508,161,0.708,162,2.804,163,1.549,164,2.283,165,2.645,166,2.804,167,3.439,168,2.804,169,2.804,170,2.804,171,2.804,172,2.804,173,3.499,174,2.804,175,1.597,176,2.508,177,3.185,178,1.947,179,4.249,180,2.645,181,2.645,182,2.645,183,2.804,184,2.645,185,2.021,186,2.645,187,2.645,188,2.645,189,3.104,190,3.69,191,2.187,192,2.508,193,2.645,194,2.645,195,2.645,196,2.021,197,2.804,198,2.804,199,2.804,200,2.804,201,3.499,202,2.804,203,2.804]],["title/classes/AddLightCardFailure.html",[0,0.225,204,2.07]],["body/classes/AddLightCardFailure.html",[0,0.422,2,0.718,3,0.083,4,0.072,5,0.072,8,1.449,12,1.323,32,0.375,33,1.392,34,0.248,35,0.621,36,0.971,37,2.094,38,1.529,39,0.434,40,1.572,42,0.339,44,0.524,45,0.01,46,0.447,47,0.493,49,0.718,50,0.608,51,0.172,52,0.662,55,0.166,56,0.937,72,1.219,73,2.151,87,1.836,88,1.836,89,1.698,133,0.005,134,0.006,135,0.005,156,1.62,157,1.526,161,0.718,175,1.62,204,3.407,205,3.675,206,2.131,207,2.585,208,5.698,209,4.102,210,3.366,211,2.475,212,2.219,213,3.272,214,4.542,215,2.482,216,3.043,217,2.848,218,2.316,219,3.272,220,2.119,221,3.153,222,2.05,223,1.219,224,2.219,225,1.976,226,3.153,227,2.219,228,1.999,229,1.526,230,1.526,231,2.054,232,1.725,233,1.725,234,1.36,235,1.482,236,1.572,237,2.424,238,2.424,239,2.219,240,2.424,241,2.424,242,2.424,243,2.424,244,2.424,245,2.424,246,2.219,247,2.424,248,2.424,249,2.424]],["title/components/AppComponent.html",[250,1.034,251,1.646]],["body/components/AppComponent.html",[0,0.185,3,0.071,4,0.09,5,0.09,8,1.056,12,2.133,17,1.699,32,0.336,33,0.873,34,0.213,35,0.559,36,0.602,39,0.234,42,0.401,44,0.451,45,0.01,46,0.658,47,0.424,49,1.158,50,0.98,51,0.248,52,0.569,55,0.071,58,1.641,59,2.381,60,2.78,62,1.485,75,0.653,80,1.701,82,3.382,85,3.185,95,1.05,100,1.834,102,1.139,107,1.078,112,1.809,133,0.004,134,0.006,135,0.004,144,2.723,159,1.078,161,0.897,173,3.74,185,1.765,189,2.892,222,1.765,223,1.05,250,1.451,251,2.533,252,2.154,253,1.485,254,1.534,255,1.534,256,3.106,257,2.802,258,1.534,259,3.712,260,4.099,261,3.351,262,6.028,263,2.225,264,5.123,265,6.028,266,4.823,267,6.028,268,6.028,269,2.019,270,6.028,271,1.406,272,3.074,273,1.586,274,4.181,275,4.899,276,5.123,277,3.531,278,3.795,279,4.099,280,4.099,281,5.123,282,2.802,283,5.123,284,5.123,285,5.123,286,6.028,287,0.944,288,1.353,289,3.531,290,3.531,291,3.531,292,3.531,293,5.123,294,3.531,295,0.671,296,1.204,297,1.395,298,1.994,299,1.275,300,1.485,301,2.449,302,2.826,303,3.106,304,2.826,305,3.531,306,2.086,307,2.086,308,3.106,309,2.616,310,2.771,311,2.826,312,2.826,313,2.826,314,3.106,315,1.171,316,3.531,317,3.531,318,3.531,319,3.531,320,2.826,321,3.531,322,3.531,323,3.531,324,3.531,325,3.531,326,5.123,327,3.531,328,3.531,329,3.531,330,2.31,331,3.531,332,3.531,333,3.106,334,3.531,335,2.086,336,2.892,337,4.506,338,5.123,339,5.123,340,5.123,341,5.123,342,1.586,343,1.534,344,1.586,345,1.586,346,1.586,347,1.586,348,1.586,349,1.534,350,1.586,351,1.586,352,1.586,353,1.534,354,1.586,355,1.534,356,1.586,357,1.586,358,1.586,359,1.586,360,2.826,361,2.616,362,3.106,363,1.239,364,2.225,365,2.225,366,1.534,367,2.872,368,1.534,369,1.534,370,1.313,371,1.534,372,1.353,373,1.534,374,1.313,375,2.225,376,1.353,377,1.534,378,1.313,379,1.534,380,1.353,381,1.313,382,1.534,383,1.353,384,1.534,385,1.353,386,1.534,387,1.534,388,1.534,389,1.353,390,1.534,391,1.353,392,1.798,393,1.534,394,1.353,395,1.534,396,1.353,397,1.05,398,1.534,399,1.534]],["title/modules/AppModule.html",[400,1.866,401,2.98]],["body/modules/AppModule.html",[0,0.245,3,0.094,4,0.11,5,0.11,36,0.797,45,0.01,51,0.265,55,0.094,69,1.965,95,2.378,102,1.508,107,2.443,133,0.005,134,0.007,135,0.005,223,1.389,251,3.299,279,3.74,295,0.888,306,2.761,307,2.761,342,2.099,343,2.03,344,2.099,345,2.099,346,2.099,347,2.099,348,2.099,349,2.03,350,2.099,351,2.099,352,2.099,353,2.03,354,2.099,355,2.03,356,2.099,357,2.099,358,2.099,359,2.099,363,1.64,385,3.064,400,2.03,401,6.145,402,2.336,403,2.639,404,4.344,405,4.412,406,3.863,407,2.528,408,4.111,409,4.111,410,4.111,411,4.111,412,5.547,413,5.394,414,5.394,415,3.679,416,2.761,417,4.674,418,3.515,419,6.227,420,4.982,421,3.463,422,3.515,423,6.227,424,4.674,425,6.227,426,2.528,427,4.073,428,6.227,429,6.227,430,2.761,431,5.477,432,5.477,433,3.057,434,4.674,435,5.477,436,3.463,437,3.74,438,4.674,439,3.463,440,4.674,441,4.674,442,4.111,443,4.674,444,3.74,445,3.74,446,4.674,447,4.674,448,4.674,449,4.674,450,3.241,451,3.74]],["title/modules/AppRoutingModule.html",[400,1.866,412,2.98]],["body/modules/AppRoutingModule.html",[0,0.281,3,0.108,4,0.12,5,0.12,36,0.912,45,0.01,51,0.245,55,0.137,95,2.221,99,2.486,102,1.725,109,2.893,133,0.006,134,0.008,135,0.006,223,1.59,250,1.636,295,1.016,342,2.402,343,2.323,344,2.402,345,2.402,346,2.402,347,2.402,348,2.402,349,2.323,350,2.402,351,2.402,352,2.402,353,2.323,354,2.402,355,2.323,356,2.402,357,2.402,358,2.402,359,2.402,402,2.673,407,2.893,412,4.714,418,3.019,422,3.838,442,4.704,452,5.348,453,4.279,454,6.798,455,5.439,456,5.143,457,3.16,458,5.536,459,4.279,460,2.576,461,3.16,462,2.193,463,6.639,464,3.838,465,6.798,466,5.348,467,5.439,468,3.962,469,5.348,470,4.704,471,5.348,472,4.279,473,5.348,474,5.348,475,5.348,476,4.704,477,5.348,478,4.704,479,5.348,480,5.348,481,3.962,482,5.348]],["title/interfaces/AppState.html",[299,1.552,483,2.07]],["body/interfaces/AppState.html",[3,0.092,4,0.081,5,0.081,12,2.488,15,2.95,25,4.173,32,0.345,34,0.276,35,0.668,45,0.01,51,0.27,52,0.735,55,0.155,112,1.709,133,0.005,134,0.007,135,0.005,161,1.351,235,2.212,299,2.212,460,2.197,461,2.694,462,2.385,464,4.355,481,3.379,483,2.197,484,2.829,485,3.649,486,4.355,487,4.557,488,4.794,489,5.128,490,5.128,491,5.128,492,5.128,493,5.128,494,7.394,495,4.56,496,4.007,497,3.163,498,4.011,499,5.387,500,4.56,501,5.387,502,5.387,503,5.387,504,4.56,505,4.248,506,4.56,507,4.248,508,4.56,509,4.56,510,4.56,511,5.387,512,4.56,513,5.387,514,4.56,515,4.56,516,5.387,517,4.56,518,5.387,519,4.56,520,5.387,521,4.56,522,4.56,523,4.56,524,4.248,525,4.56,526,4.56,527,4.56,528,4.248,529,4.56,530,4.248,531,4.56,532,4.56,533,4.248,534,4.56,535,4.56,536,4.011,537,4.248,538,4.56,539,3.379,540,3.379,541,4.011,542,4.901,543,3.379,544,4.011,545,3.163,546,4.011]],["title/classes/ApplyFilter.html",[0,0.225,547,2.324]],["body/classes/ApplyFilter.html",[0,0.365,2,0.972,3,0.112,4,0.098,5,0.098,8,1.396,32,0.38,33,1.295,34,0.335,35,0.759,36,1.186,37,1.979,38,1.473,39,0.368,40,2.126,42,0.394,44,0.709,45,0.01,46,0.605,47,0.667,49,0.972,50,0.822,51,0.23,52,0.895,55,0.16,56,1.267,60,2.925,73,2.013,133,0.006,134,0.008,135,0.006,144,2.063,159,1.694,207,3.002,278,4.111,397,2.259,464,3.928,547,4.311,548,3.848,549,6.958,550,5.549,551,6.119,552,3.629,553,3.629,554,4.11,555,3.278,556,4.111,557,3.848,558,4.44,559,4.88,560,3.442,561,4.316,562,4.88,563,4.88,564,4.111]],["title/components/ArchivesComponent.html",[250,1.034,370,1.598]],["body/components/ArchivesComponent.html",[0,0.26,3,0.1,4,0.114,5,0.114,32,0.215,33,1.103,34,0.299,36,0.844,39,0.478,42,0.335,45,0.01,46,0.706,51,0.15,55,0.1,95,1.472,102,1.598,107,1.513,133,0.006,134,0.007,135,0.006,161,1.133,185,2.476,223,1.472,250,1.734,251,1.898,252,2.72,253,2.083,254,2.151,255,2.151,257,3.349,258,2.151,259,3.861,261,4.232,263,2.81,271,1.775,272,3.551,287,1.324,288,1.898,295,0.941,342,2.224,343,2.151,344,2.224,345,2.224,346,2.224,347,2.224,348,2.224,349,2.151,350,2.224,351,2.224,352,2.224,353,2.151,354,2.224,355,2.151,356,2.224,357,2.224,358,2.224,359,2.224,363,1.738,364,2.81,365,2.81,366,2.151,367,3.318,368,2.151,369,2.151,370,2.841,371,2.151,372,1.898,373,2.151,374,1.842,375,2.81,376,1.898,377,2.151,378,1.842,379,2.151,380,1.898,381,1.842,382,2.151,383,1.898,384,2.151,385,1.898,386,2.151,387,2.151,388,2.151,389,1.898,390,2.151,391,1.898,392,2.27,393,2.151,394,1.898,395,2.151,396,1.898,397,1.472,398,2.151,399,2.151,468,5.66,565,4.356,566,7.206,567,6.47,568,4.953,569,4.953,570,5.69]],["title/modules/ArchivesModule.html",[400,1.866,571,3.183]],["body/modules/ArchivesModule.html",[0,0.3,3,0.115,4,0.125,5,0.125,36,0.974,45,0.01,51,0.243,55,0.115,69,2.404,102,1.844,133,0.007,134,0.008,135,0.007,223,1.7,295,1.086,342,2.568,343,2.483,344,2.568,345,2.568,346,2.568,347,2.568,348,2.568,349,2.483,350,2.568,351,2.568,352,2.568,353,2.483,354,2.568,355,2.483,356,2.568,357,2.568,358,2.568,359,2.568,363,2.006,370,3.138,400,2.483,402,2.858,403,3.228,404,4.779,405,3.378,406,3.547,407,3.093,415,4.188,416,3.378,418,4.002,422,4.002,427,4.637,430,3.378,439,4.236,468,4.236,571,6.404,572,5.029,573,5.029,574,5.029,575,5.852,576,5.718,577,5.029]],["title/modules/ArchivesRoutingModule.html",[400,1.866,575,2.98]],["body/modules/ArchivesRoutingModule.html",[0,0.311,3,0.119,4,0.128,5,0.128,36,1.011,45,0.01,51,0.246,55,0.119,102,1.914,133,0.007,134,0.008,135,0.007,223,1.764,250,1.428,295,1.127,342,2.665,343,2.577,344,2.665,345,2.665,346,2.665,347,2.665,348,2.665,349,2.577,350,2.665,351,2.665,352,2.665,353,2.577,354,2.665,355,2.577,356,2.665,357,2.665,358,2.665,359,2.665,370,2.697,402,2.966,407,3.21,418,3.35,422,4.095,453,4.748,455,5.803,456,5.124,457,3.506,458,5.373,459,4.748,462,1.914,463,4.748,467,4.748,575,5.03,577,5.219,578,5.934,579,5.219]],["title/classes/AuthObject.html",[0,0.225,580,2.98]],["body/classes/AuthObject.html",[0,0.349,2,0.48,3,0.055,4,0.048,5,0.048,7,1.273,9,2.587,12,2.468,13,1.968,17,1.641,23,2.587,24,1.151,27,1.423,28,1.627,32,0.289,34,0.165,35,0.462,36,1.222,37,1.102,39,0.182,41,3.343,42,0.302,45,0.01,47,0.509,51,0.217,53,2.615,54,1.23,55,0.134,56,0.625,59,1.968,62,1.151,67,2.039,74,2.891,75,1.455,76,3.305,77,3.717,78,2.707,79,2.805,82,1.319,93,2.199,94,2.565,99,2.927,102,0.883,105,2.911,112,0.676,133,0.003,134,0.005,135,0.003,144,1.925,159,0.836,163,1.049,167,3.22,175,1.081,189,2.044,223,1.538,231,1.102,269,1.581,282,1.968,288,1.049,295,0.52,296,0.934,297,1.081,298,1.546,315,0.908,392,2.209,426,1.481,460,1.319,461,1.618,462,2.425,580,4.039,581,1.791,582,3.387,583,5.038,584,4.141,585,4.141,586,2.738,587,2.738,588,2.738,589,2.738,590,1.074,591,3.058,592,2.191,593,1.899,594,1.369,595,3.44,596,1.899,597,2.029,598,2.936,599,2.029,600,1.319,601,5.888,602,2.191,603,2.191,604,3.387,605,2.191,606,2.191,607,4.972,608,2.191,609,2.191,610,2.191,611,2.191,612,2.191,613,2.029,614,3.136,615,2.191,616,3.387,617,2.029,618,2.086,619,1.899,620,2.191,621,3.387,622,2.191,623,3.44,624,2.191,625,2.191,626,2.191,627,2.191,628,2.191,629,2.191,630,2.191,631,3.387,632,2.936,633,2.191,634,2.191,635,2.191,636,2.191,637,1.618,638,2.191,639,2.191,640,2.191,641,2.191,642,2.029,643,2.191,644,2.191,645,2.191,646,2.769,647,2.191,648,2.191,649,2.191,650,2.191,651,2.191,652,2.029,653,2.191,654,2.191,655,2.191,656,2.191,657,3.387,658,2.191,659,2.191,660,2.191,661,2.191,662,2.191,663,2.191,664,2.191,665,3.387,666,2.191,667,2.191,668,2.191,669,2.191,670,2.191,671,3.136,672,5.038,673,2.191,674,3.387,675,2.406,676,4.039,677,3.834,678,2.191,679,2.191,680,2.191,681,2.191,682,3.387,683,2.191,684,3.387,685,2.191,686,3.387,687,2.191,688,3.387,689,2.191,690,2.191,691,2.191,692,2.029,693,2.191,694,2.191,695,2.191,696,2.191,697,2.936,698,2.191,699,2.191,700,2.191,701,2.191,702,2.191,703,2.191,704,2.191,705,2.191,706,2.191,707,2.191,708,2.191,709,2.191,710,2.191,711,2.191,712,2.191,713,2.191,714,2.191,715,4.141,716,3.387,717,2.191,718,3.136,719,2.191,720,2.191,721,2.191,722,2.191,723,2.191,724,2.191,725,2.191,726,2.191,727,2.191,728,2.029,729,2.191,730,2.191,731,2.191,732,2.191,733,4.141,734,2.191,735,2.191,736,1.791,737,2.191,738,2.191,739,2.191,740,2.191,741,2.191,742,3.387,743,3.387,744,2.501,745,2.029,746,2.191,747,2.191,748,2.191]],["title/interfaces/AuthState.html",[483,2.07,489,2.98]],["body/interfaces/AuthState.html",[3,0.118,4,0.104,5,0.104,28,1.377,32,0.363,34,0.355,35,0.786,45,0.01,51,0.177,53,3.747,54,2.637,55,0.145,74,3.624,75,1.618,76,3.747,77,3.747,78,3.878,79,3.756,122,4.514,133,0.007,134,0.008,135,0.007,462,1.894,483,2.829,484,3.643,489,5.407,749,4.699,750,4.699,751,4.803,752,5.165]],["title/injectables/AuthenticationEffects.html",[15,2.07,590,1.09]],["body/injectables/AuthenticationEffects.html",[0,0.111,1,2.669,3,0.042,4,0.037,5,0.037,7,1.601,8,1.405,11,2.338,12,2.633,13,3.038,14,1.944,15,1.659,17,2.351,19,2.913,20,2.721,22,2.84,23,2.514,28,1.702,32,0.344,34,0.128,35,0.376,37,1.701,39,0.229,42,0.35,44,0.557,45,0.01,46,0.713,47,0.524,49,1.041,50,0.88,51,0.21,52,0.341,55,0.042,57,1.056,58,2.027,59,2.338,60,1.448,62,3.152,63,1.863,64,1.863,65,2.1,68,2.913,70,3.557,71,2.1,75,0.806,77,1.958,79,2.423,80,1.659,82,2.669,85,2.862,87,0.851,88,0.851,89,0.787,90,1.944,94,2.662,97,2.338,99,3.374,100,1.789,101,3.355,103,1.944,106,1.863,110,1.944,112,1.67,116,2.84,119,1.863,121,1.944,124,2.84,126,2.84,128,3.128,129,1.944,132,4.109,133,0.005,134,0.004,135,0.002,159,1.332,178,3.019,231,0.897,269,1.332,271,0.945,273,0.948,280,4.025,287,0.92,295,0.401,296,0.72,297,0.834,298,1.192,299,0.763,300,0.888,311,1.69,315,0.7,335,2.035,361,2.552,457,1.248,462,1.407,488,4.289,590,0.873,594,1.056,600,3.148,607,3.489,613,2.552,614,2.552,617,2.552,618,2.004,623,2.035,671,2.552,676,2.389,692,3.727,736,3.887,753,0.917,754,1.858,755,3.444,756,4.361,757,5.031,758,2.112,759,3.444,760,3.444,761,3.444,762,3.444,763,3.444,764,5.031,765,3.444,766,3.444,767,2.112,768,3.444,769,2.112,770,3.444,771,4.424,772,3.444,773,4.424,774,3.444,775,3.355,776,4.847,777,2.112,778,6.536,779,5.943,780,3.444,781,5.943,782,3.444,783,3.444,784,3.444,785,3.686,786,3.087,787,3.444,788,2.462,789,3.444,790,3.444,791,3.444,792,3.444,793,3.444,794,3.444,795,2.552,796,3.121,797,2.756,798,5.541,799,3.444,800,2.112,801,3.444,802,3.444,803,2.756,804,3.444,805,5.031,806,3.444,807,2.389,808,3.029,809,3.444,810,2.112,811,3.444,812,3.444,813,3.444,814,3.231,815,5.541,816,3.444,817,2.112,818,2.756,819,3.444,820,3.444,821,3.444,822,3.444,823,3.444,824,3.444,825,3.444,826,3.444,827,3.444,828,3.444,829,3.444,830,5.031,831,5.031,832,2.112,833,3.444,834,3.444,835,3.444,836,3.444,837,3.444,838,3.444,839,3.444,840,2.112,841,3.444,842,3.029,843,1.248,844,1.143,845,2.112,846,1.381,847,1.31,848,5.541,849,2.112,850,2.112,851,2.112,852,2.112]],["title/injectables/AuthenticationService.html",[590,1.09,600,2.07]],["body/injectables/AuthenticationService.html",[0,0.294,3,0.044,4,0.038,5,0.038,7,1.633,9,1.756,12,2.541,13,2.372,17,1.784,20,1.9,23,2.805,24,0.91,27,1.825,28,1.484,32,0.287,34,0.131,35,0.383,36,1.397,37,1.328,39,0.233,41,3.521,42,0.391,44,0.768,45,0.01,46,0.656,47,0.722,49,0.615,50,0.52,51,0.199,53,1.991,54,0.972,55,0.121,56,0.494,59,2.061,62,1.477,67,1.042,74,2.437,75,1.479,76,3.062,77,3.795,78,2.372,79,3.177,82,1.692,93,2.651,94,2.448,99,2.608,102,0.698,105,3.004,112,0.868,133,0.002,134,0.004,135,0.002,144,2.087,159,0.661,163,1.346,167,2.844,175,0.855,189,2.216,223,1.668,231,1.461,269,2.082,271,0.964,282,2.372,287,1.916,288,1.699,295,0.411,296,0.738,297,0.855,298,1.222,315,0.718,392,1.969,426,1.171,460,1.042,461,1.279,462,2.26,580,4.168,581,1.415,582,1.731,583,4.809,584,1.731,585,1.731,590,0.891,591,3.551,592,1.731,593,1.501,594,1.082,595,3.897,596,1.501,597,1.603,598,2.436,599,1.603,600,1.692,601,6.246,602,3.548,603,2.811,604,4.083,605,3.548,606,2.811,607,4.575,608,2.811,609,2.811,610,2.811,611,1.731,612,2.811,613,2.602,614,3.285,615,2.811,616,3.548,617,2.602,618,1.997,619,2.436,620,2.811,621,4.083,622,2.811,623,3.741,624,2.811,625,1.731,626,1.731,627,1.731,628,1.731,629,1.731,630,1.731,631,2.811,632,3.075,633,2.811,634,2.811,635,2.811,636,2.811,637,1.279,638,1.731,639,1.731,640,1.731,641,1.731,642,1.603,643,1.731,644,1.731,645,1.731,646,2.298,647,1.731,648,1.731,649,1.731,650,1.731,651,1.731,652,1.603,653,1.731,654,1.731,655,1.731,656,1.731,657,2.811,658,1.731,659,1.731,660,1.731,661,1.731,662,1.731,663,1.731,664,1.731,665,2.811,666,1.731,667,1.731,668,2.811,669,1.731,670,1.731,671,3.781,672,5.606,673,4.083,674,2.811,675,2.608,676,4.575,677,4.157,678,2.811,679,2.811,680,2.811,681,4.083,682,4.49,683,1.731,684,2.811,685,1.731,686,2.811,687,1.731,688,2.811,689,2.811,690,4.083,691,1.731,692,2.602,693,4.083,694,1.731,695,2.811,696,2.811,697,3.539,698,2.811,699,1.731,700,1.731,701,1.731,702,1.731,703,1.731,704,1.731,705,1.731,706,1.731,707,2.811,708,2.811,709,4.083,710,1.731,711,1.731,712,1.731,713,1.731,714,1.731,715,4.49,716,4.083,717,2.811,718,2.602,719,1.731,720,1.731,721,1.731,722,1.731,723,1.731,724,2.811,725,2.811,726,2.811,727,2.811,728,2.602,729,4.083,730,2.811,731,1.731,732,1.731,733,3.548,734,1.731,735,1.731,736,1.415,737,1.731,738,1.731,739,1.731,740,1.731,741,1.731,742,2.811,743,2.811,744,2.075,745,1.603,746,1.731,747,1.731,748,1.731,753,0.94,853,3.513,854,3.513,855,3.513,856,1.603,857,3.513,858,2.164,859,2.164,860,2.164,861,2.164,862,2.164,863,2.164,864,2.164,865,2.164,866,2.164,867,2.164,868,2.164,869,2.164]],["title/classes/Card.html",[0,0.225,161,0.753]],["body/classes/Card.html",[0,0.384,2,0.687,3,0.079,4,0.069,5,0.069,8,0.687,32,0.278,38,1.673,39,0.503,42,0.203,44,0.502,45,0.01,46,0.603,47,0.472,50,0.819,51,0.193,55,0.16,56,1.46,75,1.643,97,1.824,133,0.004,134,0.006,135,0.004,138,2.435,140,3.614,141,3.777,142,4.897,143,2.722,144,3.008,145,2.722,146,2.722,147,2.123,148,2.568,149,2.722,150,2.722,151,2.722,152,2.722,153,2.722,155,4.835,156,1.55,157,1.46,158,2.722,159,2.119,160,2.435,161,0.968,162,3.831,163,2.449,164,3.609,165,4.182,166,4.434,167,3.813,168,4.434,169,4.434,170,4.434,171,4.434,172,4.434,173,4.304,174,4.434,175,2.525,176,3.966,177,3.917,178,3.079,179,4.182,180,2.567,181,2.567,182,2.567,183,2.722,184,2.567,185,1.962,186,2.567,187,2.567,188,2.567,189,3.078,190,3.614,191,2.123,192,2.435,193,2.567,194,2.567,195,2.567,196,1.962,197,2.722,198,2.722,199,2.722,200,2.722,201,3.427,202,2.722,203,2.722,870,3.925,871,3.925,872,6.854]],["title/components/CardComponent.html",[250,1.034,372,1.646]],["body/components/CardComponent.html",[0,0.198,3,0.076,4,0.095,5,0.095,32,0.326,33,0.917,34,0.229,35,0.587,36,1.277,39,0.251,42,0.408,44,0.483,45,0.01,46,0.683,47,0.454,49,0.663,50,0.56,51,0.226,52,0.61,55,0.076,75,1.158,95,1.124,102,1.22,107,1.155,112,1.905,133,0.004,134,0.006,135,0.004,144,2.002,147,2.911,148,2.912,156,1.494,157,1.407,161,1.405,173,2.346,185,1.891,191,2.911,211,3.255,222,3.411,223,1.124,225,1.822,250,1.508,251,1.449,252,2.263,253,1.59,254,1.643,255,1.643,257,2.912,258,1.643,259,3.745,261,3.52,263,2.338,266,5.013,269,2.084,271,1.477,272,3.172,287,1.438,288,2.062,295,0.718,299,1.366,300,1.59,301,2.623,315,1.254,320,3.027,342,1.699,343,1.643,344,1.699,345,1.699,346,1.699,347,1.699,348,1.699,349,1.643,350,1.699,351,1.699,352,1.699,353,1.643,354,1.699,355,1.643,356,1.699,357,1.699,358,1.699,359,1.699,360,3.027,363,1.327,364,2.338,365,2.338,366,1.643,367,2.964,368,1.643,369,1.643,370,1.407,371,1.643,372,2.615,373,1.643,374,1.407,375,2.338,376,1.449,377,1.643,378,1.407,379,1.643,380,1.449,381,1.407,382,1.643,383,1.449,384,1.643,385,1.449,386,1.643,387,1.643,388,1.643,389,1.449,390,1.643,391,1.449,392,1.889,393,1.643,394,1.449,395,1.643,396,1.449,397,1.124,398,1.643,399,1.643,457,2.235,488,4.428,618,0.959,675,2.502,873,3.327,874,6.265,875,5.382,876,5.51,877,6.265,878,3.339,879,5.51,880,3.783,881,5.382,882,3.783,883,3.783,884,3.783,885,3.783,886,3.783,887,3.327,888,3.783,889,3.783,890,3.783,891,5.382,892,4.734,893,3.783,894,3.327,895,3.327,896,3.327,897,5.382,898,3.783,899,3.783,900,5.382,901,3.027,902,3.783,903,4.734,904,3.783,905,3.783,906,3.783,907,6.825,908,3.783,909,5.51,910,3.783,911,5.51,912,3.783,913,3.783,914,3.783,915,3.327,916,3.783,917,3.783,918,3.783,919,3.783,920,3.783]],["title/classes/CardDetail.html",[0,0.225,177,2.426]],["body/classes/CardDetail.html",[0,0.394,2,0.738,3,0.085,4,0.074,5,0.074,8,0.738,32,0.289,38,1.679,39,0.515,42,0.218,44,0.538,45,0.01,46,0.633,47,0.506,50,0.86,51,0.201,55,0.163,56,1.516,75,1.634,97,1.958,133,0.005,134,0.007,135,0.005,138,2.613,140,3.796,141,3.923,142,4.855,143,2.921,144,3.056,145,2.921,146,2.921,147,2.279,148,2.698,149,2.921,150,2.921,151,2.921,152,2.921,153,2.921,155,4.119,156,1.664,157,1.567,158,2.921,159,1.772,160,2.613,161,0.738,162,2.921,163,1.614,164,2.378,165,2.755,166,2.921,167,3.483,168,2.921,169,2.921,170,2.921,171,2.921,172,2.921,173,4.438,174,2.921,175,1.664,176,2.613,177,3.748,178,2.029,179,5.073,180,2.755,181,2.755,182,2.755,183,4.604,184,4.343,185,3.318,186,2.755,187,2.755,188,2.755,189,3.139,190,3.796,191,2.279,192,2.613,193,2.755,194,2.755,195,2.755,196,2.106,197,2.921,198,2.921,199,2.921,200,2.921,201,3.6,202,2.921,203,2.921,921,4.213,922,4.213]],["title/components/CardDetailsComponent.html",[250,1.034,374,1.598]],["body/components/CardDetailsComponent.html",[0,0.249,3,0.095,4,0.084,5,0.084,32,0.326,33,1.071,34,0.286,35,0.685,39,0.314,42,0.389,44,0.605,45,0.01,46,0.769,47,0.569,51,0.236,52,0.764,55,0.095,95,1.408,107,1.447,112,1.983,133,0.005,134,0.007,135,0.005,161,1.501,176,4.846,177,3.547,250,1.696,251,1.815,252,2.641,253,1.992,254,2.057,255,2.057,257,3.277,258,2.057,259,3.843,263,2.729,271,1.724,272,3.489,273,2.127,287,1.266,288,1.815,295,0.899,299,1.711,300,1.992,315,1.571,363,1.662,364,2.729,365,2.729,366,2.057,367,3.261,368,2.057,369,2.057,370,1.762,371,2.057,372,1.815,373,2.057,374,2.792,375,2.729,376,1.815,377,2.057,378,1.762,379,2.057,380,1.815,381,1.762,382,2.057,383,1.815,384,2.057,385,1.815,386,2.057,387,2.057,388,2.057,389,1.815,390,2.057,391,1.815,392,2.204,393,2.057,394,1.815,395,2.057,396,1.815,397,1.408,398,2.057,399,2.057,923,6.871,924,5.787,925,4.166,926,5.525,927,6.283,928,4.737,929,4.737,930,2.368,931,4.737,932,4.737,933,4.166,934,4.737,935,4.737,936,4.737,937,4.737,938,4.737]],["title/injectables/CardEffects.html",[505,2.98,590,1.09]],["body/injectables/CardEffects.html",[0,0.265,3,0.102,4,0.089,5,0.089,8,0.885,17,2.05,28,1.536,32,0.285,34,0.305,35,0.715,39,0.335,42,0.339,44,0.646,45,0.01,46,0.551,47,0.607,49,0.885,50,0.748,51,0.258,52,0.815,55,0.102,87,1.248,88,1.248,89,1.154,94,2.963,112,2.019,133,0.006,134,0.007,135,0.006,159,1.543,161,1.397,178,4.007,269,2.001,273,2.268,295,0.959,296,1.723,297,1.995,299,1.824,300,2.124,315,1.675,335,3.871,505,4.544,590,1.662,594,2.525,618,1.952,744,2.984,753,2.194,775,2.852,776,4.297,785,4.065,786,3.404,788,2.852,795,4.855,796,4.775,843,2.984,844,2.732,930,2.525,939,4.442,940,5.82,941,4.547,942,5.051,943,6.553,944,4.855,945,6.553,946,6.553,947,6.553,948,6.553,949,5.051,950,4.041,951,3.304,952,2.525,953,2.852,954,2.852,955,4.041,956,4.041,957,4.041,958,4.041]],["title/interfaces/CardFeedState.html",[483,2.07,492,2.98]],["body/interfaces/CardFeedState.html",[3,0.095,4,0.083,5,0.083,7,2.187,11,3.725,24,1.978,28,1.103,32,0.339,34,0.284,35,0.682,45,0.01,51,0.226,55,0.151,75,1.482,133,0.005,134,0.007,135,0.005,144,2.613,156,1.858,157,1.75,159,2.287,161,1.095,163,2.396,189,1.858,211,3.607,231,2.189,333,5.501,336,4.617,397,2.088,462,2.017,464,4.524,483,2.266,484,2.919,492,4.872,552,3.078,553,3.078,554,2.78,555,2.78,618,1.193,751,2.78,807,4.338,959,3.765,960,6.255,961,7.795,962,7.193,963,5.004,964,7.193,965,7.487,966,4.338,967,6.255,968,6.255,969,6.255,970,6.255,971,6.255,972,5.004,973,6.255,974,5.672,975,6.255,976,6.255,977,6.255,978,5.501,979,5.501,980,4.138,981,4.705,982,4.705,983,4.705,984,4.705,985,3.765,986,4.138,987,3.765,988,4.138]],["title/components/CardListComponent.html",[250,1.034,376,1.646]],["body/components/CardListComponent.html",[0,0.267,3,0.102,4,0.09,5,0.09,32,0.317,34,0.307,36,1.122,39,0.484,42,0.378,45,0.01,46,0.718,51,0.199,55,0.102,75,1.217,95,1.512,107,1.554,133,0.006,134,0.007,135,0.006,147,3.561,148,3.393,156,2.009,157,1.892,161,1.434,192,4.084,211,3.17,239,3.948,250,1.756,251,1.949,252,2.768,253,2.139,254,2.21,255,2.21,258,2.21,259,3.871,263,2.859,295,0.966,363,1.785,364,2.859,365,2.859,366,2.21,367,3.352,368,2.21,369,2.21,370,1.892,371,2.21,372,1.949,373,2.21,374,1.892,375,2.859,376,2.957,377,2.21,378,1.892,379,2.21,380,1.949,381,1.892,382,2.21,383,1.949,384,2.21,385,1.949,386,2.21,387,2.21,388,2.21,389,1.949,390,2.21,391,1.949,392,2.31,393,2.21,394,1.949,395,2.21,396,1.949,397,1.512,398,2.21,399,2.21,989,5.353,990,6.176,991,4.475,992,6.584,993,5.84,994,6.584,995,5.088]],["title/injectables/CardOperationEffects.html",[507,2.98,590,1.09]],["body/injectables/CardOperationEffects.html",[0,0.2,3,0.077,4,0.067,5,0.067,8,0.949,12,2.211,17,2.039,28,1.852,32,0.315,34,0.231,35,0.591,39,0.253,42,0.326,44,0.488,45,0.01,46,0.416,47,0.459,49,1.317,50,0.803,51,0.249,52,0.616,55,0.077,57,1.909,62,2.882,87,0.943,88,0.943,89,0.872,94,2.565,112,1.857,133,0.004,134,0.006,135,0.004,159,1.923,161,1.2,178,3.724,204,3.033,216,1.775,224,2.931,226,3.033,227,3.407,228,1.166,231,2.057,246,2.066,269,1.655,273,1.715,295,0.725,296,1.302,297,1.508,298,2.156,299,1.379,300,1.605,315,1.266,335,4.442,397,1.135,462,1.748,507,3.758,547,2.066,554,2.256,555,2.256,556,2.829,590,1.374,594,1.909,618,2.111,753,1.658,775,3.059,776,4.276,785,4.252,786,4.105,788,3.556,796,4.901,803,5.484,843,2.256,844,2.066,941,4.05,950,3.055,996,6.028,997,3.358,998,6.298,999,3.819,1000,6.028,1001,6.028,1002,4.766,1003,5.418,1004,5.418,1005,6.854,1006,5.418,1007,6.854,1008,5.418,1009,5.418,1010,5.418,1011,5.418,1012,5.418,1013,5.484,1014,6.854,1015,3.819,1016,5.418,1017,5.418,1018,4.766,1019,5.418,1020,5.418,1021,3.819,1022,3.055,1023,3.055,1024,2.829]],["title/injectables/CardService.html",[590,1.09,941,2.538]],["body/injectables/CardService.html",[0,0.214,3,0.082,4,0.1,5,0.072,17,2.263,28,1.329,32,0.334,34,0.246,35,0.618,36,1.111,38,1.419,39,0.27,42,0.416,44,0.901,45,0.01,46,0.769,47,0.847,51,0.246,55,0.082,67,1.962,75,1.456,76,1.829,119,3.067,133,0.005,134,0.006,135,0.005,161,0.713,163,1.56,167,3.329,231,1.476,269,2.153,271,1.556,287,1.981,295,0.773,296,1.389,315,1.351,426,2.203,436,3.017,460,1.962,461,2.406,462,1.314,590,1.438,591,4.166,595,4.652,596,2.824,600,3.697,618,2.068,646,4.266,753,1.769,856,3.017,930,2.036,941,3.349,952,2.834,1025,3.582,1026,6.522,1027,6.522,1028,5.669,1029,7.052,1030,7.052,1031,5.669,1032,5.669,1033,5.669,1034,7.413,1035,4.073,1036,5.669,1037,4.073,1038,4.073,1039,5.669,1040,5.669,1041,4.073,1042,4.073,1043,6.522,1044,4.073,1045,4.073,1046,4.073,1047,4.073,1048,4.073,1049,4.073,1050,3.259,1051,3.259,1052,4.073,1053,4.073,1054,4.073,1055,5.669,1056,4.073,1057,4.073,1058,4.073,1059,4.073,1060,4.073,1061,4.073,1062,4.073,1063,4.073,1064,4.073,1065,4.073,1066,4.073,1067,4.073,1068,4.073,1069,4.073,1070,4.073,1071,4.073,1072,4.073,1073,4.073,1074,4.073,1075,4.073,1076,4.073,1077,4.073,1078,4.073,1079,4.073,1080,4.073,1081,4.073,1082,4.073,1083,4.073,1084,4.073,1085,4.073,1086,4.2,1087,4.073,1088,3.259,1089,4.073,1090,4.073,1091,4.073]],["title/interfaces/CardState.html",[483,2.07,490,2.98]],["body/interfaces/CardState.html",[3,0.125,4,0.109,5,0.109,32,0.347,34,0.374,35,0.812,45,0.01,51,0.187,55,0.15,75,1.476,133,0.007,134,0.008,135,0.007,144,2.968,161,1.45,189,2.447,231,2.205,336,4.782,462,1.998,483,2.984,484,3.843,490,5.535,751,4.398,930,3.097,963,6.777,1092,4.957,1093,4.957]],["title/modules/CardsModule.html",[400,1.866,1094,2.98]],["body/modules/CardsModule.html",[0,0.242,3,0.093,4,0.109,5,0.109,36,0.787,42,0.239,45,0.01,51,0.253,55,0.093,69,1.943,102,1.49,133,0.005,134,0.007,135,0.005,189,1.825,196,3.088,223,1.373,271,1.268,287,1.235,295,0.877,306,2.73,307,2.73,342,2.075,343,2.007,344,2.075,345,2.075,346,2.075,347,2.075,348,2.075,349,2.007,350,2.075,351,2.075,352,2.075,353,2.007,354,2.075,355,2.007,356,2.075,357,2.075,358,2.075,359,2.075,363,1.621,372,3.293,374,3.197,378,3.197,380,3.293,400,2.007,402,2.309,403,2.608,404,4.319,405,2.73,406,4.611,407,3.766,415,3.651,416,2.73,418,2.608,422,3.931,427,4.042,430,2.73,444,4.944,450,3.204,618,1.172,924,3.423,1094,6.138,1095,4.064,1096,4.064,1097,4.064,1098,4.064,1099,5.215,1100,4.62,1101,5.571,1102,4.62,1103,5.571,1104,4.62,1105,4.064,1106,4.064,1107,4.62,1108,4.62,1109,3.21,1110,3.697,1111,4.064,1112,4.62,1113,3.697,1114,3.423,1115,4.064,1116,4.064,1117,4.62,1118,4.62]],["title/classes/CheckAuthenticationStatus.html",[0,0.225,58,1.997]],["body/classes/CheckAuthenticationStatus.html",[0,0.398,1,2.781,2,0.574,3,0.066,4,0.058,5,0.113,6,1.702,7,1.523,8,1.473,9,3.868,10,1.773,11,2.966,12,2.728,13,3.315,14,3.845,15,1.578,16,3.411,17,2.009,18,3.411,19,3.166,20,2.623,21,1.936,22,1.85,23,3.189,24,2.427,25,3.123,26,3.411,27,2.999,28,1.353,29,2.865,30,3.259,31,2.865,32,0.355,33,1.291,34,0.198,35,0.529,36,0.984,37,1.503,38,1.431,39,0.217,41,2.336,42,0.17,45,0.01,49,0.574,50,0.485,51,0.146,52,0.528,53,2.593,54,1.471,55,0.158,56,0.748,57,1.638,58,2.966,59,1.523,60,1.378,61,3.259,62,3.31,63,3.858,64,3.452,65,2.781,66,1.85,67,2.336,68,2.966,69,2.427,70,3.281,71,2.781,72,0.974,73,1.846,74,1.423,75,1.259,76,1.471,77,1.471,78,1.523,79,1.578,80,2.336,81,2.865,82,2.336,83,2.865,84,2.865,85,2.336,86,2.865,87,1.426,88,1.426,89,1.318,90,2.738,91,1.936,92,1.936,93,1.702,94,1.335,95,0.974,96,1.85,97,2.683,98,2.865,99,2.683,100,2.519,101,1.85,102,1.057,103,1.85,104,1.85,105,1.638,106,3.452,107,1.001,108,1.936,109,1.773,110,1.85,111,2.865,112,1.198,113,1.936,114,1.936,115,3.77,116,1.85,117,1.936,118,2.865,119,1.773,120,1.936,121,2.738,122,1.773,123,1.936,124,1.85,125,1.936,126,1.85,127,1.936,128,2.738,129,2.738,130,1.936,131,1.936,132,1.773,133,0.004,134,0.006,135,0.004,1119,3.277]],["title/classes/CheckTokenResponse.html",[0,0.225,736,2.81]],["body/classes/CheckTokenResponse.html",[0,0.35,2,0.482,3,0.055,4,0.049,5,0.049,7,1.28,9,2.126,12,2.429,13,1.977,17,1.646,23,2.596,24,1.158,27,1.431,28,1.631,32,0.274,34,0.166,35,0.464,36,1.224,37,1.107,39,0.183,41,3.35,42,0.269,45,0.01,51,0.217,53,2.333,54,1.237,55,0.134,56,0.629,59,1.977,62,1.158,67,1.327,74,2.537,75,1.457,76,3.123,77,3.761,78,2.715,79,2.814,82,1.327,93,2.209,94,2.572,99,2.715,102,0.888,105,2.92,112,0.68,133,0.003,134,0.005,135,0.003,144,1.932,159,0.841,163,1.055,167,3.226,175,1.088,189,2.051,223,1.736,231,1.107,269,1.586,282,1.977,288,1.055,295,0.523,296,0.939,297,1.088,298,1.555,315,0.913,392,2.215,426,1.49,460,1.327,461,1.627,462,2.429,580,3.602,581,1.802,582,2.204,583,5.051,584,2.204,585,2.204,590,1.078,591,3.069,592,2.204,593,1.91,594,1.377,595,3.451,596,1.91,597,2.041,598,2.949,599,2.041,600,1.327,601,6.024,602,2.204,603,2.204,604,3.403,605,2.204,606,2.204,607,4.982,608,2.204,609,2.204,610,2.204,611,2.204,612,2.204,613,2.041,614,3.848,615,2.204,616,3.403,617,2.041,618,2.088,619,1.91,620,2.204,621,3.403,622,2.204,623,3.451,624,2.204,625,2.204,626,2.204,627,2.204,628,2.204,629,2.204,630,2.204,631,3.403,632,2.949,633,2.204,634,2.204,635,2.204,636,2.204,637,1.627,638,2.204,639,2.204,640,2.204,641,2.204,642,2.041,643,2.204,644,2.204,645,2.204,646,2.782,647,2.204,648,2.204,649,2.204,650,2.204,651,2.204,652,2.041,653,2.204,654,2.204,655,2.204,656,2.204,657,3.403,658,2.204,659,2.204,660,2.204,661,2.204,662,2.204,663,2.204,664,2.204,665,3.403,666,2.204,667,2.204,668,2.204,669,2.204,670,2.204,671,3.151,672,5.051,673,2.204,674,3.403,675,2.414,676,4.051,677,3.848,678,2.204,679,2.204,680,2.204,681,2.204,682,3.403,683,2.204,684,3.403,685,2.204,686,3.403,687,2.204,688,3.403,689,2.204,690,2.204,691,2.204,692,2.041,693,2.204,694,2.204,695,2.204,696,2.204,697,2.949,698,2.204,699,2.204,700,2.204,701,2.204,702,2.204,703,2.204,704,2.204,705,2.204,706,2.204,707,2.204,708,2.204,709,2.204,710,2.204,711,2.204,712,2.204,713,2.204,714,2.204,715,4.156,716,3.403,717,2.204,718,3.151,719,2.204,720,2.204,721,2.204,722,2.204,723,2.204,724,2.204,725,2.204,726,2.204,727,2.204,728,2.041,729,2.204,730,2.204,731,2.204,732,2.204,733,4.674,734,3.403,735,3.403,736,2.782,737,4.156,738,4.156,739,4.156,740,2.204,741,2.204,742,3.403,743,3.403,744,2.513,745,2.041,746,2.204,747,2.204,748,2.204,1120,2.754,1121,2.754,1122,2.754]],["title/injectables/ConfigEffects.html",[537,2.98,590,1.09]],["body/injectables/ConfigEffects.html",[0,0.229,3,0.088,4,0.077,5,0.077,8,0.764,17,2.141,28,1.702,32,0.294,34,0.264,35,0.648,39,0.29,42,0.35,44,0.558,45,0.01,46,0.476,47,0.524,49,0.764,50,0.646,51,0.253,52,0.704,55,0.088,87,1.078,88,1.078,89,0.996,94,3.095,112,1.936,133,0.005,134,0.007,135,0.005,159,1.332,167,3.036,178,3.864,215,2.548,231,1.547,269,2.065,273,1.959,295,0.828,296,1.488,297,1.723,299,1.576,300,1.834,310,3.658,311,3.491,314,3.837,315,1.447,335,3.512,397,1.297,486,3.356,536,3.837,537,4.122,590,1.507,594,2.181,618,1.841,744,2.577,753,1.895,775,3.356,776,4.488,785,4.504,786,3.772,788,2.463,795,4.404,796,4.504,843,2.577,844,2.36,847,2.706,940,5.41,944,4.404,956,3.491,957,3.491,958,3.491,1088,4.756,1123,3.837,1124,6.624,1125,4.749,1126,6.762,1127,4.363,1128,5.944,1129,5.944,1130,5.944,1131,5.944,1132,5.944,1133,4.363,1134,7.261,1135,5.944,1136,4.363,1137,5.228,1138,3.837,1139,4.363,1140,4.363,1141,3.837,1142,2.463,1143,2.463,1144,3.491,1145,3.232,1146,4.363,1147,4.363,1148,4.363,1149,2.36,1150,5.944,1151,5.944,1152,5.944,1153,5.944,1154,4.363]],["title/injectables/ConfigService.html",[590,1.09,1125,2.81]],["body/injectables/ConfigService.html",[0,0.304,3,0.117,4,0.102,5,0.102,17,2.185,32,0.311,34,0.35,35,0.78,39,0.385,42,0.402,44,0.741,45,0.01,46,0.633,47,0.697,51,0.259,52,0.935,55,0.117,75,1.322,112,1.433,133,0.007,134,0.008,135,0.007,269,2.368,271,1.962,287,1.55,295,1.101,296,1.978,299,2.095,300,2.438,309,4.297,315,1.923,426,3.137,460,2.794,461,3.427,590,1.813,591,5.003,600,2.794,618,1.471,753,2.519,856,4.297,1125,4.678,1155,5.101,1156,7.754,1157,8.095,1158,7.152,1159,5.8,1160,4.641,1161,4.641,1162,4.641,1163,5.8,1164,5.8,1165,5.8]],["title/interfaces/ConfigState.html",[483,2.07,491,2.98]],["body/interfaces/ConfigState.html",[3,0.119,4,0.104,5,0.104,32,0.363,34,0.356,35,0.788,45,0.01,51,0.178,55,0.157,75,1.444,133,0.007,134,0.008,135,0.007,144,3.162,161,1.033,167,3.508,189,2.853,231,2.175,330,5.464,336,4.716,462,2.33,483,2.84,484,3.658,486,4.597,491,5.417,751,3.484,930,2.947,1124,6.684,1145,4.369,1149,3.19,1166,4.718,1167,5.186,1168,5.897,1169,4.718]],["title/injectables/CustomRouterEffects.html",[524,2.98,590,1.09]],["body/injectables/CustomRouterEffects.html",[0,0.266,3,0.102,4,0.089,5,0.089,8,0.886,17,2.051,28,1.806,32,0.285,34,0.44,35,0.716,39,0.336,42,0.34,44,0.647,45,0.01,46,0.552,47,0.608,49,0.886,50,0.75,51,0.26,52,0.816,55,0.102,87,1.25,88,1.25,89,1.156,94,2.965,112,2.056,133,0.006,134,0.007,135,0.006,178,4.009,221,2.437,269,2.003,273,2.272,295,0.961,296,1.726,297,1.998,299,1.827,300,2.127,315,1.678,397,1.504,462,2.116,496,3.31,524,4.55,590,1.664,618,1.953,753,2.198,771,5.77,775,2.857,776,4.301,788,2.857,843,2.99,844,2.737,941,4.551,944,4.86,950,4.049,952,2.529,955,4.049,1022,4.049,1023,4.049,1170,6.403,1171,4.45,1172,7.28,1173,5.06,1174,6.561,1175,6.561,1176,7.28,1177,6.561,1178,6.561,1179,6.561,1180,6.561,1181,7.702,1182,6.561,1183,5.06,1184,5.06]],["title/classes/CustomRouterStateSerializer.html",[0,0.225,1185,2.98]],["body/classes/CustomRouterStateSerializer.html",[0,0.331,2,0.834,3,0.096,4,0.111,5,0.084,11,3.285,13,2.93,28,1.116,32,0.274,33,1.074,34,0.288,38,1.306,39,0.316,42,0.326,44,0.961,45,0.01,46,0.688,47,0.757,51,0.19,55,0.142,75,0.88,85,2.293,87,1.176,88,1.176,89,1.087,112,1.557,133,0.005,134,0.007,135,0.005,175,1.88,196,2.38,234,2.09,269,2.158,271,1.73,282,3.496,287,1.889,392,1.671,457,2.813,462,2.426,488,2.813,496,3.114,497,4.901,545,3.302,618,1.598,619,3.302,632,3.302,637,5.156,697,3.302,1149,2.575,1185,4.371,1186,3.527,1187,6.019,1188,6.304,1189,6.304,1190,5.544,1191,6.616,1192,4.761,1193,5.544,1194,6.261,1195,4.761,1196,5.544,1197,3.809,1198,6.019,1199,3.809,1200,3.809,1201,4.187,1202,5.654,1203,4.187,1204,4.187,1205,5.044,1206,3.809,1207,3.527,1208,4.187,1209,4.187,1210,4.187,1211,4.187,1212,5.544,1213,4.187,1214,4.187,1215,4.187,1216,4.187,1217,4.187,1218,4.187,1219,4.187,1220,4.187,1221,4.187]],["title/components/DetailComponent.html",[250,1.034,378,1.598]],["body/components/DetailComponent.html",[0,0.169,3,0.065,4,0.057,5,0.057,8,1.286,28,1.123,32,0.308,33,0.817,34,0.195,35,0.523,36,0.975,38,1.057,39,0.214,42,0.422,44,0.612,45,0.01,46,0.69,47,0.576,49,0.839,50,0.71,51,0.204,55,0.065,75,1.057,95,0.958,100,2.489,107,0.985,133,0.004,134,0.005,135,0.004,147,2.592,148,2.658,161,1.321,163,1.235,164,1.82,165,3.134,177,3.228,189,1.892,191,1.744,225,1.553,234,1.069,250,1.523,251,1.235,252,2.015,253,1.356,254,2.081,255,1.4,257,2.658,258,1.4,259,3.665,263,2.081,269,2.46,271,1.315,272,2.942,282,1.499,287,1.895,288,2.812,295,0.612,315,1.069,343,2.081,363,1.131,364,2.484,365,2.749,366,1.4,367,2.749,368,1.4,369,1.4,370,1.199,371,1.4,372,1.235,373,1.4,374,1.199,375,2.081,376,1.235,377,1.4,378,2.354,379,1.4,380,1.235,381,1.199,382,1.4,383,1.235,384,1.4,385,1.235,386,1.4,387,1.4,388,1.4,389,1.235,390,1.4,391,1.235,392,1.681,393,1.4,394,1.235,395,1.4,396,1.235,397,0.958,398,1.4,399,1.4,420,2.58,421,2.389,462,2.368,560,3.547,618,0.818,878,2.972,901,5.413,930,1.611,1050,3.834,1099,4.141,1109,3.289,1110,2.58,1111,2.836,1149,1.744,1222,2.836,1223,4.792,1224,5.718,1225,5.718,1226,4.792,1227,5.718,1228,6.331,1229,6.331,1230,6.331,1231,5.718,1232,3.224,1233,6.331,1234,4.575,1235,4.575,1236,5.718,1237,6.331,1238,4.792,1239,3.224,1240,3.224,1241,4.792,1242,5.718,1243,7.09,1244,3.224,1245,3.224,1246,3.224,1247,3.224,1248,3.224,1249,3.224,1250,5.718,1251,3.224,1252,4.792,1253,3.224,1254,3.224,1255,3.224,1256,3.224,1257,3.224,1258,3.224,1259,3.224,1260,3.224,1261,3.224,1262,3.224,1263,3.224,1264,3.224,1265,3.224,1266,3.224,1267,3.224,1268,3.224,1269,3.224,1270,4.792,1271,4.792,1272,3.224,1273,3.224,1274,3.224,1275,3.224,1276,3.224,1277,3.224,1278,3.224,1279,3.224,1280,2,1281,3.224,1282,3.224,1283,3.224,1284,4.792,1285,3.224,1286,2.836,1287,3.224,1288,3.224,1289,3.224,1290,3.224,1291,3.224,1292,3.224,1293,3.224,1294,3.224,1295,3.224,1296,4.792,1297,3.224,1298,3.224,1299,3.224,1300,4.792,1301,3.224,1302,3.224,1303,3.224,1304,3.224,1305,3.224,1306,3.224,1307,3.224,1308,3.224,1309,3.224,1310,2.58,1311,3.224,1312,3.224,1313,3.224,1314,3.224,1315,3.224]],["title/components/DetailsComponent.html",[250,1.034,380,1.646]],["body/components/DetailsComponent.html",[0,0.21,3,0.081,4,0.071,5,0.071,32,0.332,33,0.956,34,0.242,35,0.612,36,0.683,39,0.429,42,0.421,44,0.717,45,0.01,46,0.764,47,0.674,51,0.195,55,0.081,62,1.685,75,1.037,80,1.931,95,1.192,107,1.224,133,0.005,134,0.006,135,0.005,147,3.033,148,2.606,161,1.401,176,4.572,189,1.583,250,1.556,251,1.536,252,2.357,253,1.685,254,1.741,255,1.741,258,1.741,259,3.772,263,2.435,269,2.332,271,1.539,287,1.872,288,2.926,295,0.761,363,1.407,364,2.435,365,2.435,366,1.741,367,3.042,368,1.741,369,1.741,370,1.491,371,1.741,372,1.536,373,1.741,374,1.491,375,2.435,376,1.536,377,1.741,378,2.741,379,1.741,380,2.683,381,1.491,382,1.741,383,1.536,384,1.741,385,1.536,386,1.741,387,1.741,388,1.741,389,1.536,390,1.741,391,1.536,392,1.968,393,1.741,394,1.536,395,1.741,396,1.536,397,1.192,398,1.741,399,1.741,560,2.487,618,1.017,675,1.863,775,2.263,842,3.526,876,5.687,878,3.478,879,5.687,887,3.526,892,4.932,901,4.486,926,4.932,930,2.004,1149,2.169,1286,3.526,1316,3.526,1317,5.687,1318,6.467,1319,6.16,1320,5.607,1321,5.607,1322,7.003,1323,5.607,1324,4.009,1325,4.009,1326,5.607,1327,7.003,1328,4.009,1329,4.009,1330,5.607,1331,4.009,1332,4.009,1333,6.467,1334,5.607,1335,4.009,1336,4.009,1337,4.009,1338,4.009,1339,5.607,1340,4.009,1341,4.009,1342,4.009,1343,4.009,1344,5.607,1345,3.526,1346,5.607,1347,4.009,1348,4.009,1349,4.009,1350,4.009,1351,4.009,1352,5.607,1353,4.009,1354,4.009,1355,5.607]],["title/components/FeedComponent.html",[250,1.034,381,1.598]],["body/components/FeedComponent.html",[0,0.231,3,0.088,4,0.106,5,0.106,17,2.146,32,0.317,33,1.018,34,0.266,35,0.652,36,0.749,39,0.292,42,0.395,44,0.562,45,0.01,46,0.74,47,0.528,51,0.243,52,0.709,55,0.088,95,1.307,102,1.418,107,1.343,112,1.941,133,0.005,134,0.007,135,0.005,156,1.736,157,1.635,161,1.047,185,2.198,211,1.91,222,2.198,223,1.307,239,3.672,250,1.634,251,1.684,252,2.513,253,1.849,254,1.91,255,1.91,257,3.155,258,1.91,259,3.813,261,3.909,263,2.595,271,1.64,272,3.386,273,1.974,287,1.597,288,2.289,295,0.835,296,1.5,297,1.736,299,1.588,300,1.849,315,1.458,342,1.974,343,1.91,344,1.974,345,1.974,346,1.974,347,1.974,348,1.974,349,1.91,350,1.974,351,1.974,352,1.974,353,1.91,354,1.974,355,1.91,356,1.974,357,1.974,358,1.974,359,1.974,363,1.543,364,2.595,365,2.595,366,1.91,367,3.164,368,1.91,369,1.91,370,1.635,371,1.91,372,1.684,373,1.91,374,1.635,375,2.595,376,1.684,377,1.91,378,1.635,379,1.91,380,1.684,381,2.709,382,1.91,383,1.684,384,1.91,385,1.684,386,1.91,387,1.91,388,1.91,389,1.684,390,1.91,391,1.684,392,2.097,393,1.91,394,1.684,395,1.91,396,1.684,397,1.307,398,1.91,399,1.91,594,2.198,966,4.144,993,5.432,1317,5.971,1319,6.406,1356,3.867,1357,6.789,1358,5.976,1359,5.976,1360,4.397,1361,4.397,1362,4.397,1363,4.397,1364,3.518,1365,4.397,1366,4.397,1367,4.397,1368,3.518,1369,4.397,1370,4.397]],["title/injectables/FeedFiltersEffects.html",[533,2.98,590,1.09]],["body/injectables/FeedFiltersEffects.html",[0,0.276,3,0.106,4,0.093,5,0.093,12,2.169,17,2.089,28,1.577,32,0.292,34,0.318,35,0.733,39,0.349,42,0.348,44,0.672,45,0.01,46,0.574,47,0.632,49,1.299,50,0.779,51,0.259,52,0.848,55,0.106,57,2.628,62,2.827,87,1.299,88,1.299,89,1.201,94,3.02,112,2.041,133,0.006,134,0.008,135,0.006,159,1.606,161,1.178,178,4.045,269,2.054,273,2.361,295,0.999,296,1.793,297,2.077,298,2.969,299,1.899,300,2.211,315,1.744,533,4.664,555,3.107,561,3.262,564,3.896,590,1.705,618,1.705,753,2.284,773,5.915,775,2.969,776,4.38,785,4.172,786,3.494,803,5.381,843,3.107,844,2.845,1000,5.915,1001,5.915,1002,5.915,1024,3.896,1371,6.521,1372,4.625,1373,7.414,1374,5.111,1375,5.259,1376,6.725,1377,5.259]],["title/modules/FeedModule.html",[400,1.866,1378,3.183]],["body/modules/FeedModule.html",[0,0.235,3,0.09,4,0.107,5,0.107,36,0.765,45,0.01,51,0.265,55,0.09,69,1.887,102,1.448,133,0.005,134,0.007,135,0.005,223,1.334,295,0.852,306,2.651,307,2.651,342,2.015,343,1.949,344,2.015,345,2.015,346,2.015,347,2.015,348,2.015,349,1.949,350,2.015,351,2.015,352,2.015,353,1.949,354,2.015,355,1.949,356,2.015,357,2.015,358,2.015,359,2.015,363,1.575,376,3.029,381,3.182,383,3.029,389,3.029,391,3.029,394,3.029,396,3.029,400,1.949,402,2.243,403,2.534,404,4.256,405,3.58,406,2.784,407,3.711,415,3.58,416,2.651,418,3.421,422,3.421,427,3.963,430,2.651,431,5.329,432,5.329,433,2.935,435,3.947,436,3.325,437,3.591,439,3.325,444,4.848,464,2.534,990,3.591,1094,5.482,1105,6.461,1378,6.599,1379,3.947,1380,3.947,1381,3.947,1382,3.947,1383,5.482,1384,4.488,1385,4.488,1386,3.947,1387,4.488,1388,3.591,1389,4.488,1390,4.488,1391,3.591,1392,4.488,1393,4.488,1394,4.488,1395,3.591,1396,3.591,1397,6.06,1398,3.591,1399,3.591,1400,6.06,1401,3.947,1402,3.947,1403,4.488,1404,3.947,1405,4.848,1406,3.947,1407,4.488,1408,3.947,1409,3.947,1410,3.947,1411,4.488,1412,4.488]],["title/modules/FeedRoutingModule.html",[400,1.866,1383,2.98]],["body/modules/FeedRoutingModule.html",[0,0.281,3,0.108,4,0.12,5,0.12,36,0.912,45,0.01,51,0.251,55,0.108,102,1.725,133,0.006,134,0.008,135,0.006,223,1.59,250,1.892,295,1.016,342,2.402,343,2.323,344,2.402,345,2.402,346,2.402,347,2.402,348,2.402,349,2.323,350,2.402,351,2.402,352,2.402,353,2.323,354,2.402,355,2.323,356,2.402,357,2.402,358,2.402,359,2.402,374,2.779,378,2.528,381,2.528,402,2.673,407,2.893,418,3.019,422,3.838,453,4.279,455,5.439,456,4.888,457,3.16,458,5.036,459,4.279,462,1.725,463,6.639,467,4.279,470,4.704,579,4.704,924,3.962,966,4.714,1106,4.704,1383,4.714,1386,4.704,1413,5.348,1414,5.348,1415,5.348,1416,7.473,1417,5.348,1418,5.348,1419,5.348,1420,5.348]],["title/classes/Filter.html",[0,0.225,397,1.277]],["body/classes/Filter.html",[0,0.19,2,0.635,3,0.073,4,0.064,5,0.064,7,1.686,11,3.112,24,2.573,28,0.85,30,3.78,32,0.321,34,0.219,35,0.57,36,1.259,38,0.671,39,0.444,42,0.394,44,0.856,45,0.01,46,0.73,47,0.804,51,0.11,55,0.073,60,3.498,69,2.196,85,2.515,89,1.813,112,1.29,133,0.004,134,0.006,135,0.004,144,2.639,156,1.432,157,1.349,161,1.514,189,2.417,196,3.059,211,3.448,250,1.257,271,1.433,280,4.179,287,1.975,288,1.389,355,2.268,397,2.634,464,2.948,547,2.825,560,4.153,607,4.921,618,1.874,623,3.085,642,3.869,675,2.845,807,4.643,974,4.643,1137,4.593,1149,2.825,1200,4.179,1421,6.855,1422,3.19,1423,5.223,1424,5.223,1425,5.223,1426,5.223,1427,5.223,1428,7.795,1429,5.223,1430,5.223,1431,5.223,1432,5.223,1433,5.223,1434,5.223,1435,5.223,1436,5.223,1437,5.223,1438,5.223,1439,5.223,1440,5.223,1441,6.696,1442,6.12,1443,3.627,1444,3.627,1445,3.627,1446,3.627,1447,3.627,1448,5.223,1449,3.627,1450,5.223,1451,6.696,1452,3.627,1453,6.696,1454,5.223,1455,5.223,1456,5.223,1457,5.223,1458,3.627,1459,5.223,1460,5.223,1461,3.627,1462,3.627,1463,3.627,1464,3.627,1465,3.627,1466,3.627,1467,3.627,1468,3.627,1469,3.627,1470,3.627,1471,3.627,1472,3.627,1473,5.223,1474,3.627]],["title/injectables/FilterService.html",[590,1.09,1374,2.81]],["body/injectables/FilterService.html",[0,0.235,3,0.09,4,0.079,5,0.079,8,1.2,28,1.852,34,0.27,35,0.659,39,0.455,42,0.418,45,0.01,49,0.784,50,0.663,51,0.207,55,0.122,56,1.022,60,2.88,133,0.008,134,0.007,135,0.005,155,2.775,156,1.767,157,1.664,159,2.34,161,1.059,189,2.705,211,1.943,260,3.579,269,2.643,271,1.659,287,1.961,295,0.849,397,2.181,462,2.547,552,2.926,553,2.926,554,2.643,561,4.249,590,1.533,618,2.047,675,3.41,753,1.943,878,3.751,974,4.193,1374,3.955,1475,3.579,1476,6.849,1477,7.336,1478,7.336,1479,7.336,1480,6.849,1481,6.047,1482,4.474,1483,4.474,1484,4.474,1485,4.474,1486,4.474,1487,4.474,1488,3.934,1489,6.047,1490,4.474,1491,5.48,1492,4.474,1493,4.474,1494,5.48,1495,4.474,1496,5.48,1497,4.474,1498,4.474,1499,7.336,1500,4.474,1501,4.474,1502,4.474,1503,4.474,1504,4.474,1505,4.474,1506,4.474,1507,4.474,1508,4.474,1509,4.474,1510,4.474,1511,4.474,1512,4.474,1513,4.474,1514,3.934,1515,3.934,1516,3.934,1517,3.934]],["title/components/FiltersComponent.html",[250,1.034,383,1.646]],["body/components/FiltersComponent.html",[0,0.277,3,0.106,4,0.093,5,0.093,32,0.229,33,1.149,34,0.319,39,0.493,42,0.349,45,0.01,46,0.735,51,0.159,55,0.106,95,1.569,107,1.612,133,0.006,134,0.008,135,0.006,161,1.181,250,1.787,251,2.022,252,2.834,253,2.219,254,2.292,255,2.292,257,3.452,258,2.292,259,3.885,263,2.928,271,1.85,272,3.637,287,1.411,288,2.022,295,1.002,363,1.852,364,2.928,365,2.928,366,2.292,367,3.399,368,2.292,369,2.292,370,1.963,371,2.292,372,2.022,373,2.292,374,1.963,375,2.928,376,2.022,377,2.292,378,1.963,379,2.292,380,2.022,381,1.963,382,2.292,383,2.998,384,2.292,385,2.022,386,2.292,387,2.292,388,2.292,389,2.022,390,2.292,391,2.022,392,2.365,393,2.292,394,2.022,395,2.292,396,2.022,397,1.569,398,2.292,399,2.292,974,4.675,989,5.151,1518,4.642,1519,6.741,1520,5.278,1521,5.278]],["title/classes/GuidService.html",[0,0.225,595,2.538]],["body/classes/GuidService.html",[0,0.31,2,1.035,3,0.119,4,0.104,5,0.104,32,0.257,34,0.357,35,0.789,38,1.446,39,0.519,42,0.422,45,0.01,51,0.219,53,3.935,54,2.654,55,0.119,75,1.092,133,0.007,134,0.008,135,0.007,260,4.728,269,2.388,271,1.985,287,1.933,295,1.122,595,4.274,618,1.834,1138,6.363,1488,5.197,1522,5.197,1523,8.148,1524,7.819,1525,7.235,1526,5.909,1527,5.909,1528,7.235,1529,5.909,1530,5.909,1531,5.909]],["title/classes/HandleUnexpectedError.html",[0,0.225,228,1.312]],["body/classes/HandleUnexpectedError.html",[0,0.398,2,0.851,3,0.098,4,0.086,5,0.086,8,1.416,32,0.377,33,1.343,34,0.294,35,0.697,36,1.089,37,2.146,38,1.495,39,0.322,40,1.862,42,0.37,44,0.621,45,0.01,46,0.53,47,0.584,49,0.851,50,0.72,51,0.193,52,0.784,55,0.163,56,1.11,72,1.444,73,2.194,75,0.898,87,1.578,88,1.578,89,1.459,133,0.006,134,0.007,135,0.006,161,1.507,163,1.862,207,2.819,215,2.505,220,1.807,228,2.316,229,1.807,230,1.807,231,2.051,232,2.043,233,2.043,234,1.611,235,1.755,236,1.862,930,2.429,951,3.178,952,3.568,953,4.03,954,4.03,1532,3.014,1533,6.389,1534,4.859,1535,4.733,1536,3.6,1537,3.6,1538,3.6,1539,3.37]],["title/classes/HandleUnexpectedError-1.html",[0,0.188,228,1.093,1540,2.651]],["body/classes/HandleUnexpectedError-1.html",[0,0.401,2,0.869,3,0.1,4,0.088,5,0.088,8,1.425,32,0.378,33,1.352,34,0.3,35,0.707,36,1.104,37,2.117,38,1.504,39,0.329,40,1.901,42,0.374,44,0.634,45,0.01,46,0.541,47,0.596,49,0.869,50,0.735,51,0.15,52,0.8,55,0.164,56,1.133,72,1.475,73,2.087,87,1.6,88,1.6,89,1.479,133,0.006,134,0.007,135,0.006,207,2.848,215,2.531,220,1.845,228,2.335,229,1.845,230,1.845,231,2.064,232,2.086,233,2.086,234,1.646,235,1.792,236,1.901,310,3.901,486,4.743,846,3.246,847,3.078,1142,4.071,1143,4.071,1541,3.078,1542,6.478,1543,4.962,1544,4.799,1545,3.441,1546,3.676,1547,3.676,1548,3.676]],["title/classes/HandleUnexpectedError-2.html",[0,0.188,228,1.093,478,3.148]],["body/classes/HandleUnexpectedError-2.html",[0,0.422,2,0.718,3,0.083,4,0.072,5,0.072,8,1.449,12,1.323,32,0.375,33,1.392,34,0.248,35,0.621,36,0.971,37,2.094,38,1.529,39,0.434,40,1.572,42,0.339,44,0.524,45,0.01,46,0.447,47,0.493,49,0.718,50,0.608,51,0.172,52,0.662,55,0.166,56,0.937,72,1.219,73,2.151,87,1.836,88,1.836,89,1.698,133,0.005,134,0.006,135,0.005,156,1.62,157,1.526,161,0.718,175,1.62,204,3.153,205,3.675,206,2.131,207,2.585,210,2.424,211,2.475,212,2.219,213,3.272,214,4.542,215,2.482,216,3.043,217,2.848,218,2.316,219,3.272,220,2.119,221,3.153,222,2.05,223,1.219,224,2.219,225,1.976,226,3.153,227,2.219,228,2.16,229,1.526,230,1.526,231,2.054,232,1.725,233,1.725,234,1.36,235,1.482,236,1.572,237,2.424,238,2.424,239,2.219,240,2.424,241,2.424,242,2.424,243,2.424,244,2.424,245,3.366,246,2.219,247,2.424,248,2.424,249,2.424,1549,5.698,1550,4.102]],["title/classes/HandleUnexpectedError-3.html",[0,0.188,228,1.093,1551,3.148]],["body/classes/HandleUnexpectedError-3.html",[0,0.403,2,0.878,3,0.101,4,0.089,5,0.089,8,1.429,32,0.378,33,1.356,34,0.303,35,0.711,36,1.112,37,2.123,38,1.508,39,0.433,40,1.921,42,0.375,44,0.641,45,0.01,46,0.547,47,0.602,49,0.878,50,0.743,51,0.197,52,0.809,55,0.164,56,1.145,72,1.491,73,2.098,133,0.006,134,0.007,135,0.006,207,2.863,215,2.544,220,1.865,228,2.344,229,1.865,230,1.865,231,2.071,234,1.663,235,1.811,236,1.921,487,4.975,1552,3.111,1553,6.523,1554,5.015,1555,4.832,1556,3.032,1557,2.831,1558,3.28,1559,4.092,1560,4.092,1561,4.092,1562,3.715,1563,3.715,1564,3.715,1565,3.478]],["title/injectables/HandlebarsService.html",[590,1.09,1099,2.81]],["body/injectables/HandlebarsService.html",[0,0.138,3,0.053,4,0.046,5,0.046,17,1.421,24,3.183,28,1.182,32,0.248,34,0.427,35,0.447,36,0.859,39,0.174,42,0.423,44,0.644,45,0.01,46,0.714,47,0.606,49,0.718,50,1.013,51,0.229,53,1.842,54,1.18,55,0.053,75,1.4,133,0.008,134,0.005,135,0.003,159,1.887,160,1.631,161,1.146,164,1.484,167,1.842,184,1.719,253,1.105,269,2.704,271,1.125,274,3.497,275,4.22,287,2.15,288,3.023,295,0.499,296,0.896,297,1.038,306,1.553,307,1.553,315,0.872,392,0.922,462,1.993,590,1.04,618,2.161,675,1.222,744,2.423,753,1.142,814,1.947,930,1.314,1099,2.682,1109,2.959,1110,2.103,1149,3.541,1207,5.777,1234,4.035,1235,2.103,1280,2.544,1540,3.038,1551,2.312,1566,2.312,1567,4.101,1568,4.101,1569,4.101,1570,5.697,1571,5.697,1572,5.697,1573,5.697,1574,5.697,1575,5.043,1576,5.697,1577,5.697,1578,5.697,1579,5.697,1580,5.697,1581,5.697,1582,5.697,1583,5.043,1584,2.628,1585,3.128,1586,4.101,1587,4.101,1588,2.628,1589,2.628,1590,2.628,1591,2.628,1592,2.628,1593,2.628,1594,2.628,1595,2.628,1596,2.628,1597,2.628,1598,2.628,1599,2.628,1600,2.628,1601,2.628,1602,2.628,1603,2.628,1604,2.628,1605,2.628,1606,2.103,1607,2.628,1608,2.628,1609,2.628,1610,2.628,1611,2.628,1612,2.628,1613,2.628,1614,2.628,1615,2.628,1616,2.628,1617,2.628,1618,2.628,1619,2.628,1620,2.628,1621,2.628,1622,2.628,1623,2.628,1624,2.628,1625,2.628,1626,2.628,1627,1.947,1628,2.628,1629,2.103,1630,2.628,1631,2.103,1632,2.628,1633,2.628,1634,2.628,1635,2.628,1636,2.628,1637,2.628,1638,2.628,1639,2.628,1640,7.268,1641,5.043,1642,7.268,1643,7.432,1644,2.312,1645,2.628,1646,2.628,1647,2.628,1648,2.628,1649,2.628,1650,2.628,1651,2.628,1652,6.546,1653,2.628,1654,6.178,1655,5.433,1656,2.628,1657,2.628,1658,2.628,1659,5.697,1660,2.628,1661,4.101,1662,2.628,1663,2.628,1664,2.628,1665,2.628,1666,2.628,1667,2.628,1668,2.628,1669,2.628,1670,2.628,1671,2.628,1672,2.628,1673,2.628,1674,2.628,1675,2.628,1676,2.628,1677,2.628,1678,2.628,1679,2.628,1680,2.628,1681,2.628,1682,2.628,1683,2.628,1684,2.628,1685,2.628,1686,4.101,1687,5.043,1688,4.101,1689,5.043,1690,2.628]],["title/classes/I18n.html",[0,0.225,142,2.538]],["body/classes/I18n.html",[0,0.338,2,1.127,3,0.129,4,0.114,5,0.114,32,0.28,38,1.408,39,0.505,42,0.333,44,1.072,45,0.01,46,0.702,47,0.773,51,0.194,55,0.129,75,1.5,133,0.007,134,0.009,135,0.007,142,4.499,159,2.56,160,3.992,1631,6.094,1691,5.66,1692,6.436,1693,6.436]],["title/components/IconComponent.html",[250,1.034,385,1.646]],["body/components/IconComponent.html",[0,0.201,3,0.077,4,0.096,5,0.096,32,0.359,33,0.926,34,0.232,35,0.593,36,0.653,39,0.254,42,0.427,44,0.49,45,0.01,46,0.688,47,0.461,49,0.672,51,0.191,55,0.077,75,1.27,95,1.14,102,1.237,107,1.171,133,0.004,134,0.006,135,0.004,144,2.696,147,2.94,148,3.598,161,0.952,185,1.916,223,1.14,225,3.307,250,1.519,251,1.469,252,2.285,253,1.612,254,1.665,255,1.665,257,2.934,258,1.665,259,3.752,261,3.554,263,1.665,271,1.491,272,3.192,287,1.025,288,1.469,295,0.728,342,1.722,343,1.665,344,1.722,345,1.722,346,1.722,347,1.722,348,1.722,349,1.665,350,1.722,351,1.722,352,1.722,353,1.665,354,1.722,355,1.665,356,1.722,357,1.722,358,1.722,359,1.722,363,1.345,364,2.36,365,2.36,366,1.665,367,2.982,368,1.665,369,1.665,370,1.426,371,1.665,372,1.469,373,1.665,374,1.426,375,2.36,376,1.469,377,1.665,378,1.426,379,1.665,380,1.469,381,1.426,382,1.665,383,1.469,384,1.665,385,2.631,386,1.665,387,1.665,388,1.665,389,1.469,390,1.665,391,1.469,392,1.907,393,1.665,394,1.469,395,1.665,396,1.469,397,1.14,398,1.665,399,1.665,430,2.265,909,4.779,911,6.039,1207,4.026,1310,5.494,1644,3.372,1655,4.779,1694,3.372,1695,6.867,1696,6.312,1697,3.834,1698,5.434,1699,5.434,1700,6.312,1701,6.312,1702,3.834,1703,6.867,1704,5.434,1705,3.834,1706,3.834,1707,3.834,1708,3.834,1709,3.834,1710,3.834,1711,3.834,1712,3.834,1713,3.834,1714,3.834,1715,3.834,1716,3.834,1717,3.834,1718,3.834,1719,3.834,1720,3.834,1721,3.834,1722,3.834,1723,3.834,1724,3.834,1725,3.834,1726,3.834,1727,3.834,1728,3.834,1729,6.312,1730,7.249,1731,6.312,1732,5.434,1733,6.312,1734,5.434,1735,3.834,1736,6.312,1737,3.834,1738,3.834,1739,3.834,1740,3.834,1741,3.834,1742,3.834,1743,3.834,1744,3.372,1745,5.434]],["title/classes/InitFilters.html",[0,0.225,561,2.665]],["body/classes/InitFilters.html",[0,0.365,2,0.972,3,0.112,4,0.098,5,0.098,8,1.396,32,0.38,33,1.295,34,0.335,35,0.759,36,1.186,37,1.979,38,1.473,39,0.368,40,2.126,42,0.394,44,0.709,45,0.01,46,0.605,47,0.667,49,0.972,50,0.822,51,0.23,52,0.895,55,0.16,56,1.267,60,2.925,73,2.013,133,0.006,134,0.008,135,0.006,144,2.063,159,1.694,207,3.002,278,4.111,397,2.259,464,3.928,547,4.112,548,3.848,551,4.88,552,3.629,553,3.629,554,4.11,555,3.278,556,4.111,557,3.848,558,4.44,559,4.88,560,3.442,561,4.715,562,6.119,563,4.88,564,4.111,1746,6.958,1747,5.549]],["title/classes/Input.html",[0,0.225,148,1.997]],["body/classes/Input.html",[0,0.39,2,0.716,3,0.082,4,0.072,5,0.072,8,0.716,32,0.307,38,1.676,39,0.51,42,0.212,44,0.523,45,0.01,46,0.771,47,0.491,50,1.047,51,0.197,55,0.162,56,1.493,75,1.637,97,1.901,133,0.005,134,0.006,135,0.005,138,2.537,139,3.597,140,3.719,141,4.387,142,4.824,143,2.837,144,3.106,145,2.837,146,2.837,147,2.213,148,3.038,149,2.837,150,2.837,151,2.837,152,2.837,153,2.837,155,4.055,156,1.615,157,1.521,158,2.837,159,1.737,160,2.537,161,0.716,162,2.837,163,1.567,164,2.309,165,2.675,166,2.837,167,3.713,168,2.837,169,2.837,170,2.837,171,2.837,172,2.837,173,3.527,174,2.837,175,1.615,176,2.537,177,3.21,178,1.97,179,4.276,180,2.675,181,2.675,182,2.675,183,2.837,184,2.675,185,2.044,186,2.675,187,2.675,188,2.675,189,3.113,190,4.621,191,2.213,192,2.537,193,2.675,194,2.675,195,2.675,196,2.044,197,4.533,198,4.533,199,4.533,200,4.533,201,4.383,202,4.533,203,4.533,1748,4.09]],["title/injectables/LightCardEffects.html",[530,2.98,590,1.09]],["body/injectables/LightCardEffects.html",[0,0.262,3,0.1,4,0.088,5,0.088,8,0.874,17,2.037,28,1.524,32,0.283,34,0.301,35,0.709,39,0.331,42,0.337,44,0.638,45,0.01,46,0.544,47,0.599,49,0.874,50,0.739,51,0.257,52,0.804,55,0.1,87,1.232,88,1.232,89,1.139,112,2.012,133,0.006,134,0.007,135,0.006,159,2.208,161,1.138,178,3.995,212,2.698,216,2.319,217,3.614,269,1.985,273,2.24,295,0.947,296,1.701,297,1.97,299,1.802,300,2.097,315,1.654,336,3.67,530,4.508,590,1.648,594,2.493,618,1.942,744,2.947,753,2.167,775,2.816,776,4.272,785,4.032,786,3.98,788,2.816,797,5.201,814,3.696,843,2.947,844,2.698,940,5.785,956,3.991,957,3.991,958,3.991,1022,3.991,1023,3.991,1109,3.98,1749,6.359,1750,4.387,1751,7.23,1752,4.989,1753,6.5,1754,6.5,1755,6.5,1756,6.5,1757,6.5,1758,5.717,1759,6.5,1760,6.5,1761,6.5,1762,5.717,1763,4.989,1764,3.991,1765,4.989]],["title/classes/LoadCard.html",[0,0.225,952,2.148]],["body/classes/LoadCard.html",[0,0.398,2,0.851,3,0.098,4,0.086,5,0.086,8,1.416,32,0.377,33,1.343,34,0.294,35,0.697,36,1.089,37,2.146,38,1.495,39,0.322,40,1.862,42,0.37,44,0.621,45,0.01,46,0.53,47,0.584,49,0.851,50,0.72,51,0.193,52,0.784,55,0.163,56,1.11,72,1.444,73,2.194,75,0.898,87,1.578,88,1.578,89,1.459,133,0.006,134,0.007,135,0.006,161,1.507,163,1.862,207,2.819,215,2.505,220,1.807,228,2.18,229,1.807,230,1.807,231,2.051,232,2.043,233,2.043,234,1.611,235,1.755,236,1.862,930,2.429,951,3.178,952,3.79,953,4.03,954,4.03,1532,3.014,1535,3.6,1536,4.733,1537,3.6,1538,3.6,1539,3.37,1766,6.389,1767,4.859]],["title/classes/LoadCardFailure.html",[0,0.225,953,2.426]],["body/classes/LoadCardFailure.html",[0,0.398,2,0.851,3,0.098,4,0.086,5,0.086,8,1.416,32,0.377,33,1.343,34,0.294,35,0.697,36,1.089,37,2.146,38,1.495,39,0.322,40,1.862,42,0.37,44,0.621,45,0.01,46,0.53,47,0.584,49,0.851,50,0.72,51,0.193,52,0.784,55,0.163,56,1.11,72,1.444,73,2.194,75,0.898,87,1.578,88,1.578,89,1.459,133,0.006,134,0.007,135,0.006,161,1.507,163,1.862,207,2.819,215,2.505,220,1.807,228,2.18,229,1.807,230,1.807,231,2.051,232,2.043,233,2.043,234,1.611,235,1.755,236,1.862,930,2.429,951,3.178,952,3.568,953,4.281,954,4.03,1532,3.014,1535,3.6,1536,3.6,1537,4.733,1538,3.6,1539,3.37,1768,6.389,1769,4.859]],["title/classes/LoadCardSuccess.html",[0,0.225,954,2.426]],["body/classes/LoadCardSuccess.html",[0,0.398,2,0.851,3,0.098,4,0.086,5,0.086,8,1.416,32,0.377,33,1.343,34,0.294,35,0.697,36,1.089,37,2.146,38,1.495,39,0.322,40,1.862,42,0.37,44,0.621,45,0.01,46,0.53,47,0.584,49,0.851,50,0.72,51,0.193,52,0.784,55,0.163,56,1.11,72,1.444,73,2.194,75,0.898,87,1.578,88,1.578,89,1.459,133,0.006,134,0.007,135,0.006,161,1.507,163,1.862,207,2.819,215,2.505,220,1.807,228,2.18,229,1.807,230,1.807,231,2.051,232,2.043,233,2.043,234,1.611,235,1.755,236,1.862,930,2.429,951,3.178,952,3.568,953,4.03,954,4.281,1532,3.014,1535,3.6,1536,3.6,1537,3.6,1538,4.733,1539,3.37,1770,6.389,1771,4.859]],["title/classes/LoadConfig.html",[0,0.225,310,2.324]],["body/classes/LoadConfig.html",[0,0.408,2,0.907,3,0.104,4,0.091,5,0.091,8,1.441,32,0.364,33,1.37,34,0.313,35,0.727,37,1.917,38,1.521,42,0.268,45,0.01,49,0.907,50,0.768,51,0.157,52,0.836,55,0.166,56,1.183,72,1.54,73,2.131,87,1.645,88,1.645,89,1.521,133,0.006,134,0.008,135,0.006,215,2.583,220,1.927,228,2.248,229,1.927,230,1.927,231,2.093,232,2.178,233,2.178,234,1.718,235,1.871,236,1.985,310,4.204,486,4.786,846,3.389,847,3.214,1142,4.157,1143,4.157,1541,3.214,1544,3.838,1545,3.593,1546,4.935,1547,3.838,1548,3.838,1772,5.181]],["title/classes/LoadConfigFailure.html",[0,0.225,1142,2.426]],["body/classes/LoadConfigFailure.html",[0,0.401,2,0.869,3,0.1,4,0.088,5,0.088,8,1.425,32,0.378,33,1.352,34,0.3,35,0.707,36,1.104,37,2.117,38,1.504,39,0.329,40,1.901,42,0.374,44,0.634,45,0.01,46,0.541,47,0.596,49,0.869,50,0.735,51,0.15,52,0.8,55,0.164,56,1.133,72,1.475,73,2.087,87,1.6,88,1.6,89,1.479,133,0.006,134,0.007,135,0.006,207,2.848,215,2.531,220,1.845,228,2.202,229,1.845,230,1.845,231,2.064,232,2.086,233,2.086,234,1.646,235,1.792,236,1.901,310,3.901,486,4.743,846,3.246,847,3.078,1142,4.316,1143,4.071,1541,3.078,1544,3.676,1545,3.441,1546,3.676,1547,4.799,1548,3.676,1773,6.478,1774,4.962]],["title/classes/LoadConfigSuccess.html",[0,0.225,1143,2.426]],["body/classes/LoadConfigSuccess.html",[0,0.401,2,0.869,3,0.1,4,0.088,5,0.088,8,1.425,32,0.378,33,1.352,34,0.3,35,0.707,36,1.104,37,2.117,38,1.504,39,0.329,40,1.901,42,0.374,44,0.634,45,0.01,46,0.541,47,0.596,49,0.869,50,0.735,51,0.15,52,0.8,55,0.164,56,1.133,72,1.475,73,2.087,87,1.6,88,1.6,89,1.479,133,0.006,134,0.007,135,0.006,207,2.848,215,2.531,220,1.845,228,2.202,229,1.845,230,1.845,231,2.064,232,2.086,233,2.086,234,1.646,235,1.792,236,1.901,310,3.901,486,4.743,846,3.246,847,3.078,1142,4.071,1143,4.316,1541,3.078,1544,3.676,1545,3.441,1546,3.676,1547,3.676,1548,4.799,1775,6.478,1776,4.962]],["title/classes/LoadLightCards.html",[0,0.225,213,2.148]],["body/classes/LoadLightCards.html",[0,0.426,2,0.747,3,0.086,4,0.075,5,0.075,8,1.46,12,1.375,32,0.366,33,1.404,34,0.258,35,0.638,37,1.962,38,1.541,39,0.388,42,0.221,45,0.01,49,0.747,50,0.632,51,0.177,52,0.688,55,0.168,56,0.974,72,1.267,73,2.181,87,1.862,88,1.862,89,1.721,133,0.005,134,0.007,135,0.005,156,1.684,157,1.586,161,0.747,175,1.684,204,3.218,205,3.04,206,2.215,210,2.519,211,2.542,212,2.306,213,3.594,214,4.584,215,2.523,216,3.106,217,2.925,218,2.407,219,3.339,220,2.176,221,3.218,222,2.131,223,1.267,224,2.306,225,2.054,226,3.218,227,2.306,228,2.04,229,1.586,230,1.586,231,2.076,232,1.793,233,1.793,234,1.414,235,1.54,236,1.633,237,3.457,238,2.519,239,2.306,240,2.519,241,2.519,242,2.519,243,2.519,244,2.519,245,2.519,246,2.306,247,2.519,248,2.519,249,2.519,1777,4.264]],["title/classes/LoadLightCardsExtendedData.html",[0,0.225,217,2.148]],["body/classes/LoadLightCardsExtendedData.html",[0,0.425,2,0.741,3,0.085,4,0.075,5,0.075,8,1.458,12,1.365,32,0.365,33,1.402,34,0.256,35,0.635,37,1.957,38,1.539,39,0.476,42,0.302,45,0.01,49,0.741,50,0.627,51,0.176,52,0.682,55,0.167,56,0.966,72,1.258,73,2.175,87,1.857,88,1.857,89,1.717,133,0.005,134,0.007,135,0.005,156,1.671,157,1.574,161,0.741,175,1.671,204,3.205,205,3.457,206,2.198,210,2.5,211,2.528,212,2.289,213,3.326,214,4.576,215,2.515,216,3.093,217,3.326,218,2.389,219,3.326,220,2.165,221,3.205,222,2.115,223,1.258,224,2.289,225,2.038,226,3.205,227,2.289,228,2.032,229,1.574,230,1.574,231,2.071,232,1.779,233,1.779,234,1.403,235,1.528,236,1.621,237,2.5,238,2.5,239,2.289,240,3.439,241,2.5,242,2.5,243,2.5,244,2.5,245,2.5,246,2.289,247,2.5,248,2.5,249,2.5,1778,5.822]],["title/classes/LoadLightCardsFailure.html",[0,0.225,219,2.148]],["body/classes/LoadLightCardsFailure.html",[0,0.422,2,0.718,3,0.083,4,0.072,5,0.072,8,1.449,12,1.323,32,0.375,33,1.392,34,0.248,35,0.621,36,0.971,37,2.094,38,1.529,39,0.434,40,1.572,42,0.339,44,0.524,45,0.01,46,0.447,47,0.493,49,0.718,50,0.608,51,0.172,52,0.662,55,0.166,56,0.937,72,1.219,73,2.151,87,1.836,88,1.836,89,1.698,133,0.005,134,0.006,135,0.005,156,1.62,157,1.526,161,0.718,175,1.62,204,3.153,205,3.675,206,2.131,207,2.585,210,2.424,211,2.475,212,2.219,213,3.272,214,4.542,215,2.482,216,3.043,217,2.848,218,2.316,219,3.536,220,2.119,221,3.153,222,2.05,223,1.219,224,2.219,225,1.976,226,3.153,227,2.219,228,1.999,229,1.526,230,1.526,231,2.054,232,1.725,233,1.725,234,1.36,235,1.482,236,1.572,237,2.424,238,2.424,239,2.219,240,2.424,241,3.366,242,2.424,243,2.424,244,2.424,245,2.424,246,2.219,247,2.424,248,2.424,249,2.424,1779,5.698,1780,4.102]],["title/classes/LoadLightCardsSuccess.html",[0,0.225,216,1.997]],["body/classes/LoadLightCardsSuccess.html",[0,0.422,2,0.718,3,0.083,4,0.072,5,0.072,8,1.449,12,1.323,32,0.375,33,1.392,34,0.248,35,0.621,36,0.971,37,2.094,38,1.529,39,0.434,40,1.572,42,0.339,44,0.524,45,0.01,46,0.447,47,0.493,49,0.718,50,0.608,51,0.172,52,0.662,55,0.166,56,0.937,72,1.219,73,2.151,87,1.836,88,1.836,89,1.698,133,0.005,134,0.006,135,0.005,156,1.62,157,1.526,161,0.718,175,1.62,204,3.153,205,3.675,206,2.131,207,2.585,210,2.424,211,2.475,212,2.219,213,3.272,214,4.542,215,2.482,216,3.288,217,2.848,218,2.316,219,3.272,220,2.119,221,3.153,222,2.05,223,1.219,224,2.219,225,1.976,226,3.153,227,2.219,228,1.999,229,1.526,230,1.526,231,2.054,232,1.725,233,1.725,234,1.36,235,1.482,236,1.572,237,2.424,238,3.366,239,2.219,240,2.424,241,2.424,242,2.424,243,2.424,244,2.424,245,2.424,246,2.219,247,2.424,248,2.424,249,2.424,1781,5.698,1782,4.102]],["title/classes/LoadMenu.html",[0,0.225,1559,2.426]],["body/classes/LoadMenu.html",[0,0.408,2,0.911,3,0.105,4,0.092,5,0.092,8,1.443,32,0.364,33,1.372,34,0.314,35,0.728,37,1.92,38,1.523,39,0.489,42,0.346,45,0.01,49,0.911,50,0.77,51,0.202,52,0.839,55,0.166,56,1.188,72,1.546,73,2.134,133,0.006,134,0.008,135,0.006,215,2.588,220,1.934,228,2.252,229,1.934,230,1.934,231,2.095,234,1.725,235,1.878,236,1.992,487,5.012,1552,3.226,1555,3.853,1556,3.104,1557,2.936,1558,3.401,1559,4.394,1560,4.164,1561,4.164,1562,4.947,1563,3.853,1564,3.853,1565,3.606,1783,6.677]],["title/classes/LoadMenuFailure.html",[0,0.225,1561,2.426]],["body/classes/LoadMenuFailure.html",[0,0.403,2,0.878,3,0.101,4,0.089,5,0.089,8,1.429,32,0.378,33,1.356,34,0.303,35,0.711,36,1.112,37,2.123,38,1.508,39,0.433,40,1.921,42,0.375,44,0.641,45,0.01,46,0.547,47,0.602,49,0.878,50,0.743,51,0.197,52,0.809,55,0.164,56,1.145,72,1.491,73,2.098,133,0.006,134,0.007,135,0.006,207,2.863,215,2.544,220,1.865,228,2.214,229,1.865,230,1.865,231,2.071,234,1.663,235,1.811,236,1.921,487,4.975,1552,3.111,1555,3.715,1556,3.032,1557,2.831,1558,3.28,1559,4.092,1560,4.092,1561,4.334,1562,3.715,1563,4.832,1564,3.715,1565,3.478,1784,6.523,1785,5.015]],["title/classes/LoadMenuSuccess.html",[0,0.225,1560,2.426]],["body/classes/LoadMenuSuccess.html",[0,0.403,2,0.878,3,0.101,4,0.089,5,0.089,8,1.429,32,0.378,33,1.356,34,0.303,35,0.711,36,1.112,37,2.123,38,1.508,39,0.433,40,1.921,42,0.375,44,0.641,45,0.01,46,0.547,47,0.602,49,0.878,50,0.743,51,0.197,52,0.809,55,0.164,56,1.145,72,1.491,73,2.098,133,0.006,134,0.007,135,0.006,207,2.863,215,2.544,220,1.865,228,2.214,229,1.865,230,1.865,231,2.071,234,1.663,235,1.811,236,1.921,487,4.975,1552,3.111,1555,3.715,1556,3.032,1557,2.831,1558,3.28,1559,4.092,1560,4.334,1561,4.092,1562,3.715,1563,3.715,1564,4.832,1565,3.478,1786,6.523,1787,5.015]],["title/components/LoginComponent.html",[95,1.277,250,1.034]],["body/components/LoginComponent.html",[0,0.224,3,0.086,4,0.075,5,0.075,19,1.982,28,1.566,32,0.313,33,0.997,34,0.258,35,0.638,39,0.388,42,0.403,44,0.545,45,0.01,46,0.729,47,0.512,51,0.228,52,0.688,55,0.086,74,2.902,87,1.053,88,1.053,89,0.974,95,2.138,96,4.06,99,3.342,104,3.304,105,3.891,107,1.302,112,1.923,133,0.005,134,0.007,135,0.005,144,2.176,161,1.025,185,3.339,250,1.608,251,1.633,252,2.46,253,1.793,254,1.852,255,1.852,257,3.106,258,1.852,259,3.8,263,2.542,269,1.302,271,1.606,272,3.342,273,1.915,287,1.786,288,2.887,295,0.81,298,2.407,299,1.54,300,1.793,335,2.519,360,5.346,361,4.95,362,5.876,363,1.496,364,2.542,365,2.542,366,1.852,367,3.123,368,1.852,369,1.852,370,1.586,371,1.852,372,1.633,373,1.852,374,1.586,375,2.542,376,1.633,377,1.852,378,1.586,379,1.852,380,1.633,381,1.586,382,1.852,383,1.633,384,1.852,385,1.633,386,1.852,387,1.852,388,1.852,389,1.633,390,1.852,391,1.633,392,2.053,393,1.852,394,1.633,395,1.852,396,1.633,397,1.267,398,1.852,399,1.852,416,3.457,433,2.789,462,1.887,675,1.982,1788,3.75,1789,6.681,1790,6.681,1791,5.852,1792,6.681,1793,6.681,1794,7.191,1795,5.852,1796,4.264,1797,4.264,1798,4.264,1799,4.264,1800,5.754,1801,5.346,1802,4.264,1803,4.264,1804,4.264,1805,4.264,1806,4.264,1807,4.264,1808,4.264]],["title/classes/Map.html",[0,0.225,159,1.312]],["body/classes/Map.html",[0,0.353,2,1.178,3,0.135,4,0.119,5,0.119,42,0.348,45,0.01,55,0.135,75,1.445,133,0.008,134,0.009,135,0.008,159,2.387,1631,6.254,1809,5.917,1810,6.728,1811,7.817,1812,6.728]],["title/injectables/MenuEffects.html",[528,2.98,590,1.09]],["body/injectables/MenuEffects.html",[0,0.262,3,0.1,4,0.088,5,0.088,8,0.874,17,2.037,28,1.524,32,0.283,34,0.301,35,0.709,39,0.331,42,0.337,44,0.638,45,0.01,46,0.544,47,0.599,49,0.874,50,0.739,51,0.257,52,0.804,55,0.1,87,1.232,88,1.232,89,1.139,94,2.945,112,2.012,133,0.006,134,0.007,135,0.006,159,1.523,178,3.995,215,2.537,269,1.985,273,2.24,295,0.947,296,1.701,297,1.97,299,1.802,300,2.097,315,1.654,335,3.84,528,4.508,590,1.648,594,2.493,618,1.942,753,2.167,775,2.816,776,4.272,785,4.032,786,3.98,788,2.816,795,4.815,796,4.752,797,6.129,843,2.947,844,2.698,944,4.815,952,2.493,955,3.991,1109,3.98,1558,3.263,1560,2.816,1561,2.816,1758,5.717,1762,5.717,1764,3.991,1813,4.387,1814,4.989,1815,6.5,1816,6.5,1817,6.5,1818,6.5,1819,6.5,1820,6.5,1821,6.5,1822,4.989,1823,4.989,1824,4.387]],["title/interfaces/MenuState.html",[483,2.07,493,2.98]],["body/interfaces/MenuState.html",[3,0.125,4,0.11,5,0.11,32,0.348,34,0.377,35,0.815,45,0.01,51,0.188,55,0.15,75,1.382,133,0.007,134,0.008,135,0.007,144,2.976,189,2.463,231,2.084,336,4.79,462,2.012,483,3.004,484,3.869,487,5.013,493,5.551,1556,3.857,1557,3.521,1825,4.99,1826,6.237,1827,4.99,1828,5.485]],["title/components/NavbarComponent.html",[107,1.312,250,1.034]],["body/components/NavbarComponent.html",[0,0.209,3,0.08,4,0.07,5,0.07,17,1.814,32,0.331,33,0.95,34,0.337,35,0.608,39,0.264,42,0.426,44,0.712,45,0.01,46,0.761,47,0.67,49,1.127,50,0.954,51,0.253,52,0.641,55,0.08,68,2.591,95,1.182,106,3.774,107,2.131,109,3.015,112,1.881,133,0.005,134,0.006,135,0.005,144,1.478,161,0.976,167,2.503,250,1.549,251,1.523,252,2.343,253,1.671,254,1.726,255,1.726,257,2.992,258,1.726,259,3.768,263,2.421,266,5.15,269,1.966,271,1.529,272,3.243,273,1.785,274,3.865,279,3.18,287,1.72,288,2.466,295,0.755,296,1.356,297,1.57,298,2.244,299,1.436,300,1.671,301,2.757,303,3.496,315,1.318,320,3.18,335,3.293,363,1.395,364,2.421,365,2.421,366,1.726,367,3.03,368,1.726,369,1.726,370,1.478,371,1.726,372,1.523,373,1.726,374,1.478,375,2.421,376,1.523,377,1.726,378,1.478,379,1.726,380,1.523,381,1.478,382,1.726,383,1.523,384,1.726,385,1.523,386,1.726,387,1.726,388,1.726,389,1.523,390,1.726,391,1.523,392,1.956,393,1.726,394,1.523,395,1.726,396,1.523,397,1.182,398,1.726,399,1.726,439,2.945,476,6.699,618,1.008,675,2.591,814,2.945,878,3.458,894,3.496,895,3.496,896,3.496,1540,5.643,1556,1.848,1557,2.244,1559,3.147,1824,3.496,1829,3.496,1830,5.574,1831,6.437,1832,5.574,1833,6.437,1834,5.574,1835,6.437,1836,5.574,1837,3.975,1838,3.975,1839,3.975,1840,3.975,1841,3.975,1842,3.975,1843,3.975,1844,3.975,1845,3.975,1846,3.975,1847,3.18,1848,3.975,1849,2.757,1850,2.6,1851,3.975,1852,3.975,1853,3.975,1854,3.975,1855,3.975,1856,3.975,1857,3.975,1858,3.975,1859,3.975,1860,3.975,1861,3.975,1862,3.975,1863,5.574,1864,5.574,1865,5.574,1866,5.574,1867,5.574,1868,3.975]],["title/components/NoSelectionComponent.html",[250,1.034,389,1.646]],["body/components/NoSelectionComponent.html",[0,0.274,3,0.105,4,0.092,5,0.092,32,0.227,33,1.141,34,0.315,39,0.49,42,0.347,45,0.01,46,0.73,51,0.158,55,0.105,95,1.552,107,1.594,133,0.006,134,0.008,135,0.006,161,1.172,250,1.778,251,2,252,2.814,253,2.194,254,2.267,255,2.267,257,3.434,258,2.267,259,3.881,263,2.907,271,1.837,272,3.622,287,1.395,288,2,295,0.991,363,1.831,364,2.907,365,2.907,366,2.267,367,3.385,368,2.267,369,2.267,370,1.941,371,2.267,372,2,373,2.267,374,1.941,375,2.907,376,2,377,2.267,378,1.941,379,2.267,380,2,381,1.941,382,2.267,383,2,384,2.267,385,2,386,2.267,387,2.267,388,2.267,389,2.986,390,2.267,391,2,392,2.349,393,2.267,394,2,395,2.267,396,2,397,1.552,398,2.267,399,2.267,570,5.886,993,6.235,1388,5.911,1869,6.498,1870,4.591,1871,6.693,1872,5.22,1873,5.22]],["title/classes/ParameterListItem.html",[0,0.225,201,2.665]],["body/classes/ParameterListItem.html",[0,0.396,2,0.751,3,0.086,4,0.076,5,0.076,8,0.751,32,0.291,38,1.68,39,0.518,42,0.222,44,0.548,45,0.01,46,0.641,47,0.515,50,1.068,51,0.202,55,0.164,56,1.531,75,1.618,97,1.994,133,0.005,134,0.007,135,0.005,138,2.661,140,3.844,141,4.259,142,4.874,143,2.975,144,3.068,145,2.975,146,2.975,147,2.32,148,2.731,149,2.975,150,2.975,151,2.975,152,2.975,153,2.975,155,4.158,156,1.694,157,1.595,158,2.975,159,1.795,160,2.661,161,0.751,162,2.975,163,1.643,164,2.422,165,2.806,166,2.975,167,3.502,168,2.975,169,2.975,170,2.975,171,2.975,172,2.975,173,3.645,174,2.975,175,1.694,176,2.661,177,3.317,178,2.066,179,4.384,180,2.806,181,2.806,182,2.806,183,2.975,184,2.806,185,2.144,186,2.806,187,2.806,188,2.806,189,3.154,190,3.844,191,2.32,192,2.661,193,2.806,194,2.806,195,2.806,196,2.144,197,2.975,198,2.975,199,2.975,200,2.975,201,4.158,202,2.975,203,2.975,1874,4.29,1875,4.29]],["title/classes/PayloadForSuccessfulAuthentication.html",[0,0.225,41,2.07]],["body/classes/PayloadForSuccessfulAuthentication.html",[0,0.393,1,2.71,2,0.55,3,0.063,4,0.055,5,0.11,6,1.63,8,1.444,9,3.823,10,1.697,11,2.903,12,2.695,13,3.262,14,3.776,15,1.511,16,3.324,17,1.978,18,3.324,19,3.109,20,2.54,21,1.854,22,1.772,23,3.122,24,2.366,25,3.044,26,3.324,27,2.923,28,1.319,29,2.774,30,3.177,31,2.774,32,0.361,33,1.24,34,0.19,35,0.512,36,1.348,37,1.465,38,1.345,39,0.312,41,2.71,42,0.346,44,0.401,45,0.01,46,0.342,47,0.377,51,0.142,52,0.506,53,3.152,54,1.409,55,0.157,56,0.717,57,1.568,58,2.615,59,1.459,60,1.319,61,3.177,62,3.275,63,3.797,64,3.379,65,2.71,66,1.772,67,2.262,68,2.903,69,2.366,70,3.221,71,2.71,72,0.933,73,1.808,74,2.713,75,1.462,76,3.003,77,3.003,78,3.109,79,3.009,80,1.511,81,1.854,82,1.511,83,1.854,84,1.854,85,1.511,86,1.854,87,1.39,88,1.39,89,1.285,90,1.772,91,1.854,92,1.854,93,1.63,94,1.278,95,0.933,96,1.772,97,2.615,98,2.774,99,2.615,100,2.439,101,1.772,102,1.012,103,1.772,104,1.772,105,1.568,106,3.379,107,0.958,108,1.854,109,1.697,110,1.772,111,2.774,112,1.16,113,1.854,114,1.854,115,3.69,116,1.772,117,1.854,118,2.774,119,1.697,120,1.854,121,2.651,122,1.697,123,1.854,124,1.772,125,1.854,126,1.772,127,1.854,128,2.651,129,2.651,130,1.854,131,1.854,132,1.697,133,0.004,134,0.005,135,0.004,1876,3.138,1877,3.138,1878,3.138,1879,3.138,1880,3.138,1881,3.138]],["title/classes/RejectLogIn.html",[0,0.225,65,2.07]],["body/classes/RejectLogIn.html",[0,0.391,1,2.687,2,0.542,3,0.062,4,0.055,5,0.117,6,1.607,7,1.438,8,1.46,9,3.939,10,1.673,11,3.09,12,2.72,13,3.366,14,3.753,15,1.49,16,3.664,17,2.099,18,3.664,19,3.245,20,3.018,21,1.827,22,1.746,23,3.322,24,2.607,25,3.355,26,3.664,27,3.222,28,1.454,29,3.296,30,3.501,31,2.745,32,0.366,33,1.27,34,0.187,35,0.507,36,1.133,37,1.817,38,1.409,39,0.308,40,1.185,41,2.238,42,0.289,44,0.395,45,0.01,46,0.337,47,0.372,49,0.542,50,0.458,51,0.14,52,0.499,53,2.505,54,1.389,55,0.156,56,0.706,57,1.546,58,2.593,59,1.438,60,1.3,61,3.15,62,3.263,63,3.776,64,3.355,65,2.987,66,1.746,67,2.238,68,2.883,69,2.346,70,3.202,71,2.687,72,0.919,73,1.795,74,1.343,75,1.229,76,1.389,77,1.389,78,1.438,79,1.49,80,1.49,81,1.827,82,1.49,83,1.827,84,1.827,85,1.49,86,1.827,87,1.378,88,1.378,89,1.274,90,1.746,91,1.827,92,1.827,93,1.607,94,1.26,95,0.919,96,1.746,97,2.883,98,2.745,99,2.883,100,2.413,101,1.746,102,0.998,103,1.746,104,1.746,105,1.546,106,3.355,107,0.945,108,1.827,109,1.673,110,1.746,111,3.296,112,1.378,113,2.745,114,2.745,115,3.927,116,2.623,117,2.745,118,3.296,119,2.513,120,2.745,121,3.501,122,1.673,123,1.827,124,1.746,125,1.827,126,1.746,127,1.827,128,2.623,129,2.623,130,1.827,131,1.827,132,1.673,133,0.004,134,0.005,135,0.004,207,2.203,1882,4.646,1883,3.093]],["title/classes/RouterStateUrl.html",[0,0.225,497,2.98]],["body/classes/RouterStateUrl.html",[0,0.323,2,0.804,3,0.092,4,0.123,5,0.081,7,2.134,11,3.225,13,3.446,28,1.076,32,0.2,33,0.782,38,1.283,39,0.408,42,0.238,44,0.988,45,0.01,46,0.501,47,0.551,51,0.186,55,0.14,75,1.283,85,2.963,87,1.134,88,1.134,89,1.048,112,1.714,133,0.005,134,0.007,135,0.005,175,2.43,196,3.075,234,2.458,269,1.402,282,3.699,287,1.644,392,2.159,457,2.712,462,2.391,488,3.635,496,3.002,497,4.812,545,3.183,618,1.56,619,4.266,632,4.266,637,5.226,697,4.266,1149,2.483,1185,3.183,1186,3.401,1187,5.932,1190,4.037,1191,5.411,1193,4.037,1194,5.932,1196,4.037,1197,3.673,1198,6.367,1199,3.673,1200,4.922,1201,5.411,1202,6.367,1203,5.411,1204,5.411,1205,5.932,1206,4.922,1207,4.558,1208,5.411,1209,5.411,1210,5.411,1211,5.411,1212,6.52,1213,5.411,1214,5.411,1215,4.037,1216,4.037,1217,4.037,1218,4.037,1219,4.037,1220,4.037,1221,4.037,1884,4.59,1885,4.59]],["title/classes/SelectLightCard.html",[0,0.225,221,2.07]],["body/classes/SelectLightCard.html",[0,0.422,2,0.718,3,0.083,4,0.072,5,0.072,8,1.449,12,1.323,32,0.375,33,1.392,34,0.248,35,0.621,36,0.971,37,2.094,38,1.529,39,0.434,40,1.572,42,0.339,44,0.524,45,0.01,46,0.447,47,0.493,49,0.718,50,0.608,51,0.172,52,0.662,55,0.166,56,0.937,72,1.219,73,2.151,87,1.836,88,1.836,89,1.698,133,0.005,134,0.006,135,0.005,156,1.62,157,1.526,161,0.718,175,1.62,204,3.153,205,3.675,206,2.131,207,2.585,210,2.424,211,2.475,212,2.219,213,3.272,214,4.542,215,2.482,216,3.043,217,2.848,218,2.316,219,3.272,220,2.119,221,3.407,222,2.05,223,1.219,224,2.219,225,1.976,226,3.153,227,2.219,228,1.999,229,1.526,230,1.526,231,2.054,232,1.725,233,1.725,234,1.36,235,1.482,236,1.572,237,2.424,238,2.424,239,2.219,240,2.424,241,2.424,242,3.366,243,2.424,244,2.424,245,2.424,246,2.219,247,2.424,248,2.424,249,2.424,1886,5.698,1887,4.102]],["title/modules/ServicesModule.html",[400,1.866,413,2.98]],["body/modules/ServicesModule.html",[0,0.244,3,0.093,4,0.109,5,0.109,28,1.088,36,0.791,39,0.308,42,0.24,45,0.01,47,0.745,51,0.261,55,0.093,69,1.952,102,1.498,133,0.005,134,0.007,135,0.005,196,3.099,223,1.38,231,1.209,271,1.274,287,1.241,295,0.882,330,3.037,342,2.085,343,2.017,344,2.085,345,2.085,346,2.085,347,2.085,348,2.085,349,2.017,350,2.085,351,2.085,352,2.085,353,2.017,354,2.085,355,2.017,356,2.085,357,2.085,358,2.085,359,2.085,363,1.629,400,2.017,401,3.22,402,2.321,403,2.621,404,2.88,405,2.743,406,4.329,407,2.512,413,6.171,415,3.663,416,2.743,418,2.621,422,3.94,426,2.512,427,4.055,430,2.743,450,3.22,451,3.715,458,3.44,555,2.743,595,3.663,596,3.22,600,3.845,618,1.177,675,2.158,941,4.717,1051,3.715,1101,5.584,1103,5.584,1109,4.147,1125,5.222,1141,4.084,1374,5.222,1585,4.952,1606,3.715,1764,3.715,1888,4.084,1889,4.084,1890,5.537,1891,4.643,1892,4.643,1893,6.2,1894,6.2,1895,4.643,1896,4.643,1897,4.643,1898,4.643,1899,6.2,1900,4.643,1901,4.643]],["title/modules/StateModule.html",[400,1.866,414,2.98]],["body/modules/StateModule.html",[0,0.26,3,0.1,4,0.114,5,0.114,9,2.476,34,0.299,36,0.844,42,0.257,45,0.01,51,0.257,52,1.043,55,0.1,69,2.083,102,1.598,112,1.598,133,0.006,134,0.007,135,0.006,196,3.234,223,1.472,271,1.359,287,1.324,295,0.941,342,2.224,343,2.151,344,2.224,345,2.224,346,2.224,347,2.224,348,2.224,349,2.151,350,2.224,351,2.224,352,2.224,353,2.151,354,2.224,355,2.151,356,2.224,357,2.224,358,2.224,359,2.224,363,1.738,400,2.151,402,2.476,403,2.796,404,4.014,405,2.926,406,4.014,407,2.68,414,5.743,415,3.823,416,2.926,418,3.653,422,4.068,427,4.232,430,2.926,450,3.435,451,3.963,460,3.818,461,2.926,481,3.67,488,2.926,496,4.232,498,4.356,539,3.67,540,3.67,543,4.793,618,1.256,844,2.68,1101,5.765,1103,5.765,1185,4.997,1187,5.765,1194,5.177,1202,3.963,1205,3.963,1902,4.356,1903,4.356,1904,4.953,1905,4.953,1906,4.953,1907,4.953,1908,4.953,1909,4.356,1910,6.47,1911,4.953,1912,4.953,1913,4.953,1914,4.953,1915,4.953,1916,4.953,1917,4.953,1918,4.953,1919,6.47,1920,4.953,1921,4.953,1922,4.953,1923,4.953,1924,4.953,1925,4.953,1926,4.953]],["title/classes/Third.html",[0,0.225,1927,2.665]],["body/classes/Third.html",[0,0.403,2,0.993,3,0.114,4,0.1,5,0.1,32,0.247,38,1.648,39,0.533,42,0.294,44,0.725,45,0.01,46,0.769,47,0.681,55,0.154,75,1.664,133,0.006,134,0.008,135,0.006,141,4.167,163,2.173,282,2.636,872,7.064,1280,4.762,1556,2.636,1627,4.202,1927,4.375,1928,4.202,1929,5.671,1930,6.142,1931,7.053,1932,7.053,1933,5.644,1934,7.053,1935,5.253,1936,5.671,1937,4.538,1938,4.538,1939,4.538,1940,4.538,1941,4.538,1942,4.538,1943,4.538]],["title/classes/ThirdMenu.html",[0,0.225,1556,1.997]],["body/classes/ThirdMenu.html",[0,0.409,2,1.026,3,0.118,4,0.103,5,0.103,32,0.255,38,1.654,39,0.539,42,0.304,44,0.749,45,0.01,46,0.639,47,0.704,55,0.157,75,1.643,133,0.007,134,0.008,135,0.007,141,4.8,163,2.757,282,2.724,1280,4.832,1556,3.345,1627,4.341,1927,3.635,1928,4.341,1930,4.689,1935,5.314,1937,4.689,1938,4.689,1939,4.689,1940,4.689,1941,4.689,1942,4.689,1943,6.233,1944,5.154,1945,5.86]],["title/classes/ThirdMenuEntry.html",[0,0.225,1935,2.81]],["body/classes/ThirdMenuEntry.html",[0,0.41,2,1.035,3,0.119,4,0.104,5,0.104,32,0.257,38,1.656,39,0.541,42,0.306,44,0.755,45,0.01,46,0.645,47,0.71,55,0.157,75,1.645,133,0.007,134,0.008,135,0.007,141,4.814,163,2.772,282,3.634,1280,3.666,1556,2.747,1627,4.378,1927,3.666,1928,4.378,1930,4.728,1935,5.114,1937,4.728,1938,4.728,1939,4.728,1940,4.728,1941,4.728,1942,4.728,1943,4.728,1944,5.197,1946,5.909]],["title/classes/ThirdsI18nLoader.html",[0,0.225,1947,3.183]],["body/classes/ThirdsI18nLoader.html",[0,0.251,2,0.565,3,0.065,4,0.057,5,0.057,17,2.21,24,1.356,28,1.662,32,0.208,33,0.817,34,0.195,38,0.596,39,0.214,42,0.248,44,0.612,45,0.01,46,0.624,47,0.576,51,0.246,52,0.52,55,0.115,75,1.568,112,1.413,133,0.007,134,0.005,135,0.004,148,1.499,157,1.199,159,1.746,163,2.425,164,1.82,191,1.744,211,1.4,223,0.958,234,1.069,269,2.303,271,1.315,274,2.236,275,3.55,282,1.499,287,0.862,295,0.612,296,1.1,297,1.273,299,1.164,306,1.905,307,1.905,309,2.389,315,1.069,330,2.109,336,1.82,397,0.958,426,1.744,460,1.553,462,2.485,472,2.58,590,1.215,591,3.378,593,2.236,594,1.611,600,2.754,618,2.16,623,1.905,637,3.74,646,3.74,675,2.227,751,1.905,786,2.971,788,1.82,796,2,807,2.236,818,2.58,972,2.58,1013,2.58,1086,4.236,1109,3.683,1114,4.69,1160,4.575,1161,4.575,1162,4.575,1280,4.554,1368,2.58,1556,1.499,1557,1.82,1629,5.065,1849,2.236,1850,2.109,1927,2,1933,3.834,1947,3.55,1948,2.58,1949,4.792,1950,4.214,1951,3.224,1952,4.214,1953,3.224,1954,4.214,1955,2.836,1956,4.214,1957,2.836,1958,2.836,1959,2.836,1960,2.836,1961,2.836,1962,2.836,1963,2.836,1964,2.836,1965,2.836,1966,2.836,1967,2.836,1968,2.836,1969,4.214,1970,4.214,1971,2.836,1972,2.836,1973,2.836,1974,2.836,1975,2.836,1976,2.836,1977,2.836,1978,2.836,1979,2.836,1980,2.836,1981,2.836,1982,2.836,1983,5.95,1984,5.029,1985,2.836,1986,2.836,1987,3.834,1988,2.836,1989,2.836,1990,2.836,1991,2.836,1992,2.836,1993,2.836,1994,4.214,1995,4.214,1996,4.214,1997,2.58,1998,2.836,1999,2.836,2000,2.836,2001,2.836,2002,2.836,2003,2.836,2004,2.836,2005,2.836,2006,2.836,2007,2.836,2008,2.836,2009,2.836,2010,2.836,2011,2.836,2012,2.836,2013,2.836,2014,4.214,2015,2.836,2016,2.836,2017,2.836,2018,2.836,2019,2.836,2020,2.836,2021,2.836,2022,2.836,2023,2.836,2024,2.836,2025,4.214,2026,2.836,2027,2.836,2028,2.836,2029,2.836,2030,2.836,2031,2.836,2032,2.836,2033,2.836,2034,2.836,2035,2.836,2036,2.836,2037,4.214,2038,2.836,2039,4.214,2040,2.836,2041,4.214,2042,2.836,2043,2.836,2044,4.214,2045,5.029,2046,2.836,2047,2.836,2048,2.836,2049,2.836,2050,2.836,2051,2.836,2052,2.836,2053,2.836,2054,2.836,2055,2.836,2056,2.836]],["title/injectables/ThirdsService.html",[590,1.09,1109,2.232]],["body/injectables/ThirdsService.html",[0,0.218,3,0.054,4,0.047,5,0.047,17,2.206,24,1.126,28,1.547,32,0.325,33,0.456,34,0.162,35,0.454,38,0.944,39,0.178,42,0.406,44,0.88,45,0.01,46,0.815,47,0.827,49,0.729,50,0.617,51,0.237,52,0.432,55,0.103,75,1.626,112,1.701,133,0.006,134,0.005,135,0.003,148,1.245,157,0.996,159,1.559,163,2.205,164,3.249,191,1.449,211,2.217,223,0.796,234,0.888,269,2.503,271,1.142,274,3.991,275,3.781,282,1.245,287,1.902,295,0.509,296,0.914,297,1.058,299,0.967,306,1.582,307,1.582,309,1.984,315,0.888,330,3.338,336,2.881,397,0.796,426,1.449,460,1.29,462,2.358,472,2.143,590,1.055,591,3.897,593,1.857,594,1.339,600,3.316,618,2.104,623,1.582,637,3.4,646,3.338,675,1.934,751,1.582,753,1.163,786,2.651,788,1.512,796,1.662,807,1.857,818,2.143,856,1.984,966,1.857,972,2.143,1013,2.143,1086,3.781,1109,2.99,1114,3.781,1160,5.509,1161,4.084,1162,4.605,1280,4.858,1368,2.143,1556,2.372,1557,1.512,1629,5.278,1849,1.857,1850,1.752,1927,1.662,1933,4.605,1947,1.984,1948,2.143,1950,2.356,1952,2.356,1954,2.356,1955,2.356,1956,3.66,1957,2.356,1958,2.356,1959,2.356,1960,2.356,1961,2.356,1962,2.356,1963,4.489,1964,4.489,1965,2.356,1966,2.356,1967,2.356,1968,3.66,1969,3.66,1970,3.66,1971,2.356,1972,2.356,1973,3.66,1974,4.489,1975,2.356,1976,2.356,1977,2.356,1978,2.356,1979,2.356,1980,2.356,1981,2.356,1982,3.66,1983,5.481,1984,4.489,1985,2.356,1986,2.356,1987,3.33,1988,2.356,1989,2.356,1990,2.356,1991,2.356,1992,2.356,1993,2.356,1994,3.66,1995,3.66,1996,3.66,1997,4.605,1998,2.356,1999,2.356,2000,2.356,2001,2.356,2002,2.356,2003,2.356,2004,2.356,2005,2.356,2006,2.356,2007,2.356,2008,3.66,2009,2.356,2010,2.356,2011,2.356,2012,2.356,2013,2.356,2014,3.66,2015,2.356,2016,2.356,2017,2.356,2018,2.356,2019,2.356,2020,3.66,2021,2.356,2022,2.356,2023,2.356,2024,2.356,2025,3.66,2026,2.356,2027,2.356,2028,2.356,2029,2.356,2030,2.356,2031,2.356,2032,2.356,2033,2.356,2034,2.356,2035,2.356,2036,2.356,2037,3.66,2038,2.356,2039,3.66,2040,2.356,2041,3.66,2042,2.356,2043,2.356,2044,3.66,2045,4.489,2046,2.356,2047,2.356,2048,2.356,2049,2.356,2050,2.356,2051,2.356,2052,2.356,2053,2.356,2054,2.356,2055,2.356,2056,2.356,2057,4.162,2058,4.162,2059,4.162,2060,4.162,2061,3.66,2062,4.162,2063,4.162,2064,2.678,2065,2.678,2066,2.678,2067,2.678,2068,2.678,2069,2.678,2070,2.678,2071,2.678,2072,2.678,2073,2.678,2074,2.678,2075,2.678,2076,2.678]],["title/classes/ThirdsServiceMock.html",[0,0.225,2077,3.438]],["body/classes/ThirdsServiceMock.html",[0,0.318,2,1.062,3,0.122,4,0.107,5,0.107,17,2.228,28,1.927,34,0.366,42,0.381,45,0.01,51,0.222,55,0.122,133,0.007,134,0.008,135,0.007,271,2.016,287,1.964,296,2.068,618,1.537,1540,5.443,1556,2.818,1557,3.422,1935,3.965,1997,6.576,2061,6.954,2077,5.879,2078,5.332,2079,6.062,2080,6.062,2081,6.062,2082,6.062,2083,6.062,2084,6.062,2085,6.062,2086,6.062,2087,6.062,2088,6.062,2089,6.062,2090,6.062,2091,6.062,2092,6.062,2093,6.062,2094,6.062,2095,6.062,2096,6.062]],["title/components/TimeFilterComponent.html",[250,1.034,391,1.646]],["body/components/TimeFilterComponent.html",[0,0.184,3,0.071,4,0.062,5,0.062,17,1.858,28,1.713,32,0.287,33,0.869,34,0.212,35,0.556,39,0.233,42,0.4,44,0.449,45,0.01,46,0.719,47,0.422,49,0.615,50,0.52,51,0.248,52,0.566,55,0.071,60,1.475,80,1.69,89,0.801,95,1.043,107,1.072,112,1.805,133,0.004,134,0.006,135,0.004,161,0.893,250,1.446,251,1.344,252,2.144,253,1.475,254,1.524,255,1.524,257,2.792,258,1.524,259,3.709,263,2.215,269,2.443,271,1.399,272,3.065,273,1.576,287,1.605,288,1.954,295,0.666,296,1.197,297,1.386,299,1.267,300,1.475,315,1.164,349,2.609,363,1.231,364,2.215,365,2.215,366,1.524,367,2.864,368,1.524,369,1.524,370,1.305,371,1.524,372,1.344,373,1.524,374,1.305,375,2.215,376,1.344,377,1.524,378,1.305,379,1.524,380,1.344,381,1.305,382,1.524,383,1.344,384,1.524,385,1.344,386,1.524,387,1.524,388,1.524,389,1.344,390,1.524,391,2.526,392,2.564,393,1.524,394,1.344,395,1.524,396,1.344,397,2.296,398,1.524,399,1.524,433,2.295,547,2.759,552,2.295,553,2.295,554,2.073,555,2.073,557,2.434,560,2.177,618,1.523,751,3.013,786,1.823,878,3.163,989,5.461,1018,3.086,1024,2.6,1364,2.808,1398,6.301,1399,6.301,1585,4.677,1606,2.808,1800,5.276,1801,4.806,1849,2.434,1850,2.295,2097,2.808,2098,5.283,2099,4.485,2100,5.283,2101,5.283,2102,6.007,2103,5.799,2104,5.799,2105,5.1,2106,3.509,2107,3.509,2108,3.509,2109,3.086,2110,3.509,2111,3.086,2112,3.509,2113,2.808,2114,3.086,2115,4.485,2116,3.086,2117,3.086,2118,4.485,2119,5.1,2120,3.086,2121,3.086,2122,3.086,2123,3.509,2124,3.086,2125,3.509,2126,3.509,2127,3.509,2128,3.509,2129,5.1,2130,3.509,2131,3.509,2132,3.509,2133,3.509,2134,5.1,2135,3.509,2136,3.509,2137,3.509,2138,3.509,2139,3.086,2140,3.086,2141,3.086,2142,4.485,2143,3.509,2144,3.086,2145,3.086,2146,3.086,2147,5.1,2148,5.1,2149,5.1,2150,3.509,2151,5.1,2152,3.509,2153,3.086,2154,5.1,2155,5.1,2156,5.1]],["title/components/TimeLineComponent.html",[250,1.034,394,1.646]],["body/components/TimeLineComponent.html",[0,0.269,3,0.103,4,0.091,5,0.091,32,0.223,33,1.129,34,0.31,39,0.486,42,0.343,45,0.01,46,0.722,51,0.155,55,0.103,95,1.526,107,1.568,133,0.006,134,0.008,135,0.006,161,1.16,250,1.764,251,1.967,252,2.784,253,2.159,254,2.23,255,2.23,257,3.407,258,2.23,259,3.875,263,2.876,271,1.817,272,3.6,287,1.372,288,1.967,295,0.975,363,1.801,364,2.876,365,2.876,366,2.23,367,3.364,368,2.23,369,2.23,370,1.909,371,2.23,372,1.967,373,2.23,374,1.909,375,2.876,376,1.967,377,2.23,378,1.909,379,2.23,380,1.967,381,1.909,382,2.23,383,1.967,384,2.23,385,1.967,386,2.23,387,2.23,388,2.23,389,1.967,390,2.23,391,1.967,392,2.969,393,2.23,394,2.967,395,2.23,396,1.967,397,1.526,398,2.23,399,2.23,1391,5.865,2157,6.447,2158,4.515,2159,7.745,2160,6.622,2161,5.134,2162,5.134,2163,6.622,2164,6.622]],["title/injectables/TimeService.html",[590,1.09,1585,2.665]],["body/injectables/TimeService.html",[0,0.283,3,0.109,4,0.095,5,0.095,28,1.603,32,0.326,34,0.326,36,1.499,39,0.498,42,0.422,44,0.959,45,0.01,46,0.819,47,0.902,50,1.112,51,0.163,55,0.109,75,1.562,133,0.006,134,0.008,135,0.006,167,3.904,271,1.877,287,2.109,295,1.025,590,1.734,618,2.001,652,4,718,4,753,2.345,1585,4.243,2165,4.749,2166,6.839,2167,6.839,2168,7.891,2169,6.839,2170,5.4,2171,6.839,2172,5.4,2173,6.839,2174,5.4,2175,5.4,2176,6.839,2177,5.4,2178,5.4,2179,5.4,2180,5.4]],["title/interceptors/TokenInjector.html",[1890,2.98,2181,3.779]],["body/interceptors/TokenInjector.html",[0,0.279,3,0.107,4,0.094,5,0.094,10,2.871,17,2.098,32,0.324,33,0.905,34,0.321,39,0.352,42,0.386,44,0.952,45,0.01,46,0.812,47,0.895,51,0.237,55,0.107,87,1.671,88,1.671,89,1.85,133,0.006,134,0.008,135,0.006,271,1.856,282,2.467,287,1.808,295,1.008,296,1.81,315,1.76,426,2.871,462,2.402,590,1.715,600,3.989,618,1.715,1051,4.247,1086,3.932,1088,6.274,1890,4.692,2182,5.308,2183,4.668,2184,6.765,2185,6.765,2186,5.308,2187,5.308,2188,6.765,2189,8.602,2190,5.308,2191,6.765,2192,7.842,2193,5.308,2194,5.308,2195,6.765,2196,5.308,2197,5.308,2198,6.765,2199,5.308,2200,5.308,2201,5.308,2202,5.308]],["title/classes/TryToLogIn.html",[0,0.225,19,1.997]],["body/classes/TryToLogIn.html",[0,0.393,1,2.718,2,0.552,3,0.063,4,0.056,5,0.111,6,1.637,7,1.465,8,1.465,9,3.898,10,1.705,11,2.91,12,2.713,13,3.268,14,3.969,15,1.518,16,3.333,17,1.981,18,3.333,19,3.268,20,2.549,21,1.862,22,1.779,23,3.349,24,2.372,25,3.052,26,3.333,27,2.931,28,1.323,29,2.784,30,3.185,31,2.784,32,0.366,33,1.277,34,0.19,35,0.514,36,1.142,37,1.83,38,1.416,39,0.313,40,1.208,41,2.269,42,0.292,44,0.403,45,0.01,46,0.344,47,0.379,49,0.552,50,0.467,51,0.142,52,0.508,53,2.534,54,1.415,55,0.157,56,0.72,57,1.575,58,2.622,59,1.465,60,1.325,61,3.185,62,3.328,63,3.803,64,3.386,65,2.718,66,1.779,67,2.269,68,2.91,69,2.372,70,3.227,71,2.718,72,0.937,73,1.812,74,1.369,75,1.239,76,1.415,77,1.415,78,1.465,79,1.518,80,1.518,81,1.862,82,1.518,83,1.862,84,1.862,85,1.518,86,1.862,87,1.394,88,1.394,89,1.289,90,1.779,91,2.784,92,2.784,93,2.448,94,1.919,95,1.4,96,2.66,97,2.91,98,3.333,99,3.115,100,2.931,101,2.66,102,1.52,103,2.66,104,1.779,105,1.575,106,3.386,107,0.963,108,1.862,109,1.705,110,1.779,111,2.784,112,1.164,113,1.862,114,1.862,115,3.699,116,1.779,117,1.862,118,2.784,119,1.705,120,1.862,121,2.66,122,1.705,123,1.862,124,1.779,125,1.862,126,1.779,127,1.862,128,2.66,129,2.66,130,1.862,131,1.862,132,1.705,133,0.004,134,0.005,135,0.004,207,2.228,2203,4.712,2204,3.152]],["title/classes/TryToLogOut.html",[0,0.225,68,1.997]],["body/classes/TryToLogOut.html",[0,0.397,1,2.769,2,0.57,3,0.065,4,0.057,5,0.112,6,1.69,7,1.512,8,1.472,9,3.928,10,1.76,11,2.956,12,2.71,13,3.306,14,4.016,15,1.567,16,3.397,17,2.004,18,3.397,19,3.157,20,2.61,21,1.922,22,1.837,23,3.394,24,2.417,25,3.11,26,3.397,27,2.987,28,1.348,29,2.85,30,3.246,31,2.85,32,0.354,33,1.289,34,0.197,35,0.526,36,0.98,37,1.497,38,1.428,39,0.216,41,2.324,42,0.169,45,0.01,49,0.57,50,0.482,51,0.146,52,0.525,53,2.582,54,1.461,55,0.158,56,0.743,57,1.626,58,2.672,59,1.512,60,1.368,61,3.246,62,3.393,63,3.848,64,3.44,65,2.769,66,1.837,67,2.324,68,3.157,69,2.417,70,3.271,71,2.769,72,0.967,73,1.84,74,1.413,75,1.256,76,1.461,77,1.461,78,1.512,79,1.567,80,1.567,81,1.922,82,1.567,83,1.922,84,1.922,85,1.567,86,1.922,87,1.42,88,1.42,89,1.313,90,1.837,91,1.922,92,1.922,93,1.69,94,1.325,95,0.967,96,1.837,97,2.956,98,3.397,99,2.672,100,2.987,101,1.837,102,1.05,103,1.837,104,1.837,105,1.626,106,3.983,107,1.473,108,2.85,109,2.61,110,2.724,111,2.85,112,1.192,113,1.922,114,1.922,115,3.757,116,1.837,117,1.922,118,2.85,119,1.76,120,1.922,121,2.724,122,1.76,123,1.922,124,1.837,125,1.922,126,1.837,127,1.922,128,2.724,129,2.724,130,1.922,131,1.922,132,1.76,133,0.004,134,0.005,135,0.004,2205,3.254]],["title/components/TypeFilterComponent.html",[250,1.034,396,1.646]],["body/components/TypeFilterComponent.html",[0,0.165,3,0.063,4,0.083,5,0.083,8,0.552,17,1.888,28,1.756,32,0.356,33,0.803,34,0.19,35,0.514,36,0.537,39,0.209,42,0.388,44,0.403,45,0.01,46,0.683,47,0.379,49,0.552,50,0.467,51,0.242,52,0.508,55,0.063,60,1.325,80,1.518,89,0.72,95,0.937,102,1.52,107,0.963,112,1.737,133,0.004,134,0.005,135,0.004,161,0.825,185,1.575,223,0.937,225,2.269,250,1.358,251,1.208,252,1.981,253,1.325,254,1.369,255,1.369,257,2.622,258,1.369,259,3.653,261,3.082,263,2.046,269,2.339,271,1.293,272,2.91,273,1.415,287,1.508,288,1.805,295,0.599,296,1.075,297,1.245,299,1.138,300,1.325,315,1.045,342,1.415,343,1.369,344,1.415,345,1.415,346,1.415,347,1.415,348,1.415,349,2.719,350,1.415,351,1.415,352,1.415,353,1.369,354,1.415,355,1.369,356,1.415,357,1.415,358,1.415,359,1.415,361,2.335,363,1.106,364,2.046,365,2.046,366,1.369,367,2.719,368,1.369,369,1.369,370,1.172,371,1.369,372,1.208,373,1.369,374,1.172,375,2.046,376,1.208,377,1.369,378,1.172,379,1.369,380,1.208,381,1.172,382,1.369,383,1.208,384,1.369,385,1.208,386,1.369,387,1.369,388,1.369,389,1.208,390,1.369,391,1.208,392,1.653,393,1.369,394,1.208,395,1.369,396,2.398,397,2.277,398,1.369,399,1.369,433,2.062,547,2.549,552,2.062,553,2.062,554,1.862,555,1.862,557,2.186,560,1.955,618,1.431,728,2.335,786,1.637,808,4.962,878,2.923,903,5.506,915,2.772,989,5.311,1024,2.335,1310,4.514,1345,2.772,1364,2.522,1395,6.128,1396,6.128,1491,2.522,1494,2.522,1496,2.522,1744,2.772,1800,5.009,1801,5.361,1849,2.186,1850,2.062,2097,2.522,2098,4.962,2099,4.144,2100,4.962,2101,4.962,2103,5.506,2104,5.506,2109,2.772,2111,2.772,2113,2.522,2114,2.772,2115,4.144,2116,2.772,2117,2.772,2118,4.962,2120,2.772,2121,2.772,2122,2.772,2124,2.772,2139,2.772,2140,2.772,2141,2.772,2142,2.772,2144,2.772,2145,2.772,2146,2.772,2153,2.772,2206,5.642,2207,5.642,2208,3.152,2209,3.152,2210,3.152,2211,3.152,2212,3.152,2213,3.152,2214,3.152,2215,3.152,2216,4.712,2217,3.152,2218,3.152,2219,3.152,2220,3.152,2221,3.152,2222,3.152,2223,3.152,2224,3.152,2225,3.152,2226,3.152,2227,3.152,2228,3.152,2229,3.152,2230,3.152,2231,3.152,2232,3.152,2233,3.152,2234,3.152,2235,3.152,2236,3.152,2237,4.712,2238,4.712,2239,4.712,2240,4.712,2241,4.712,2242,6.701,2243,3.152,2244,3.152,2245,4.962,2246,4.712,2247,3.152,2248,4.712,2249,3.152,2250,5.642,2251,4.712,2252,6.701,2253,3.152,2254,3.152]],["title/classes/UpdatedSubscription.html",[0,0.225,226,2.07]],["body/classes/UpdatedSubscription.html",[0,0.425,2,0.741,3,0.085,4,0.075,5,0.075,8,1.458,12,1.365,32,0.365,33,1.402,34,0.256,35,0.635,37,1.957,38,1.539,39,0.476,42,0.302,45,0.01,49,0.741,50,0.627,51,0.176,52,0.682,55,0.167,56,0.966,72,1.258,73,2.175,87,1.857,88,1.857,89,1.717,133,0.005,134,0.007,135,0.005,156,1.671,157,1.574,161,0.741,175,1.671,204,3.205,205,3.457,206,2.198,210,2.5,211,2.528,212,2.289,213,3.326,214,4.576,215,2.515,216,3.093,217,2.91,218,2.389,219,3.326,220,2.165,221,3.205,222,2.115,223,1.258,224,2.289,225,2.038,226,3.453,227,2.289,228,2.032,229,1.574,230,1.574,231,2.071,232,1.779,233,1.779,234,1.403,235,1.528,236,1.621,237,2.5,238,2.5,239,2.289,240,2.5,241,2.5,242,2.5,243,2.5,244,3.439,245,2.5,246,2.289,247,2.5,248,2.5,249,2.5,2255,5.822]],["title/coverage.html",[2256,5.174]],["body/coverage.html",[0,0.454,1,0.952,5,0.035,6,3.307,8,0.346,15,0.952,19,0.918,24,3.501,25,2.893,28,0.463,32,0.086,41,0.952,45,0.01,58,0.918,65,0.952,68,0.918,70,0.952,71,0.952,74,0.858,95,0.587,107,0.603,133,0.002,134,0.004,135,0.002,138,3.317,142,1.167,148,0.918,159,0.603,161,0.346,177,1.115,201,1.226,204,0.952,205,3.307,206,3.307,213,0.988,216,0.918,217,0.988,219,0.988,221,0.952,226,0.952,228,1.476,250,1.821,251,0.757,256,1.738,299,0.714,301,1.37,302,1.581,304,1.581,308,1.738,310,1.069,312,1.581,313,1.581,370,0.735,372,0.757,374,0.735,376,0.757,378,0.735,380,0.757,381,0.735,383,0.757,385,0.757,389,0.757,391,0.757,394,0.757,396,0.757,397,0.587,445,1.581,460,1.571,483,2.773,485,4.279,489,1.37,490,1.37,491,1.37,492,1.37,493,1.37,497,1.37,505,1.37,507,1.37,524,1.37,528,1.37,530,1.37,533,1.37,537,1.37,539,1.464,540,1.464,542,1.581,543,1.464,545,1.37,547,1.069,548,2.261,561,1.226,565,1.738,580,1.37,581,3.498,590,1.895,595,1.167,598,1.37,600,0.952,736,1.292,749,2.609,750,1.581,754,1.738,873,1.738,923,1.738,924,1.464,925,1.738,939,1.738,941,1.167,952,0.988,953,1.115,954,1.115,959,3.866,985,1.581,987,1.581,989,3.351,990,1.581,991,1.738,996,1.738,997,1.738,1025,1.738,1092,2.609,1093,1.581,1099,1.292,1109,1.026,1116,1.738,1123,1.738,1125,1.292,1142,1.115,1143,1.115,1144,1.581,1145,1.464,1149,4.92,1155,1.738,1166,3.331,1169,1.581,1170,1.738,1171,1.738,1185,1.37,1186,3.084,1222,1.738,1316,1.738,1356,1.738,1371,1.738,1372,1.738,1374,1.292,1388,1.581,1391,1.581,1395,1.581,1396,1.581,1398,1.581,1399,1.581,1421,1.738,1422,1.738,1475,1.581,1518,1.738,1522,1.738,1532,2.997,1541,2.997,1552,2.997,1556,0.918,1559,1.115,1560,1.115,1561,1.115,1566,2.868,1585,1.226,1691,1.738,1694,1.738,1749,1.738,1750,1.738,1788,1.738,1809,1.738,1813,1.738,1825,2.609,1827,1.581,1829,1.738,1847,1.581,1869,1.738,1870,1.738,1890,1.37,1927,1.226,1928,3.084,1935,1.292,1947,1.464,1948,3.331,2077,1.581,2078,1.738,2097,2.609,2113,1.581,2157,1.738,2158,1.738,2165,1.738,2181,1.738,2183,1.738,2245,1.738,2256,1.738,2257,1.976,2258,1.976,2259,1.976,2260,1.976,2261,1.976,2262,4.163,2263,1.976,2264,6.969,2265,5.757,2266,1.976,2267,8.901,2268,7.473,2269,3.261,2270,4.163,2271,1.976,2272,3.261,2273,1.976,2274,1.976,2275,8.027,2276,5.347,2277,1.976,2278,1.976,2279,4.832,2280,4.832,2281,1.976,2282,1.976,2283,3.261,2284,3.261,2285,8.655,2286,1.976,2287,1.976,2288,1.976,2289,4.832,2290,1.976,2291,1.976,2292,1.976,2293,5.063,2294,1.738,2295,1.738,2296,1.738,2297,1.738,2298,1.738,2299,2.868,2300,2.868,2301,1.976,2302,1.976,2303,1.976,2304,2.868,2305,2.868,2306,1.738,2307,3.662,2308,1.738,2309,1.738,2310,1.738,2311,5.063,2312,1.976,2313,1.738,2314,1.738,2315,5.599,2316,1.738,2317,1.738,2318,1.738,2319,1.738,2320,1.738,2321,1.738,2322,2.868,2323,1.738,2324,2.868,2325,1.738,2326,1.976,2327,1.976,2328,4.25,2329,1.738,2330,1.738,2331,1.738,2332,1.738,2333,1.738,2334,2.868,2335,1.738,2336,1.738,2337,7.799,2338,1.976,2339,1.976,2340,1.976,2341,1.976,2342,1.976,2343,1.976,2344,1.976,2345,1.976,2346,1.976,2347,1.976,2348,1.976,2349,1.976,2350,1.976,2351,1.976,2352,1.976,2353,1.976,2354,1.976,2355,1.976,2356,1.976,2357,1.976]],["title/dependencies.html",[403,2.92,2358,3.579]],["body/dependencies.html",[4,0.096,45,0.01,52,1.107,53,2.439,54,2.439,112,1.342,133,0.006,134,0.008,135,0.006,235,1.961,295,1.031,296,1.852,306,4.055,307,3.209,403,3.066,405,4.055,415,3.209,420,5.492,421,5.085,430,3.209,433,3.552,436,5.085,437,4.345,457,3.209,488,3.209,496,3.552,744,3.209,844,2.938,980,4.776,1050,4.345,1113,4.345,1235,4.345,1401,4.776,1402,4.776,1404,4.776,1405,6.022,1406,6.037,1408,4.776,1409,4.776,1410,4.776,1850,3.552,1909,4.776,2359,5.431,2360,8.637,2361,5.431,2362,5.431,2363,5.431,2364,5.431,2365,5.431,2366,5.431,2367,6.864,2368,8.156,2369,5.431,2370,5.431,2371,5.431,2372,5.431,2373,5.431,2374,5.431,2375,5.431,2376,5.431,2377,5.431,2378,5.431,2379,5.431,2380,5.431,2381,5.431,2382,5.431,2383,5.431,2384,5.431,2385,5.431,2386,5.431]],["title/miscellaneous/enumerations.html",[2387,2.341,2388,4.549]],["body/miscellaneous/enumerations.html",[1,1.847,6,1.992,8,0.952,10,2.94,12,2.595,19,1.782,34,0.232,45,0.01,50,1.334,57,2.716,58,1.782,59,1.782,60,2.285,61,3.564,62,3.165,63,4.073,64,3.715,65,1.847,66,2.165,67,2.617,68,1.782,69,2.654,70,1.847,71,1.847,72,2.155,74,2.36,76,2.44,77,2.44,78,2.526,133,0.004,134,0.006,135,0.004,138,2.378,140,3.554,144,1.426,155,3.371,161,1.409,175,1.514,179,3.554,180,2.508,181,2.508,182,2.508,186,2.508,187,2.508,188,2.508,190,3.554,191,2.074,192,2.378,193,2.508,194,2.508,195,2.508,196,1.916,204,1.847,205,1.992,206,2.823,212,2.94,213,1.916,214,4.465,215,2.948,216,1.782,217,1.916,218,2.165,219,1.916,220,2.696,221,1.847,222,1.916,223,1.14,224,3.415,225,1.847,226,1.847,227,2.074,228,2.097,229,2.554,230,2.554,231,1.788,232,2.654,233,2.654,278,2.84,310,2.074,397,1.615,464,3.068,486,4.371,487,4.574,547,2.074,548,2.659,554,3.21,556,4.026,557,2.659,558,3.068,581,2.508,597,4.026,847,3.371,951,3.554,952,1.916,953,2.165,954,2.165,1142,2.165,1143,2.165,1475,3.068,1491,4.348,1494,5.05,1496,5.05,1514,3.372,1515,3.372,1516,3.372,1517,3.372,1532,2.378,1541,2.378,1545,2.659,1552,2.378,1558,3.554,1559,2.165,1560,2.165,1561,2.165,2387,2.508,2388,3.372,2389,6.312,2390,3.372,2391,3.372,2392,5.434,2393,3.834,2394,5.434,2395,3.372,2396,3.372,2397,3.834,2398,5.551,2399,3.372,2400,3.372,2401,6.312,2402,5.434,2403,3.834,2404,5.434,2405,3.834]],["title/index.html",[34,0.26,2406,3.779]],["body/index.html",[2,0.737,45,0.01,69,1.768,95,1.972,107,2.026,133,0.005,134,0.007,135,0.005,251,3.044,252,1.768,363,1.476,370,2.467,372,3.044,374,2.954,376,2.542,378,2.954,380,3.044,381,2.954,383,2.542,385,2.542,389,2.542,391,2.542,394,2.542,396,2.542,400,1.827,401,6.035,402,2.102,403,2.375,404,2.609,405,2.485,406,2.609,407,2.275,408,3.699,409,3.699,410,3.699,411,3.699,412,4.601,413,6.035,414,5.201,415,3.425,416,2.485,456,2.751,460,3.195,484,2.609,571,5.744,572,3.699,573,3.699,574,3.699,575,4.601,600,3.195,753,1.827,941,3.919,1094,6.035,1095,3.699,1096,3.699,1097,3.699,1098,3.699,1099,4.339,1109,3.446,1125,4.339,1374,4.339,1378,6.53,1379,3.699,1380,3.699,1381,3.699,1382,3.699,1383,4.601,1585,4.115,1888,3.699,1889,3.699,1890,4.601,1902,3.699,1903,3.699,2325,5.099,2406,3.699,2407,4.206,2408,4.206,2409,4.206,2410,4.206]],["title/modules.html",[402,2.94]],["body/modules.html",[45,0.009,133,0.007,134,0.009,135,0.007,337,7.107,401,4.423,402,3.188,412,4.423,413,4.423,414,4.423,421,6.415,571,4.725,575,4.423,1094,4.423,1378,4.725,1383,4.423,1405,6.928,2411,8.659,2412,8.87,2413,8.081]],["title/routes.html",[456,3.848]],["body/routes.html",[45,0.009,133,0.008,134,0.009,135,0.008,456,4.61]],["title/miscellaneous/typealiases.html",[2387,2.341,2414,5.173]],["body/miscellaneous/typealiases.html",[1,2.834,6,3.057,19,2.735,32,0.256,34,0.356,45,0.01,58,2.735,65,2.834,68,2.735,70,2.834,71,2.834,132,3.903,133,0.007,134,0.008,135,0.007,204,2.834,205,3.057,206,3.749,213,2.941,216,2.735,219,2.941,221,2.834,226,2.834,228,2.485,246,3.903,310,3.183,547,3.183,548,4.081,561,3.65,564,5.346,846,4.72,952,2.941,953,3.322,954,3.322,1142,3.322,1143,3.322,1532,3.65,1539,5.004,1541,3.65,1552,3.65,1559,3.322,1560,3.322,1561,3.322,1565,5.004,2387,3.849,2390,5.176,2391,5.176,2395,5.176,2396,5.176,2398,5.176,2400,5.176,2415,5.885]],["title/miscellaneous/variables.html",[2387,2.341,2416,4.549]],["body/miscellaneous/variables.html",[11,3.446,12,1.618,15,1.255,28,0.955,32,0.359,34,0.158,45,0.01,49,1.548,50,1.31,74,1.132,75,0.753,76,1.171,77,2.252,78,2.331,122,1.41,133,0.006,134,0.005,135,0.003,159,0.796,161,0.457,167,2.252,189,2.576,231,1.306,282,1.212,301,2.826,302,3.26,304,3.26,312,3.26,313,3.26,330,1.705,336,3.202,353,1.132,392,1.43,445,3.26,450,1.808,460,2.732,462,1.314,464,2.3,468,3.018,481,1.931,485,2.086,486,3.474,487,2.407,488,3.35,489,4.267,490,1.808,491,1.808,492,3.478,493,1.808,499,2.292,501,2.292,502,2.292,503,2.292,505,1.808,507,1.808,511,2.292,513,2.292,516,2.292,518,2.292,520,2.292,524,1.808,528,1.808,530,1.808,533,1.808,537,1.808,539,3.018,540,3.018,541,2.292,542,4.013,543,3.018,544,2.292,545,3.478,546,2.292,581,1.705,591,1.54,598,2.826,599,1.931,618,1.838,623,1.54,637,1.54,675,1.894,676,1.808,677,1.931,745,1.931,749,2.086,750,3.26,751,4.283,752,2.292,933,2.292,959,2.086,962,2.292,963,2.086,964,2.292,966,3.478,974,2.826,978,2.292,979,2.292,985,3.26,986,2.292,987,3.26,988,2.292,1092,2.086,1093,3.26,1113,2.086,1114,1.931,1115,2.292,1124,2.086,1144,3.26,1145,3.716,1149,2.713,1166,2.086,1167,2.292,1169,3.26,1186,1.931,1197,2.086,1198,2.086,1199,2.086,1206,2.086,1234,4.013,1825,2.086,1827,3.26,1828,2.292,1847,3.26,1987,4.538,2293,2.292,2294,3.583,2295,3.583,2296,3.583,2297,3.583,2298,4.411,2299,2.292,2300,4.988,2304,2.292,2305,2.292,2306,3.583,2307,2.292,2308,3.583,2309,3.583,2310,3.583,2311,2.292,2313,3.583,2314,3.583,2315,2.292,2316,3.583,2317,3.583,2318,3.583,2319,3.583,2320,3.583,2321,4.411,2322,2.292,2323,3.583,2324,2.292,2328,2.292,2329,2.292,2330,3.583,2331,3.583,2332,2.292,2333,2.292,2334,2.292,2335,3.583,2336,3.583,2387,1.705,2399,2.292,2416,2.292,2417,5.671,2418,2.607,2419,2.607,2420,4.074,2421,4.074,2422,2.607,2423,2.607,2424,4.074,2425,6.153,2426,2.607,2427,2.607,2428,5.016,2429,2.607,2430,2.607,2431,6.816,2432,4.074,2433,5.016,2434,6.153,2435,4.074,2436,4.074,2437,2.607,2438,2.607,2439,4.074,2440,4.074,2441,5.016,2442,2.607,2443,2.607,2444,2.607,2445,2.607,2446,2.607,2447,2.607,2448,2.607,2449,2.607,2450,2.607,2451,2.607,2452,2.607,2453,2.607,2454,5.016,2455,2.607,2456,2.607,2457,2.607,2458,2.607,2459,2.607,2460,2.607,2461,2.607,2462,2.607,2463,2.607,2464,2.607,2465,4.074,2466,2.607,2467,2.607,2468,2.607,2469,2.607,2470,2.607,2471,2.607,2472,2.607,2473,2.607,2474,5.671,2475,2.607,2476,2.607,2477,2.607,2478,2.607,2479,2.607,2480,2.607,2481,2.607,2482,2.607,2483,2.607,2484,2.607,2485,2.607,2486,5.016,2487,5.016,2488,2.607,2489,2.607,2490,2.607,2491,2.607,2492,2.607,2493,2.607,2494,2.607,2495,2.607,2496,2.607,2497,2.607,2498,2.607,2499,2.607,2500,2.607,2501,2.607]]],"invertedIndex":[["",{"_index":45,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1149,"title":{},"body":{"injectables/ConfigEffects.html":{},"interfaces/ConfigState.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/Filter.html":{},"injectables/HandlebarsService.html":{},"classes/RouterStateUrl.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.3.0",{"_index":2364,"title":{},"body":{"dependencies.html":{}}}],["0.8.29",{"_index":2386,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2267,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2263,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2261,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2271,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2286,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":2273,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2264,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2268,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2275,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2269,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2276,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2262,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2270,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2272,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1540,"title":{"classes/HandleUnexpectedError-1.html":{}},"body":{"injectables/HandlebarsService.html":{},"components/NavbarComponent.html":{},"classes/ThirdsServiceMock.html":{}}}],["1.0.14",{"_index":2378,"title":{},"body":{"dependencies.html":{}}}],["1.0.9",{"_index":2374,"title":{},"body":{"dependencies.html":{}}}],["1.2.17",{"_index":2365,"title":{},"body":{"dependencies.html":{}}}],["1.9.3",{"_index":2384,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2284,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":2289,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2288,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":2280,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":2278,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":2326,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":2260,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":2243,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["10/15",{"_index":2282,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":2283,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":599,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["11",{"_index":2259,"title":{},"body":{"coverage.html":{}}}],["11.0.1",{"_index":2369,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":2408,"title":{},"body":{"index.html":{}}}],["16",{"_index":2325,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["16px",{"_index":1739,"title":{},"body":{"components/IconComponent.html":{}}}],["2",{"_index":478,"title":{"classes/HandleUnexpectedError-2.html":{}},"body":{"modules/AppRoutingModule.html":{}}}],["2*60*60*1000",{"_index":1063,"title":{},"body":{"injectables/CardService.html":{}}}],["2.0",{"_index":354,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{}}}],["2.0.1",{"_index":2379,"title":{},"body":{"dependencies.html":{}}}],["2.24.0",{"_index":2377,"title":{},"body":{"dependencies.html":{}}}],["2.6.3",{"_index":2373,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":2292,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2277,"title":{},"body":{"coverage.html":{}}}],["2018",{"_index":344,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{}}}],["25",{"_index":2279,"title":{},"body":{"coverage.html":{}}}],["2px",{"_index":2246,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["3",{"_index":1551,"title":{"classes/HandleUnexpectedError-3.html":{}},"body":{"injectables/HandlebarsService.html":{}}}],["3.6.0",{"_index":2382,"title":{},"body":{"dependencies.html":{}}}],["30px",{"_index":916,"title":{},"body":{"components/CardComponent.html":{}}}],["32px",{"_index":1738,"title":{},"body":{"components/IconComponent.html":{}}}],["33",{"_index":2287,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":2367,"title":{},"body":{"dependencies.html":{}}}],["4.0.12",{"_index":2375,"title":{},"body":{"dependencies.html":{}}}],["4.17.11",{"_index":2376,"title":{},"body":{"dependencies.html":{}}}],["4.2.1",{"_index":2371,"title":{},"body":{"dependencies.html":{}}}],["4/8",{"_index":2266,"title":{},"body":{"coverage.html":{}}}],["400px",{"_index":904,"title":{},"body":{"components/CardComponent.html":{}}}],["48",{"_index":2409,"title":{},"body":{"index.html":{}}}],["5",{"_index":1167,"title":{},"body":{"interfaces/ConfigState.html":{},"miscellaneous/variables.html":{}}}],["5.8.1",{"_index":2366,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":2265,"title":{},"body":{"coverage.html":{}}}],["5000",{"_index":1147,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["5px",{"_index":906,"title":{},"body":{"components/CardComponent.html":{}}}],["6",{"_index":2410,"title":{},"body":{"index.html":{}}}],["6.3.3",{"_index":2380,"title":{},"body":{"dependencies.html":{}}}],["600000",{"_index":1091,"title":{},"body":{"injectables/CardService.html":{}}}],["64px",{"_index":1737,"title":{},"body":{"components/IconComponent.html":{}}}],["66",{"_index":2281,"title":{},"body":{"coverage.html":{}}}],["7.1.0",{"_index":2368,"title":{},"body":{"dependencies.html":{}}}],["7.2.2",{"_index":2360,"title":{},"body":{"dependencies.html":{}}}],["7/10",{"_index":2291,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":2290,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":652,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"injectables/TimeService.html":{}}}],["8px",{"_index":362,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{}}}],["9",{"_index":2407,"title":{},"body":{"index.html":{}}}],["_",{"_index":1849,"title":{},"body":{"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["_.difference(work",{"_index":2027,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["_.fill(this.expandedmenu,false",{"_index":1856,"title":{},"body":{"components/NavbarComponent.html":{}}}],["_.isequal(forma",{"_index":2143,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["_.isequal(forma,formb",{"_index":2231,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["_.merge(acc,val",{"_index":1996,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["_.remove(this.loading",{"_index":2041,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["_.uniq(ids",{"_index":2026,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["_defaultfilters",{"_index":1476,"title":{},"body":{"injectables/FilterService.html":{}}}],["_filter",{"_index":2100,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["_htmlcontent",{"_index":1224,"title":{},"body":{"components/DetailComponent.html":{}}}],["_i18nprefix",{"_index":876,"title":{},"body":{"components/CardComponent.html":{},"components/DetailsComponent.html":{}}}],["_thirdmenus",{"_index":1831,"title":{},"body":{"components/NavbarComponent.html":{}}}],["a[key",{"_index":1687,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["accept",{"_index":61,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["acceptlogin",{"_index":1,"title":{"classes/AcceptLogIn.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["acceptlogin(authenticationinfo",{"_index":825,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["acceptlogin(authinfo",{"_index":851,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["acceptlogout",{"_index":70,"title":{"classes/AcceptLogOut.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["acceptlogoutsuccess",{"_index":71,"title":{"classes/AcceptLogOutSuccess.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["acceptlogoutsucess",{"_index":782,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["access_token",{"_index":584,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["accessors",{"_index":878,"title":{},"body":{"components/CardComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"injectables/FilterService.html":{},"components/NavbarComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["accordingly",{"_index":764,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["action",{"_index":8,"title":{"classes/Action.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"injectables/FilterService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["action.buttonstyle",{"_index":1301,"title":{},"body":{"components/DetailComponent.html":{}}}],["action.buttonstyle.split",{"_index":1302,"title":{},"body":{"components/DetailComponent.html":{}}}],["action.contentstyle",{"_index":1304,"title":{},"body":{"components/DetailComponent.html":{}}}],["action.contentstyle.split",{"_index":1305,"title":{},"body":{"components/DetailComponent.html":{}}}],["action.payload",{"_index":821,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["action.payload.event.url.indexof(\"/feed/cards/\")>=0",{"_index":1177,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["action.payload.routerstate",{"_index":1179,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["actionid",{"_index":1243,"title":{},"body":{"components/DetailComponent.html":{}}}],["actionreducermap",{"_index":501,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["actions",{"_index":178,"title":{},"body":{"classes/Action.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"classes/ParameterListItem.html":{}}}],["actiontype",{"_index":140,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["activate",{"_index":1346,"title":{},"body":{"components/DetailsComponent.html":{}}}],["activatedroutesnapshot",{"_index":1191,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["active",{"_index":560,"title":{},"body":{"classes/ApplyFilter.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/Filter.html":{},"classes/InitFilters.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["active:boolean",{"_index":1463,"title":{},"body":{"classes/Filter.html":{}}}],["activedetail",{"_index":1341,"title":{},"body":{"components/DetailsComponent.html":{}}}],["activedetail.length",{"_index":1347,"title":{},"body":{"components/DetailsComponent.html":{}}}],["actual_component",{"_index":399,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["add",{"_index":224,"title":{},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["addauthheadersifnecessary",{"_index":2184,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["addauthheadersifnecessary(request",{"_index":2188,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["added",{"_index":967,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["addlightcardfailure",{"_index":204,"title":{"classes/AddLightCardFailure.html":{}},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["addlightcardfailure({error",{"_index":1012,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["afterviewinit",{"_index":1317,"title":{},"body":{"components/DetailsComponent.html":{},"components/FeedComponent.html":{}}}],["aims",{"_index":83,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["alarm",{"_index":1491,"title":{},"body":{"injectables/FilterService.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/enumerations.html":{}}}],["alert(`${actionid",{"_index":1312,"title":{},"body":{"components/DetailComponent.html":{}}}],["aliases",{"_index":2415,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":917,"title":{},"body":{"components/CardComponent.html":{}}}],["already",{"_index":1901,"title":{},"body":{"modules/ServicesModule.html":{}}}],["always",{"_index":1206,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"miscellaneous/variables.html":{}}}],["angular",{"_index":608,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["angular/animations",{"_index":2359,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":430,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":426,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigService.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{}}}],["angular/compiler",{"_index":2361,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":295,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"components/TypeFilterComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":433,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{},"components/LoginComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"dependencies.html":{}}}],["angular/http",{"_index":2362,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":420,"title":{},"body":{"modules/AppModule.html":{},"components/DetailComponent.html":{},"dependencies.html":{}}}],["angular/router",{"_index":457,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"classes/CustomRouterStateSerializer.html":{},"modules/FeedRoutingModule.html":{},"classes/RouterStateUrl.html":{},"dependencies.html":{}}}],["app",{"_index":279,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/NavbarComponent.html":{}}}],["app.component",{"_index":440,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":264,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":262,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":251,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["appeffects",{"_index":539,"title":{},"body":{"interfaces/AppState.html":{},"modules/StateModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appendfixedlengthalphanumericvalue",{"_index":2338,"title":{},"body":{"coverage.html":{}}}],["application",{"_index":82,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["application/x",{"_index":648,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["applies",{"_index":1460,"title":{},"body":{"classes/Filter.html":{}}}],["apply",{"_index":807,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"interfaces/CardFeedState.html":{},"classes/Filter.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["applyfilter",{"_index":547,"title":{"classes/ApplyFilter.html":{}},"body":{"classes/ApplyFilter.html":{},"injectables/CardOperationEffects.html":{},"classes/Filter.html":{},"classes/InitFilters.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["applyfilter(card",{"_index":1448,"title":{},"body":{"classes/Filter.html":{}}}],["appmetareducers",{"_index":542,"title":{},"body":{"interfaces/AppState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":401,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"index.html":{},"modules.html":{}}}],["appreducer",{"_index":540,"title":{},"body":{"interfaces/AppState.html":{},"modules/StateModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appropriate",{"_index":725,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["approutingmodule",{"_index":412,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"index.html":{},"modules.html":{}}}],["appstate",{"_index":299,"title":{"interfaces/AppState.html":{}},"body":{"components/AppComponent.html":{},"interfaces/AppState.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["archives",{"_index":468,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"miscellaneous/variables.html":{}}}],["archives'},{'name",{"_index":371,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["archives.component",{"_index":577,"title":{},"body":{"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{}}}],["archives.component.html",{"_index":567,"title":{},"body":{"components/ArchivesComponent.html":{}}}],["archives.component.scss",{"_index":566,"title":{},"body":{"components/ArchivesComponent.html":{}}}],["archivescomponent",{"_index":370,"title":{"components/ArchivesComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["archivesmodule",{"_index":571,"title":{"modules/ArchivesModule.html":{}},"body":{"modules/ArchivesModule.html":{},"index.html":{},"modules.html":{}}}],["archivesroutingmodule",{"_index":575,"title":{"modules/ArchivesRoutingModule.html":{}},"body":{"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"index.html":{},"modules.html":{}}}],["args",{"_index":1659,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["args[2",{"_index":1660,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["arguments",{"_index":1430,"title":{},"body":{"classes/Filter.html":{}}}],["array",{"_index":1252,"title":{},"body":{"components/DetailComponent.html":{}}}],["array(menus.length",{"_index":1855,"title":{},"body":{"components/NavbarComponent.html":{}}}],["array[0",{"_index":1820,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["arrow::after",{"_index":2254,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["ask",{"_index":604,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["asktoken",{"_index":853,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["asktoken(login",{"_index":636,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["asktokenurl",{"_index":605,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["aslocalstring",{"_index":2166,"title":{},"body":{"injectables/TimeService.html":{}}}],["aslocalstring(value",{"_index":2171,"title":{},"body":{"injectables/TimeService.html":{}}}],["assets/i18n",{"_index":2455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/styles/_variables.scss",{"_index":1744,"title":{},"body":{"components/IconComponent.html":{},"components/TypeFilterComponent.html":{}}}],["asstring",{"_index":2167,"title":{},"body":{"injectables/TimeService.html":{}}}],["asstring(value",{"_index":2173,"title":{},"body":{"injectables/TimeService.html":{}}}],["attachaction",{"_index":1226,"title":{},"body":{"components/DetailComponent.html":{}}}],["attachaction(button",{"_index":1241,"title":{},"body":{"components/DetailComponent.html":{}}}],["attempt",{"_index":64,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["auth",{"_index":2441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authenticate",{"_index":831,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["authenticated",{"_index":334,"title":{},"body":{"components/AppComponent.html":{}}}],["authentication",{"_index":12,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/FeedFiltersEffects.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authentication.reducer.ts",{"_index":26,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authentication.service",{"_index":1051,"title":{},"body":{"injectables/CardService.html":{},"modules/ServicesModule.html":{},"interceptors/TokenInjector.html":{}}}],["authenticationactions",{"_index":132,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/typealiases.html":{}}}],["authenticationactiontypes",{"_index":57,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"injectables/FeedFiltersEffects.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["authenticationactiontypes.acceptlogin",{"_index":31,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.acceptlogout",{"_index":129,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.acceptlogoutsuccess",{"_index":131,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.checkauthenticationstatus",{"_index":90,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.rejectlogin",{"_index":121,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.trytologin",{"_index":103,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.trytologout",{"_index":110,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationeffect",{"_index":115,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationeffects",{"_index":15,"title":{"injectables/AuthenticationEffects.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"interfaces/AppState.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authenticationguard",{"_index":458,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{}}}],["authenticationreducer",{"_index":499,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["authenticationservice",{"_index":600,"title":{"injectables/AuthenticationService.html":{}},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigService.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{},"coverage.html":{},"index.html":{}}}],["authenticationservice,private",{"_index":1053,"title":{},"body":{"injectables/CardService.html":{}}}],["authinfo",{"_index":849,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["authinitialstate",{"_index":750,"title":{},"body":{"interfaces/AuthState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authobject",{"_index":580,"title":{"classes/AuthObject.html":{}},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"coverage.html":{}}}],["authorization",{"_index":730,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["authservice",{"_index":757,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["authstate",{"_index":489,"title":{"interfaces/AuthState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/AuthState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":337,"title":{},"body":{"components/AppComponent.html":{},"modules.html":{}}}],["b[key",{"_index":1689,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["back",{"_index":616,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["background",{"_index":2251,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["badge",{"_index":914,"title":{},"body":{"components/CardComponent.html":{}}}],["basehref",{"_index":1725,"title":{},"body":{"components/IconComponent.html":{}}}],["basehref?basehref:'/')+'assets/images/icons",{"_index":1728,"title":{},"body":{"components/IconComponent.html":{}}}],["bearer",{"_index":731,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["beginning",{"_index":2450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["behaviour",{"_index":1425,"title":{},"body":{"classes/Filter.html":{}}}],["beware",{"_index":642,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{}}}],["big",{"_index":1700,"title":{},"body":{"components/IconComponent.html":{}}}],["big:boolean",{"_index":1718,"title":{},"body":{"components/IconComponent.html":{}}}],["bindactions",{"_index":1227,"title":{},"body":{"components/DetailComponent.html":{}}}],["body",{"_index":2253,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["boolean",{"_index":144,"title":{},"body":{"classes/Action.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"classes/CheckTokenResponse.html":{},"interfaces/ConfigState.html":{},"classes/Filter.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"components/LoginComponent.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["bootstrap",{"_index":405,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"dependencies.html":{},"index.html":{}}}],["bootstrap/ng",{"_index":437,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{},"dependencies.html":{}}}],["border",{"_index":915,"title":{},"body":{"components/CardComponent.html":{},"components/TypeFilterComponent.html":{}}}],["both",{"_index":1424,"title":{},"body":{"classes/Filter.html":{}}}],["bottom",{"_index":905,"title":{},"body":{"components/CardComponent.html":{}}}],["break",{"_index":1655,"title":{},"body":{"injectables/HandlebarsService.html":{},"components/IconComponent.html":{}}}],["browse",{"_index":2412,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":421,"title":{},"body":{"modules/AppModule.html":{},"components/DetailComponent.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/animations",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":423,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":419,"title":{},"body":{"modules/AppModule.html":{}}}],["btn",{"_index":1789,"title":{},"body":{"components/LoginComponent.html":{}}}],["build",{"_index":609,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["buildconfigselector",{"_index":2312,"title":{},"body":{"coverage.html":{}}}],["buildfilterselector",{"_index":2113,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["business",{"_index":761,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["button",{"_index":100,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"components/DetailComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["button.addeventlistener('click",{"_index":1311,"title":{},"body":{"components/DetailComponent.html":{}}}],["button.attributes['action",{"_index":1296,"title":{},"body":{"components/DetailComponent.html":{}}}],["button.children[0].classlist.add('fa",{"_index":1307,"title":{},"body":{"components/DetailComponent.html":{}}}],["button.children[0].classlist.add(c",{"_index":1306,"title":{},"body":{"components/DetailComponent.html":{}}}],["button.classlist.add('btn",{"_index":1300,"title":{},"body":{"components/DetailComponent.html":{}}}],["button.classlist.add(c",{"_index":1303,"title":{},"body":{"components/DetailComponent.html":{}}}],["buttons",{"_index":1295,"title":{},"body":{"components/DetailComponent.html":{}}}],["buttonstyle",{"_index":145,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["c",{"_index":343,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{}}}],["call",{"_index":612,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["called",{"_index":97,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["calling",{"_index":805,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["canactivate",{"_index":467,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["caps",{"_index":910,"title":{},"body":{"components/CardComponent.html":{}}}],["card",{"_index":161,"title":{"classes/Card.html":{}},"body":{"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"components/ArchivesComponent.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"interfaces/ConfigState.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/SelectLightCard.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["card'},{'name",{"_index":373,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["card):observable",{"_index":1623,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["card.actions",{"_index":1023,"title":{},"body":{"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/LightCardEffects.html":{}}}],["card.actions.ts",{"_index":206,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["card.actions.ts:24",{"_index":1777,"title":{},"body":{"classes/LoadLightCards.html":{}}}],["card.actions.ts:28",{"_index":1781,"title":{},"body":{"classes/LoadLightCardsSuccess.html":{}}}],["card.actions.ts:30",{"_index":1782,"title":{},"body":{"classes/LoadLightCardsSuccess.html":{}}}],["card.actions.ts:35",{"_index":1778,"title":{},"body":{"classes/LoadLightCardsExtendedData.html":{}}}],["card.actions.ts:42",{"_index":1779,"title":{},"body":{"classes/LoadLightCardsFailure.html":{}}}],["card.actions.ts:44",{"_index":1780,"title":{},"body":{"classes/LoadLightCardsFailure.html":{}}}],["card.actions.ts:50",{"_index":1886,"title":{},"body":{"classes/SelectLightCard.html":{}}}],["card.actions.ts:52",{"_index":1887,"title":{},"body":{"classes/SelectLightCard.html":{}}}],["card.actions.ts:57",{"_index":208,"title":{},"body":{"classes/AddLightCardFailure.html":{}}}],["card.actions.ts:59",{"_index":209,"title":{},"body":{"classes/AddLightCardFailure.html":{}}}],["card.actions.ts:64",{"_index":2255,"title":{},"body":{"classes/UpdatedSubscription.html":{}}}],["card.actions.ts:72",{"_index":1549,"title":{},"body":{"classes/HandleUnexpectedError-2.html":{}}}],["card.actions.ts:74",{"_index":1550,"title":{},"body":{"classes/HandleUnexpectedError-2.html":{}}}],["card.component.html",{"_index":875,"title":{},"body":{"components/CardComponent.html":{}}}],["card.component.scss",{"_index":874,"title":{},"body":{"components/CardComponent.html":{}}}],["card.effects",{"_index":532,"title":{},"body":{"interfaces/AppState.html":{}}}],["card.effects.ts",{"_index":1750,"title":{},"body":{"injectables/LightCardEffects.html":{},"coverage.html":{}}}],["card.effects.ts:20",{"_index":1752,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["card.effects.ts:30",{"_index":1763,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["card.enddate",{"_index":1506,"title":{},"body":{"injectables/FilterService.html":{}}}],["card.model",{"_index":157,"title":{},"body":{"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/Input.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/ParameterListItem.html":{},"classes/SelectLightCard.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/UpdatedSubscription.html":{}}}],["card.model.ts",{"_index":2401,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["card.publisher",{"_index":2012,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["card.publisherversion",{"_index":2013,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["card.reducer",{"_index":515,"title":{},"body":{"interfaces/AppState.html":{}}}],["card.reducer.ts",{"_index":2303,"title":{},"body":{"coverage.html":{}}}],["card.service",{"_index":1897,"title":{},"body":{"modules/ServicesModule.html":{}}}],["card.severity",{"_index":1499,"title":{},"body":{"injectables/FilterService.html":{}}}],["card.startdate",{"_index":1507,"title":{},"body":{"injectables/FilterService.html":{}}}],["card1.startdate",{"_index":983,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["card2",{"_index":982,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["card2.startdate",{"_index":984,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["card:card",{"_index":933,"title":{},"body":{"components/CardDetailsComponent.html":{},"miscellaneous/variables.html":{}}}],["card:lightcard",{"_index":1503,"title":{},"body":{"injectables/FilterService.html":{}}}],["card==null?null:card.details",{"_index":2484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cardactions",{"_index":1539,"title":{},"body":{"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"miscellaneous/typealiases.html":{}}}],["cardactiontypes",{"_index":951,"title":{},"body":{"injectables/CardEffects.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"miscellaneous/enumerations.html":{}}}],["cardactiontypes.handleunexpectederror",{"_index":1535,"title":{},"body":{"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{}}}],["cardactiontypes.loadcard",{"_index":1536,"title":{},"body":{"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{}}}],["cardactiontypes.loadcardfailure",{"_index":1537,"title":{},"body":{"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{}}}],["cardactiontypes.loadcardsuccess",{"_index":1538,"title":{},"body":{"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{}}}],["cardcomponent",{"_index":372,"title":{"components/CardComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["carddetail",{"_index":177,"title":{"classes/CardDetail.html":{}},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"components/DetailComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"coverage.html":{}}}],["carddetailscomponent",{"_index":374,"title":{"components/CardDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedRoutingModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["cardeffects",{"_index":505,"title":{"injectables/CardEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/CardEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cardfeedstate",{"_index":492,"title":{"interfaces/CardFeedState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/CardFeedState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cardinitialstate",{"_index":1093,"title":{},"body":{"interfaces/CardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cardlistcomponent",{"_index":376,"title":{"components/CardListComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["cardoperation",{"_index":1047,"title":{},"body":{"injectables/CardService.html":{}}}],["cardoperationeffects",{"_index":507,"title":{"injectables/CardOperationEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/CardOperationEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cardoperationsurl",{"_index":1026,"title":{},"body":{"injectables/CardService.html":{}}}],["cardoperationtype",{"_index":2392,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cardreducer",{"_index":516,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["cards",{"_index":966,"title":{},"body":{"interfaces/CardFeedState.html":{},"components/FeedComponent.html":{},"modules/FeedRoutingModule.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["cards'},{'name",{"_index":382,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["cards/cards.module",{"_index":1393,"title":{},"body":{"modules/FeedModule.html":{}}}],["cards/components/card",{"_index":1415,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["cards/components/detail/detail.component",{"_index":1414,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["cardselectors",{"_index":931,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["cardservice",{"_index":941,"title":{"injectables/CardService.html":{}},"body":{"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"injectables/CustomRouterEffects.html":{},"modules/ServicesModule.html":{},"coverage.html":{},"index.html":{}}}],["cardsmodule",{"_index":1094,"title":{"modules/CardsModule.html":{}},"body":{"modules/CardsModule.html":{},"modules/FeedModule.html":{},"index.html":{},"modules.html":{}}}],["cardstate",{"_index":490,"title":{"interfaces/CardState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/CardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cardstate.selected",{"_index":2482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cardstate:cardstate",{"_index":2481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cardsurl",{"_index":1027,"title":{},"body":{"injectables/CardService.html":{}}}],["care",{"_index":1434,"title":{},"body":{"classes/Filter.html":{}}}],["case",{"_index":1207,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"classes/RouterStateUrl.html":{}}}],["catch",{"_index":1078,"title":{},"body":{"injectables/CardService.html":{}}}],["catcherror",{"_index":594,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"components/FeedComponent.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["catcherror((err",{"_index":795,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/MenuEffects.html":{}}}],["catcherror((err,caught",{"_index":1758,"title":{},"body":{"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["catcherror((error",{"_index":1011,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["catcherror((error,caught",{"_index":1013,"title":{},"body":{"injectables/CardOperationEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["catcherror(err",{"_index":1368,"title":{},"body":{"components/FeedComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["catcherror(error",{"_index":826,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["catcherror(this.handleerror",{"_index":631,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["caught",{"_index":796,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/MenuEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["cell",{"_index":2242,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["center",{"_index":918,"title":{},"body":{"components/CardComponent.html":{}}}],["chain",{"_index":1453,"title":{},"body":{"classes/Filter.html":{}}}],["chainfilter",{"_index":1441,"title":{},"body":{"classes/Filter.html":{}}}],["chainfilter(card",{"_index":1451,"title":{},"body":{"classes/Filter.html":{}}}],["change",{"_index":557,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilters.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/enumerations.html":{}}}],["changes",{"_index":1329,"title":{},"body":{"components/DetailsComponent.html":{}}}],["changes['card'].currentvalue.publisher+'.'+changes['card'].currentvalue.publisherversion",{"_index":1354,"title":{},"body":{"components/DetailsComponent.html":{}}}],["character",{"_index":1975,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["charset=utf",{"_index":651,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["checauthentication",{"_index":117,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["check",{"_index":59,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["checkauthentication",{"_index":20,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["checkauthentication(token",{"_index":624,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["checkauthenticationstatus",{"_index":58,"title":{"classes/CheckAuthenticationStatus.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["checkauthenticationwhenready",{"_index":756,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["checking",{"_index":735,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["checks",{"_index":613,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["checktokenresponse",{"_index":736,"title":{"classes/CheckTokenResponse.html":{}},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"coverage.html":{}}}],["checktokenurl",{"_index":602,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["child",{"_index":1219,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["children",{"_index":1416,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["cid",{"_index":1419,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["class",{"_index":0,"title":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/I18n.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/Map.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"classes/ThirdsServiceMock.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdatedSubscription.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/I18n.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/Map.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"classes/ThirdsServiceMock.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdatedSubscription.html":{},"index.html":{}}}],["clear",{"_index":692,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["clearauthenticationinformation",{"_index":693,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["click",{"_index":98,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["clicked",{"_index":842,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"components/DetailsComponent.html":{}}}],["clicking",{"_index":838,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["client_id",{"_index":739,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["clientid",{"_index":76,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["clientidpassword",{"_index":645,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["clone",{"_index":1442,"title":{},"body":{"classes/Filter.html":{}}}],["clone():filter",{"_index":1464,"title":{},"body":{"classes/Filter.html":{}}}],["cluster_appmodule",{"_index":408,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_bootstrap",{"_index":411,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_declarations",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":410,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_archivesmodule",{"_index":572,"title":{},"body":{"modules/ArchivesModule.html":{},"index.html":{}}}],["cluster_archivesmodule_declarations",{"_index":573,"title":{},"body":{"modules/ArchivesModule.html":{},"index.html":{}}}],["cluster_archivesmodule_imports",{"_index":574,"title":{},"body":{"modules/ArchivesModule.html":{},"index.html":{}}}],["cluster_cardsmodule",{"_index":1095,"title":{},"body":{"modules/CardsModule.html":{},"index.html":{}}}],["cluster_cardsmodule_declarations",{"_index":1096,"title":{},"body":{"modules/CardsModule.html":{},"index.html":{}}}],["cluster_cardsmodule_exports",{"_index":1097,"title":{},"body":{"modules/CardsModule.html":{},"index.html":{}}}],["cluster_cardsmodule_providers",{"_index":1098,"title":{},"body":{"modules/CardsModule.html":{},"index.html":{}}}],["cluster_feedmodule",{"_index":1379,"title":{},"body":{"modules/FeedModule.html":{},"index.html":{}}}],["cluster_feedmodule_declarations",{"_index":1380,"title":{},"body":{"modules/FeedModule.html":{},"index.html":{}}}],["cluster_feedmodule_exports",{"_index":1382,"title":{},"body":{"modules/FeedModule.html":{},"index.html":{}}}],["cluster_feedmodule_imports",{"_index":1381,"title":{},"body":{"modules/FeedModule.html":{},"index.html":{}}}],["cluster_servicesmodule",{"_index":1888,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["cluster_servicesmodule_providers",{"_index":1889,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["cluster_statemodule",{"_index":1902,"title":{},"body":{"modules/StateModule.html":{},"index.html":{}}}],["cluster_statemodule_imports",{"_index":1903,"title":{},"body":{"modules/StateModule.html":{},"index.html":{}}}],["code",{"_index":348,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{}}}],["collection",{"_index":975,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["color",{"_index":2252,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["commonmodule",{"_index":427,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["complex",{"_index":1205,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{}}}],["component",{"_index":250,"title":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":368,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["components",{"_index":252,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"index.html":{}}}],["components/card",{"_index":1105,"title":{},"body":{"modules/CardsModule.html":{},"modules/FeedModule.html":{}}}],["components/card/card.component",{"_index":1104,"title":{},"body":{"modules/CardsModule.html":{}}}],["components/detail/detail.component",{"_index":1108,"title":{},"body":{"modules/CardsModule.html":{}}}],["components/details/details.component",{"_index":1107,"title":{},"body":{"modules/CardsModule.html":{}}}],["components/icon/icon.component",{"_index":443,"title":{},"body":{"modules/AppModule.html":{}}}],["components/login/login.component",{"_index":442,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["components/navbar/navbar.component",{"_index":441,"title":{},"body":{"modules/AppModule.html":{}}}],["components/no",{"_index":1387,"title":{},"body":{"modules/FeedModule.html":{}}}],["components/time",{"_index":1390,"title":{},"body":{"modules/FeedModule.html":{}}}],["computethirdcssurl",{"_index":2057,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["computethirdcssurl(publisher",{"_index":1973,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["computethirdsmenu",{"_index":1997,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{}}}],["concatmap",{"_index":1959,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["concatmap((id",{"_index":2031,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["config",{"_index":486,"title":{},"body":{"interfaces/AppState.html":{},"injectables/ConfigEffects.html":{},"interfaces/ConfigState.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["config:any",{"_index":1168,"title":{},"body":{"interfaces/ConfigState.html":{}}}],["config_load_max_retries",{"_index":1145,"title":{},"body":{"injectables/ConfigEffects.html":{},"interfaces/ConfigState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configactions",{"_index":846,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"miscellaneous/typealiases.html":{}}}],["configactiontypes",{"_index":847,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/ConfigEffects.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"miscellaneous/enumerations.html":{}}}],["configactiontypes.handleunexpectederror",{"_index":1544,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{}}}],["configactiontypes.loadconfig",{"_index":1546,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{}}}],["configactiontypes.loadconfigfailure",{"_index":1547,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{}}}],["configactiontypes.loadconfigsuccess",{"_index":1548,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{}}}],["configeffects",{"_index":537,"title":{"injectables/ConfigEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/ConfigEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configinitialstate",{"_index":1169,"title":{},"body":{"interfaces/ConfigState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configloaded",{"_index":265,"title":{},"body":{"components/AppComponent.html":{}}}],["configreducer",{"_index":518,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["configservice",{"_index":1125,"title":{"injectables/ConfigService.html":{}},"body":{"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"modules/ServicesModule.html":{},"coverage.html":{},"index.html":{}}}],["configstate",{"_index":491,"title":{"interfaces/ConfigState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/ConfigState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configstate.config",{"_index":2488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configstate.loaded",{"_index":2489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configstate.retry",{"_index":2490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configstate:configstate",{"_index":2487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configuration",{"_index":1545,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"miscellaneous/enumerations.html":{}}}],["configurl",{"_index":1156,"title":{},"body":{"injectables/ConfigService.html":{}}}],["confirm",{"_index":740,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["connection",{"_index":633,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["consequence",{"_index":783,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["consist",{"_index":960,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["console.error('error",{"_index":827,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["console.error('something",{"_index":2051,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["console.error(`error",{"_index":1074,"title":{},"body":{"injectables/CardService.html":{}}}],["console.error(`i18",{"_index":1759,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["console.error(err",{"_index":797,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["console.error(error",{"_index":669,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["console.log(`this",{"_index":1275,"title":{},"body":{"components/DetailComponent.html":{}}}],["const",{"_index":462,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckTokenResponse.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"modules/FeedRoutingModule.html":{},"injectables/FilterService.html":{},"injectables/HandlebarsService.html":{},"components/LoginComponent.html":{},"interfaces/MenuState.html":{},"classes/RouterStateUrl.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":39,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{}}}],["constructor(authenticationservice",{"_index":2186,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["constructor(element",{"_index":1232,"title":{},"body":{"components/DetailComponent.html":{}}}],["constructor(funktion",{"_index":1443,"title":{},"body":{"classes/Filter.html":{}}}],["constructor(httpclient",{"_index":856,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"injectables/ConfigService.html":{},"injectables/ThirdsService.html":{}}}],["constructor(id",{"_index":1944,"title":{},"body":{"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["constructor(identifier",{"_index":1876,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["constructor(key",{"_index":1692,"title":{},"body":{"classes/I18n.html":{}}}],["constructor(label",{"_index":1874,"title":{},"body":{"classes/ParameterListItem.html":{}}}],["constructor(name",{"_index":1929,"title":{},"body":{"classes/Third.html":{}}}],["constructor(payload",{"_index":40,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitFilters.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{}}}],["constructor(platformlocation",{"_index":1702,"title":{},"body":{"components/IconComponent.html":{}}}],["constructor(platformlocation:platformlocation",{"_index":1724,"title":{},"body":{"components/IconComponent.html":{}}}],["constructor(private",{"_index":315,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"interceptors/TokenInjector.html":{},"components/TypeFilterComponent.html":{}}}],["constructor(public",{"_index":73,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitFilters.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdatedSubscription.html":{}}}],["constructor(router",{"_index":880,"title":{},"body":{"components/CardComponent.html":{}}}],["constructor(store",{"_index":273,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["constructor(thirdsservice",{"_index":1950,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["constructor(time",{"_index":1584,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["constructor(titleposition",{"_index":921,"title":{},"body":{"classes/CardDetail.html":{}}}],["constructor(type",{"_index":139,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{}}}],["constructor(uid",{"_index":870,"title":{},"body":{"classes/Card.html":{}}}],["constructor(url",{"_index":1884,"title":{},"body":{"classes/RouterStateUrl.html":{}}}],["consume",{"_index":127,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["containing",{"_index":29,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["contains",{"_index":619,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["content",{"_index":621,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["contentchildren",{"_index":1337,"title":{},"body":{"components/DetailsComponent.html":{}}}],["contentchildren(detailcomponent",{"_index":1334,"title":{},"body":{"components/DetailsComponent.html":{}}}],["contentstyle",{"_index":146,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["context",{"_index":2335,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["convert",{"_index":682,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["convert(payload",{"_index":717,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["copy",{"_index":355,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{}}}],["copyright",{"_index":342,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{}}}],["core",{"_index":1406,"title":{},"body":{"modules/FeedModule.html":{},"dependencies.html":{}}}],["core/services/interceptors.services/tokeninjector",{"_index":1090,"title":{},"body":{"injectables/CardService.html":{}}}],["corresponding",{"_index":733,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["coverage",{"_index":2256,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":27,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["createentityadapter",{"_index":978,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["createfeatureselector('authentication",{"_index":2476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createfeatureselector('router",{"_index":2497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createformgroup",{"_index":2103,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["createselector",{"_index":2473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectauthenticationstate",{"_index":2477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectcardstate",{"_index":2480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectcardstateselection",{"_index":2483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectconfig",{"_index":2486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectconfigretry",{"_index":2491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectfeed,selectactivefiltersarray",{"_index":2467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectfilter",{"_index":2460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectlightcardsstate",{"_index":2465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectmenustate",{"_index":2499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectrouterstate",{"_index":2494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["css",{"_index":1270,"title":{},"body":{"components/DetailComponent.html":{}}}],["csses",{"_index":1932,"title":{},"body":{"classes/Third.html":{}}}],["csses?:string",{"_index":1939,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["cssurl",{"_index":1264,"title":{},"body":{"components/DetailComponent.html":{}}}],["current",{"_index":85,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["currently",{"_index":333,"title":{},"body":{"components/AppComponent.html":{},"interfaces/CardFeedState.html":{}}}],["currentpath",{"_index":266,"title":{},"body":{"components/AppComponent.html":{},"components/CardComponent.html":{},"components/NavbarComponent.html":{}}}],["currenttime",{"_index":2168,"title":{},"body":{"injectables/TimeService.html":{}}}],["custom",{"_index":1922,"title":{},"body":{"modules/StateModule.html":{}}}],["customroutereffects",{"_index":524,"title":{"injectables/CustomRouterEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/CustomRouterEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["customrouterstateserializer",{"_index":1185,"title":{"classes/CustomRouterStateSerializer.html":{}},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{},"coverage.html":{}}}],["dark",{"_index":1310,"title":{},"body":{"components/DetailComponent.html":{},"components/IconComponent.html":{},"components/TypeFilterComponent.html":{}}}],["dark:boolean",{"_index":1719,"title":{},"body":{"components/IconComponent.html":{}}}],["data",{"_index":175,"title":{},"body":{"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/Input.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/ParameterListItem.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["date",{"_index":79,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["date().valueof",{"_index":1062,"title":{},"body":{"injectables/CardService.html":{}}}],["date(+localstorage.getitem(localstorageauthcontent.expirationdate",{"_index":714,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["date(0",{"_index":752,"title":{},"body":{"interfaces/AuthState.html":{},"miscellaneous/variables.html":{}}}],["date(expirationdate",{"_index":723,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["date(minus2hour.valueof()+48*60*60*1000",{"_index":1065,"title":{},"body":{"injectables/CardService.html":{}}}],["date(new",{"_index":1061,"title":{},"body":{"injectables/CardService.html":{}}}],["date(value",{"_index":1670,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["date(value).toisostring",{"_index":2179,"title":{},"body":{"injectables/TimeService.html":{}}}],["date(value).toisostring().slice(0",{"_index":2180,"title":{},"body":{"injectables/TimeService.html":{}}}],["date.now",{"_index":718,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"injectables/TimeService.html":{}}}],["date.parse(value",{"_index":2178,"title":{},"body":{"injectables/TimeService.html":{}}}],["deactivate",{"_index":1349,"title":{},"body":{"components/DetailsComponent.html":{}}}],["debounce",{"_index":2115,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["declarations",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"index.html":{}}}],["decorators",{"_index":775,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailsComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["deep",{"_index":2249,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["default",{"_index":49,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/variables.html":{}}}],["defaultfilters",{"_index":1480,"title":{},"body":{"injectables/FilterService.html":{}}}],["defined",{"_index":42,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{}}}],["defines",{"_index":643,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["delay",{"_index":1139,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["delay(this.retrydelay",{"_index":1154,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["delete",{"_index":2404,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["denialreason",{"_index":122,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"interfaces/AuthState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/variables.html":{}}}],["dentifier",{"_index":708,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["dependencies",{"_index":403,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"dependencies.html":{},"index.html":{}}}],["deps",{"_index":2458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deps:[thirdsservice",{"_index":1117,"title":{},"body":{"modules/CardsModule.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"interfaces/CardFeedState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["deserializable",{"_index":620,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["desired",{"_index":1925,"title":{},"body":{"modules/StateModule.html":{}}}],["detail",{"_index":901,"title":{},"body":{"components/CardComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{}}}],["detail'},{'name",{"_index":379,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["detail.active",{"_index":1352,"title":{},"body":{"components/DetailsComponent.html":{}}}],["detail.component.html",{"_index":1223,"title":{},"body":{"components/DetailComponent.html":{}}}],["detail/detail.component",{"_index":1338,"title":{},"body":{"components/DetailsComponent.html":{}}}],["detailcomponent",{"_index":378,"title":{"components/DetailComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedRoutingModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["details",{"_index":176,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"components/DetailsComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["details'},{'name",{"_index":375,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["details.component",{"_index":1106,"title":{},"body":{"modules/CardsModule.html":{},"modules/FeedRoutingModule.html":{}}}],["details.component.html",{"_index":926,"title":{},"body":{"components/CardDetailsComponent.html":{},"components/DetailsComponent.html":{}}}],["details.component.ts",{"_index":925,"title":{},"body":{"components/CardDetailsComponent.html":{},"coverage.html":{}}}],["details.component.ts:20",{"_index":929,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["details.component.ts:21",{"_index":927,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["details.component.ts:27",{"_index":928,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["details/:did",{"_index":1420,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["details/card",{"_index":924,"title":{},"body":{"components/CardDetailsComponent.html":{},"modules/CardsModule.html":{},"modules/FeedRoutingModule.html":{},"coverage.html":{}}}],["details:carddetail",{"_index":934,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["detailscomponent",{"_index":380,"title":{"components/DetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["devtools",{"_index":1909,"title":{},"body":{"modules/StateModule.html":{},"dependencies.html":{}}}],["directive",{"_index":366,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["directives",{"_index":398,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["dispatch",{"_index":81,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["display",{"_index":808,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"components/TypeFilterComponent.html":{}}}],["distinctuntilchanged",{"_index":2116,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["distinctuntilchanged((forma",{"_index":2141,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["distributed",{"_index":357,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{}}}],["document.getelementbyid('${svguid}').addeventlistener('load",{"_index":1664,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["documentation",{"_index":2257,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":254,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["domsanitizer",{"_index":1237,"title":{},"body":{"components/DetailComponent.html":{}}}],["done",{"_index":285,"title":{},"body":{"components/AppComponent.html":{}}}],["down",{"_index":181,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["during",{"_index":972,"title":{},"body":{"interfaces/CardFeedState.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["dynamic",{"_index":2363,"title":{},"body":{"dependencies.html":{}}}],["effect",{"_index":776,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["effects",{"_index":957,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/LightCardEffects.html":{}}}],["effectsmodule",{"_index":1907,"title":{},"body":{"modules/StateModule.html":{}}}],["effectsmodule.forroot(appeffects",{"_index":1916,"title":{},"body":{"modules/StateModule.html":{}}}],["element",{"_index":365,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["elementref",{"_index":1233,"title":{},"body":{"components/DetailComponent.html":{}}}],["emit",{"_index":781,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["emits",{"_index":835,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["emitted",{"_index":14,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["emittedby",{"_index":804,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["emmited",{"_index":114,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["empty",{"_index":1956,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["enabletracing",{"_index":480,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["encoding",{"_index":1976,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["end",{"_index":2151,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["enddate",{"_index":169,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["entire",{"_index":1204,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["entities",{"_index":236,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["entityadapter",{"_index":979,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["entitystate",{"_index":961,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["entries",{"_index":1943,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["enum",{"_index":56,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/FilterService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdatedSubscription.html":{}}}],["enumerations",{"_index":2388,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env/environment",{"_index":461,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigService.html":{},"modules/StateModule.html":{}}}],["environment",{"_index":460,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigService.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["environment.production",{"_index":481,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"modules/StateModule.html":{},"miscellaneous/variables.html":{}}}],["environment.urls.auth}/check_token",{"_index":603,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["environment.urls.auth}/token",{"_index":606,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["environment.urls.cards}/cards",{"_index":1058,"title":{},"body":{"injectables/CardService.html":{}}}],["environment.urls.cards}/cardsubscription?clientid=${clientid",{"_index":1056,"title":{},"body":{"injectables/CardService.html":{}}}],["environment.urls.config",{"_index":1164,"title":{},"body":{"injectables/ConfigService.html":{}}}],["environment.urls.thirds",{"_index":1967,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["environments/environment",{"_index":1955,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["err",{"_index":799,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["error",{"_index":231,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"interfaces/ConfigState.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"interfaces/MenuState.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["error(`unhandled",{"_index":1010,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["error.tostring",{"_index":1077,"title":{},"body":{"injectables/CardService.html":{}}}],["error:null",{"_index":1828,"title":{},"body":{"interfaces/MenuState.html":{},"miscellaneous/variables.html":{}}}],["error:string",{"_index":1826,"title":{},"body":{"interfaces/MenuState.html":{}}}],["errormsg",{"_index":770,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["es",{"_index":1076,"title":{},"body":{"injectables/CardService.html":{}}}],["evaluate",{"_index":1431,"title":{},"body":{"classes/Filter.html":{}}}],["event",{"_index":1050,"title":{},"body":{"injectables/CardService.html":{},"components/DetailComponent.html":{},"dependencies.html":{}}}],["eventsource",{"_index":1036,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsource.close",{"_index":1082,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsource.closed",{"_index":1081,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsource.onerror",{"_index":1073,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsource.onmessage",{"_index":1070,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsource.readystate",{"_index":1080,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsourcepolyfill",{"_index":1034,"title":{},"body":{"injectables/CardService.html":{}}}],["exceeded",{"_index":793,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["executetemplate",{"_index":1568,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["executetemplate(templatename",{"_index":1587,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["exists",{"_index":86,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["exp",{"_index":738,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["expandedmenu",{"_index":1832,"title":{},"body":{"components/NavbarComponent.html":{}}}],["expandedmenu:boolean",{"_index":1851,"title":{},"body":{"components/NavbarComponent.html":{}}}],["expiration",{"_index":676,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["expirationdate",{"_index":78,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["expirationdate.gettime",{"_index":2449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expires_in",{"_index":585,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["export",{"_index":55,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{}}}],["exports",{"_index":407,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"index.html":{}}}],["extended",{"_index":218,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["extends",{"_index":977,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["external",{"_index":186,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["extract",{"_index":671,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["extractidentificationinformation",{"_index":709,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["extractparams",{"_index":1188,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{}}}],["extractparams(state",{"_index":1190,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["extracttoken",{"_index":673,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["f5",{"_index":341,"title":{},"body":{"components/AppComponent.html":{}}}],["fa",{"_index":1308,"title":{},"body":{"components/DetailComponent.html":{}}}],["faclock",{"_index":1407,"title":{},"body":{"modules/FeedModule.html":{}}}],["fail",{"_index":220,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["failed",{"_index":1760,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["false",{"_index":189,"title":{},"body":{"classes/Action.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckTokenResponse.html":{},"interfaces/ConfigState.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"classes/Input.html":{},"interfaces/MenuState.html":{},"classes/ParameterListItem.html":{},"miscellaneous/variables.html":{}}}],["fctargs[fctargs.length",{"_index":1663,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["feed",{"_index":464,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"interfaces/CardFeedState.html":{},"modules/FeedModule.html":{},"classes/Filter.html":{},"classes/InitFilters.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["feed.component",{"_index":1386,"title":{},"body":{"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{}}}],["feed.component.html",{"_index":1358,"title":{},"body":{"components/FeedComponent.html":{}}}],["feed.component.scss",{"_index":1357,"title":{},"body":{"components/FeedComponent.html":{}}}],["feed.filter(card=>filter.chainfilter(card,filters",{"_index":2471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feed.filters.time.end.label",{"_index":2155,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["feed.filters.time.start.label",{"_index":2154,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["feed.filters.time.title",{"_index":2156,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["feed.filters.type.action.label",{"_index":2238,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["feed.filters.type.alarm.label",{"_index":2237,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["feed.filters.type.notification.label",{"_index":2240,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["feed.filters.type.question.label",{"_index":2239,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["feed.filters.type.title",{"_index":2241,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["feed:lightcard[],filters:filter",{"_index":2468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feedactions",{"_index":564,"title":{},"body":{"classes/ApplyFilter.html":{},"injectables/FeedFiltersEffects.html":{},"classes/InitFilters.html":{},"miscellaneous/typealiases.html":{}}}],["feedactiontypes",{"_index":556,"title":{},"body":{"classes/ApplyFilter.html":{},"injectables/CardOperationEffects.html":{},"classes/InitFilters.html":{},"miscellaneous/enumerations.html":{}}}],["feedactiontypes.applyfilter",{"_index":551,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilters.html":{}}}],["feedactiontypes.initfilter",{"_index":562,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilters.html":{}}}],["feedcomponent",{"_index":381,"title":{"components/FeedComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["feedfilterseffects",{"_index":533,"title":{"injectables/FeedFiltersEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/FeedFiltersEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["feedinitialstate",{"_index":987,"title":{},"body":{"interfaces/CardFeedState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["feedmodule",{"_index":1378,"title":{"modules/FeedModule.html":{}},"body":{"modules/FeedModule.html":{},"index.html":{},"modules.html":{}}}],["feedroutingmodule",{"_index":1383,"title":{"modules/FeedRoutingModule.html":{}},"body":{"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"index.html":{},"modules.html":{}}}],["feedselectors",{"_index":1363,"title":{},"body":{"components/FeedComponent.html":{}}}],["fetchcardoperation",{"_index":1028,"title":{},"body":{"injectables/CardService.html":{}}}],["fetchcardoperation(eventsource",{"_index":1033,"title":{},"body":{"injectables/CardService.html":{}}}],["fetchconfiguration",{"_index":1157,"title":{},"body":{"injectables/ConfigService.html":{}}}],["fetchhbstemplate",{"_index":2058,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["fetchhbstemplate(publisher",{"_index":1968,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["fetchi18njson",{"_index":2059,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["fetchi18njson(publisher",{"_index":1982,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{}}}],["fill",{"_index":1745,"title":{},"body":{"components/IconComponent.html":{}}}],["filter",{"_index":397,"title":{"classes/Filter.html":{}},"body":{"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["filter$(filter",{"_index":2215,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter'},{'name",{"_index":393,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["filter(([action",{"_index":1153,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["filter((action",{"_index":1175,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["filter((af:applyfilter)=>af.payload.name",{"_index":1017,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["filter((t:third)=>!(!t.menuentries",{"_index":2000,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["filter.component",{"_index":1397,"title":{},"body":{"modules/FeedModule.html":{}}}],["filter.component.html",{"_index":2099,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["filter.component.scss",{"_index":2206,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter.component.ts",{"_index":2097,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["filter.component.ts:26",{"_index":2110,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["filter.component.ts:27",{"_index":2109,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["filter.component.ts:28",{"_index":2213,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter.component.ts:29",{"_index":2112,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["filter.component.ts:30",{"_index":2212,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter.component.ts:32",{"_index":2214,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter.component.ts:33",{"_index":2105,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["filter.component.ts:34",{"_index":2208,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter.component.ts:40",{"_index":2107,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["filter.component.ts:44",{"_index":2209,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter.component.ts:45",{"_index":2108,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["filter.component.ts:53",{"_index":2210,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter.component.ts:59",{"_index":2211,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter.component.ts:90",{"_index":2106,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["filter.model",{"_index":553,"title":{},"body":{"classes/ApplyFilter.html":{},"interfaces/CardFeedState.html":{},"injectables/FilterService.html":{},"classes/InitFilters.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["filter.model.ts",{"_index":1422,"title":{},"body":{"classes/Filter.html":{},"coverage.html":{}}}],["filter.model.ts:22",{"_index":1445,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:26",{"_index":1446,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:27",{"_index":1447,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:31",{"_index":1461,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:42",{"_index":1449,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:55",{"_index":1452,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:66",{"_index":1458,"title":{},"body":{"classes/Filter.html":{}}}],["filter/time",{"_index":1399,"title":{},"body":{"modules/FeedModule.html":{},"components/TimeFilterComponent.html":{},"coverage.html":{}}}],["filter/type",{"_index":1396,"title":{},"body":{"modules/FeedModule.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["filtered",{"_index":1457,"title":{},"body":{"classes/Filter.html":{}}}],["filtering",{"_index":30,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/Filter.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["filters",{"_index":974,"title":{},"body":{"interfaces/CardFeedState.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"miscellaneous/variables.html":{}}}],["filters'},{'name",{"_index":384,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["filters.component.html",{"_index":1519,"title":{},"body":{"components/FiltersComponent.html":{}}}],["filters.effects",{"_index":535,"title":{},"body":{"interfaces/AppState.html":{}}}],["filters.effects.ts",{"_index":1372,"title":{},"body":{"injectables/FeedFiltersEffects.html":{},"coverage.html":{}}}],["filters.effects.ts:19",{"_index":1375,"title":{},"body":{"injectables/FeedFiltersEffects.html":{}}}],["filters.effects.ts:28",{"_index":1377,"title":{},"body":{"injectables/FeedFiltersEffects.html":{}}}],["filters.length>0",{"_index":2470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filters.set(filtertype.recipient_filter",{"_index":1510,"title":{},"body":{"injectables/FilterService.html":{}}}],["filters.set(filtertype.time_filter",{"_index":1512,"title":{},"body":{"injectables/FilterService.html":{}}}],["filters.set(filtertype.type_filter",{"_index":1508,"title":{},"body":{"injectables/FilterService.html":{}}}],["filters.values",{"_index":2462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filterscomponent",{"_index":383,"title":{"components/FiltersComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["filterservice",{"_index":1374,"title":{"injectables/FilterService.html":{}},"body":{"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"modules/ServicesModule.html":{},"coverage.html":{},"index.html":{}}}],["filtertype",{"_index":554,"title":{},"body":{"classes/ApplyFilter.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/FilterService.html":{},"classes/InitFilters.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/enumerations.html":{}}}],["filtertype.time_filter",{"_index":1018,"title":{},"body":{"injectables/CardOperationEffects.html":{},"components/TimeFilterComponent.html":{}}}],["filtertype.type_filter",{"_index":2232,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["finalresult",{"_index":688,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["first",{"_index":80,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"components/DetailsComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"components/TimeFilterComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{}}}],["following",{"_index":16,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["font",{"_index":907,"title":{},"body":{"components/CardComponent.html":{}}}],["fontawesome",{"_index":1402,"title":{},"body":{"modules/FeedModule.html":{},"dependencies.html":{}}}],["fontawesomemodule",{"_index":1400,"title":{},"body":{"modules/FeedModule.html":{}}}],["for(let",{"_index":2461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forcepositiveandoneminimum",{"_index":2339,"title":{},"body":{"coverage.html":{}}}],["form",{"_index":102,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{}}}],["form.action",{"_index":2234,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["form.alarm",{"_index":2233,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["form.end",{"_index":2148,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["form.notification",{"_index":2236,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["form.question",{"_index":2235,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["form.start",{"_index":2147,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["formatter",{"_index":1674,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["formatter.format(value",{"_index":1677,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["formb",{"_index":2142,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["formcontrol",{"_index":1801,"title":{},"body":{"components/LoginComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["formdata",{"_index":626,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["formgroup",{"_index":1800,"title":{},"body":{"components/LoginComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["forms",{"_index":1214,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["formsmodule",{"_index":431,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{}}}],["forroot",{"_index":1101,"title":{},"body":{"modules/CardsModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["fortawesome/angular",{"_index":1401,"title":{},"body":{"modules/FeedModule.html":{},"dependencies.html":{}}}],["fortawesome/fontawesome",{"_index":1404,"title":{},"body":{"modules/FeedModule.html":{},"dependencies.html":{}}}],["fortawesome/free",{"_index":1408,"title":{},"body":{"modules/FeedModule.html":{},"dependencies.html":{}}}],["france.com",{"_index":347,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{}}}],["freeze",{"_index":504,"title":{},"body":{"interfaces/AppState.html":{}}}],["from(_.difference(work",{"_index":2029,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["from(cards).pipe",{"_index":2010,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["from(menus).pipe",{"_index":2016,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["fromauthentication.getexpirationtime",{"_index":2478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fromrouter",{"_index":495,"title":{},"body":{"interfaces/AppState.html":{}}}],["fromrouter.routerreducer",{"_index":541,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["full",{"_index":1418,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["function",{"_index":24,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"interfaces/CardFeedState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{},"injectables/HandlebarsService.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{}}}],["function(a,b",{"_index":1685,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["function(lvalue",{"_index":1651,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["funktion",{"_index":1428,"title":{},"body":{"classes/Filter.html":{}}}],["futur",{"_index":741,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["future",{"_index":747,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["g",{"_index":1682,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["gather",{"_index":1423,"title":{},"body":{"classes/Filter.html":{}}}],["generaterandomarray",{"_index":2340,"title":{},"body":{"coverage.html":{}}}],["generaterandompositiveintegerwithinrangewithoneasminimum",{"_index":2341,"title":{},"body":{"coverage.html":{}}}],["generating",{"_index":634,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["gently",{"_index":475,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["getcardoperation",{"_index":1029,"title":{},"body":{"injectables/CardService.html":{}}}],["getcurrentguid",{"_index":1523,"title":{},"body":{"classes/GuidService.html":{}}}],["getcurrentguidstring",{"_index":1524,"title":{},"body":{"classes/GuidService.html":{}}}],["getcurrentguidstring():string",{"_index":1530,"title":{},"body":{"classes/GuidService.html":{}}}],["getdefaultfilters",{"_index":1486,"title":{},"body":{"injectables/FilterService.html":{}}}],["getexpirationdate",{"_index":2294,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getexpirationdate(state",{"_index":2447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getexpirationtime",{"_index":2295,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getfilter",{"_index":2111,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["getfixedlengthalphanumericvalue",{"_index":2342,"title":{},"body":{"coverage.html":{}}}],["gethtmlcontent",{"_index":1254,"title":{},"body":{"components/DetailComponent.html":{}}}],["geti18nprefix",{"_index":887,"title":{},"body":{"components/CardComponent.html":{},"components/DetailsComponent.html":{}}}],["getidentifier",{"_index":2296,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getitem",{"_index":712,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["getonerandomaddcardoperation",{"_index":2343,"title":{},"body":{"coverage.html":{}}}],["getonerandomcard",{"_index":2344,"title":{},"body":{"coverage.html":{}}}],["getonerandomcarddetail",{"_index":2345,"title":{},"body":{"coverage.html":{}}}],["getonerandomcardwithrandomdetails",{"_index":2346,"title":{},"body":{"coverage.html":{}}}],["getonerandomligthcard",{"_index":2347,"title":{},"body":{"coverage.html":{}}}],["getpositiverandomnumberwithinrange",{"_index":2348,"title":{},"body":{"coverage.html":{}}}],["getrandomalphanumericvalue",{"_index":2349,"title":{},"body":{"coverage.html":{}}}],["getrandomi18ndata",{"_index":2350,"title":{},"body":{"coverage.html":{}}}],["getrandomindex",{"_index":2351,"title":{},"body":{"coverage.html":{}}}],["getrandommenu",{"_index":2352,"title":{},"body":{"coverage.html":{}}}],["getrandomthird",{"_index":2353,"title":{},"body":{"coverage.html":{}}}],["getroutepe",{"_index":267,"title":{},"body":{"components/AppComponent.html":{}}}],["getsecurityheader",{"_index":729,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["getselectedid",{"_index":2300,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getseveralrandomlightcards",{"_index":2354,"title":{},"body":{"coverage.html":{}}}],["getthirdmenus",{"_index":1845,"title":{},"body":{"components/NavbarComponent.html":{}}}],["gettoken",{"_index":2297,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gettoken(state",{"_index":2448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gettranslation",{"_index":1949,"title":{},"body":{"classes/ThirdsI18nLoader.html":{}}}],["gettranslation(lang",{"_index":1952,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["given",{"_index":632,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["gives",{"_index":615,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["goes",{"_index":2163,"title":{},"body":{"components/TimeLineComponent.html":{}}}],["graph",{"_index":2413,"title":{},"body":{"modules.html":{}}}],["guard.service",{"_index":1896,"title":{},"body":{"modules/ServicesModule.html":{}}}],["guid",{"_index":53,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"dependencies.html":{}}}],["guid.create",{"_index":1529,"title":{},"body":{"classes/GuidService.html":{}}}],["guid.parse(localstorage.getitem(localstorageauthcontent.clientid",{"_index":711,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["guidservice",{"_index":595,"title":{"classes/GuidService.html":{}},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"classes/GuidService.html":{},"modules/ServicesModule.html":{},"coverage.html":{}}}],["handle",{"_index":229,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["handlebars",{"_index":1235,"title":{},"body":{"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{},"dependencies.html":{}}}],["handlebars.registerhelper(\"math",{"_index":1650,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper(\"preservespace",{"_index":1680,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('action",{"_index":1666,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('arrayatindex",{"_index":1656,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('arrayatindexlength",{"_index":1645,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('bool",{"_index":1639,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('dateformat",{"_index":1667,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('now",{"_index":1678,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('numberformat",{"_index":1673,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('slice",{"_index":1658,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('sort",{"_index":1662,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('split",{"_index":1647,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars/dist/handlebars.js",{"_index":1605,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebarsservice",{"_index":1099,"title":{"injectables/HandlebarsService.html":{}},"body":{"modules/CardsModule.html":{},"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{},"coverage.html":{},"index.html":{}}}],["handleerror",{"_index":854,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["handleerror(error",{"_index":668,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["handleheaders",{"_index":1030,"title":{},"body":{"injectables/CardService.html":{}}}],["handleloginattempt",{"_index":22,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["handleloginattempt(payload",{"_index":766,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["handlemaxagainstmin",{"_index":2355,"title":{},"body":{"coverage.html":{}}}],["handlerejectedlogin",{"_index":116,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["handlerejectedlogin(errormsg",{"_index":768,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["handleunexpectederror",{"_index":228,"title":{"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{}},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["handleunexpectederror({error",{"_index":1014,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["handling",{"_index":1314,"title":{},"body":{"components/DetailComponent.html":{}}}],["hashlocationstrategy",{"_index":428,"title":{},"body":{"modules/AppModule.html":{}}}],["header",{"_index":728,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"components/TypeFilterComponent.html":{}}}],["headers",{"_index":646,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["headers}).pipe",{"_index":655,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["heartbeattimeout",{"_index":1039,"title":{},"body":{"injectables/CardService.html":{}}}],["height",{"_index":2247,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["helper",{"_index":715,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["here",{"_index":2164,"title":{},"body":{"components/TimeLineComponent.html":{}}}],["hidden",{"_index":143,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["hide",{"_index":1792,"title":{},"body":{"components/LoginComponent.html":{}}}],["href",{"_index":1268,"title":{},"body":{"components/DetailComponent.html":{}}}],["hrefsofcsslink",{"_index":1225,"title":{},"body":{"components/DetailComponent.html":{}}}],["html",{"_index":364,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["htmlbuttonelement",{"_index":1242,"title":{},"body":{"components/DetailComponent.html":{}}}],["htmlcontent",{"_index":1231,"title":{},"body":{"components/DetailComponent.html":{}}}],["http",{"_index":727,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["http://localhost:2002/auth",{"_index":2442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:2002/cards",{"_index":2443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:2002/config",{"_index":2445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:2002/thirds",{"_index":2444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://mozilla.org/mpl/2.0",{"_index":359,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{}}}],["http://www.rte",{"_index":346,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{}}}],["http_interceptors",{"_index":1894,"title":{},"body":{"modules/ServicesModule.html":{}}}],["httpcall",{"_index":1984,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["httpclient",{"_index":591,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["httpclient,private",{"_index":611,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["httpclient:httpclient",{"_index":1052,"title":{},"body":{"injectables/CardService.html":{}}}],["httpclientmodule",{"_index":425,"title":{},"body":{"modules/AppModule.html":{}}}],["httpevent",{"_index":2194,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["httphandler",{"_index":2192,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["httpheaders",{"_index":592,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["httpheaders({'content",{"_index":647,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["httpinterceptor",{"_index":2195,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["httploaderfactory",{"_index":2329,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpparams",{"_index":1161,"title":{},"body":{"injectables/ConfigService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["httpparams().set('version',version",{"_index":1980,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["httprequest",{"_index":2189,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["https://github.com/briebug/ngrx",{"_index":1213,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["httpurlencodingcodec",{"_index":1162,"title":{},"body":{"injectables/ConfigService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["i18n",{"_index":142,"title":{"classes/I18n.html":{}},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/I18n.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"coverage.html":{}}}],["i18nlabelkey",{"_index":1930,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["i18npath",{"_index":2330,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["i18nprefix",{"_index":879,"title":{},"body":{"components/CardComponent.html":{},"components/DetailsComponent.html":{}}}],["i18nprefix+detailc.detail.title.key",{"_index":1355,"title":{},"body":{"components/DetailsComponent.html":{}}}],["i18nprefix+lightcard.summary.key",{"_index":900,"title":{},"body":{"components/CardComponent.html":{}}}],["i18nprefix+lightcard.title.key",{"_index":897,"title":{},"body":{"components/CardComponent.html":{}}}],["icon",{"_index":1695,"title":{},"body":{"components/IconComponent.html":{}}}],["icon'},{'name",{"_index":386,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["icon.component.html",{"_index":1697,"title":{},"body":{"components/IconComponent.html":{}}}],["icon.component.scss",{"_index":1696,"title":{},"body":{"components/IconComponent.html":{}}}],["icon:string",{"_index":1715,"title":{},"body":{"components/IconComponent.html":{}}}],["iconcomponent",{"_index":385,"title":{"components/IconComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["iconpath",{"_index":1698,"title":{},"body":{"components/IconComponent.html":{}}}],["iconpath:string",{"_index":1723,"title":{},"body":{"components/IconComponent.html":{}}}],["icons",{"_index":1410,"title":{},"body":{"modules/FeedModule.html":{},"dependencies.html":{}}}],["id",{"_index":163,"title":{},"body":{"classes/Action.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"interfaces/CardFeedState.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"components/DetailComponent.html":{},"classes/HandleUnexpectedError.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/ParameterListItem.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["id'].nodevalue",{"_index":1297,"title":{},"body":{"components/DetailComponent.html":{}}}],["id.split",{"_index":2033,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["id:string",{"_index":1942,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["identifier",{"_index":74,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["identify",{"_index":659,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["ids",{"_index":2023,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["ids.push(id",{"_index":2022,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["if(!!next.status.end",{"_index":2132,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["if(!!next.status.start",{"_index":2127,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["if(a[key]b[key",{"_index":1690,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["if(changes['card'].currentvalue",{"_index":1353,"title":{},"body":{"components/DetailsComponent.html":{}}}],["if(filters",{"_index":2469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["if(template",{"_index":1634,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["if(this.active",{"_index":1469,"title":{},"body":{"classes/Filter.html":{}}}],["if(this.applyfilter(card",{"_index":1471,"title":{},"body":{"classes/Filter.html":{}}}],["if(this.dark||this.light",{"_index":1740,"title":{},"body":{"components/IconComponent.html":{}}}],["if(this.expandedmenu[index",{"_index":1860,"title":{},"body":{"components/NavbarComponent.html":{}}}],["if(typeof",{"_index":1686,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["if(url",{"_index":895,"title":{},"body":{"components/CardComponent.html":{},"components/NavbarComponent.html":{}}}],["if(v.active",{"_index":2463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ignore",{"_index":88,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"injectables/FeedFiltersEffects.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdatedSubscription.html":{}}}],["implementation",{"_index":1436,"title":{},"body":{"classes/Filter.html":{}}}],["implemented",{"_index":1315,"title":{},"body":{"components/DetailComponent.html":{}}}],["implementing",{"_index":760,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["implements",{"_index":33,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{}}}],["import",{"_index":51,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{}}}],["imports",{"_index":418,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["include",{"_index":1924,"title":{},"body":{"modules/StateModule.html":{}}}],["index",{"_index":34,"title":{"index.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":1810,"title":{},"body":{"classes/Map.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{}}}],["information",{"_index":13,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["informatios",{"_index":696,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["inheritance",{"_index":1438,"title":{},"body":{"classes/Filter.html":{}}}],["init",{"_index":278,"title":{},"body":{"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"classes/InitFilters.html":{},"miscellaneous/enumerations.html":{}}}],["initfilter",{"_index":558,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilters.html":{},"miscellaneous/enumerations.html":{}}}],["initfilters",{"_index":561,"title":{"classes/InitFilters.html":{}},"body":{"classes/ApplyFilter.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"classes/InitFilters.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["initfilters({filters:this.service.defaultfilters",{"_index":1376,"title":{},"body":{"injectables/FeedFiltersEffects.html":{}}}],["initializehandlebarstemplates",{"_index":1228,"title":{},"body":{"components/DetailComponent.html":{}}}],["initializehrefsofcsslink",{"_index":1229,"title":{},"body":{"components/DetailComponent.html":{}}}],["initialstate",{"_index":545,"title":{},"body":{"interfaces/AppState.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["initrecipientfilter",{"_index":1477,"title":{},"body":{"injectables/FilterService.html":{}}}],["inittimefilter",{"_index":1478,"title":{},"body":{"injectables/FilterService.html":{}}}],["inittypefilter",{"_index":1479,"title":{},"body":{"injectables/FilterService.html":{}}}],["inject",{"_index":1138,"title":{},"body":{"injectables/ConfigEffects.html":{},"classes/GuidService.html":{}}}],["inject('configretrydelay",{"_index":1146,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["injectable",{"_index":590,"title":{"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"injectables/ThirdsService.html":{},"injectables/TimeService.html":{}},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"coverage.html":{}}}],["injectables",{"_index":753,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"injectables/ThirdsService.html":{},"injectables/TimeService.html":{},"index.html":{}}}],["injector",{"_index":1160,"title":{},"body":{"injectables/ConfigService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["input",{"_index":148,"title":{"classes/Input.html":{}},"body":{"classes/Action.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/IconComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{}}}],["input[0",{"_index":2034,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["input[1",{"_index":2035,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["inputs",{"_index":147,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/IconComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["inputtype",{"_index":190,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["instance",{"_index":716,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["instanciation",{"_index":1437,"title":{},"body":{"classes/Filter.html":{}}}],["instantiate",{"_index":1267,"title":{},"body":{"components/DetailComponent.html":{}}}],["intercept",{"_index":2185,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["intercept(request",{"_index":2191,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["intercepted",{"_index":1089,"title":{},"body":{"injectables/CardService.html":{}}}],["interceptor",{"_index":2181,"title":{"interceptors/TokenInjector.html":{}},"body":{"coverage.html":{}}}],["interceptors",{"_index":2182,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["interceptors.service",{"_index":1895,"title":{},"body":{"modules/ServicesModule.html":{}}}],["interface",{"_index":483,"title":{"interfaces/AppState.html":{},"interfaces/AuthState.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"interfaces/ConfigState.html":{},"interfaces/MenuState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/AuthState.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"interfaces/ConfigState.html":{},"interfaces/MenuState.html":{},"coverage.html":{}}}],["interfaces",{"_index":484,"title":{},"body":{"interfaces/AppState.html":{},"interfaces/AuthState.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"interfaces/ConfigState.html":{},"interfaces/MenuState.html":{},"index.html":{}}}],["intl.numberformat(this.translate.getbrowserlang",{"_index":1675,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["invalid",{"_index":617,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["isauth",{"_index":325,"title":{},"body":{"components/AppComponent.html":{}}}],["isauthenticated",{"_index":268,"title":{},"body":{"components/AppComponent.html":{}}}],["isexpirationdateover",{"_index":690,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["isinthefuture",{"_index":308,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["isinthefuture(expirationdate",{"_index":687,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["isinthefuture(time",{"_index":748,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["isnan(expirationdate",{"_index":685,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["isnotanumber",{"_index":684,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["issue",{"_index":233,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["istanbul",{"_index":87,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"injectables/FeedFiltersEffects.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdatedSubscription.html":{}}}],["isused",{"_index":713,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["it's",{"_index":802,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["items",{"_index":1210,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["jnlp",{"_index":187,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["js",{"_index":2372,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":601,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["key",{"_index":1631,"title":{},"body":{"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"classes/Map.html":{}}}],["label",{"_index":141,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["label1",{"_index":2085,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["label2",{"_index":2088,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["label3",{"_index":2093,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["lang",{"_index":1954,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["langs",{"_index":2044,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["large",{"_index":1920,"title":{},"body":{"modules/StateModule.html":{}}}],["larger",{"_index":912,"title":{},"body":{"components/CardComponent.html":{}}}],["last",{"_index":965,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["lastcards",{"_index":964,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["later",{"_index":340,"title":{},"body":{"components/AppComponent.html":{}}}],["lcard",{"_index":214,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["legend",{"_index":363,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"index.html":{}}}],["library",{"_index":1403,"title":{},"body":{"modules/FeedModule.html":{}}}],["library.add(faclock",{"_index":1411,"title":{},"body":{"modules/FeedModule.html":{}}}],["license",{"_index":352,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{}}}],["light",{"_index":225,"title":{},"body":{"classes/AddLightCardFailure.html":{},"components/CardComponent.html":{},"components/DetailComponent.html":{},"classes/HandleUnexpectedError-2.html":{},"components/IconComponent.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["light:boolean",{"_index":1720,"title":{},"body":{"components/IconComponent.html":{}}}],["lightcard",{"_index":211,"title":{},"body":{"classes/AddLightCardFailure.html":{},"components/CardComponent.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcard):boolean",{"_index":1468,"title":{},"body":{"classes/Filter.html":{}}}],["lightcard,any",{"_index":1462,"title":{},"body":{"classes/Filter.html":{}}}],["lightcard.enddate|date:'short",{"_index":899,"title":{},"body":{"components/CardComponent.html":{}}}],["lightcard.enddate|date:\\'short",{"_index":920,"title":{},"body":{"components/CardComponent.html":{}}}],["lightcard.startdate|date:'short",{"_index":898,"title":{},"body":{"components/CardComponent.html":{}}}],["lightcard.startdate|date:\\'short",{"_index":919,"title":{},"body":{"components/CardComponent.html":{}}}],["lightcardactions",{"_index":246,"title":{},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/typealiases.html":{}}}],["lightcardactiontypes",{"_index":212,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/LightCardEffects.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["lightcardactiontypes.addlightcardfailure",{"_index":210,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardactiontypes.handleunexpectederror",{"_index":245,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardactiontypes.loadlightcards",{"_index":237,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardactiontypes.loadlightcardsextendeddata",{"_index":240,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardactiontypes.loadlightcardsfailure",{"_index":241,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardactiontypes.loadlightcardssuccess",{"_index":238,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardactiontypes.selectlightcard",{"_index":242,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardactiontypes.updatedsubscription",{"_index":244,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardadapter",{"_index":985,"title":{},"body":{"interfaces/CardFeedState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lightcardadapter.getinitialstate",{"_index":988,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["lightcardadapter.getselectors(selectlightcardsstate",{"_index":2459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lightcardeffects",{"_index":530,"title":{"injectables/LightCardEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/LightCardEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lightcardreducer",{"_index":513,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["lightcards",{"_index":239,"title":{},"body":{"classes/AddLightCardFailure.html":{},"components/CardListComponent.html":{},"components/FeedComponent.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcards:${test",{"_index":1757,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["line",{"_index":2159,"title":{},"body":{"components/TimeLineComponent.html":{}}}],["line'},{'name",{"_index":395,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["line.component",{"_index":1392,"title":{},"body":{"modules/FeedModule.html":{}}}],["line.component.html",{"_index":2160,"title":{},"body":{"components/TimeLineComponent.html":{}}}],["line.component.ts",{"_index":2158,"title":{},"body":{"components/TimeLineComponent.html":{},"coverage.html":{}}}],["line.component.ts:14",{"_index":2161,"title":{},"body":{"components/TimeLineComponent.html":{}}}],["line.component.ts:18",{"_index":2162,"title":{},"body":{"components/TimeLineComponent.html":{}}}],["line/time",{"_index":1391,"title":{},"body":{"modules/FeedModule.html":{},"components/TimeLineComponent.html":{},"coverage.html":{}}}],["link",{"_index":1269,"title":{},"body":{"components/DetailComponent.html":{}}}],["link/button",{"_index":841,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["link1",{"_index":2086,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["link2",{"_index":2089,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["link3",{"_index":2094,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["list",{"_index":192,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"components/CardListComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["list'},{'name",{"_index":377,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["list.component",{"_index":1385,"title":{},"body":{"modules/FeedModule.html":{}}}],["list.component.html",{"_index":992,"title":{},"body":{"components/CardListComponent.html":{}}}],["list.component.ts",{"_index":991,"title":{},"body":{"components/CardListComponent.html":{},"coverage.html":{}}}],["list.component.ts:17",{"_index":995,"title":{},"body":{"components/CardListComponent.html":{}}}],["list.component.ts:18",{"_index":994,"title":{},"body":{"components/CardListComponent.html":{}}}],["list/card",{"_index":990,"title":{},"body":{"components/CardListComponent.html":{},"modules/FeedModule.html":{},"coverage.html":{}}}],["list/filters/filters.component",{"_index":1394,"title":{},"body":{"modules/FeedModule.html":{}}}],["list/filters/filters.component.ts",{"_index":1518,"title":{},"body":{"components/FiltersComponent.html":{},"coverage.html":{}}}],["list/filters/filters.component.ts:14",{"_index":1520,"title":{},"body":{"components/FiltersComponent.html":{}}}],["list/filters/filters.component.ts:18",{"_index":1521,"title":{},"body":{"components/FiltersComponent.html":{}}}],["list/filters/time",{"_index":1398,"title":{},"body":{"modules/FeedModule.html":{},"components/TimeFilterComponent.html":{},"coverage.html":{}}}],["list/filters/type",{"_index":1395,"title":{},"body":{"modules/FeedModule.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["list_radio",{"_index":193,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["listen",{"_index":833,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["listens",{"_index":778,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["literal",{"_index":207,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitFilters.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{}}}],["load",{"_index":215,"title":{},"body":{"classes/AddLightCardFailure.html":{},"injectables/ConfigEffects.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["loadbyid",{"_index":940,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/LightCardEffects.html":{}}}],["loadcard",{"_index":952,"title":{"classes/LoadCard.html":{}},"body":{"injectables/CardEffects.html":{},"injectables/CardService.html":{},"injectables/CustomRouterEffects.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"injectables/MenuEffects.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadcard(id",{"_index":1040,"title":{},"body":{"injectables/CardService.html":{}}}],["loadcard({id",{"_index":1180,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["loadcardfailure",{"_index":953,"title":{"classes/LoadCardFailure.html":{}},"body":{"injectables/CardEffects.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadcardfailure(err",{"_index":948,"title":{},"body":{"injectables/CardEffects.html":{}}}],["loadcardsuccess",{"_index":954,"title":{"classes/LoadCardSuccess.html":{}},"body":{"injectables/CardEffects.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadcardsuccess({card",{"_index":947,"title":{},"body":{"injectables/CardEffects.html":{}}}],["loadchildren",{"_index":465,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["loadconfig",{"_index":310,"title":{"classes/LoadConfig.html":{}},"body":{"components/AppComponent.html":{},"injectables/ConfigEffects.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadconfigfailure",{"_index":1142,"title":{"classes/LoadConfigFailure.html":{}},"body":{"injectables/ConfigEffects.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadconfigfailure(err",{"_index":1132,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["loadconfigsuccess",{"_index":1143,"title":{"classes/LoadConfigSuccess.html":{}},"body":{"injectables/ConfigEffects.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadconfigsuccess({config",{"_index":1131,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["loaded",{"_index":330,"title":{},"body":{"components/AppComponent.html":{},"interfaces/ConfigState.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["loader",{"_index":1113,"title":{},"body":{"modules/CardsModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["loadfeedfilteronauthenticationsuccess",{"_index":1373,"title":{},"body":{"injectables/FeedFiltersEffects.html":{}}}],["loadi18nforlightcards",{"_index":2060,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["loadi18nforlightcards(cards",{"_index":2068,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["loadi18nforlightcards(cards:lightcard",{"_index":2009,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["loadi18nformenuentries",{"_index":2061,"title":{},"body":{"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{}}}],["loadi18nformenuentries(){return",{"_index":2095,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["loadi18nformenuentries(menus",{"_index":2070,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["loadi18nformenuentries(menus:thirdmenu",{"_index":2015,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["loading",{"_index":336,"title":{},"body":{"components/AppComponent.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"interfaces/ConfigState.html":{},"injectables/LightCardEffects.html":{},"interfaces/MenuState.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["loadlightcard",{"_index":247,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["loadlightcardfailure",{"_index":249,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["loadlightcards",{"_index":213,"title":{"classes/LoadLightCards.html":{}},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadlightcardsextendeddata",{"_index":217,"title":{"classes/LoadLightCardsExtendedData.html":{}},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/LightCardEffects.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["loadlightcardsfailure",{"_index":219,"title":{"classes/LoadLightCardsFailure.html":{}},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadlightcardssuccess",{"_index":216,"title":{"classes/LoadLightCardsSuccess.html":{}},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/LightCardEffects.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadlightcardssuccess({lightcards",{"_index":1009,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["loadlightcardsuccess",{"_index":248,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["loadmenu",{"_index":1559,"title":{"classes/LoadMenu.html":{}},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/NavbarComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadmenufailure",{"_index":1561,"title":{"classes/LoadMenuFailure.html":{}},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadmenufailure(err",{"_index":1821,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["loadmenusuccess",{"_index":1560,"title":{"classes/LoadMenuSuccess.html":{}},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadmenusuccess({menu",{"_index":1819,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["loads",{"_index":1000,"title":{},"body":{"injectables/CardOperationEffects.html":{},"injectables/FeedFiltersEffects.html":{}}}],["local",{"_index":1279,"title":{},"body":{"components/DetailComponent.html":{}}}],["locale",{"_index":1629,"title":{},"body":{"injectables/HandlebarsService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["locales",{"_index":1933,"title":{},"body":{"classes/Third.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["locales?:string",{"_index":1940,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["localestorage",{"_index":678,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage",{"_index":672,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.clear",{"_index":694,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.getitem(localstorageauthcontent.expirationdate",{"_index":683,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.getitem(localstorageauthcontent.identifier",{"_index":710,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.getitem(localstorageauthcontent.token",{"_index":674,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.setitem(localstorageauthcontent.clientid",{"_index":705,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.setitem(localstorageauthcontent.expirationdate",{"_index":703,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.setitem(localstorageauthcontent.identifier",{"_index":699,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.setitem(localstorageauthcontent.token",{"_index":701,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorageauthcontent",{"_index":597,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/enumerations.html":{}}}],["locationstrategy",{"_index":429,"title":{},"body":{"modules/AppModule.html":{}}}],["lockaction",{"_index":149,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["lockcard",{"_index":150,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["lodash",{"_index":1850,"title":{},"body":{"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"dependencies.html":{}}}],["log",{"_index":63,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["login",{"_index":99,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"modules/AppRoutingModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["login'},{'name",{"_index":387,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["login.component.html",{"_index":1791,"title":{},"body":{"components/LoginComponent.html":{}}}],["login/password",{"_index":92,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["logincomponent",{"_index":95,"title":{"components/LoginComponent.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"classes/CheckAuthenticationStatus.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["logout",{"_index":106,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["longtext",{"_index":195,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["lttd",{"_index":172,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["lvalue",{"_index":1654,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["m",{"_index":1668,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["m.format(options.hash.format",{"_index":1672,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["m.locale(this.translate.getbrowserlang",{"_index":1671,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["mainrecipient",{"_index":170,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["manage",{"_index":472,"title":{},"body":{"modules/AppRoutingModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["management",{"_index":755,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["manager",{"_index":759,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["manages",{"_index":1134,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["mandatory",{"_index":197,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["map",{"_index":159,"title":{"classes/Map.html":{}},"body":{"classes/Action.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"classes/ParameterListItem.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["map((action",{"_index":773,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/FeedFiltersEffects.html":{}}}],["map((card",{"_index":946,"title":{},"body":{"injectables/CardEffects.html":{}}}],["map((config",{"_index":1130,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["map((payload",{"_index":790,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["map(action",{"_index":816,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["map(array",{"_index":1818,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["map(authenticationinfo",{"_index":824,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["map(authobjt",{"_index":664,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["map(card",{"_index":2011,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["map(check",{"_index":630,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["map(data",{"_index":656,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["map(isinthefuture",{"_index":322,"title":{},"body":{"components/AppComponent.html":{}}}],["map(menu",{"_index":2017,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["map(operation",{"_index":1004,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["map(r",{"_index":1986,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["map(s=>handlebars.compile(s",{"_index":1637,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["map(t",{"_index":2001,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["map(t=>t(card",{"_index":1625,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["margin",{"_index":360,"title":{},"body":{"components/AppComponent.html":{},"components/CardComponent.html":{},"components/LoginComponent.html":{}}}],["matching",{"_index":134,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":902,"title":{},"body":{"components/CardComponent.html":{}}}],["maxedretries",{"_index":270,"title":{},"body":{"components/AppComponent.html":{}}}],["maxlength",{"_index":198,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["medium",{"_index":1701,"title":{},"body":{"components/IconComponent.html":{}}}],["medium:boolean",{"_index":1717,"title":{},"body":{"components/IconComponent.html":{}}}],["member",{"_index":128,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["members",{"_index":18,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["menu",{"_index":487,"title":{},"body":{"interfaces/AppState.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"interfaces/MenuState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["menu.'+link.path",{"_index":1862,"title":{},"body":{"components/NavbarComponent.html":{}}}],["menu.\\'+link.path",{"_index":1868,"title":{},"body":{"components/NavbarComponent.html":{}}}],["menu.id",{"_index":2018,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["menu.logout",{"_index":1867,"title":{},"body":{"components/NavbarComponent.html":{}}}],["menu.version",{"_index":2019,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["menuactions",{"_index":1565,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"miscellaneous/typealiases.html":{}}}],["menuactiontypes",{"_index":1558,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"miscellaneous/enumerations.html":{}}}],["menuactiontypes.handleunexpectederror",{"_index":1555,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{}}}],["menuactiontypes.loadmenu",{"_index":1562,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{}}}],["menuactiontypes.loadmenufailure",{"_index":1563,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{}}}],["menuactiontypes.loadmenusuccess",{"_index":1564,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{}}}],["menueffects",{"_index":528,"title":{"injectables/MenuEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/MenuEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["menuentries",{"_index":1934,"title":{},"body":{"classes/Third.html":{}}}],["menuentries?:thirdmenuentry",{"_index":1941,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["menuinitialstate",{"_index":1827,"title":{},"body":{"interfaces/MenuState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["menureducer",{"_index":520,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["menus",{"_index":2008,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["menus.push(menu",{"_index":2007,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["menustate",{"_index":493,"title":{"interfaces/MenuState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/MenuState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["menustate.menu",{"_index":2501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menustate:menustate",{"_index":2500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["merge",{"_index":1957,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["merge(previous",{"_index":1992,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["message",{"_index":119,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["metadata",{"_index":258,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["metareducer",{"_index":502,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["metareducers",{"_index":544,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":23,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["methods",{"_index":271,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"injectables/ConfigService.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"components/TypeFilterComponent.html":{}}}],["minus2hour",{"_index":1060,"title":{},"body":{"injectables/CardService.html":{}}}],["miscellaneous",{"_index":2387,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model/light",{"_index":1962,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["model/map",{"_index":1958,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["modification",{"_index":971,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["module",{"_index":400,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"index.html":{}}}],["modules",{"_index":402,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"index.html":{},"modules.html":{}}}],["modules/archives/archives.module#archivesmodule",{"_index":469,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["modules/feed/feed.module#feedmodule",{"_index":466,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["modulewithproviders",{"_index":1103,"title":{},"body":{"modules/CardsModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["moment",{"_index":744,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"dependencies.html":{}}}],["moment(new",{"_index":1669,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["mono.svg",{"_index":1742,"title":{},"body":{"components/IconComponent.html":{}}}],["more",{"_index":474,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["mozilla",{"_index":351,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{}}}],["mpl",{"_index":356,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{}}}],["multi",{"_index":1898,"title":{},"body":{"modules/ServicesModule.html":{}}}],["name",{"_index":46,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"components/FiltersComponent.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"components/TypeFilterComponent.html":{}}}],["name:string",{"_index":1937,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["navbar",{"_index":109,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"modules/AppRoutingModule.html":{},"classes/CheckAuthenticationStatus.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["navbar'},{'name",{"_index":388,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["navbar.component.html",{"_index":1830,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbarcollapsed",{"_index":1833,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbarcomponent",{"_index":107,"title":{"components/NavbarComponent.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"classes/CheckAuthenticationStatus.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["navigate",{"_index":780,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["navigatetocard",{"_index":1172,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["navigationactiontiming",{"_index":1910,"title":{},"body":{"modules/StateModule.html":{}}}],["navigationactiontiming.postactivation",{"_index":1914,"title":{},"body":{"modules/StateModule.html":{}}}],["navigationid",{"_index":1199,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"miscellaneous/variables.html":{}}}],["navigationroutes",{"_index":476,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/NavbarComponent.html":{}}}],["need",{"_index":1208,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["needed",{"_index":234,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/UpdatedSubscription.html":{}}}],["needsconfirm",{"_index":153,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["new",{"_index":28,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"injectables/TimeService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":89,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"components/TimeFilterComponent.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{}}}],["next.handle(this.addauthheadersifnecessary(request",{"_index":2196,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["next.length",{"_index":1472,"title":{},"body":{"classes/Filter.html":{}}}],["next.status.action",{"_index":2221,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["next.status.alarm",{"_index":2219,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["next.status.end",{"_index":2131,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["next.status.notification",{"_index":2225,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["next.status.question",{"_index":2223,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["next.status.start",{"_index":2126,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["next[0].chainfilter(card,next.slice(1",{"_index":1473,"title":{},"body":{"classes/Filter.html":{}}}],["next||next.length",{"_index":1474,"title":{},"body":{"classes/Filter.html":{}}}],["ng",{"_index":436,"title":{},"body":{"modules/AppModule.html":{},"injectables/CardService.html":{},"modules/FeedModule.html":{},"dependencies.html":{}}}],["ngafterviewinit",{"_index":1319,"title":{},"body":{"components/DetailsComponent.html":{},"components/FeedComponent.html":{}}}],["ngbcollapse]=\"!expandedmenu[index",{"_index":1865,"title":{},"body":{"components/NavbarComponent.html":{}}}],["ngbmodule",{"_index":435,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{}}}],["ngbmodule.forroot",{"_index":1412,"title":{},"body":{"modules/FeedModule.html":{}}}],["ngmodule",{"_index":422,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["ngonchanges",{"_index":1320,"title":{},"body":{"components/DetailsComponent.html":{}}}],["ngonchanges(changes",{"_index":1326,"title":{},"body":{"components/DetailsComponent.html":{}}}],["ngondestroy",{"_index":2104,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["ngoninit",{"_index":272,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/DetailComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["ngrx",{"_index":235,"title":{},"body":{"classes/AddLightCardFailure.html":{},"interfaces/AppState.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"dependencies.html":{}}}],["ngrx/effects",{"_index":844,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"modules/StateModule.html":{},"dependencies.html":{}}}],["ngrx/entity",{"_index":980,"title":{},"body":{"interfaces/CardFeedState.html":{},"dependencies.html":{}}}],["ngrx/router",{"_index":496,"title":{},"body":{"interfaces/AppState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{},"dependencies.html":{}}}],["ngrx/store",{"_index":52,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitFilters.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"dependencies.html":{}}}],["ngunsubscribe",{"_index":2101,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["ngx",{"_index":306,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"injectables/HandlebarsService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"dependencies.html":{}}}],["none",{"_index":182,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["noselectioncomponent",{"_index":389,"title":{"components/NoSelectionComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["notchecktokenrequest",{"_index":2198,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["notification",{"_index":1496,"title":{},"body":{"injectables/FilterService.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/enumerations.html":{}}}],["notify",{"_index":111,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["null",{"_index":751,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"interfaces/ConfigState.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":167,"title":{},"body":{"classes/Action.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"interfaces/ConfigState.html":{},"injectables/HandlebarsService.html":{},"classes/Input.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"injectables/TimeService.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":1987,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["object[locale",{"_index":1988,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["object[locale][publisher",{"_index":1989,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["object[locale][publisher][version",{"_index":1990,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["observable",{"_index":17,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{}}}],["observable.create(observer",{"_index":1069,"title":{},"body":{"injectables/CardService.html":{}}}],["observer.error(error",{"_index":1079,"title":{},"body":{"injectables/CardService.html":{}}}],["observer.error(message",{"_index":1071,"title":{},"body":{"injectables/CardService.html":{}}}],["observer.next(json.parse(message.data",{"_index":1072,"title":{},"body":{"injectables/CardService.html":{}}}],["obtain",{"_index":358,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{}}}],["occured",{"_index":1075,"title":{},"body":{"injectables/CardService.html":{}}}],["of([new",{"_index":2081,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["of(false",{"_index":1762,"title":{},"body":{"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["of(new",{"_index":829,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["of(template",{"_index":1635,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["of(true",{"_index":2096,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["ofactions/authentication.actions",{"_index":298,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckTokenResponse.html":{},"injectables/FeedFiltersEffects.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{}}}],["ofactions/card.actions",{"_index":955,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/MenuEffects.html":{}}}],["ofactions/config.actions",{"_index":311,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"injectables/ConfigEffects.html":{}}}],["ofactions/feed.actions",{"_index":1024,"title":{},"body":{"injectables/CardOperationEffects.html":{},"injectables/FeedFiltersEffects.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["ofactions/light",{"_index":1022,"title":{},"body":{"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/LightCardEffects.html":{}}}],["ofactions/menu.actions",{"_index":1824,"title":{},"body":{"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{}}}],["ofeffects/authentication.effects",{"_index":510,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/card",{"_index":508,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/card.effects",{"_index":506,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/config.effects",{"_index":538,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/custom",{"_index":525,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/feed",{"_index":534,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/light",{"_index":531,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/menu.effects",{"_index":529,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofmodel/card",{"_index":1048,"title":{},"body":{"injectables/CardService.html":{}}}],["ofmodel/card.model",{"_index":930,"title":{},"body":{"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"interfaces/ConfigState.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/HandleUnexpectedError.html":{},"injectables/HandlebarsService.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{}}}],["ofmodel/feed",{"_index":552,"title":{},"body":{"classes/ApplyFilter.html":{},"interfaces/CardFeedState.html":{},"injectables/FilterService.html":{},"classes/InitFilters.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["ofmodel/i18n.model",{"_index":158,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["ofmodel/light",{"_index":156,"title":{},"body":{"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/Input.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/ParameterListItem.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["ofmodel/map",{"_index":160,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["ofmodel/thirds.model",{"_index":1557,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{}}}],["ofselectors/authentication.selectors",{"_index":305,"title":{},"body":{"components/AppComponent.html":{}}}],["ofselectors/config.selectors",{"_index":314,"title":{},"body":{"components/AppComponent.html":{},"injectables/ConfigEffects.html":{}}}],["ofselectors/feed.selectors",{"_index":1364,"title":{},"body":{"components/FeedComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["ofselectors/menu.selectors",{"_index":1848,"title":{},"body":{"components/NavbarComponent.html":{}}}],["ofselectors/router.selectors",{"_index":303,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["ofservices/authentication.service",{"_index":309,"title":{},"body":{"components/AppComponent.html":{},"injectables/ConfigService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["ofservices/card.service",{"_index":950,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{}}}],["ofservices/config.service",{"_index":1141,"title":{},"body":{"injectables/ConfigEffects.html":{},"modules/ServicesModule.html":{}}}],["ofservices/filter.service",{"_index":555,"title":{},"body":{"classes/ApplyFilter.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/FeedFiltersEffects.html":{},"classes/InitFilters.html":{},"modules/ServicesModule.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["ofservices/guard.service",{"_index":459,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["ofservices/guid.service",{"_index":596,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"modules/ServicesModule.html":{}}}],["ofservices/services.module",{"_index":438,"title":{},"body":{"modules/AppModule.html":{}}}],["ofservices/thirds.service",{"_index":1764,"title":{},"body":{"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"modules/ServicesModule.html":{}}}],["ofservices/time.service",{"_index":1606,"title":{},"body":{"injectables/HandlebarsService.html":{},"modules/ServicesModule.html":{},"components/TimeFilterComponent.html":{}}}],["ofstates/authentication.state",{"_index":522,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstates/card.state",{"_index":523,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstates/config.state",{"_index":536,"title":{},"body":{"interfaces/AppState.html":{},"injectables/ConfigEffects.html":{}}}],["ofstates/feed.state",{"_index":512,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstates/menu.state",{"_index":527,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/index",{"_index":300,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["ofstore/reducers/authentication.reducer",{"_index":500,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/reducers/card.reducer",{"_index":517,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/reducers/config.reducer",{"_index":519,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/reducers/light",{"_index":514,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/reducers/menu.reducer",{"_index":521,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/selectors/card.selectors",{"_index":932,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["ofstore/selectors/router.selectors",{"_index":889,"title":{},"body":{"components/CardComponent.html":{}}}],["ofstore/state.module",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["ofstore/states/router.state",{"_index":498,"title":{},"body":{"interfaces/AppState.html":{},"modules/StateModule.html":{}}}],["oftype",{"_index":843,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["oftype(authenticationactiontypes.acceptlogin",{"_index":1002,"title":{},"body":{"injectables/CardOperationEffects.html":{},"injectables/FeedFiltersEffects.html":{}}}],["oftype(authenticationactiontypes.acceptlogout",{"_index":772,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["oftype(authenticationactiontypes.checkauthenticationstatus",{"_index":787,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["oftype(authenticationactiontypes.trytologin",{"_index":819,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["oftype(authenticationactiontypes.trytologout",{"_index":839,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["oftype(cardactiontypes.loadcard",{"_index":943,"title":{},"body":{"injectables/CardEffects.html":{}}}],["oftype(configactiontypes.loadconfig",{"_index":1128,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["oftype(configactiontypes.loadconfigfailure",{"_index":1151,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["oftype(configactiontypes.loadconfigsuccess",{"_index":809,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["oftype(feedactiontypes.applyfilter",{"_index":1016,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["oftype(lightcardactiontypes.loadlightcardssuccess",{"_index":1753,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["oftype(menuactiontypes.loadmenu",{"_index":1815,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["oftype(router_navigation",{"_index":1174,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["ok",{"_index":803,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/FeedFiltersEffects.html":{}}}],["once",{"_index":283,"title":{},"body":{"components/AppComponent.html":{}}}],["onchanges",{"_index":1318,"title":{},"body":{"components/DetailsComponent.html":{}}}],["ondestroy",{"_index":2098,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["one",{"_index":223,"title":{},"body":{"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"classes/CheckTokenResponse.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/HandleUnexpectedError-2.html":{},"components/IconComponent.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["one_second",{"_index":598,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ongoing",{"_index":970,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["oninit",{"_index":257,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/DetailComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["onsubmit",{"_index":96,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["opcards",{"_index":1007,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["open",{"_index":877,"title":{},"body":{"components/CardComponent.html":{}}}],["operation.cards",{"_index":1008,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operation.effects",{"_index":509,"title":{},"body":{"interfaces/AppState.html":{}}}],["operation.effects.ts",{"_index":997,"title":{},"body":{"injectables/CardOperationEffects.html":{},"coverage.html":{}}}],["operation.effects.ts:27",{"_index":999,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operation.effects.ts:36",{"_index":1015,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operation.effects.ts:66",{"_index":1021,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operation.model",{"_index":1049,"title":{},"body":{"injectables/CardService.html":{}}}],["operation.model.ts",{"_index":2394,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["operation.type",{"_index":1005,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operation.type.tostring",{"_index":1006,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operations",{"_index":1001,"title":{},"body":{"injectables/CardOperationEffects.html":{},"injectables/FeedFiltersEffects.html":{}}}],["operator",{"_index":1641,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["operatorfabric",{"_index":293,"title":{},"body":{"components/AppComponent.html":{}}}],["optional",{"_index":47,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"components/TypeFilterComponent.html":{}}}],["options",{"_index":1643,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["options.hash",{"_index":1676,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["otherwise",{"_index":623,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":69,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"modules/FeedModule.html":{},"classes/Filter.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["over",{"_index":689,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["overview",{"_index":2406,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":2358,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":101,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["pair",{"_index":93,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["paload",{"_index":836,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["pan",{"_index":2381,"title":{},"body":{"dependencies.html":{}}}],["param",{"_index":607,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{}}}],["parameterlistitem",{"_index":201,"title":{"classes/ParameterListItem.html":{}},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"coverage.html":{}}}],["parameters",{"_index":44,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"components/TypeFilterComponent.html":{}}}],["parametrization",{"_index":1426,"title":{},"body":{"classes/Filter.html":{}}}],["params",{"_index":637,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["params.append('client_id",{"_index":644,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["params.append('grant_type",{"_index":641,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["params.append('password",{"_index":640,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["params.append('username",{"_index":639,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["params.tostring",{"_index":654,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["parentmodule",{"_index":1899,"title":{},"body":{"modules/ServicesModule.html":{}}}],["parse",{"_index":1923,"title":{},"body":{"modules/StateModule.html":{}}}],["parsestring",{"_index":2169,"title":{},"body":{"injectables/TimeService.html":{}}}],["parsestring(value",{"_index":2176,"title":{},"body":{"injectables/TimeService.html":{}}}],["pass",{"_index":1440,"title":{},"body":{"classes/Filter.html":{}}}],["passes",{"_index":1450,"title":{},"body":{"classes/Filter.html":{}}}],["password",{"_index":105,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["past",{"_index":2451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":463,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["pathmatch",{"_index":1417,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["payload",{"_index":37,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitFilters.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdatedSubscription.html":{}}}],["payload.access_token",{"_index":722,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.clientid",{"_index":721,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.clientid.tostring",{"_index":706,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.expirationdate.gettime().tostring",{"_index":704,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.expires_in",{"_index":719,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.identifier",{"_index":700,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.password).pipe",{"_index":823,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["payload.token",{"_index":702,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["payload:{filters",{"_index":563,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilters.html":{}}}],["payload:{name",{"_index":559,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilters.html":{}}}],["payloadforsuccessfulauthentication",{"_index":41,"title":{"classes/PayloadForSuccessfulAuthentication.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{}}}],["payloadforsuccessfulauthentication(payload.identifier",{"_index":720,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["pertinent",{"_index":1201,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["pickarandomitemofanenum",{"_index":2356,"title":{},"body":{"coverage.html":{}}}],["pieces",{"_index":1926,"title":{},"body":{"modules/StateModule.html":{}}}],["pipe",{"_index":786,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["pipe(map(trans",{"_index":2038,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["pipe(tap(menus",{"_index":1853,"title":{},"body":{"components/NavbarComponent.html":{}}}],["platformlocation",{"_index":1703,"title":{},"body":{"components/IconComponent.html":{}}}],["platformlocation.getbasehreffromdom",{"_index":1726,"title":{},"body":{"components/IconComponent.html":{}}}],["please",{"_index":338,"title":{},"body":{"components/AppComponent.html":{}}}],["plus48hours",{"_index":1064,"title":{},"body":{"injectables/CardService.html":{}}}],["point",{"_index":1203,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["popover",{"_index":2250,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["possible",{"_index":113,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["postdata",{"_index":625,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["postdata).pipe",{"_index":629,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["postdata.append('token",{"_index":627,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["preloadallmodules",{"_index":454,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["preloadingstrategy",{"_index":482,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["present",{"_index":743,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["previous",{"_index":1983,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["previous.pipe",{"_index":1993,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["primary",{"_index":1790,"title":{},"body":{"components/LoginComponent.html":{}}}],["private",{"_index":269,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/RouterStateUrl.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["processid",{"_index":171,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["processing",{"_index":973,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["prodi18npath",{"_index":2331,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":2439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":35,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{}}}],["property",{"_index":1427,"title":{},"body":{"classes/Filter.html":{}}}],["provide",{"_index":450,"title":{},"body":{"modules/AppModule.html":{},"modules/CardsModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":1919,"title":{},"body":{"modules/StateModule.html":{}}}],["providedin",{"_index":1488,"title":{},"body":{"injectables/FilterService.html":{},"classes/GuidService.html":{}}}],["providers",{"_index":406,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"index.html":{}}}],["providers:[{provide:'configretrydelay',usevalue:5000",{"_index":1918,"title":{},"body":{"modules/StateModule.html":{}}}],["public",{"_index":36,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardListComponent.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"injectables/TimeService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{}}}],["publishdate",{"_index":166,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["publisher",{"_index":164,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["publishers",{"_index":1761,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["publisherversion",{"_index":165,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"components/DetailComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["publisher}.${version}.${name}.${locale",{"_index":1632,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["push",{"_index":91,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["put",{"_index":724,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["query",{"_index":1209,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["querylist",{"_index":1333,"title":{},"body":{"components/DetailsComponent.html":{}}}],["queryparams",{"_index":1198,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"miscellaneous/variables.html":{}}}],["querytemplate",{"_index":1569,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["querytemplate(publisher",{"_index":1589,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["querytemplate(publisher:string",{"_index":1626,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["question",{"_index":1494,"title":{},"body":{"injectables/FilterService.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/enumerations.html":{}}}],["r",{"_index":1991,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["rangeend",{"_index":1043,"title":{},"body":{"injectables/CardService.html":{}}}],["rangestart",{"_index":1045,"title":{},"body":{"injectables/CardService.html":{}}}],["rangestart:rangestart,rangeend",{"_index":1085,"title":{},"body":{"injectables/CardService.html":{}}}],["reactiveformsmodule",{"_index":432,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{}}}],["readonly",{"_index":38,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/I18n.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdatedSubscription.html":{}}}],["ready",{"_index":812,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["reason",{"_index":1439,"title":{},"body":{"classes/Filter.html":{}}}],["recipient_filter",{"_index":1515,"title":{},"body":{"injectables/FilterService.html":{},"miscellaneous/enumerations.html":{}}}],["recursion",{"_index":1455,"title":{},"body":{"classes/Filter.html":{}}}],["recursively",{"_index":1454,"title":{},"body":{"classes/Filter.html":{}}}],["redirect",{"_index":763,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["redirectto",{"_index":470,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["reduce",{"_index":1960,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["reduce((acc",{"_index":1994,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["reduce((ids",{"_index":2021,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["reduce((menus:thirdmenu[],menu:thirdmenu",{"_index":2006,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["reducer",{"_index":25,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"interfaces/AppState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{}}}],["regarding",{"_index":742,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["registerarrayatindex",{"_index":1570,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registerarrayatindexlength",{"_index":1571,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registerbool",{"_index":1572,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registercardaction",{"_index":1573,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registerdateformat",{"_index":1574,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registered",{"_index":635,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["registeri18n",{"_index":1575,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registermath",{"_index":1576,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registernow",{"_index":1577,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registernumberformat",{"_index":1578,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registerpreservespace",{"_index":1579,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registerslice",{"_index":1580,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registersort",{"_index":1581,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registersplit",{"_index":1582,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registersvg",{"_index":1583,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["reinsertscripts",{"_index":1230,"title":{},"body":{"components/DetailComponent.html":{}}}],["reject",{"_index":66,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["rejectedlogin",{"_index":806,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["rejection",{"_index":120,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["rejectlogin",{"_index":65,"title":{"classes/RejectLogIn.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["rejectlogin({denialreason",{"_index":798,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["rejectloginattempt",{"_index":126,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["related",{"_index":232,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["relevant",{"_index":707,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["reload",{"_index":339,"title":{},"body":{"components/AppComponent.html":{}}}],["remove",{"_index":130,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["removes",{"_index":123,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["rendered",{"_index":976,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["rendering",{"_index":1271,"title":{},"body":{"components/DetailComponent.html":{}}}],["replication",{"_index":1433,"title":{},"body":{"classes/Filter.html":{}}}],["request",{"_index":1088,"title":{},"body":{"injectables/CardService.html":{},"injectables/ConfigEffects.html":{},"interceptors/TokenInjector.html":{}}}],["request.clone(update",{"_index":2202,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["request.url",{"_index":2197,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["require",{"_index":2336,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":2437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":416,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"components/LoginComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"index.html":{}}}],["resetform",{"_index":1794,"title":{},"body":{"components/LoginComponent.html":{}}}],["resource",{"_index":1277,"title":{},"body":{"components/DetailComponent.html":{}}}],["resourceurl",{"_index":1977,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["resourceurl}?${versionparam.tostring",{"_index":1981,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["response",{"_index":734,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["responsetype",{"_index":1972,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["result",{"_index":133,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.id",{"_index":2049,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["result.push(v",{"_index":2464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result.translation[lang",{"_index":2046,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["result:any",{"_index":2043,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["results",{"_index":135,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retries",{"_index":2493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retries:number",{"_index":2492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retry",{"_index":1124,"title":{},"body":{"injectables/ConfigEffects.html":{},"interfaces/ConfigState.html":{},"miscellaneous/variables.html":{}}}],["retrydelay",{"_index":1126,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["return",{"_index":618,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/RouterStateUrl.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1211,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["returns",{"_index":287,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"injectables/ConfigService.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/RouterStateUrl.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"components/TypeFilterComponent.html":{}}}],["right",{"_index":361,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"components/LoginComponent.html":{},"components/TypeFilterComponent.html":{}}}],["root",{"_index":260,"title":{},"body":{"components/AppComponent.html":{},"injectables/FilterService.html":{},"classes/GuidService.html":{}}}],["root'},{'name",{"_index":369,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["route",{"_index":1212,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["router",{"_index":488,"title":{},"body":{"interfaces/AppState.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["router.effects",{"_index":526,"title":{},"body":{"interfaces/AppState.html":{}}}],["router.effects.ts",{"_index":1171,"title":{},"body":{"injectables/CustomRouterEffects.html":{},"coverage.html":{}}}],["router.effects.ts:20",{"_index":1173,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["router.effects.ts:28",{"_index":1183,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["router.state",{"_index":2495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["router.state.url",{"_index":2496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["router_navigation",{"_index":1184,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["routereffects",{"_index":511,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["routerinitialstate",{"_index":546,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["routermodule",{"_index":455,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["routermodule.forchild(routes",{"_index":579,"title":{},"body":{"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":479,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routernavigationaction",{"_index":1176,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["routerreducerstate",{"_index":494,"title":{},"body":{"interfaces/AppState.html":{}}}],["routerstate",{"_index":1196,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["routerstate.params['cid",{"_index":1181,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["routerstate.root.queryparams",{"_index":1216,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["routerstate:any",{"_index":1178,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["routerstateserializer",{"_index":1187,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{}}}],["routerstatesnapshot",{"_index":1194,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{}}}],["routerstateurl",{"_index":497,"title":{"classes/RouterStateUrl.html":{}},"body":{"interfaces/AppState.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"coverage.html":{}}}],["routerstateurl(url",{"_index":1217,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["routes",{"_index":456,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{},"index.html":{},"routes.html":{}}}],["routes.slice(0",{"_index":477,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routing.module",{"_index":439,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/FeedModule.html":{},"components/NavbarComponent.html":{}}}],["routing.module.ts",{"_index":453,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["row",{"_index":2248,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["rows",{"_index":199,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["rte",{"_index":345,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{}}}],["rules",{"_index":762,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["running",{"_index":680,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["rvalue",{"_index":1652,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["rxjs",{"_index":296,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"interceptors/TokenInjector.html":{},"components/TypeFilterComponent.html":{},"dependencies.html":{}}}],["rxjs/internal/operators/tap",{"_index":1765,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["rxjs/operators",{"_index":297,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["safe",{"_index":1276,"title":{},"body":{"components/DetailComponent.html":{}}}],["safecssurl",{"_index":1272,"title":{},"body":{"components/DetailComponent.html":{}}}],["safecssurl.tolocalestring",{"_index":1281,"title":{},"body":{"components/DetailComponent.html":{}}}],["safecssurl.tostring",{"_index":1278,"title":{},"body":{"components/DetailComponent.html":{}}}],["safehtml",{"_index":1250,"title":{},"body":{"components/DetailComponent.html":{}}}],["saferesourceurl",{"_index":1256,"title":{},"body":{"components/DetailComponent.html":{}}}],["sanitizer",{"_index":1236,"title":{},"body":{"components/DetailComponent.html":{}}}],["save",{"_index":695,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["saveauthenticationinformation",{"_index":855,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["saveauthenticationinformation(payload",{"_index":698,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["scope",{"_index":1435,"title":{},"body":{"classes/Filter.html":{}}}],["scripts",{"_index":1290,"title":{},"body":{"components/DetailComponent.html":{}}}],["scripts.length",{"_index":1293,"title":{},"body":{"components/DetailComponent.html":{}}}],["scriptsinitiallength",{"_index":1292,"title":{},"body":{"components/DetailComponent.html":{}}}],["select",{"_index":222,"title":{},"body":{"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"components/CardComponent.html":{},"components/FeedComponent.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["select(feedselectors.selectfilteredfeed",{"_index":1367,"title":{},"body":{"components/FeedComponent.html":{}}}],["select(selectconfigloaded",{"_index":327,"title":{},"body":{"components/AppComponent.html":{}}}],["select(selectmaxedretries",{"_index":331,"title":{},"body":{"components/AppComponent.html":{}}}],["selectactivefiltersarray",{"_index":2316,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectauthenticationstate",{"_index":2306,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectcardstate",{"_index":2308,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectcardstateselection",{"_index":2309,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectcardstateselectiondetails",{"_index":2310,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectconfig",{"_index":2313,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectconfigdata",{"_index":2314,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectconfigloaded",{"_index":312,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectconfigretry",{"_index":1144,"title":{},"body":{"injectables/ConfigEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectcurrenturl",{"_index":301,"title":{},"body":{"components/AppComponent.html":{},"components/CardComponent.html":{},"components/NavbarComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectdetail",{"_index":1321,"title":{},"body":{"components/DetailsComponent.html":{}}}],["selectdetail(detail",{"_index":1330,"title":{},"body":{"components/DetailsComponent.html":{}}}],["selected",{"_index":963,"title":{},"body":{"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"miscellaneous/variables.html":{}}}],["selectedcardid",{"_index":962,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["selectedcardid:string",{"_index":243,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["selectedvalues",{"_index":202,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["selectexpirationtime",{"_index":304,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectfilter",{"_index":2317,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectfilteredfeed",{"_index":2318,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selection",{"_index":993,"title":{},"body":{"components/CardListComponent.html":{},"components/FeedComponent.html":{},"components/NoSelectionComponent.html":{}}}],["selection'},{'name",{"_index":390,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["selection.component",{"_index":1389,"title":{},"body":{"modules/FeedModule.html":{}}}],["selection.component.html",{"_index":1871,"title":{},"body":{"components/NoSelectionComponent.html":{}}}],["selection.component.ts",{"_index":1870,"title":{},"body":{"components/NoSelectionComponent.html":{},"coverage.html":{}}}],["selection.component.ts:14",{"_index":1872,"title":{},"body":{"components/NoSelectionComponent.html":{}}}],["selection.component.ts:18",{"_index":1873,"title":{},"body":{"components/NoSelectionComponent.html":{}}}],["selection/no",{"_index":1388,"title":{},"body":{"modules/FeedModule.html":{},"components/NoSelectionComponent.html":{},"coverage.html":{}}}],["selections",{"_index":2244,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["selectlastcards",{"_index":2319,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectlightcard",{"_index":221,"title":{"classes/SelectLightCard.html":{}},"body":{"classes/AddLightCardFailure.html":{},"injectables/CustomRouterEffects.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["selectlightcard({selectedcardid",{"_index":1182,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["selectlightcardselection",{"_index":2320,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectlightcardsstate",{"_index":2321,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectmaxedretries",{"_index":313,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectmenustate",{"_index":2323,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectmenustatemenu",{"_index":1847,"title":{},"body":{"components/NavbarComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selector",{"_index":259,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["selectrouterstate",{"_index":302,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["send",{"_index":286,"title":{},"body":{"components/AppComponent.html":{}}}],["sequentially",{"_index":1459,"title":{},"body":{"classes/Filter.html":{}}}],["serialize",{"_index":1189,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{}}}],["serialize(routerstate",{"_index":1193,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["serializer",{"_index":1915,"title":{},"body":{"modules/StateModule.html":{}}}],["service",{"_index":94,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/MenuEffects.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["services/authentication.service",{"_index":845,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["services/handlebars.service",{"_index":1111,"title":{},"body":{"modules/CardsModule.html":{},"components/DetailComponent.html":{}}}],["services/thirds.service",{"_index":1110,"title":{},"body":{"modules/CardsModule.html":{},"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{}}}],["servicesmodule",{"_index":413,"title":{"modules/ServicesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"index.html":{},"modules.html":{}}}],["servicesmodule.forroot",{"_index":448,"title":{},"body":{"modules/AppModule.html":{}}}],["session",{"_index":661,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["set",{"_index":1345,"title":{},"body":{"components/DetailsComponent.html":{},"components/TypeFilterComponent.html":{}}}],["set(\"locale",{"_index":1969,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["set(\"version",{"_index":1970,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["setheaders",{"_index":2201,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["settimeout",{"_index":1286,"title":{},"body":{"components/DetailComponent.html":{},"components/DetailsComponent.html":{}}}],["settimeout(()=>this.expandedmenu[index]=false,5000",{"_index":1861,"title":{},"body":{"components/NavbarComponent.html":{}}}],["severity",{"_index":155,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"injectables/FilterService.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["severity.action",{"_index":1493,"title":{},"body":{"injectables/FilterService.html":{}}}],["severity.alarm",{"_index":1492,"title":{},"body":{"injectables/FilterService.html":{}}}],["severity.notification",{"_index":1497,"title":{},"body":{"injectables/FilterService.html":{}}}],["severity.question",{"_index":1495,"title":{},"body":{"injectables/FilterService.html":{}}}],["simplechanges",{"_index":1327,"title":{},"body":{"components/DetailsComponent.html":{}}}],["size",{"_index":911,"title":{},"body":{"components/CardComponent.html":{},"components/IconComponent.html":{}}}],["size:string",{"_index":1721,"title":{},"body":{"components/IconComponent.html":{}}}],["skipself",{"_index":1893,"title":{},"body":{"modules/ServicesModule.html":{}}}],["small",{"_index":909,"title":{},"body":{"components/CardComponent.html":{},"components/IconComponent.html":{}}}],["small:boolean",{"_index":1716,"title":{},"body":{"components/IconComponent.html":{}}}],["snapshot",{"_index":1202,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{}}}],["solid",{"_index":1409,"title":{},"body":{"modules/FeedModule.html":{},"dependencies.html":{}}}],["sortbystartdate",{"_index":2327,"title":{},"body":{"coverage.html":{}}}],["sortbystartdate(card1",{"_index":981,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["sortcomparer:sortbystartdate",{"_index":986,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["sortonkey",{"_index":2274,"title":{},"body":{"coverage.html":{}}}],["sortonkey(key",{"_index":1684,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["sound",{"_index":2402,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"dependencies.html":{}}}],["spec\\.ts",{"_index":2438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["splitvalue",{"_index":1648,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["sprites",{"_index":1699,"title":{},"body":{"components/IconComponent.html":{}}}],["sprites:string",{"_index":1722,"title":{},"body":{"components/IconComponent.html":{}}}],["src/.../authentication.actions.ts",{"_index":2390,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../authentication.reducer.ts",{"_index":2425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication.selectors.ts",{"_index":2432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication.service.ts",{"_index":2399,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../authentication.state.ts",{"_index":2418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../card",{"_index":2393,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../card.actions.ts",{"_index":2391,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../card.model.ts",{"_index":2389,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../card.reducer.ts",{"_index":2426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../card.selectors.ts",{"_index":2433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../card.state.ts",{"_index":2419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config.actions.ts",{"_index":2395,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../config.selectors.ts",{"_index":2434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config.state.ts",{"_index":2420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":2423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":2422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../feed.actions.ts",{"_index":2396,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../feed.selectors.ts",{"_index":2431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../feed.state.ts",{"_index":2424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../filter.service.ts",{"_index":2397,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.ts",{"_index":2417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../light",{"_index":2398,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../menu.actions.ts",{"_index":2400,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../menu.reducer.ts",{"_index":2427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../menu.selectors.ts",{"_index":2436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../menu.state.ts",{"_index":2430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../router.selectors.ts",{"_index":2435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../router.state.ts",{"_index":2429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test.ts",{"_index":2421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../translate.config.ts",{"_index":2428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":452,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":256,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:27",{"_index":294,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:28",{"_index":291,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:29",{"_index":290,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:30",{"_index":292,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:31",{"_index":289,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:32",{"_index":276,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:45",{"_index":277,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":417,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/components/icon/icon.component.ts",{"_index":1694,"title":{},"body":{"components/IconComponent.html":{},"coverage.html":{}}}],["src/app/components/icon/icon.component.ts:18",{"_index":1707,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:19",{"_index":1710,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:20",{"_index":1709,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:21",{"_index":1705,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:22",{"_index":1706,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:23",{"_index":1708,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:24",{"_index":1712,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:25",{"_index":1713,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:26",{"_index":1704,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:32",{"_index":1711,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/login/login.component.ts",{"_index":1788,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["src/app/components/login/login.component.ts:21",{"_index":1799,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login/login.component.ts:22",{"_index":1795,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login/login.component.ts:26",{"_index":1796,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login/login.component.ts:35",{"_index":1797,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login/login.component.ts:43",{"_index":1798,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts",{"_index":1829,"title":{},"body":{"components/NavbarComponent.html":{},"coverage.html":{}}}],["src/app/components/navbar/navbar.component.ts:27",{"_index":1843,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:28",{"_index":1844,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:29",{"_index":1842,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:30",{"_index":1841,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:31",{"_index":1836,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:36",{"_index":1838,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:50",{"_index":1837,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:54",{"_index":1846,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:58",{"_index":1840,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/model/card",{"_index":2403,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/model/card.model.ts",{"_index":138,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/app/model/card.model.ts:101",{"_index":1875,"title":{},"body":{"classes/ParameterListItem.html":{}}}],["src/app/model/card.model.ts:12",{"_index":871,"title":{},"body":{"classes/Card.html":{}}}],["src/app/model/card.model.ts:40",{"_index":922,"title":{},"body":{"classes/CardDetail.html":{}}}],["src/app/model/card.model.ts:57",{"_index":154,"title":{},"body":{"classes/Action.html":{}}}],["src/app/model/card.model.ts:85",{"_index":1748,"title":{},"body":{"classes/Input.html":{}}}],["src/app/model/feed",{"_index":1421,"title":{},"body":{"classes/Filter.html":{},"coverage.html":{}}}],["src/app/model/i18n.model.ts",{"_index":1691,"title":{},"body":{"classes/I18n.html":{},"coverage.html":{}}}],["src/app/model/i18n.model.ts:10",{"_index":1693,"title":{},"body":{"classes/I18n.html":{}}}],["src/app/model/light",{"_index":2405,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/model/map.ts",{"_index":1809,"title":{},"body":{"classes/Map.html":{},"coverage.html":{}}}],["src/app/model/map.ts:8",{"_index":1812,"title":{},"body":{"classes/Map.html":{}}}],["src/app/model/thirds.model.ts",{"_index":1928,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"coverage.html":{}}}],["src/app/model/thirds.model.ts:1",{"_index":1936,"title":{},"body":{"classes/Third.html":{}}}],["src/app/model/thirds.model.ts:13",{"_index":1946,"title":{},"body":{"classes/ThirdMenuEntry.html":{}}}],["src/app/model/thirds.model.ts:21",{"_index":1945,"title":{},"body":{"classes/ThirdMenu.html":{}}}],["src/app/modules/archives/archives",{"_index":578,"title":{},"body":{"modules/ArchivesRoutingModule.html":{}}}],["src/app/modules/archives/archives.component.ts",{"_index":565,"title":{},"body":{"components/ArchivesComponent.html":{},"coverage.html":{}}}],["src/app/modules/archives/archives.component.ts:15",{"_index":568,"title":{},"body":{"components/ArchivesComponent.html":{}}}],["src/app/modules/archives/archives.component.ts:19",{"_index":569,"title":{},"body":{"components/ArchivesComponent.html":{}}}],["src/app/modules/archives/archives.module.ts",{"_index":576,"title":{},"body":{"modules/ArchivesModule.html":{}}}],["src/app/modules/cards/cards.module.ts",{"_index":1100,"title":{},"body":{"modules/CardsModule.html":{}}}],["src/app/modules/cards/cards.module.ts:35",{"_index":1102,"title":{},"body":{"modules/CardsModule.html":{}}}],["src/app/modules/cards/components/card",{"_index":923,"title":{},"body":{"components/CardDetailsComponent.html":{},"coverage.html":{}}}],["src/app/modules/cards/components/card/card.component.ts",{"_index":873,"title":{},"body":{"components/CardComponent.html":{},"coverage.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:22",{"_index":883,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:23",{"_index":882,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:24",{"_index":886,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:25",{"_index":881,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:32",{"_index":885,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:37",{"_index":884,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:46",{"_index":888,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts",{"_index":1222,"title":{},"body":{"components/DetailComponent.html":{},"coverage.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:19",{"_index":1251,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:20",{"_index":1240,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:21",{"_index":1239,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:22",{"_index":1253,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:23",{"_index":1238,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:31",{"_index":1248,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:36",{"_index":1247,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:51",{"_index":1246,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:64",{"_index":1255,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:68",{"_index":1249,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:83",{"_index":1245,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:97",{"_index":1244,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts",{"_index":1316,"title":{},"body":{"components/DetailsComponent.html":{},"coverage.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:18",{"_index":1335,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:19",{"_index":1324,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:20",{"_index":1323,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:25",{"_index":1325,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:34",{"_index":1332,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:44",{"_index":1331,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:53",{"_index":1336,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:57",{"_index":1328,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts",{"_index":1566,"title":{},"body":{"injectables/HandlebarsService.html":{},"coverage.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:103",{"_index":1597,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:117",{"_index":1591,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:123",{"_index":1601,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:140",{"_index":1602,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:182",{"_index":1596,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:208",{"_index":1604,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:226",{"_index":1594,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:23",{"_index":1586,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:240",{"_index":1595,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:248",{"_index":1599,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:255",{"_index":1598,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:262",{"_index":1600,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:44",{"_index":1588,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:49",{"_index":1590,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:62",{"_index":1593,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:91",{"_index":1592,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:97",{"_index":1603,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/feed/components/card",{"_index":989,"title":{},"body":{"components/CardListComponent.html":{},"components/FiltersComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["src/app/modules/feed/components/no",{"_index":1869,"title":{},"body":{"components/NoSelectionComponent.html":{},"coverage.html":{}}}],["src/app/modules/feed/components/time",{"_index":2157,"title":{},"body":{"components/TimeLineComponent.html":{},"coverage.html":{}}}],["src/app/modules/feed/feed",{"_index":1413,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["src/app/modules/feed/feed.component.ts",{"_index":1356,"title":{},"body":{"components/FeedComponent.html":{},"coverage.html":{}}}],["src/app/modules/feed/feed.component.ts:23",{"_index":1362,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/modules/feed/feed.component.ts:24",{"_index":1359,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/modules/feed/feed.component.ts:29",{"_index":1361,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/modules/feed/feed.component.ts:38",{"_index":1360,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/modules/feed/feed.module.ts",{"_index":1384,"title":{},"body":{"modules/FeedModule.html":{}}}],["src/app/services/authentication.service.ts",{"_index":581,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/app/services/authentication.service.ts:104",{"_index":863,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:111",{"_index":868,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:123",{"_index":866,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:129",{"_index":860,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:138",{"_index":867,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:150",{"_index":862,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:164",{"_index":861,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:176",{"_index":864,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:185",{"_index":589,"title":{},"body":{"classes/AuthObject.html":{}}}],["src/app/services/authentication.service.ts:186",{"_index":586,"title":{},"body":{"classes/AuthObject.html":{}}}],["src/app/services/authentication.service.ts:187",{"_index":588,"title":{},"body":{"classes/AuthObject.html":{}}}],["src/app/services/authentication.service.ts:188",{"_index":587,"title":{},"body":{"classes/AuthObject.html":{}}}],["src/app/services/authentication.service.ts:195",{"_index":1122,"title":{},"body":{"classes/CheckTokenResponse.html":{}}}],["src/app/services/authentication.service.ts:196",{"_index":1121,"title":{},"body":{"classes/CheckTokenResponse.html":{}}}],["src/app/services/authentication.service.ts:197",{"_index":1120,"title":{},"body":{"classes/CheckTokenResponse.html":{}}}],["src/app/services/authentication.service.ts:30",{"_index":869,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:32",{"_index":857,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:50",{"_index":859,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:65",{"_index":858,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:96",{"_index":865,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/card.service.ts",{"_index":1025,"title":{},"body":{"injectables/CardService.html":{},"coverage.html":{}}}],["src/app/services/card.service.ts:20",{"_index":1046,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:21",{"_index":1032,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:29",{"_index":1041,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:33",{"_index":1037,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:41",{"_index":1035,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:65",{"_index":1044,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:73",{"_index":1038,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/config.service.ts",{"_index":1155,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["src/app/services/config.service.ts:18",{"_index":1158,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/app/services/config.service.ts:24",{"_index":1159,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/app/services/filter.service.ts",{"_index":1475,"title":{},"body":{"injectables/FilterService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/app/services/filter.service.ts:17",{"_index":1481,"title":{},"body":{"injectables/FilterService.html":{}}}],["src/app/services/filter.service.ts:23",{"_index":1487,"title":{},"body":{"injectables/FilterService.html":{}}}],["src/app/services/filter.service.ts:28",{"_index":1485,"title":{},"body":{"injectables/FilterService.html":{}}}],["src/app/services/filter.service.ts:52",{"_index":1483,"title":{},"body":{"injectables/FilterService.html":{}}}],["src/app/services/filter.service.ts:60",{"_index":1484,"title":{},"body":{"injectables/FilterService.html":{}}}],["src/app/services/filter.service.ts:82",{"_index":1482,"title":{},"body":{"injectables/FilterService.html":{}}}],["src/app/services/guid.service.ts",{"_index":1522,"title":{},"body":{"classes/GuidService.html":{},"coverage.html":{}}}],["src/app/services/guid.service.ts:16",{"_index":1525,"title":{},"body":{"classes/GuidService.html":{}}}],["src/app/services/guid.service.ts:22",{"_index":1526,"title":{},"body":{"classes/GuidService.html":{}}}],["src/app/services/guid.service.ts:26",{"_index":1527,"title":{},"body":{"classes/GuidService.html":{}}}],["src/app/services/interceptors.service.ts",{"_index":2183,"title":{},"body":{"interceptors/TokenInjector.html":{},"coverage.html":{}}}],["src/app/services/interceptors.service.ts:14",{"_index":2187,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["src/app/services/interceptors.service.ts:20",{"_index":2193,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["src/app/services/interceptors.service.ts:25",{"_index":2190,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["src/app/services/services.module.ts",{"_index":1891,"title":{},"body":{"modules/ServicesModule.html":{}}}],["src/app/services/services.module.ts:42",{"_index":1892,"title":{},"body":{"modules/ServicesModule.html":{}}}],["src/app/services/thirds.service.ts",{"_index":1948,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{}}}],["src/app/services/thirds.service.ts:106",{"_index":2069,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:112",{"_index":2071,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:119",{"_index":2072,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:171",{"_index":2073,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:176",{"_index":1951,"title":{},"body":{"classes/ThirdsI18nLoader.html":{}}}],["src/app/services/thirds.service.ts:180",{"_index":1953,"title":{},"body":{"classes/ThirdsI18nLoader.html":{}}}],["src/app/services/thirds.service.ts:24",{"_index":2076,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:25",{"_index":2074,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:26",{"_index":2075,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:27",{"_index":2063,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:38",{"_index":2066,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:49",{"_index":2064,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:56",{"_index":2067,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:90",{"_index":2065,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/time.service.ts",{"_index":2165,"title":{},"body":{"injectables/TimeService.html":{},"coverage.html":{}}}],["src/app/services/time.service.ts:11",{"_index":2170,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/services/time.service.ts:16",{"_index":2175,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/services/time.service.ts:20",{"_index":2177,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/services/time.service.ts:24",{"_index":2174,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/services/time.service.ts:28",{"_index":2172,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/store/actions/authentication.actions.ts",{"_index":6,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/authentication.actions.ts:110",{"_index":136,"title":{},"body":{"classes/AcceptLogOut.html":{}}}],["src/app/store/actions/authentication.actions.ts:125",{"_index":137,"title":{},"body":{"classes/AcceptLogOutSuccess.html":{}}}],["src/app/store/actions/authentication.actions.ts:21",{"_index":1877,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["src/app/store/actions/authentication.actions.ts:22",{"_index":1880,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["src/app/store/actions/authentication.actions.ts:23",{"_index":1878,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["src/app/store/actions/authentication.actions.ts:24",{"_index":1881,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["src/app/store/actions/authentication.actions.ts:25",{"_index":1879,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["src/app/store/actions/authentication.actions.ts:35",{"_index":1119,"title":{},"body":{"classes/CheckAuthenticationStatus.html":{}}}],["src/app/store/actions/authentication.actions.ts:50",{"_index":43,"title":{},"body":{"classes/AcceptLogIn.html":{}}}],["src/app/store/actions/authentication.actions.ts:52",{"_index":48,"title":{},"body":{"classes/AcceptLogIn.html":{}}}],["src/app/store/actions/authentication.actions.ts:63",{"_index":2203,"title":{},"body":{"classes/TryToLogIn.html":{}}}],["src/app/store/actions/authentication.actions.ts:65",{"_index":2204,"title":{},"body":{"classes/TryToLogIn.html":{}}}],["src/app/store/actions/authentication.actions.ts:76",{"_index":2205,"title":{},"body":{"classes/TryToLogOut.html":{}}}],["src/app/store/actions/authentication.actions.ts:93",{"_index":1882,"title":{},"body":{"classes/RejectLogIn.html":{}}}],["src/app/store/actions/authentication.actions.ts:95",{"_index":1883,"title":{},"body":{"classes/RejectLogIn.html":{}}}],["src/app/store/actions/card.actions.ts",{"_index":1532,"title":{},"body":{"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/card.actions.ts:19",{"_index":1766,"title":{},"body":{"classes/LoadCard.html":{}}}],["src/app/store/actions/card.actions.ts:21",{"_index":1767,"title":{},"body":{"classes/LoadCard.html":{}}}],["src/app/store/actions/card.actions.ts:25",{"_index":1768,"title":{},"body":{"classes/LoadCardFailure.html":{}}}],["src/app/store/actions/card.actions.ts:27",{"_index":1769,"title":{},"body":{"classes/LoadCardFailure.html":{}}}],["src/app/store/actions/card.actions.ts:32",{"_index":1770,"title":{},"body":{"classes/LoadCardSuccess.html":{}}}],["src/app/store/actions/card.actions.ts:34",{"_index":1771,"title":{},"body":{"classes/LoadCardSuccess.html":{}}}],["src/app/store/actions/card.actions.ts:40",{"_index":1533,"title":{},"body":{"classes/HandleUnexpectedError.html":{}}}],["src/app/store/actions/card.actions.ts:42",{"_index":1534,"title":{},"body":{"classes/HandleUnexpectedError.html":{}}}],["src/app/store/actions/config.actions.ts",{"_index":1541,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/config.actions.ts:18",{"_index":1772,"title":{},"body":{"classes/LoadConfig.html":{}}}],["src/app/store/actions/config.actions.ts:21",{"_index":1773,"title":{},"body":{"classes/LoadConfigFailure.html":{}}}],["src/app/store/actions/config.actions.ts:23",{"_index":1774,"title":{},"body":{"classes/LoadConfigFailure.html":{}}}],["src/app/store/actions/config.actions.ts:28",{"_index":1775,"title":{},"body":{"classes/LoadConfigSuccess.html":{}}}],["src/app/store/actions/config.actions.ts:30",{"_index":1776,"title":{},"body":{"classes/LoadConfigSuccess.html":{}}}],["src/app/store/actions/config.actions.ts:36",{"_index":1542,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{}}}],["src/app/store/actions/config.actions.ts:38",{"_index":1543,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{}}}],["src/app/store/actions/feed.actions.ts",{"_index":548,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilters.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/feed.actions.ts:18",{"_index":549,"title":{},"body":{"classes/ApplyFilter.html":{}}}],["src/app/store/actions/feed.actions.ts:19",{"_index":550,"title":{},"body":{"classes/ApplyFilter.html":{}}}],["src/app/store/actions/feed.actions.ts:23",{"_index":1746,"title":{},"body":{"classes/InitFilters.html":{}}}],["src/app/store/actions/feed.actions.ts:24",{"_index":1747,"title":{},"body":{"classes/InitFilters.html":{}}}],["src/app/store/actions/light",{"_index":205,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/menu.actions.ts",{"_index":1552,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/menu.actions.ts:19",{"_index":1783,"title":{},"body":{"classes/LoadMenu.html":{}}}],["src/app/store/actions/menu.actions.ts:25",{"_index":1784,"title":{},"body":{"classes/LoadMenuFailure.html":{}}}],["src/app/store/actions/menu.actions.ts:27",{"_index":1785,"title":{},"body":{"classes/LoadMenuFailure.html":{}}}],["src/app/store/actions/menu.actions.ts:32",{"_index":1786,"title":{},"body":{"classes/LoadMenuSuccess.html":{}}}],["src/app/store/actions/menu.actions.ts:34",{"_index":1787,"title":{},"body":{"classes/LoadMenuSuccess.html":{}}}],["src/app/store/actions/menu.actions.ts:39",{"_index":1553,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{}}}],["src/app/store/actions/menu.actions.ts:41",{"_index":1554,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{}}}],["src/app/store/effects/authentication.effects.ts",{"_index":754,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/authentication.effects.ts:102",{"_index":840,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:123",{"_index":777,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:142",{"_index":817,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:166",{"_index":800,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:187",{"_index":769,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:193",{"_index":767,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:32",{"_index":758,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:52",{"_index":810,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:74",{"_index":832,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/card",{"_index":996,"title":{},"body":{"injectables/CardOperationEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/card.effects.ts",{"_index":939,"title":{},"body":{"injectables/CardEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/card.effects.ts:20",{"_index":942,"title":{},"body":{"injectables/CardEffects.html":{}}}],["src/app/store/effects/card.effects.ts:30",{"_index":949,"title":{},"body":{"injectables/CardEffects.html":{}}}],["src/app/store/effects/config.effects.ts",{"_index":1123,"title":{},"body":{"injectables/ConfigEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/config.effects.ts:21",{"_index":1127,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["src/app/store/effects/config.effects.ts:54",{"_index":1133,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["src/app/store/effects/config.effects.ts:71",{"_index":1136,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["src/app/store/effects/custom",{"_index":1170,"title":{},"body":{"injectables/CustomRouterEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/feed",{"_index":1371,"title":{},"body":{"injectables/FeedFiltersEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/light",{"_index":1749,"title":{},"body":{"injectables/LightCardEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/menu.effects.ts",{"_index":1813,"title":{},"body":{"injectables/MenuEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/menu.effects.ts:19",{"_index":1814,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["src/app/store/effects/menu.effects.ts:29",{"_index":1822,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["src/app/store/index.ts",{"_index":485,"title":{},"body":{"interfaces/AppState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/reducers/authentication.reducer.ts",{"_index":2293,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/reducers/card.reducer.ts",{"_index":2299,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/reducers/config.reducer.ts",{"_index":2301,"title":{},"body":{"coverage.html":{}}}],["src/app/store/reducers/light",{"_index":2302,"title":{},"body":{"coverage.html":{}}}],["src/app/store/reducers/menu.reducer.ts",{"_index":2304,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/authentication.selectors.ts",{"_index":2305,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/card.selectors.ts",{"_index":2307,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/config.selectors.ts",{"_index":2311,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/feed.selectors.ts",{"_index":2315,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/menu.selectors.ts",{"_index":2322,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/router.selectors.ts",{"_index":2324,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/state.module.ts",{"_index":1904,"title":{},"body":{"modules/StateModule.html":{}}}],["src/app/store/state.module.ts:33",{"_index":1905,"title":{},"body":{"modules/StateModule.html":{}}}],["src/app/store/states/authentication.state.ts",{"_index":749,"title":{},"body":{"interfaces/AuthState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/card.state.ts",{"_index":1092,"title":{},"body":{"interfaces/CardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/config.state.ts",{"_index":1166,"title":{},"body":{"interfaces/ConfigState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/feed.state.ts",{"_index":959,"title":{},"body":{"interfaces/CardFeedState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/menu.state.ts",{"_index":1825,"title":{},"body":{"interfaces/MenuState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/router.state.ts",{"_index":1186,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/router.state.ts:37",{"_index":1885,"title":{},"body":{"classes/RouterStateUrl.html":{}}}],["src/app/store/states/router.state.ts:48",{"_index":1195,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{}}}],["src/app/store/states/router.state.ts:55",{"_index":1192,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{}}}],["src/app/translate.config.ts",{"_index":2328,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.prod.ts",{"_index":2332,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":2333,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test.ts",{"_index":2334,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/tests/helpers.ts",{"_index":2337,"title":{},"body":{"coverage.html":{}}}],["src/tests/mocks/thirds.service.mock.ts",{"_index":2078,"title":{},"body":{"classes/ThirdsServiceMock.html":{},"coverage.html":{}}}],["src/tests/mocks/thirds.service.mock.ts:14",{"_index":2080,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["src/tests/mocks/thirds.service.mock.ts:5",{"_index":2079,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["sse",{"_index":1087,"title":{},"body":{"injectables/CardService.html":{}}}],["start",{"_index":2149,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["startdate",{"_index":168,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["state",{"_index":11,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"interfaces/CardFeedState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/variables.html":{}}}],["state.card",{"_index":2479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.children",{"_index":1220,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["state.config",{"_index":2485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.expirationdate",{"_index":2446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.feed",{"_index":2475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.filters",{"_index":2466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.identifier",{"_index":2452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.lastcards",{"_index":2472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.menu",{"_index":2498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.params",{"_index":1218,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["state.selectedcardid",{"_index":2454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.token",{"_index":2453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state:appstate",{"_index":2474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":2258,"title":{},"body":{"coverage.html":{}}}],["statemodule",{"_index":414,"title":{"modules/StateModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StateModule.html":{},"index.html":{},"modules.html":{}}}],["statemodule.forroot",{"_index":447,"title":{},"body":{"modules/AppModule.html":{}}}],["static",{"_index":196,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"modules/CardsModule.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/RouterStateUrl.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"miscellaneous/enumerations.html":{}}}],["status",{"_index":60,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"classes/InitFilters.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"components/TimeFilterComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/enumerations.html":{}}}],["status.action",{"_index":1500,"title":{},"body":{"injectables/FilterService.html":{}}}],["status.alarm",{"_index":1498,"title":{},"body":{"injectables/FilterService.html":{}}}],["status.end",{"_index":1505,"title":{},"body":{"injectables/FilterService.html":{}}}],["status.notification",{"_index":1502,"title":{},"body":{"injectables/FilterService.html":{}}}],["status.question",{"_index":1501,"title":{},"body":{"injectables/FilterService.html":{}}}],["status.start",{"_index":1504,"title":{},"body":{"injectables/FilterService.html":{}}}],["still",{"_index":679,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["stillvalid",{"_index":686,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["stops",{"_index":1456,"title":{},"body":{"classes/Filter.html":{}}}],["store",{"_index":112,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"dependencies.html":{}}}],["store/index",{"_index":1961,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["storeconfig",{"_index":543,"title":{},"body":{"interfaces/AppState.html":{},"modules/StateModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stored",{"_index":677,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["storedevtoolsmodule",{"_index":1908,"title":{},"body":{"modules/StateModule.html":{}}}],["storedevtoolsmodule.instrument",{"_index":1917,"title":{},"body":{"modules/StateModule.html":{}}}],["storefreeze",{"_index":503,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["storemodule",{"_index":1906,"title":{},"body":{"modules/StateModule.html":{}}}],["storemodule.forroot(appreducer",{"_index":1912,"title":{},"body":{"modules/StateModule.html":{}}}],["storerouterconnectingmodule",{"_index":1911,"title":{},"body":{"modules/StateModule.html":{}}}],["storerouterconnectingmodule.forroot",{"_index":1913,"title":{},"body":{"modules/StateModule.html":{}}}],["string",{"_index":75,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/Map.html":{},"interfaces/MenuState.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"injectables/TimeService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/variables.html":{}}}],["string):observable",{"_index":1628,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["structure",{"_index":1921,"title":{},"body":{"modules/StateModule.html":{}}}],["style",{"_index":1266,"title":{},"body":{"components/DetailComponent.html":{}}}],["stylename",{"_index":1974,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["styles",{"_index":185,"title":{},"body":{"classes/Action.html":{},"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"classes/Input.html":{},"components/LoginComponent.html":{},"classes/ParameterListItem.html":{},"components/TypeFilterComponent.html":{}}}],["styleurls",{"_index":261,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/TypeFilterComponent.html":{}}}],["sub",{"_index":737,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["subject",{"_index":349,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["submitted",{"_index":837,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["subscribe",{"_index":998,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["subscribe((maxedretries=>this.maxedretries=maxedretries",{"_index":332,"title":{},"body":{"components/AppComponent.html":{}}}],["subscribe(card=>this.card",{"_index":936,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["subscribe(details=>this.details",{"_index":938,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["subscribe(form",{"_index":2145,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["subscribe(isauth",{"_index":323,"title":{},"body":{"components/AppComponent.html":{}}}],["subscribe(loaded",{"_index":328,"title":{},"body":{"components/AppComponent.html":{}}}],["subscribetoloadi18n",{"_index":2062,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["subscribetoloadi18n(observable",{"_index":2020,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["subscription",{"_index":284,"title":{},"body":{"components/AppComponent.html":{}}}],["subtitle",{"_index":913,"title":{},"body":{"components/CardComponent.html":{}}}],["success",{"_index":72,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["success/error",{"_index":1135,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["successfulauth",{"_index":665,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["such",{"_index":697,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["summary",{"_index":174,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["support",{"_index":2411,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1405,"title":{},"body":{"modules/FeedModule.html":{},"dependencies.html":{},"modules.html":{}}}],["svgpanzoom(document.getelementbyid('${svguid",{"_index":1665,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["switch",{"_index":1644,"title":{},"body":{"injectables/HandlebarsService.html":{},"components/IconComponent.html":{}}}],["switch(operator",{"_index":1653,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["switch_list",{"_index":194,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["switchmap",{"_index":788,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["switchmap((action",{"_index":820,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["switchmap((action:loadlightcardssuccess",{"_index":1754,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["switchmap((af:applyfilter",{"_index":1019,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["switchmap((ids:string",{"_index":2024,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["switchmap(action",{"_index":944,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/MenuEffects.html":{}}}],["switchmap(menu=>zip(of(menu),this.service.loadi18nformenuentries(menu",{"_index":1817,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["switchmap(ts=>from(ts",{"_index":1999,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["system",{"_index":124,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["t",{"_index":1811,"title":{},"body":{"classes/Map.html":{}}}],["t.i18nlabelkey",{"_index":2004,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["t.menuentries",{"_index":2005,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["t.version",{"_index":2003,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["tab",{"_index":1344,"title":{},"body":{"components/DetailsComponent.html":{}}}],["tab.active",{"_index":1343,"title":{},"body":{"components/DetailsComponent.html":{}}}],["table",{"_index":2245,"title":{},"body":{"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2357,"title":{},"body":{"coverage.html":{}}}],["tabs",{"_index":1350,"title":{},"body":{"components/DetailsComponent.html":{}}}],["take",{"_index":280,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"classes/Filter.html":{}}}],["takes",{"_index":1200,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/RouterStateUrl.html":{}}}],["takeuntil",{"_index":2117,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["takeuntil(this.ngunsubscribe",{"_index":2140,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["takeuntil(this.ngunsubscribe$)).subscribe",{"_index":2138,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["tap",{"_index":814,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"components/NavbarComponent.html":{}}}],["tap(t=>this.templatecache[key]=t",{"_index":1638,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["tap(test=>console.log(`loaded",{"_index":1756,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["tells",{"_index":779,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["template",{"_index":253,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["templatecache",{"_index":1567,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["templatecache:map",{"_index":1607,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["templatename",{"_index":184,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"injectables/HandlebarsService.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["templates",{"_index":1931,"title":{},"body":{"classes/Third.html":{}}}],["templates?:string",{"_index":1938,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["templateurl",{"_index":263,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["templateurl:'icon.component.html",{"_index":1714,"title":{},"body":{"components/IconComponent.html":{}}}],["terms",{"_index":350,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{}}}],["test",{"_index":746,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["test_filter",{"_index":1517,"title":{},"body":{"injectables/FilterService.html":{},"miscellaneous/enumerations.html":{}}}],["text",{"_index":191,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/DetailComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/enumerations.html":{}}}],["that.time.currenttime",{"_index":1679,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["third",{"_index":1927,"title":{"classes/Third.html":{}},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{}}}],["thirdmenu",{"_index":1556,"title":{"classes/ThirdMenu.html":{}},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"coverage.html":{}}}],["thirdmenu('t1",{"_index":2082,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["thirdmenu('t2",{"_index":2090,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["thirdmenu(t.name",{"_index":2002,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["thirdmenuentry",{"_index":1935,"title":{"classes/ThirdMenuEntry.html":{}},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsServiceMock.html":{},"coverage.html":{}}}],["thirdmenuentry('id1",{"_index":2084,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["thirdmenuentry('id2",{"_index":2087,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["thirdmenuentry('id3",{"_index":2092,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["thirdmenus",{"_index":1835,"title":{},"body":{"components/NavbarComponent.html":{}}}],["thirds",{"_index":1234,"title":{},"body":{"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{},"miscellaneous/variables.html":{}}}],["thirdservice",{"_index":1751,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["thirdsi18nloader",{"_index":1947,"title":{"classes/ThirdsI18nLoader.html":{}},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{}}}],["thirdsi18nloader(thirdsservice",{"_index":2056,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["thirdsi18nloaderfactory",{"_index":1116,"title":{},"body":{"modules/CardsModule.html":{},"coverage.html":{}}}],["thirdsi18nloaderfactory(thirdsservice",{"_index":2055,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["thirdsservice",{"_index":1109,"title":{"injectables/ThirdsService.html":{}},"body":{"modules/CardsModule.html":{},"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{},"index.html":{}}}],["thirdsservicemock",{"_index":2077,"title":{"classes/ThirdsServiceMock.html":{}},"body":{"classes/ThirdsServiceMock.html":{},"coverage.html":{}}}],["thirdsurl",{"_index":1963,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.$injector.get(translateservice",{"_index":2054,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this._defaultfilters",{"_index":1489,"title":{},"body":{"injectables/FilterService.html":{}}}],["this._filter",{"_index":2118,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["this._filter$.pipe(first",{"_index":2137,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this._filter$.pipe(first(),takeuntil(this.ngunsubscribe$)).subscribe",{"_index":2230,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this._filter$.pipe(takeuntil(this.ngunsubscribe$)).subscribe((next",{"_index":2124,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["this._htmlcontent",{"_index":1284,"title":{},"body":{"components/DetailComponent.html":{}}}],["this._i18nprefix",{"_index":892,"title":{},"body":{"components/CardComponent.html":{},"components/DetailsComponent.html":{}}}],["this._thirdmenus",{"_index":1857,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this._thirdmenus=this.store.select(selectmenustatemenu",{"_index":1852,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.actions",{"_index":785,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["this.actions$.pipe",{"_index":771,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CustomRouterEffects.html":{}}}],["this.actions$.pipe(oftype(authenticationactiontypes.rejectlogin",{"_index":813,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.active",{"_index":1466,"title":{},"body":{"classes/Filter.html":{}}}],["this.attachaction(button",{"_index":1298,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.authenticationservice.getsecurityheader",{"_index":1086,"title":{},"body":{"injectables/CardService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{}}}],["this.authservice.asktoken(payload.username",{"_index":822,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.authservice.checkauthentication(this.authservice.extracttoken",{"_index":789,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.authservice.clearauthenticationinformation",{"_index":815,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.authservice.extractidentificationinformation",{"_index":850,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.authservice.isexpirationdateover",{"_index":791,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.big",{"_index":1729,"title":{},"body":{"components/IconComponent.html":{}}}],["this.big?'big':this.medium?'medium':'small",{"_index":1735,"title":{},"body":{"components/IconComponent.html":{}}}],["this.bindactions",{"_index":1289,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.card).subscribe",{"_index":1283,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.card.actions[actionid",{"_index":1299,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.card.publisher",{"_index":1261,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.card.publisherversion",{"_index":1262,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.cardoperationsurl",{"_index":1055,"title":{},"body":{"injectables/CardService.html":{}}}],["this.cardoperationsurl}&notification=true&rangestart=${minus2hour.valueof()}&rangeend=${plus48hours.valueof",{"_index":1067,"title":{},"body":{"injectables/CardService.html":{}}}],["this.cardsurl",{"_index":1057,"title":{},"body":{"injectables/CardService.html":{}}}],["this.configloaded",{"_index":329,"title":{},"body":{"components/AppComponent.html":{}}}],["this.configurl",{"_index":1163,"title":{},"body":{"injectables/ConfigService.html":{}}}],["this.convert(authobjt",{"_index":666,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["this.createformgroup",{"_index":2120,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["this.currentpath",{"_index":320,"title":{},"body":{"components/AppComponent.html":{},"components/CardComponent.html":{},"components/NavbarComponent.html":{}}}],["this.dark",{"_index":1733,"title":{},"body":{"components/IconComponent.html":{}}}],["this.detail",{"_index":1259,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.detail.styles",{"_index":1260,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.detail.styles.foreach(style",{"_index":1263,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.details.changes.subscribe",{"_index":1340,"title":{},"body":{"components/DetailsComponent.html":{}}}],["this.details.filter((tab",{"_index":1342,"title":{},"body":{"components/DetailsComponent.html":{}}}],["this.details.toarray().foreach(detail",{"_index":1351,"title":{},"body":{"components/DetailsComponent.html":{}}}],["this.element.nativeelement.getelementsbytagname('button",{"_index":1294,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.element.nativeelement.getelementsbytagname('script",{"_index":1291,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.expandedmenu=new",{"_index":1854,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.expandedmenu[index]=!this.expandedmenu[index",{"_index":1859,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.extractparams(child",{"_index":1221,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["this.extractparams(routerstate.root",{"_index":1215,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["this.extracttoken",{"_index":732,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["this.fetchcardoperation(new",{"_index":1066,"title":{},"body":{"injectables/CardService.html":{}}}],["this.fetchi18njson(publisher",{"_index":2036,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.funktion",{"_index":1465,"title":{},"body":{"classes/Filter.html":{}}}],["this.funktion(card,this.status",{"_index":1470,"title":{},"body":{"classes/Filter.html":{}}}],["this.getcurrentguid().tostring",{"_index":1531,"title":{},"body":{"classes/GuidService.html":{}}}],["this.getroutepe",{"_index":316,"title":{},"body":{"components/AppComponent.html":{}}}],["this.guid",{"_index":1528,"title":{},"body":{"classes/GuidService.html":{}}}],["this.guidservice.getcurrentguid",{"_index":663,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["this.guidservice.getcurrentguidstring",{"_index":1054,"title":{},"body":{"injectables/CardService.html":{}}}],["this.handlebars.executetemplate(this.detail.templatename",{"_index":1282,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.handleheaders",{"_index":1068,"title":{},"body":{"injectables/CardService.html":{}}}],["this.handleloginattempt(payload",{"_index":794,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.handlerejectedlogin('expiration",{"_index":792,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.handlerejectedlogin('invalid",{"_index":852,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.hide",{"_index":1802,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.hrefsofcsslink.push(safecssurl",{"_index":1274,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.httpclient.get(`${this.cardsurl}/${id",{"_index":1059,"title":{},"body":{"injectables/CardService.html":{}}}],["this.httpclient.get(`${this.configurl",{"_index":1165,"title":{},"body":{"injectables/ConfigService.html":{}}}],["this.httpclient.get(`${this.thirdsurl",{"_index":1998,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.httpclient.get(`${this.thirdsurl}/${publisher}/i18n",{"_index":1985,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.httpclient.get(`${this.thirdsurl}/${publisher}/templates/${name",{"_index":1971,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.httpclient.post",{"_index":1084,"title":{},"body":{"injectables/CardService.html":{}}}],["this.httpclient.post(this.asktokenurl",{"_index":653,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["this.httpclient.post(this.checktokenurl",{"_index":628,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["this.iconpath",{"_index":1727,"title":{},"body":{"components/IconComponent.html":{}}}],["this.initfilters",{"_index":1490,"title":{},"body":{"injectables/FilterService.html":{}}}],["this.initializehandlebarstemplates",{"_index":1258,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.initializehrefsofcsslink",{"_index":1257,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.initrecipientfilter",{"_index":1511,"title":{},"body":{"injectables/FilterService.html":{}}}],["this.inittimefilter",{"_index":1513,"title":{},"body":{"injectables/FilterService.html":{}}}],["this.inittypefilter",{"_index":1509,"title":{},"body":{"injectables/FilterService.html":{}}}],["this.isauthenticated",{"_index":324,"title":{},"body":{"components/AppComponent.html":{}}}],["this.light",{"_index":1734,"title":{},"body":{"components/IconComponent.html":{}}}],["this.lightcard.publisher+'.'+this.lightcard.publisherversion",{"_index":893,"title":{},"body":{"components/CardComponent.html":{}}}],["this.lightcards",{"_index":1365,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.loaded",{"_index":2030,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.loaded.push(result.id",{"_index":2050,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.loading",{"_index":2028,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.loading.push(id",{"_index":2032,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.medium",{"_index":1731,"title":{},"body":{"components/IconComponent.html":{}}}],["this.ngunsubscribe$.complete",{"_index":2122,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["this.ngunsubscribe$.next",{"_index":2121,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["this.open=true",{"_index":891,"title":{},"body":{"components/CardComponent.html":{}}}],["this.querytemplate(card.publisher,card.publisherversion,templatename).pipe",{"_index":1624,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerarrayatindex",{"_index":1617,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerarrayatindexlength",{"_index":1620,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerbool",{"_index":1621,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registercardaction",{"_index":1612,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerdateformat",{"_index":1611,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registeri18n",{"_index":1614,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registermath",{"_index":1618,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registernow",{"_index":1622,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registernumberformat",{"_index":1610,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerpreservespace",{"_index":1609,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerslice",{"_index":1616,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registersort",{"_index":1615,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registersplit",{"_index":1619,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registersvg",{"_index":1613,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.reinsertscripts",{"_index":1288,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.retry",{"_index":1150,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["this.retrydelay",{"_index":1148,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["this.router.navigate(['/'+this.currentpath,'cards',this.lightcard.id",{"_index":890,"title":{},"body":{"components/CardComponent.html":{}}}],["this.router.navigate(['/login",{"_index":774,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.sanitizer.bypasssecuritytrusthtml(html",{"_index":1285,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.sanitizer.bypasssecuritytrustresourceurl(cssurl",{"_index":1273,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.saveauthenticationinformation(successfulauth",{"_index":667,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["this.selectdetail(this.details.first",{"_index":1348,"title":{},"body":{"components/DetailsComponent.html":{}}}],["this.selection",{"_index":1369,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.service.computethirdsmenu",{"_index":1816,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["this.service.fetchconfiguration",{"_index":1129,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["this.service.getcardoperation",{"_index":1003,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["this.service.loadcard(action.payload.id",{"_index":945,"title":{},"body":{"injectables/CardEffects.html":{}}}],["this.service.updatecardsubscriptionwithdates(af.payload.status.start,af.payload.status.end",{"_index":1020,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["this.size",{"_index":1736,"title":{},"body":{"components/IconComponent.html":{}}}],["this.small",{"_index":1732,"title":{},"body":{"components/IconComponent.html":{}}}],["this.sprites='sprites",{"_index":1741,"title":{},"body":{"components/IconComponent.html":{}}}],["this.sprites='sprites.svg",{"_index":1743,"title":{},"body":{"components/IconComponent.html":{}}}],["this.status",{"_index":1467,"title":{},"body":{"classes/Filter.html":{}}}],["this.store",{"_index":326,"title":{},"body":{"components/AppComponent.html":{}}}],["this.store.dispatch",{"_index":2146,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["this.store.dispatch(new",{"_index":335,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{}}}],["this.store.pipe",{"_index":1366,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.store.pipe(select(selectcurrenturl)).subscribe(url",{"_index":319,"title":{},"body":{"components/AppComponent.html":{}}}],["this.store.pipe(select(selectexpirationtime",{"_index":321,"title":{},"body":{"components/AppComponent.html":{}}}],["this.store.pipe(select(selectrouterstate",{"_index":317,"title":{},"body":{"components/AppComponent.html":{}}}],["this.store.select(buildfilterselector(filtertype.time_filter",{"_index":2123,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.store.select(buildfilterselector(filtertype.type_filter",{"_index":2217,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.store.select(cardselectors.selectcardstateselection",{"_index":935,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["this.store.select(cardselectors.selectcardstateselectiondetails",{"_index":937,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["this.store.select(feedselectors.selectlightcardselection",{"_index":1370,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.store.select(selectcurrenturl).subscribe(url",{"_index":894,"title":{},"body":{"components/CardComponent.html":{},"components/NavbarComponent.html":{}}}],["this.subscribetoloadi18n(observable",{"_index":2014,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.templatecache[key",{"_index":1633,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.thirds.computethirdcssurl(publisher",{"_index":1265,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.thirds.fetchhbstemplate(publisher,version,name,locale).pipe",{"_index":1636,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.thirdservice.loadi18nforlightcards(action.payload.lightcards",{"_index":1755,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["this.thirdsurl",{"_index":1966,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.timefilterform",{"_index":2119,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timefilterform.get('end').setvalue(null",{"_index":2134,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timefilterform.get('end').setvalue(this.timeservice.aslocalstring(next.status.end",{"_index":2133,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timefilterform.get('end').value",{"_index":2136,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timefilterform.get('start').setvalue(null",{"_index":2129,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timefilterform.get('start').setvalue(this.timeservice.aslocalstring(next.status.start",{"_index":2128,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timefilterform.get('start').value",{"_index":2135,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timeservice.parsestring(form.end",{"_index":2152,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timeservice.parsestring(form.start",{"_index":2150,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timeservice.parsestring(this.timefilterform.get('end').value",{"_index":2130,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timeservice.parsestring(this.timefilterform.get('start').value",{"_index":2125,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.translate().getlangs",{"_index":2037,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.translate().settranslation(lang",{"_index":2047,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.translate().use(lang",{"_index":2048,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.translate.getbrowserlang",{"_index":1630,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.translate.setdefaultlang('en",{"_index":318,"title":{},"body":{"components/AppComponent.html":{}}}],["this.typefilterform",{"_index":2216,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.typefilterform.get('action').setvalue(!next.active",{"_index":2220,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.typefilterform.get('action').setvalue(true",{"_index":2227,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.typefilterform.get('alarm').setvalue(!next.active",{"_index":2218,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.typefilterform.get('alarm').setvalue(true",{"_index":2226,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.typefilterform.get('notification').setvalue(!next.active",{"_index":2224,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.typefilterform.get('notification').setvalue(true",{"_index":2229,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.typefilterform.get('question').setvalue(!next.active",{"_index":2222,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.typefilterform.get('question').setvalue(true",{"_index":2228,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.updateasync",{"_index":1339,"title":{},"body":{"components/DetailsComponent.html":{}}}],["this.urlcleaner",{"_index":1965,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.urlcleaner.encodevalue(`${this.thirdsurl}/${publisher}/css/${stylename",{"_index":1978,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.userform",{"_index":1803,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userform.get('identifier').value",{"_index":1805,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userform.get('password').value",{"_index":1806,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userform.reset",{"_index":1808,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userform.valid",{"_index":1804,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.verifyexpirationdate",{"_index":691,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["those",{"_index":956,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/LightCardEffects.html":{}}}],["throw",{"_index":1900,"title":{},"body":{"modules/ServicesModule.html":{}}}],["throwerror",{"_index":593,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["throwerror(err",{"_index":2042,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["throwerror(error",{"_index":670,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["thrown",{"_index":622,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["thus",{"_index":125,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["time",{"_index":392,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/RouterStateUrl.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/variables.html":{}}}],["time:timeservice",{"_index":1608,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["time_filter",{"_index":1516,"title":{},"body":{"injectables/FilterService.html":{},"miscellaneous/enumerations.html":{}}}],["timefiltercomponent",{"_index":391,"title":{"components/TimeFilterComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["timefilterform",{"_index":2102,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["timelinecomponent",{"_index":394,"title":{"components/TimeLineComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["timer",{"_index":2114,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["timer(500",{"_index":2144,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["timeservice",{"_index":1585,"title":{"injectables/TimeService.html":{}},"body":{"injectables/HandlebarsService.html":{},"modules/ServicesModule.html":{},"components/TimeFilterComponent.html":{},"injectables/TimeService.html":{},"coverage.html":{},"index.html":{}}}],["title",{"_index":173,"title":{},"body":{"classes/Action.html":{},"components/AppComponent.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["titleposition",{"_index":179,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["titlestyle",{"_index":183,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["tlabel1",{"_index":2083,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["tlabel2",{"_index":2091,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["tmenu.entries[0].label",{"_index":1864,"title":{},"body":{"components/NavbarComponent.html":{}}}],["tmenu.id}}.{{tmenu.version}}.{{entry.label",{"_index":1866,"title":{},"body":{"components/NavbarComponent.html":{}}}],["tmenu.id}}.{{tmenu.version}}.{{tmenu.label",{"_index":1863,"title":{},"body":{"components/NavbarComponent.html":{}}}],["todo",{"_index":471,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["togglemenu",{"_index":1834,"title":{},"body":{"components/NavbarComponent.html":{}}}],["togglemenu(index",{"_index":1839,"title":{},"body":{"components/NavbarComponent.html":{}}}],["togglemenu(index:number",{"_index":1858,"title":{},"body":{"components/NavbarComponent.html":{}}}],["token",{"_index":77,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tokeninjector",{"_index":1890,"title":{"interceptors/TokenInjector.html":{}},"body":{"modules/ServicesModule.html":{},"interceptors/TokenInjector.html":{},"coverage.html":{},"index.html":{}}}],["trace",{"_index":281,"title":{},"body":{"components/AppComponent.html":{}}}],["trackism",{"_index":657,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["trackism.clientid",{"_index":662,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["trackism.identifier",{"_index":658,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["trans",{"_index":2040,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["translate",{"_index":274,"title":{},"body":{"components/AppComponent.html":{},"injectables/HandlebarsService.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["translate.config",{"_index":446,"title":{},"body":{"modules/AppModule.html":{}}}],["translate/core",{"_index":307,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"injectables/HandlebarsService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"dependencies.html":{}}}],["translate/http",{"_index":2370,"title":{},"body":{"dependencies.html":{}}}],["translateconfig",{"_index":445,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["translateloader",{"_index":1114,"title":{},"body":{"modules/CardsModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["translatemodule",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{}}}],["translatemodule.forchild",{"_index":1112,"title":{},"body":{"modules/CardsModule.html":{}}}],["translatemodule.forroot(translateconfig",{"_index":449,"title":{},"body":{"modules/AppModule.html":{}}}],["translatemoduleconfig",{"_index":2457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["translateservice",{"_index":275,"title":{},"body":{"components/AppComponent.html":{},"injectables/HandlebarsService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["translation",{"_index":2039,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["translation',error",{"_index":2053,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["translationelement",{"_index":2045,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["tree",{"_index":255,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["triggered.\\naction",{"_index":1313,"title":{},"body":{"components/DetailComponent.html":{}}}],["triggers",{"_index":811,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["true",{"_index":675,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"classes/CheckTokenResponse.html":{},"components/DetailsComponent.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"injectables/HandlebarsService.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":67,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["trying",{"_index":828,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["trylogout",{"_index":784,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["trytologin",{"_index":19,"title":{"classes/TryToLogIn.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["trytologin({username",{"_index":1807,"title":{},"body":{"components/LoginComponent.html":{}}}],["trytologout",{"_index":68,"title":{"classes/TryToLogOut.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["tslib",{"_index":2383,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":1429,"title":{},"body":{"classes/Filter.html":{}}}],["type",{"_index":32,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type_filter",{"_index":1514,"title":{},"body":{"injectables/FilterService.html":{},"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":2414,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedef",{"_index":848,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["typefiltercomponent",{"_index":396,"title":{"components/TypeFilterComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["typefilterform",{"_index":2207,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["typeof",{"_index":1688,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["typescript",{"_index":54,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"dependencies.html":{}}}],["u00a0",{"_index":1683,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["ui/assets/i18n",{"_index":2456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uid",{"_index":162,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["unable",{"_index":830,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["undefined",{"_index":1730,"title":{},"body":{"components/IconComponent.html":{}}}],["undefined,undefined",{"_index":1444,"title":{},"body":{"classes/Filter.html":{}}}],["unequivocally",{"_index":660,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["unexpected",{"_index":230,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["unique",{"_index":610,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["unselectedvalues",{"_index":203,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["unused",{"_index":958,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/LightCardEffects.html":{}}}],["up",{"_index":180,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["update",{"_index":10,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["updateasync",{"_index":1322,"title":{},"body":{"components/DetailsComponent.html":{}}}],["updatecardsubscriptionwithdates",{"_index":1031,"title":{},"body":{"injectables/CardService.html":{}}}],["updatecardsubscriptionwithdates(rangestart",{"_index":1042,"title":{},"body":{"injectables/CardService.html":{}}}],["updatecardsubscriptionwithdates(rangestart:number,rangeend:number):observable",{"_index":1083,"title":{},"body":{"injectables/CardService.html":{}}}],["updated",{"_index":968,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["updatedsubscription",{"_index":226,"title":{"classes/UpdatedSubscription.html":{}},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["updateon",{"_index":2153,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["updatestate",{"_index":151,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["updatestatebeforeaction",{"_index":152,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["updatesubscription",{"_index":227,"title":{},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["upon",{"_index":1137,"title":{},"body":{"injectables/ConfigEffects.html":{},"classes/Filter.html":{}}}],["uri",{"_index":188,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["url",{"_index":282,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"classes/RouterStateUrl.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{},"miscellaneous/variables.html":{}}}],["url.endswith('/auth/check_token",{"_index":2199,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["url.endswith('/auth/token",{"_index":2200,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["url.split('/')[1",{"_index":896,"title":{},"body":{"components/CardComponent.html":{},"components/NavbarComponent.html":{}}}],["urlcleaner",{"_index":1964,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["urlencoded",{"_index":650,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["urls",{"_index":2440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urlsearchparams",{"_index":638,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["usable",{"_index":726,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["use",{"_index":1432,"title":{},"body":{"classes/Filter.html":{}}}],["useclass",{"_index":451,"title":{},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["used",{"_index":9,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"modules/StateModule.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["usedefaultlang",{"_index":1118,"title":{},"body":{"modules/CardsModule.html":{}}}],["usefactory",{"_index":1115,"title":{},"body":{"modules/CardsModule.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":62,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"components/DetailsComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["userform",{"_index":1793,"title":{},"body":{"components/LoginComponent.html":{}}}],["username",{"_index":104,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["uses",{"_index":834,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["using",{"_index":582,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["utc",{"_index":745,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["utc_beginning_time",{"_index":2298,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["v",{"_index":353,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/variables.html":{}}}],["v1",{"_index":1640,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["v2",{"_index":1642,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["val",{"_index":1995,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["valid",{"_index":614,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["validate",{"_index":84,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["validity",{"_index":801,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["value",{"_index":50,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"injectables/TimeService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.replace",{"_index":1681,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["value.slice(from",{"_index":1661,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["value.split(splitvalue)[index",{"_index":1649,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["value[index",{"_index":1657,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["value[index].length",{"_index":1646,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["valuechanges",{"_index":2139,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["values",{"_index":200,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["var",{"_index":367,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["variable",{"_index":2285,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2416,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variant",{"_index":908,"title":{},"body":{"components/CardComponent.html":{}}}],["variation",{"_index":765,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["verifyexpirationdate",{"_index":681,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["version",{"_index":1280,"title":{},"body":{"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["version:string",{"_index":1627,"title":{},"body":{"injectables/HandlebarsService.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["versionparam",{"_index":1979,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["via",{"_index":21,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["visible",{"_index":473,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["void",{"_index":288,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"classes/CheckTokenResponse.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"components/FiltersComponent.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["wait",{"_index":1287,"title":{},"body":{"components/DetailComponent.html":{}}}],["warning",{"_index":1309,"title":{},"body":{"components/DetailComponent.html":{}}}],["weather",{"_index":969,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["web",{"_index":583,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["went",{"_index":2052,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["width",{"_index":903,"title":{},"body":{"components/CardComponent.html":{},"components/TypeFilterComponent.html":{}}}],["win",{"_index":108,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["window.location.pathname",{"_index":1197,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"miscellaneous/variables.html":{}}}],["withlatestfrom",{"_index":1140,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["withlatestfrom(this.store.select(selectconfigretry",{"_index":1152,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["without",{"_index":118,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["work",{"_index":2025,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["works",{"_index":570,"title":{},"body":{"components/ArchivesComponent.html":{},"components/NoSelectionComponent.html":{}}}],["wrong",{"_index":818,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["www",{"_index":649,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["yes",{"_index":872,"title":{},"body":{"classes/Card.html":{},"classes/Third.html":{}}}],["zip",{"_index":1823,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["zone.js",{"_index":2385,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":415,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"dependencies.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AcceptLogIn.html":{"url":"classes/AcceptLogIn.html","title":"class - AcceptLogIn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AcceptLogIn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used to update the state with the authentication information\nEmitted by {AuthenticationEffects} in the following {Observable} @members:\n\nTryToLogIn\nCheckAuthentication via handleLogInAttempt @method\n\nUsed in the {function} reducer of the {authentication.reducer.ts} file to create a new state\ncontaining the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: PayloadForSuccessfulAuthentication)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/authentication.actions.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    PayloadForSuccessfulAuthentication\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     PayloadForSuccessfulAuthentication\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.AcceptLogIn\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:50\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\n\nexport enum AuthenticationActionTypes {\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n/**\n * First action dispatch by the application.\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    constructor(public payload: PayloadForSuccessfulAuthentication) {\n    }\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    constructor(public payload: { denialReason: string }) {\n    }\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n     AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AcceptLogOut.html":{"url":"classes/AcceptLogOut.html","title":"class - AcceptLogOut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AcceptLogOut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used to removes authentication information of the system and thus logOut the user.\nEmitted by {AuthenticationEffect} in the following {Observable} @members:\n\nTryToLogOut\nRejectLogInAttempt\nConsume by {AuthenticationEffect} in the AcceptLogOut {Observable} @member\n\n\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/authentication.actions.ts:110\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.AcceptLogOut\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:110\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\n\nexport enum AuthenticationActionTypes {\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n/**\n * First action dispatch by the application.\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    constructor(public payload: PayloadForSuccessfulAuthentication) {\n    }\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    constructor(public payload: { denialReason: string }) {\n    }\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n     AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AcceptLogOutSuccess.html":{"url":"classes/AcceptLogOutSuccess.html","title":"class - AcceptLogOutSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AcceptLogOutSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used to notify the store to remove authentication information\nEmitted by {AuthenticationEffect} in AcceptLogOut {Observable} @member.\nUsed in the {function} reducer of the {authentication.reducer.ts} file to create a new state\nwithout any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.AcceptLogOutSuccess\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:125\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\n\nexport enum AuthenticationActionTypes {\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n/**\n * First action dispatch by the application.\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    constructor(public payload: PayloadForSuccessfulAuthentication) {\n    }\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    constructor(public payload: { denialReason: string }) {\n    }\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n     AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Action.html":{"url":"classes/Action.html","title":"class - Action","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Action\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/card.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: ActionType, label: I18n, hidden: boolean, buttonStyle: string, contentStyle: string, inputs: Input[], lockAction: boolean, lockCard: boolean, updateState: boolean, updateStateBeforeAction: boolean, called: boolean, needsConfirm: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/card.model.ts:57\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                    ActionType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hidden\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        buttonStyle\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        contentStyle\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        inputs\n                                                  \n                                                        \n                                                                    Input[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        lockAction\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        lockCard\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateState\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateStateBeforeAction\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        called\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        needsConfirm\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Severity} from \"@ofModel/light-card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map} from \"@ofModel/map\";\n\nexport class Card {\n\n    constructor(\n        readonly uid: string,\n        readonly id: string,\n        readonly publisher: string,\n        readonly publisherVersion: string,\n        readonly publishDate: number,\n        readonly startDate: number,\n        readonly endDate: number,\n        readonly severity: Severity,\n        readonly mainRecipient: string,\n        readonly processId?: string,\n        readonly lttd?: number,\n        readonly title?: I18n,\n        readonly summary?: I18n,\n        readonly  data?: any,\n        readonly  details?: CardDetail[],\n        readonly  actions?: Map\n    ) {\n    }\n}\n\nexport enum TitlePosition {\n    UP, DOWN, NONE\n\n}\n\nexport class CardDetail {\n    constructor(\n        readonly titlePosition: TitlePosition,\n        readonly title: I18n,\n        readonly titleStyle: string,\n        readonly templateName: string,\n        readonly styles: string[]) {\n    }\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddLightCardFailure.html":{"url":"classes/AddLightCardFailure.html","title":"class - AddLightCardFailure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddLightCardFailure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:57\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.AddLightCardFailure\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:57\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    // | LoadLightCard\n    // | LoadLightCardSuccess\n    // | LoadLightCardFailure\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-root\n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                configLoaded\n                            \n                            \n                                currentPath\n                            \n                            \n                                getRoutePE\n                            \n                            \n                                isAuthenticated$\n                            \n                            \n                                    Private\n                                maxedRetries\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, translate: TranslateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/app.component.ts:45\n                            \n                        \n\n\n                \n                    \n                            On Init the app take trace of the current url and of the authentication status\nOnce the subscription done, send an Action to Check the current authentication status.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configLoaded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getRoutePE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAuthenticated$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxedRetries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'OperatorFabric'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\nimport {select, Store} from '@ngrx/store';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {CheckAuthenticationStatus} from '@ofActions/authentication.actions';\nimport {AppState} from '@ofStore/index';\nimport {selectCurrentUrl, selectRouterState} from '@ofSelectors/router.selectors';\nimport {selectExpirationTime} from '@ofSelectors/authentication.selectors';\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {isInTheFuture} from \"@ofServices/authentication.service\";\nimport {LoadConfig} from \"@ofActions/config.actions\";\nimport {selectConfigLoaded, selectMaxedRetries} from \"@ofSelectors/config.selectors\";\n\n@Component({\n    selector: 'of-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n    title = 'OperatorFabric';\n    getRoutePE: Observable;\n    currentPath: any;\n    isAuthenticated$: boolean = false;\n    configLoaded: boolean = false ;\n    private maxedRetries: boolean = false;\n\n    constructor(private store: Store,\n                private translate: TranslateService) {\n\n        this.getRoutePE = this.store.pipe(select(selectRouterState));\n        this.translate.setDefaultLang('en');\n    }\n\n    /**\n     * On Init the app take trace of the current url and of the authentication status\n     * Once the subscription done, send an Action to Check the current authentication status.\n     */\n    ngOnInit() {\n        this.store.pipe(select(selectCurrentUrl)).subscribe(url => this.currentPath = url);\n        this.store.pipe(select(selectExpirationTime),\n            map(isInTheFuture)\n                        ).subscribe(isAUth => this.isAuthenticated$ = isAUth);\n        this.store\n            .select(selectConfigLoaded)\n            .subscribe(loaded => this.configLoaded = loaded);\n        this.store\n            .select(selectMaxedRetries)\n            .subscribe((maxedRetries=>this.maxedRetries=maxedRetries));\n        // First Action send by the application, is the user currently authenticated ?\n        this.store.dispatch(new LoadConfig());\n    }\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n\n\n\n    \n        Application is loading ...\n    \n    \n        Application is not available yet, please reload later (F5)\n    \n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n.button {margin-right: 8px;}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Application is loading ...                Application is not available yet, please reload later (F5)    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nIconComponent\n\nIconComponent\n\nAppModule -->\n\nIconComponent->AppModule\n\n\n\n\n\nLoginComponent\n\nLoginComponent\n\nAppModule -->\n\nLoginComponent->AppModule\n\n\n\n\n\nNavbarComponent\n\nNavbarComponent\n\nAppModule -->\n\nNavbarComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nServicesModule\n\nServicesModule\n\nAppModule -->\n\nServicesModule->AppModule\n\n\n\n\n\nStateModule\n\nStateModule\n\nAppModule -->\n\nStateModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            IconComponent\n                        \n                        \n                            LoginComponent\n                        \n                        \n                            NavbarComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            ServicesModule\n                        \n                        \n                            StateModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {HttpClientModule} from '@angular/common/http';\nimport {CommonModule, HashLocationStrategy, LocationStrategy} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {StateModule} from '@ofStore/state.module';\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\nimport {ServicesModule} from '@ofServices/services.module';\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {NavbarComponent} from './components/navbar/navbar.component';\nimport {LoginComponent} from \"./components/login/login.component\";\nimport {IconComponent} from './components/icon/icon.component';\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {translateConfig} from \"./translate.config\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        BrowserModule,\n        FormsModule,\n        ReactiveFormsModule,\n        BrowserAnimationsModule,\n        AppRoutingModule,\n        HttpClientModule,\n        StateModule.forRoot(),\n        ServicesModule.forRoot(),\n        NgbModule,\n        TranslateModule.forRoot(translateConfig)\n    ],\n    declarations: [AppComponent, NavbarComponent, LoginComponent, IconComponent],\n    providers: [ { provide: LocationStrategy, useClass: HashLocationStrategy }],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {NgModule} from '@angular/core';\nimport {PreloadAllModules, RouterModule, Routes} from '@angular/router';\n// import {AuthenticationGuard} from '@ofServices/guard.service';\nimport {LoginComponent} from './components/login/login.component';\nimport {environment} from \"@env/environment\";\n\nconst routes: Routes = [\n    // {\n    //     path: 'login',\n    //     component: LoginComponent\n    // },\n    {\n        path: 'feed',\n        loadChildren: './modules/feed/feed.module#FeedModule',\n        // canActivate: [AuthenticationGuard]\n    },\n    {\n        path: 'archives',\n        loadChildren: './modules/archives/archives.module#ArchivesModule',\n        // canActivate: [AuthenticationGuard]\n    },\n    {\n        path: 'navbar',\n        component: LoginComponent\n    },\n    {path: '**', redirectTo: '/feed'}\n];\n// TODO manage visible path more gently\nexport const navigationRoutes: Routes = routes.slice(0, 2);\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes,{ enableTracing: !environment.production, preloadingStrategy: PreloadAllModules })],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AppState.html":{"url":"interfaces/AppState.html","title":"interface - AppState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AppState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/index.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        authentication\n                                \n                                \n                                        card\n                                \n                                \n                                        config\n                                \n                                \n                                        feed\n                                \n                                \n                                        menu\n                                \n                                \n                                        router\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authentication\n                                    \n                                \n                                \n                                    \n                                        authentication:     AuthState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AuthState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        card\n                                    \n                                \n                                \n                                    \n                                        card:     CardState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CardState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     ConfigState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ConfigState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        feed\n                                    \n                                \n                                \n                                    \n                                        feed:     CardFeedState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CardFeedState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        menu\n                                    \n                                \n                                \n                                    \n                                        menu:     MenuState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MenuState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        router\n                                    \n                                \n                                \n                                    \n                                        router:     RouterReducerState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     RouterReducerState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as fromRouter from '@ngrx/router-store';\nimport {RouterReducerState} from '@ngrx/router-store';\nimport {RouterStateUrl} from '@ofStore/states/router.state';\nimport {reducer as authenticationReducer} from '@ofStore/reducers/authentication.reducer';\nimport {ActionReducerMap, MetaReducer} from '@ngrx/store';\nimport {environment} from '@env/environment';\nimport {storeFreeze} from 'ngrx-store-freeze';\nimport {CardEffects} from '@ofEffects/card.effects';\nimport {CardOperationEffects} from '@ofEffects/card-operation.effects';\nimport {AuthenticationEffects} from '@ofEffects/authentication.effects';\nimport {RouterEffects} from 'ngrx-router';\nimport {CardFeedState} from '@ofStates/feed.state';\nimport {reducer as lightCardReducer} from '@ofStore/reducers/light-card.reducer';\nimport {reducer as cardReducer} from '@ofStore/reducers/card.reducer';\nimport {reducer as configReducer} from '@ofStore/reducers/config.reducer';\nimport {reducer as menuReducer} from '@ofStore/reducers/menu.reducer';\nimport {AuthState} from '@ofStates/authentication.state';\nimport {CardState} from \"@ofStates/card.state\";\nimport {CustomRouterEffects} from \"@ofEffects/custom-router.effects\";\nimport {MenuState} from \"@ofStates/menu.state\";\nimport {MenuEffects} from \"@ofEffects/menu.effects\";\nimport {LightCardEffects} from \"@ofEffects/light-card.effects\";\nimport {FeedFiltersEffects} from \"@ofEffects/feed-filters.effects\";\nimport {ConfigState} from \"@ofStates/config.state\";\nimport {ConfigEffects} from \"@ofEffects/config.effects\";\n\nexport interface AppState {\n    router: RouterReducerState;\n    feed: CardFeedState;\n    authentication: AuthState;\n    card: CardState;\n    menu: MenuState;\n    config: ConfigState\n}\n\nexport const appEffects = [\n    CardEffects,\n    ConfigEffects,\n    CardOperationEffects,\n    RouterEffects,\n    CustomRouterEffects,\n    AuthenticationEffects,\n    MenuEffects,\n    LightCardEffects,\n    FeedFiltersEffects];\n\nexport const appReducer: ActionReducerMap = {\n    router: fromRouter.routerReducer,\n    feed: lightCardReducer,\n    authentication: authenticationReducer,\n    card: cardReducer,\n    menu: menuReducer,\n    config: configReducer\n};\n\nexport const appMetaReducers: MetaReducer[] = !environment.production\n    ? [storeFreeze]\n    : [];\n\nexport const storeConfig = {\n    metaReducers: appMetaReducers,\n    // initialState: {\n    //     router: routerInitialState,\n    // }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApplyFilter.html":{"url":"classes/ApplyFilter.html","title":"class - ApplyFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApplyFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/feed.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/feed.actions.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/feed.actions.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : FeedActionTypes.ApplyFilter\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/feed.actions.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Filter} from \"@ofModel/feed-filter.model\";\nimport {FilterType} from \"@ofServices/filter.service\";\n\nexport enum FeedActionTypes {\n    ApplyFilter = '[Feed] Change filter Status',\n    InitFilter = '[Feed] Init filter',\n}\n\nexport class ApplyFilter implements Action {\n    readonly type = FeedActionTypes.ApplyFilter\n    constructor(public payload:{name: FilterType, active: boolean, status: any}){}\n}\n\nexport class InitFilters implements Action {\n    readonly type = FeedActionTypes.InitFilter\n    constructor(public payload:{filters: Map}){}\n}\n\nexport type FeedActions =\n    InitFilters\n    | ApplyFilter;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ArchivesComponent.html":{"url":"components/ArchivesComponent.html","title":"component - ArchivesComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ArchivesComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/archives/archives.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-archives\n            \n\n            \n                styleUrls\n                ./archives.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./archives.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/archives/archives.component.ts:15\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/archives/archives.component.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'of-archives',\n  templateUrl: './archives.component.html',\n  styleUrls: ['./archives.component.scss']\n})\nexport class ArchivesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  archives works!\n\n\n    \n\n    \n                \n                    ./archives.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  archives works!'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ArchivesComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArchivesModule.html":{"url":"modules/ArchivesModule.html","title":"module - ArchivesModule","body":"\n                   \n\n\n\n\n    Modules\n    ArchivesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ArchivesModule\n\n\n\ncluster_ArchivesModule_declarations\n\n\n\ncluster_ArchivesModule_imports\n\n\n\n\nArchivesComponent\n\nArchivesComponent\n\n\n\nArchivesModule\n\nArchivesModule\n\nArchivesModule -->\n\nArchivesComponent->ArchivesModule\n\n\n\n\n\nArchivesRoutingModule\n\nArchivesRoutingModule\n\nArchivesModule -->\n\nArchivesRoutingModule->ArchivesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/archives/archives.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ArchivesComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ArchivesRoutingModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {ArchivesRoutingModule} from './archives-routing.module';\nimport {ArchivesComponent} from \"./archives.component\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ArchivesRoutingModule\n  ],\n  declarations: [ArchivesComponent]\n})\nexport class ArchivesModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArchivesRoutingModule.html":{"url":"modules/ArchivesRoutingModule.html","title":"module - ArchivesRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    ArchivesRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/archives/archives-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\n// import {AuthenticationGuard} from \"@ofServices/guard.service\";\nimport {ArchivesComponent} from \"./archives.component\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: ArchivesComponent,\n        // canActivate: [AuthenticationGuard]\n    },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ArchivesRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthObject.html":{"url":"classes/AuthObject.html","title":"class - AuthObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/authentication.service.ts\n        \n\n            \n                Description\n            \n            \n                class used to try to login using the authentication web service.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                clientId\n                            \n                            \n                                expires_in\n                            \n                            \n                                    Optional\n                                identifier\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            access_token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:186\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clientId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Guid\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:188\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expires_in\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:187\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            identifier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:185\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError, map} from 'rxjs/operators';\nimport {Guid} from 'guid-typescript';\nimport {PayloadForSuccessfulAuthentication} from '@ofActions/authentication.actions';\nimport {environment} from \"@env/environment\";\nimport {GuidService} from \"@ofServices/guid.service\";\n\nexport enum LocalStorageAuthContent {\n    token = 'token',\n    expirationDate = 'expirationDate',\n    identifier = 'identifier',\n    clientId = 'clientId'\n}\n\nexport const ONE_SECOND = 1000;\n\n@Injectable()\nexport class AuthenticationService {\n\n    /** url to check authentication token (jwt) */\n    private checkTokenUrl = `${environment.urls.auth}/check_token`;\n    /** url to ask for an authentication token (jwt) */\n    private askTokenUrl = `${environment.urls.auth}/token`;\n\n    /**\n     * @constructor\n     * @param httpClient - Angular build-in\n     * @param guidService - create and store the unique id for this application and user\n     */\n    constructor(private httpClient: HttpClient,private guidService: GuidService) {\n    }\n\n    /**\n     * Call the web service which checks the authentication token. A valid token gives back the authentication information\n     * and an invalid one an error.\n     *\n     * @param token - jwt token\n     * @return an {Observable} which contains the deserializable content of the token\n     * an error is thrown otherwise\n     */\n    checkAuthentication(token: string): Observable {\n        const postData = new FormData();\n        postData.append('token', token);\n        return this.httpClient.post(this.checkTokenUrl, postData).pipe(\n            map(check => check),\n            catchError(this.handleError)\n        );\n    }\n\n    /**\n     * Given a pair of connection, ask the web service generating jwt authentication token a token if the pair is\n     * a registered one.\n     * @param login \n     * @param password\n     */\n    askToken(login: string, password: string): Observable {\n        const params = new URLSearchParams();\n        params.append('username', login);\n        params.append('password', password);\n        params.append('grant_type', 'password');\n        // beware clientId for token defines a type of authentication\n        params.append('client_id', 'clientIdPassword');\n\n        const headers = new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'});\n        return this.httpClient.post(this.askTokenUrl\n            , params.toString()\n            , {headers: headers}).pipe(\n            map(data => {\n                const trackism = {...data};\n\n                trackism.identifier = login;\n                // this clientId is used to identify unequivocally the session\n                trackism.clientId = this.guidService.getCurrentGuid();\n                return trackism;\n            }),\n            map(authObjt => {\n                    let successfulAuth = this.convert(authObjt);\n                    this.saveAuthenticationInformation(successfulAuth)\n                    return successfulAuth;\n                }\n            ),\n            catchError(this.handleError)\n        );\n\n    }\n\n    private handleError(error: any) {\n        console.error(error);\n        return throwError(error);\n    }\n\n    /**\n     * extract the jwt authentication token from the localstorage\n     */\n    public extractToken(): string {\n        return localStorage.getItem(LocalStorageAuthContent.token);\n    }\n\n    /**\n     * @return true if the expiration date stored in the `localestorage` is still running, false otherwise.\n     */\n    public verifyExpirationDate(): boolean {\n        // + to convert the stored number as a string back to number\n        const expirationDate = +localStorage.getItem(LocalStorageAuthContent.expirationDate);\n        const isNotANumber = isNaN(expirationDate);\n        const stillValid = isInTheFuture(expirationDate);\n        const finalResult = !isNotANumber && stillValid;\n        return finalResult;\n    }\n\n    /**\n     * @return true if the expiration date stored in the `localstorage` is over, false otherwise\n     */\n    public isExpirationDateOver(): boolean {\n        return !this.verifyExpirationDate();\n    }\n    /**\n     * clear the `localstorage` from all its content.\n     */\n    public clearAuthenticationInformation(): void {\n        localStorage.clear();\n    }\n\n    /**\n     * save the authentication informatios such as identifier, jwt token, expiration date and clientId in the\n     * `localstorage`.\n     * @param payload\n     */\n    public saveAuthenticationInformation(payload: PayloadForSuccessfulAuthentication) {\n        localStorage.setItem(LocalStorageAuthContent.identifier, payload.identifier);\n        localStorage.setItem(LocalStorageAuthContent.token, payload.token);\n        localStorage.setItem(LocalStorageAuthContent.expirationDate, payload.expirationDate.getTime().toString());\n        localStorage.setItem(LocalStorageAuthContent.clientId, payload.clientId.toString());\n    }\n\n    /**\n     * extract from the `localstorage` the authentication relevant information such as dentifier, jwt token,\n     * expiration date and clientId\n     * @return {PayloadForSuccessfulAuthentication}\n     */\n    public extractIdentificationInformation(): PayloadForSuccessfulAuthentication {\n        return new PayloadForSuccessfulAuthentication(\n            localStorage.getItem(LocalStorageAuthContent.identifier),\n            Guid.parse(localStorage.getItem(LocalStorageAuthContent.clientId)),\n            localStorage.getItem(LocalStorageAuthContent.token),\n            // as getItem return a string, `+` isUsed\n            new Date(+localStorage.getItem(LocalStorageAuthContent.expirationDate)),\n        );\n    }\n\n    /**\n     * helper method to convert an {AuthObject} instance into a {PayloadForSuccessfulAuthentication} instance.\n     * @param payload\n     */\n    public convert(payload: AuthObject): PayloadForSuccessfulAuthentication {\n        const expirationDate = Date.now() + ONE_SECOND * payload.expires_in;\n        return new PayloadForSuccessfulAuthentication(payload.identifier,\n            payload.clientId,\n            payload.access_token,\n            new Date(expirationDate)\n        );\n    }\n\n    /**\n     * helper method to put the jwt token into an appropriate string usable as an http header\n     */\n    public getSecurityHeader() {\n        return {'Authorization': `Bearer ${this.extractToken()}`};\n    }\n}\n\n/**\n * class used to try to login using the authentication web service.\n */\nexport class AuthObject {\n    identifier?: string;\n    access_token: string;\n    expires_in: number;\n    clientId: Guid;\n}\n\n/**\n * class corresponding to the response of the web service checking jwt token when this token is a valid one.\n */\nexport class CheckTokenResponse {\n    sub: string;\n    exp: number;\n    client_id: string;\n}\n\n/**\n * helper @method to confirm or not if the number corresponding to a given time is in the futur regarding the present\n * moment.\n * @param time - a number corresponding to an UTC time to test\n * @return  true if time is in the future regarding the present moment, false otherwise\n */\nexport function isInTheFuture(time: number): boolean {\n    return time > Date.now();\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthState.html":{"url":"interfaces/AuthState.html","title":"interface - AuthState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/authentication.state.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientId\n                                \n                                \n                                        denialReason\n                                \n                                \n                                        expirationDate\n                                \n                                \n                                        identifier\n                                \n                                \n                                        token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientId\n                                    \n                                \n                                \n                                    \n                                        clientId:     Guid\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Guid\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        denialReason\n                                    \n                                \n                                \n                                    \n                                        denialReason:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expirationDate\n                                    \n                                \n                                \n                                    \n                                        expirationDate:     Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        identifier\n                                    \n                                \n                                \n                                    \n                                        identifier:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                    \n                                \n                                \n                                    \n                                        token:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Guid} from 'guid-typescript';\n\nexport interface AuthState {\n    identifier: string;\n    clientId: Guid;\n    token: string;\n    expirationDate: Date;\n    denialReason: string;\n}\n\nexport const authInitialState: AuthState = {\n    identifier: null,\n    clientId: null,\n    token: null,\n    expirationDate: new Date(0),\n    denialReason: null\n};\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationEffects.html":{"url":"injectables/AuthenticationEffects.html","title":"injectable - AuthenticationEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/authentication.effects.ts\n        \n\n            \n                Description\n            \n            \n                Management of the authentication of the current user\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                AcceptLogOut\n                            \n                            \n                                CheckAuthentication\n                            \n                            \n                                checkAuthenticationWhenReady\n                            \n                            \n                                RejectLogInAttempt\n                            \n                            \n                                TryToLogIn\n                            \n                            \n                                TryToLogOut\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleLogInAttempt\n                            \n                            \n                                handleRejectedLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, authService: AuthenticationService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/authentication.effects.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n{Store} state manager\n\n\n                                                        \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                    AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nservice implementing the authentication business rules\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nrouter service to redirect user accordingly to the user authentication status or variation of it.\n\nistanbul ignore next \n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            handleLogInAttempt\n                            \n                            \n                        \n                    \n                \n                \n                    \nhandleLogInAttempt(payload: CheckTokenResponse)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:193\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                        \n                                                                    CheckTokenResponse\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     AuthenticationActions\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            handleRejectedLogin\n                            \n                            \n                        \n                    \n                \n                \n                    \nhandleRejectedLogin(errorMsg: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:187\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errorMsg\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     AuthenticationActions\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AcceptLogOut\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$.pipe(\n            ofType(AuthenticationActionTypes.AcceptLogOut),\n            map((action: AcceptLogOut) => {\n                this.router.navigate(['/login'])\n                return new  AcceptLogOutSuccess();\n            })\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:123\n                            \n                        \n\n                \n                    \n                        This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.AcceptLogOut} type.\nIt tells the {Router} service to navigate to the Login page. and emit an {AcceptLogOutSucess} Action.\nThis {Effect} should be called as a consequence of a {TryLogOut} action\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CheckAuthentication\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n            .pipe(\n                ofType(AuthenticationActionTypes.CheckAuthenticationStatus),\n                switchMap(() => {\n                    return this.authService.checkAuthentication(this.authService.extractToken());\n                }),\n                map((payload: CheckTokenResponse) => {\n                    if (this.authService.isExpirationDateOver()) {\n                        return this.handleRejectedLogin('expiration date exceeded');\n                    }\n\n                    return this.handleLogInAttempt(payload);\n                }),\n                catchError((err, caught) => {\n                    console.error(err);\n                    this.store.dispatch(new RejectLogIn({denialReason: err}));\n                    return caught;\n                })\n            )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:166\n                            \n                        \n\n                \n                    \n                        This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.CheckAuthenticationStatus} type.\nIt extract the current authentication information if any and checks its validity, the expiration date.\n  If it's OK then an {AcceptLogIn} Action with check result as payload is emittedby calling\n  the {handleLogInAttempt} @method,\n  otherwise a {RejectedLogIn} Action is emitted by calling the {handleRejectedLogin} @method.\nThis {Effect} should be the first effect apply by the application to display the right page accordingly with the\ncurrent authentication state.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            checkAuthenticationWhenReady\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n            .pipe(\n                ofType(ConfigActionTypes.LoadConfigSuccess),\n                map(()=> new CheckAuthenticationStatus())\n            )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:52\n                            \n                        \n\n                \n                    \n                        Triggers Authentication Check when the application is ready\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RejectLogInAttempt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$.pipe(ofType(AuthenticationActionTypes.RejectLogIn),\n            tap(() => {\n                this.authService.clearAuthenticationInformation();\n            }),\n            map(action => new AcceptLogOut()))\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:142\n                            \n                        \n\n                \n                    \n                        This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.RejectLogIn} type.\nIt tells the {AuthenticationService} to clear authentication information from the system\nThis {Effect} should be called after a wrong login attempt.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TryToLogIn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n            .pipe(\n                ofType(AuthenticationActionTypes.TryToLogIn),\n                switchMap((action: TryToLogIn) => {\n                    const payload = action.payload;\n                    return this.authService.askToken(payload.username, payload.password).pipe(\n                        map(authenticationInfo => new AcceptLogIn(authenticationInfo)),\n                        catchError(error => {\n                                console.error('error while trying log in', error);\n                                return of(new RejectLogIn({denialReason: 'unable to authenticate the user'}));\n                            }\n                        ));\n                })\n            )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:74\n                            \n                        \n\n                \n                    \n                        This {Observable} of {AuthenticationActions} listen {AuthenticationActionTypes.TryToLogIn} type and uses\nthe login payload to get an authentication token from the authentication service if the authentication is\nvalid and emit an {AcceptLogin} action with it.\nFor invalid authentication it emits a {RejectLogIn} Action with the message \"unable to authenticate the user\"\nas paload\nThis effect should take action after the user has submitted login information in the login page by clicking\non the login button.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TryToLogOut\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$.pipe(\n            ofType(AuthenticationActionTypes.TryToLogOut),\n            map((action: TryToLogOut) => {\n                this.authService.clearAuthenticationInformation();\n                return new AcceptLogOut();\n            })\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:102\n                            \n                        \n\n                \n                    \n                        This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.TryToLogOut} type.\nIt tells the {AuthenticationService} to clear the authentication information from the system and emit\nan {AcceptLogOut} Action.\nThis effect should take action after the Logout link/button has been clicked by the user.\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Observable, of} from 'rxjs';\nimport {Store} from '@ngrx/store';\nimport {\n    AcceptLogIn,\n    AcceptLogOut,\n    AcceptLogOutSuccess,\n    AuthenticationActions,\n    AuthenticationActionTypes, CheckAuthenticationStatus,\n    RejectLogIn,\n    TryToLogIn,\n    TryToLogOut\n} from '@ofActions/authentication.actions';\nimport {AuthenticationService, CheckTokenResponse} from '../../services/authentication.service';\nimport {catchError, map, switchMap, tap} from 'rxjs/operators';\nimport {AppState} from \"@ofStore/index\";\nimport {Router} from \"@angular/router\";\nimport {ConfigActions, ConfigActionTypes} from \"@ofActions/config.actions\";\n\n/**\n * Management of the authentication of the current user\n */\n@Injectable()\nexport class AuthenticationEffects {\n\n    /**\n     * @constructor\n     * @param store - {Store} state manager\n     * @param action$ - {Action} {Observable} of Action of the Application\n     * @param authService - service implementing the authentication business rules\n     * @param router - router service to redirect user accordingly to the user authentication status or variation of it.\n     *\n     * istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private authService: AuthenticationService,\n                private router: Router) {\n    }\n\n    /**\n     * Triggers Authentication Check when the application is ready\n     */\n    @Effect()\n    checkAuthenticationWhenReady: Observable =\n        this.actions$\n            .pipe(\n                ofType(ConfigActionTypes.LoadConfigSuccess),\n                map(()=> new CheckAuthenticationStatus())\n            );\n\n    /**\n     * This {Observable} of {AuthenticationActions} listen {AuthenticationActionTypes.TryToLogIn} type and uses\n     * the login payload to get an authentication token from the authentication service if the authentication is\n     * valid and emit an {AcceptLogin} action with it.\n     * For invalid authentication it emits a {RejectLogIn} Action with the message \"unable to authenticate the user\"\n     * as paload\n     *\n     * This effect should take action after the user has submitted login information in the login page by clicking\n     * on the login button.\n     *\n     * @member\n     * @name TryToLogin\n     * @typedef {Observable}\n     */\n    @Effect()\n    TryToLogIn: Observable =\n        this.actions$\n            .pipe(\n                ofType(AuthenticationActionTypes.TryToLogIn),\n                switchMap((action: TryToLogIn) => {\n                    const payload = action.payload;\n                    return this.authService.askToken(payload.username, payload.password).pipe(\n                        map(authenticationInfo => new AcceptLogIn(authenticationInfo)),\n                        catchError(error => {\n                                console.error('error while trying log in', error);\n                                return of(new RejectLogIn({denialReason: 'unable to authenticate the user'}));\n                            }\n                        ));\n                })\n            );\n\n    /**\n     * This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.TryToLogOut} type.\n     * It tells the {AuthenticationService} to clear the authentication information from the system and emit\n     * an {AcceptLogOut} Action.\n     *\n     * This effect should take action after the Logout link/button has been clicked by the user.\n     *\n     * @member\n     * @name TryToLogOut\n     * @typedef {Observable}\n     */\n    @Effect()\n    TryToLogOut: Observable =\n        this.actions$.pipe(\n            ofType(AuthenticationActionTypes.TryToLogOut),\n            map((action: TryToLogOut) => {\n                this.authService.clearAuthenticationInformation();\n                return new AcceptLogOut();\n            })\n        );\n\n    /**\n     * This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.AcceptLogOut} type.\n     * It tells the {Router} service to navigate to the Login page. and emit an {AcceptLogOutSucess} Action.\n     *\n     * This {Effect} should be called as a consequence of a {TryLogOut} action\n     *\n     * @member\n     * @name AcceptLogOut\n     * @typedef {Observable}\n     *\n     */\n    @Effect()\n    AcceptLogOut: Observable =\n        this.actions$.pipe(\n            ofType(AuthenticationActionTypes.AcceptLogOut),\n            map((action: AcceptLogOut) => {\n                this.router.navigate(['/login'])\n                return new  AcceptLogOutSuccess();\n            })\n        );\n    /**\n     * This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.RejectLogIn} type.\n     * It tells the {AuthenticationService} to clear authentication information from the system\n     *\n     * This {Effect} should be called after a wrong login attempt.\n\n     * @member\n     * @name RejectLogInAttempt\n     * @typedef {Observable}\n     */\n    @Effect()\n    RejectLogInAttempt: Observable =\n        this.actions$.pipe(ofType(AuthenticationActionTypes.RejectLogIn),\n            tap(() => {\n                this.authService.clearAuthenticationInformation();\n            }),\n            map(action => new AcceptLogOut()));\n\n    /**\n     * This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.CheckAuthenticationStatus} type.\n     *It extract the current authentication information if any and checks its validity, the expiration date.\n     *  If it's OK then an {AcceptLogIn} Action with check result as payload is emittedby calling\n     *  the {handleLogInAttempt} @method,\n     *\n     *  otherwise a {RejectedLogIn} Action is emitted by calling the {handleRejectedLogin} @method.\n     *\n     * This {Effect} should be the first effect apply by the application to display the right page accordingly with the\n     * current authentication state.\n     *\n     * @member\n     * @name CheckAuthentication\n     * @typedef {Observable}\n     *\n     */\n    @Effect()\n    CheckAuthentication: Observable =\n        this.actions$\n            .pipe(\n                ofType(AuthenticationActionTypes.CheckAuthenticationStatus),\n                switchMap(() => {\n                    return this.authService.checkAuthentication(this.authService.extractToken());\n                }),\n                map((payload: CheckTokenResponse) => {\n                    if (this.authService.isExpirationDateOver()) {\n                        return this.handleRejectedLogin('expiration date exceeded');\n                    }\n\n                    return this.handleLogInAttempt(payload);\n                }),\n                catchError((err, caught) => {\n                    console.error(err);\n                    this.store.dispatch(new RejectLogIn({denialReason: err}));\n                    return caught;\n                })\n            );\n\n    handleRejectedLogin(errorMsg: string): AuthenticationActions {\n        this.authService.clearAuthenticationInformation();\n        return new RejectLogIn({denialReason: errorMsg});\n\n    }\n\n    handleLogInAttempt(payload: CheckTokenResponse): AuthenticationActions {\n        if (payload) {\n            const authInfo = this.authService.extractIdentificationInformation();\n            return new AcceptLogIn(authInfo);\n\n        }\n        return this.handleRejectedLogin('invalid token');\n    }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/authentication.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                askTokenUrl\n                            \n                            \n                                    Private\n                                checkTokenUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                askToken\n                            \n                            \n                                checkAuthentication\n                            \n                            \n                                    Public\n                                clearAuthenticationInformation\n                            \n                            \n                                    Public\n                                convert\n                            \n                            \n                                    Public\n                                extractIdentificationInformation\n                            \n                            \n                                    Public\n                                extractToken\n                            \n                            \n                                    Public\n                                getSecurityHeader\n                            \n                            \n                                    Private\n                                handleError\n                            \n                            \n                                    Public\n                                isExpirationDateOver\n                            \n                            \n                                    Public\n                                saveAuthenticationInformation\n                            \n                            \n                                    Public\n                                verifyExpirationDate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient, guidService: GuidService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/authentication.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular build-in\n\n\n                                                        \n                                                \n                                                \n                                                        guidService\n                                                  \n                                                        \n                                                                    GuidService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ncreate and store the unique id for this application and user\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            askToken\n                            \n                            \n                        \n                    \n                \n                \n                    \naskToken(login: string, password: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:65\n                            \n                        \n\n\n                \n                    \n                            Given a pair of connection, ask the web service generating jwt authentication token a token if the pair is\na registered one.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        login\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        password\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            checkAuthentication\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheckAuthentication(token: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:50\n                            \n                        \n\n\n                \n                    \n                            Call the web service which checks the authentication token. A valid token gives back the authentication information\nand an invalid one an error.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        token\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \njwt token\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    an {Observable} which contains the deserializable content of the token\nan error is thrown otherwise\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            clearAuthenticationInformation\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        clearAuthenticationInformation()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:129\n                            \n                        \n\n\n                \n                    \n                            clear the localstorage from all its content.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            convert\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        convert(payload: AuthObject)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:164\n                            \n                        \n\n\n                \n                    \n                            helper method to convert an {AuthObject} instance into a {PayloadForSuccessfulAuthentication} instance.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                        \n                                                                    AuthObject\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     PayloadForSuccessfulAuthentication\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            extractIdentificationInformation\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        extractIdentificationInformation()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:150\n                            \n                        \n\n\n                \n                    \n                            extract from the localstorage the authentication relevant information such as dentifier, jwt token,\nexpiration date and clientId\n\n\n                            \n                            \n                            \n                                Returns :     PayloadForSuccessfulAuthentication\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            extractToken\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        extractToken()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:104\n                            \n                        \n\n\n                \n                    \n                            extract the jwt authentication token from the localstorage\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getSecurityHeader\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getSecurityHeader()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:176\n                            \n                        \n\n\n                \n                    \n                            helper method to put the jwt token into an appropriate string usable as an http header\n\n\n                            \n                                Returns :     { 'Authorization': string; }\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            handleError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        handleError(error: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:96\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isExpirationDateOver\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isExpirationDateOver()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:123\n                            \n                        \n\n\n                \n                    \n\n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    true if the expiration date stored in the localstorage is over, false otherwise\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            saveAuthenticationInformation\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        saveAuthenticationInformation(payload: PayloadForSuccessfulAuthentication)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:138\n                            \n                        \n\n\n                \n                    \n                            save the authentication informatios such as identifier, jwt token, expiration date and clientId in the\nlocalstorage.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                        \n                                                                    PayloadForSuccessfulAuthentication\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            verifyExpirationDate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        verifyExpirationDate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:111\n                            \n                        \n\n\n                \n                    \n\n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    true if the expiration date stored in the localestorage is still running, false otherwise.\n\n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            askTokenUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${environment.urls.auth}/token`\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:32\n                            \n                        \n\n                \n                    \n                        url to ask for an authentication token (jwt) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            checkTokenUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${environment.urls.auth}/check_token`\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:30\n                            \n                        \n\n                \n                    \n                        url to check authentication token (jwt) \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError, map} from 'rxjs/operators';\nimport {Guid} from 'guid-typescript';\nimport {PayloadForSuccessfulAuthentication} from '@ofActions/authentication.actions';\nimport {environment} from \"@env/environment\";\nimport {GuidService} from \"@ofServices/guid.service\";\n\nexport enum LocalStorageAuthContent {\n    token = 'token',\n    expirationDate = 'expirationDate',\n    identifier = 'identifier',\n    clientId = 'clientId'\n}\n\nexport const ONE_SECOND = 1000;\n\n@Injectable()\nexport class AuthenticationService {\n\n    /** url to check authentication token (jwt) */\n    private checkTokenUrl = `${environment.urls.auth}/check_token`;\n    /** url to ask for an authentication token (jwt) */\n    private askTokenUrl = `${environment.urls.auth}/token`;\n\n    /**\n     * @constructor\n     * @param httpClient - Angular build-in\n     * @param guidService - create and store the unique id for this application and user\n     */\n    constructor(private httpClient: HttpClient,private guidService: GuidService) {\n    }\n\n    /**\n     * Call the web service which checks the authentication token. A valid token gives back the authentication information\n     * and an invalid one an error.\n     *\n     * @param token - jwt token\n     * @return an {Observable} which contains the deserializable content of the token\n     * an error is thrown otherwise\n     */\n    checkAuthentication(token: string): Observable {\n        const postData = new FormData();\n        postData.append('token', token);\n        return this.httpClient.post(this.checkTokenUrl, postData).pipe(\n            map(check => check),\n            catchError(this.handleError)\n        );\n    }\n\n    /**\n     * Given a pair of connection, ask the web service generating jwt authentication token a token if the pair is\n     * a registered one.\n     * @param login \n     * @param password\n     */\n    askToken(login: string, password: string): Observable {\n        const params = new URLSearchParams();\n        params.append('username', login);\n        params.append('password', password);\n        params.append('grant_type', 'password');\n        // beware clientId for token defines a type of authentication\n        params.append('client_id', 'clientIdPassword');\n\n        const headers = new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'});\n        return this.httpClient.post(this.askTokenUrl\n            , params.toString()\n            , {headers: headers}).pipe(\n            map(data => {\n                const trackism = {...data};\n\n                trackism.identifier = login;\n                // this clientId is used to identify unequivocally the session\n                trackism.clientId = this.guidService.getCurrentGuid();\n                return trackism;\n            }),\n            map(authObjt => {\n                    let successfulAuth = this.convert(authObjt);\n                    this.saveAuthenticationInformation(successfulAuth)\n                    return successfulAuth;\n                }\n            ),\n            catchError(this.handleError)\n        );\n\n    }\n\n    private handleError(error: any) {\n        console.error(error);\n        return throwError(error);\n    }\n\n    /**\n     * extract the jwt authentication token from the localstorage\n     */\n    public extractToken(): string {\n        return localStorage.getItem(LocalStorageAuthContent.token);\n    }\n\n    /**\n     * @return true if the expiration date stored in the `localestorage` is still running, false otherwise.\n     */\n    public verifyExpirationDate(): boolean {\n        // + to convert the stored number as a string back to number\n        const expirationDate = +localStorage.getItem(LocalStorageAuthContent.expirationDate);\n        const isNotANumber = isNaN(expirationDate);\n        const stillValid = isInTheFuture(expirationDate);\n        const finalResult = !isNotANumber && stillValid;\n        return finalResult;\n    }\n\n    /**\n     * @return true if the expiration date stored in the `localstorage` is over, false otherwise\n     */\n    public isExpirationDateOver(): boolean {\n        return !this.verifyExpirationDate();\n    }\n    /**\n     * clear the `localstorage` from all its content.\n     */\n    public clearAuthenticationInformation(): void {\n        localStorage.clear();\n    }\n\n    /**\n     * save the authentication informatios such as identifier, jwt token, expiration date and clientId in the\n     * `localstorage`.\n     * @param payload\n     */\n    public saveAuthenticationInformation(payload: PayloadForSuccessfulAuthentication) {\n        localStorage.setItem(LocalStorageAuthContent.identifier, payload.identifier);\n        localStorage.setItem(LocalStorageAuthContent.token, payload.token);\n        localStorage.setItem(LocalStorageAuthContent.expirationDate, payload.expirationDate.getTime().toString());\n        localStorage.setItem(LocalStorageAuthContent.clientId, payload.clientId.toString());\n    }\n\n    /**\n     * extract from the `localstorage` the authentication relevant information such as dentifier, jwt token,\n     * expiration date and clientId\n     * @return {PayloadForSuccessfulAuthentication}\n     */\n    public extractIdentificationInformation(): PayloadForSuccessfulAuthentication {\n        return new PayloadForSuccessfulAuthentication(\n            localStorage.getItem(LocalStorageAuthContent.identifier),\n            Guid.parse(localStorage.getItem(LocalStorageAuthContent.clientId)),\n            localStorage.getItem(LocalStorageAuthContent.token),\n            // as getItem return a string, `+` isUsed\n            new Date(+localStorage.getItem(LocalStorageAuthContent.expirationDate)),\n        );\n    }\n\n    /**\n     * helper method to convert an {AuthObject} instance into a {PayloadForSuccessfulAuthentication} instance.\n     * @param payload\n     */\n    public convert(payload: AuthObject): PayloadForSuccessfulAuthentication {\n        const expirationDate = Date.now() + ONE_SECOND * payload.expires_in;\n        return new PayloadForSuccessfulAuthentication(payload.identifier,\n            payload.clientId,\n            payload.access_token,\n            new Date(expirationDate)\n        );\n    }\n\n    /**\n     * helper method to put the jwt token into an appropriate string usable as an http header\n     */\n    public getSecurityHeader() {\n        return {'Authorization': `Bearer ${this.extractToken()}`};\n    }\n}\n\n/**\n * class used to try to login using the authentication web service.\n */\nexport class AuthObject {\n    identifier?: string;\n    access_token: string;\n    expires_in: number;\n    clientId: Guid;\n}\n\n/**\n * class corresponding to the response of the web service checking jwt token when this token is a valid one.\n */\nexport class CheckTokenResponse {\n    sub: string;\n    exp: number;\n    client_id: string;\n}\n\n/**\n * helper @method to confirm or not if the number corresponding to a given time is in the futur regarding the present\n * moment.\n * @param time - a number corresponding to an UTC time to test\n * @return  true if time is in the future regarding the present moment, false otherwise\n */\nexport function isInTheFuture(time: number): boolean {\n    return time > Date.now();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Card.html":{"url":"classes/Card.html","title":"class - Card","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Card\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/card.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uid: string, id: string, publisher: string, publisherVersion: string, publishDate: number, startDate: number, endDate: number, severity: Severity, mainRecipient: string, processId?: string, lttd?: number, title?: I18n, summary?: I18n, data?: any, details?: CardDetail[], actions?: Map)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/card.model.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uid\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publisher\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publisherVersion\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publishDate\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        startDate\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        endDate\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        severity\n                                                  \n                                                        \n                                                                    Severity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mainRecipient\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        processId\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        lttd\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        title\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        summary\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        details\n                                                  \n                                                        \n                                                                    CardDetail[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions\n                                                  \n                                                        \n                                                                    Map\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Severity} from \"@ofModel/light-card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map} from \"@ofModel/map\";\n\nexport class Card {\n\n    constructor(\n        readonly uid: string,\n        readonly id: string,\n        readonly publisher: string,\n        readonly publisherVersion: string,\n        readonly publishDate: number,\n        readonly startDate: number,\n        readonly endDate: number,\n        readonly severity: Severity,\n        readonly mainRecipient: string,\n        readonly processId?: string,\n        readonly lttd?: number,\n        readonly title?: I18n,\n        readonly summary?: I18n,\n        readonly  data?: any,\n        readonly  details?: CardDetail[],\n        readonly  actions?: Map\n    ) {\n    }\n}\n\nexport enum TitlePosition {\n    UP, DOWN, NONE\n\n}\n\nexport class CardDetail {\n    constructor(\n        readonly titlePosition: TitlePosition,\n        readonly title: I18n,\n        readonly titleStyle: string,\n        readonly templateName: string,\n        readonly styles: string[]) {\n    }\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CardComponent.html":{"url":"components/CardComponent.html","title":"component - CardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/cards/components/card/card.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-card\n            \n\n            \n                styleUrls\n                ./card.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./card.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _i18nPrefix\n                            \n                            \n                                currentPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                    Public\n                                select\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                lightCard\n                            \n                            \n                                open\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    i18nPrefix\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/cards/components/card/card.component.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        lightCard\n                    \n                \n                \n                    \n                        Type :     LightCard\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        open\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:22\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        select()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:32\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _i18nPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:24\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        i18nPrefix\n                    \n                \n\n                \n                    \n                        geti18nPrefix()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:46\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, Input, OnInit} from '@angular/core';\nimport {LightCard} from '@ofModel/light-card.model';\nimport {Router} from '@angular/router';\nimport {selectCurrentUrl} from '@ofStore/selectors/router.selectors';\nimport {Store} from '@ngrx/store';\nimport {AppState} from '@ofStore/index';\n\n@Component({\n    selector: 'of-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.scss']\n})\nexport class CardComponent implements OnInit{\n\n    @Input() public open: boolean = true;\n    @Input() public lightCard: LightCard;\n    currentPath: any;\n    private _i18nPrefix: string;\n\n    constructor(private router: Router,\n                private store: Store) {\n\n    }\n\n    public select() {\n        this.router.navigate(['/'+this.currentPath,'cards',this.lightCard.id]);\n        this.open=true;\n    }\n\n    ngOnInit() {\n        this._i18nPrefix = this.lightCard.publisher+'.'+this.lightCard.publisherVersion+'.'\n        this.store.select(selectCurrentUrl).subscribe(url=>{\n            if(url)\n                this.currentPath = url.split('/')[1];\n        })\n        this.open=true;\n    }\n\n    get i18nPrefix(): string {\n        return this._i18nPrefix;\n    }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n    \n        \n        \n        \n            {{i18nPrefix+lightCard.title.key}}\n            ({{lightCard.startDate|date:'short'}} - {{lightCard.endDate|date:'short'}})\n        \n    \n    \n        \n        \n            {{i18nPrefix+lightCard.summary.key}}\n        \n    \n\n\n    \n\n    \n                \n                    ./card.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n.light-card-detail {\n  max-width: 400px;\n}\n\n.card {\n  margin-bottom: 5px;\n}\n\n.card-title {\n  font-variant: small-caps;\n  font-size: larger;\n}\n\n.card-subtitle {\n  font-size: small;\n}\n\n.card-text {\n  font-size: small;\n}\n\n.badge-border {\n  width: 30px;\n  text-align: center;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                        {{i18nPrefix+lightCard.title.key}}            ({{lightCard.startDate|date:\\'short\\'}} - {{lightCard.endDate|date:\\'short\\'}})                                            {{i18nPrefix+lightCard.summary.key}}            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CardDetail.html":{"url":"classes/CardDetail.html","title":"class - CardDetail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CardDetail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/card.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(titlePosition: TitlePosition, title: I18n, titleStyle: string, templateName: string, styles: string[])\n                    \n                \n                        \n                            \n                                Defined in src/app/model/card.model.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        titlePosition\n                                                  \n                                                        \n                                                                    TitlePosition\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        title\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        titleStyle\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateName\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        styles\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Severity} from \"@ofModel/light-card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map} from \"@ofModel/map\";\n\nexport class Card {\n\n    constructor(\n        readonly uid: string,\n        readonly id: string,\n        readonly publisher: string,\n        readonly publisherVersion: string,\n        readonly publishDate: number,\n        readonly startDate: number,\n        readonly endDate: number,\n        readonly severity: Severity,\n        readonly mainRecipient: string,\n        readonly processId?: string,\n        readonly lttd?: number,\n        readonly title?: I18n,\n        readonly summary?: I18n,\n        readonly  data?: any,\n        readonly  details?: CardDetail[],\n        readonly  actions?: Map\n    ) {\n    }\n}\n\nexport enum TitlePosition {\n    UP, DOWN, NONE\n\n}\n\nexport class CardDetail {\n    constructor(\n        readonly titlePosition: TitlePosition,\n        readonly title: I18n,\n        readonly titleStyle: string,\n        readonly templateName: string,\n        readonly styles: string[]) {\n    }\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CardDetailsComponent.html":{"url":"components/CardDetailsComponent.html","title":"component - CardDetailsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CardDetailsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/cards/components/card-details/card-details.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-card-details\n            \n\n\n\n\n            \n                templateUrl\n                ./card-details.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                card\n                            \n                            \n                                details\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/cards/components/card-details/card-details.component.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/card-details/card-details.component.ts:27\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            card\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Card\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card-details/card-details.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            details\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CardDetail[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card-details/card-details.component.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\nimport {Card, CardDetail} from '@ofModel/card.model';\nimport {Store} from '@ngrx/store';\nimport {AppState} from '@ofStore/index';\nimport * as cardSelectors from '@ofStore/selectors/card.selectors';\n\n@Component({\n  selector: 'of-card-details',\n  templateUrl: './card-details.component.html',\n})\nexport class CardDetailsComponent implements OnInit {\n\n  card:Card;\n  details:CardDetail[];\n\n  constructor(private store: Store) {\n\n  }\n\n  ngOnInit() {\n      this.store.select(cardSelectors.selectCardStateSelection)\n          .subscribe(card=>this.card = card);\n      this.store.select(cardSelectors.selectCardStateSelectionDetails)\n          .subscribe(details=>this.details = details);\n  }\n\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CardDetailsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CardEffects.html":{"url":"injectables/CardEffects.html","title":"injectable - CardEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CardEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/card.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loadById\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, service: CardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/card.effects.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    CardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadById\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            ofType(CardActionTypes.LoadCard),\n            switchMap(action => this.service.loadCard(action.payload.id)),\n            map((card: Card) => {\n                return new LoadCardSuccess({card: card});\n            }),\n            catchError((err, caught) => {\n                this.store.dispatch(new LoadCardFailure(err));\n                return caught;\n            })\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/card.effects.ts:30\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {Observable} from 'rxjs';\nimport {catchError, map, switchMap} from 'rxjs/operators';\nimport {CardService} from '@ofServices/card.service';\nimport {AppState} from \"@ofStore/index\";\nimport {CardActionTypes, LoadCard, LoadCardFailure, LoadCardSuccess} from \"@ofActions/card.actions\";\nimport {Card} from \"@ofModel/card.model\";\n\n// those effects are unused for the moment\n@Injectable()\nexport class CardEffects {\n\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private service: CardService\n    ) {\n    }\n\n    @Effect()\n    loadById: Observable = this.actions$\n        .pipe(\n            ofType(CardActionTypes.LoadCard),\n            switchMap(action => this.service.loadCard(action.payload.id)),\n            map((card: Card) => {\n                return new LoadCardSuccess({card: card});\n            }),\n            catchError((err, caught) => {\n                this.store.dispatch(new LoadCardFailure(err));\n                return caught;\n            })\n        );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CardFeedState.html":{"url":"interfaces/CardFeedState.html","title":"interface - CardFeedState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CardFeedState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/feed.state.ts\n        \n\n            \n                Description\n            \n            \n                The Feed State consist of:\n\nEntityState of LightCard\nselectedCardId: the currently selected card id\nlastCards the last cards added / updated to the feed\nloading: weather there is an ongoing state modification\nerror: last error during state processing\nfilters: a collection of filter to apply to the rendered feed\n\n\n            \n\n            \n                Extends\n            \n            \n                    EntityState\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        filters\n                                \n                                \n                                        lastCards\n                                \n                                \n                                        loading\n                                \n                                \n                                        selectedCardId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filters\n                                    \n                                \n                                \n                                    \n                                        filters:     Map\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Map\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastCards\n                                    \n                                \n                                \n                                    \n                                        lastCards:     LightCard[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LightCard[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                    \n                                \n                                \n                                    \n                                        loading:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectedCardId\n                                    \n                                \n                                \n                                    \n                                        selectedCardId:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createEntityAdapter, EntityAdapter, EntityState} from '@ngrx/entity';\nimport {LightCard} from '@ofModel/light-card.model';\nimport {Filter} from \"@ofModel/feed-filter.model\";\nimport {FilterType} from \"@ofServices/filter.service\";\n\n/**\n * The Feed State consist of:\n *  * EntityState of LightCard\n *  * selectedCardId: the currently selected card id\n *  * lastCards the last cards added / updated to the feed\n *  * loading: weather there is an ongoing state modification\n *  * error: last error during state processing\n *  * filters: a collection of filter to apply to the rendered feed\n */\nexport interface CardFeedState extends EntityState {\n    selectedCardId: string;\n    lastCards: LightCard[];\n    loading: boolean;\n    error: string;\n    filters: Map;\n}\n\nexport function sortByStartDate(card1: LightCard, card2: LightCard){\n    return card1.startDate - card2.startDate\n}\n\nexport const LightCardAdapter: EntityAdapter = createEntityAdapter({\n    sortComparer:sortByStartDate\n});\n\nexport const feedInitialState: CardFeedState = LightCardAdapter.getInitialState(\n    {\n        selectedCardId: null,\n        lastCards: [],\n        loading: false,\n        error: '',\n        filters: new Map()\n    });\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CardListComponent.html":{"url":"components/CardListComponent.html","title":"component - CardListComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CardListComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/components/card-list/card-list.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-card-list\n            \n\n\n\n\n            \n                templateUrl\n                ./card-list.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                lightCards\n                            \n                            \n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/components/card-list/card-list.component.ts:18\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        lightCards\n                    \n                \n                \n                    \n                        Type :     LightCard[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/card-list.component.ts:17\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        selection\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/card-list.component.ts:18\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import {Component, Input} from '@angular/core';\nimport {LightCard} from '@ofModel/light-card.model';\n\n@Component({\n  selector: 'of-card-list',\n  templateUrl: './card-list.component.html',\n})\nexport class CardListComponent  {\n\n  @Input() public lightCards: LightCard[];\n  @Input() public selection: string;\n\n  constructor() { }\n\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  \n\n  \n    \n  \n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '          '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CardListComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CardOperationEffects.html":{"url":"injectables/CardOperationEffects.html","title":"injectable - CardOperationEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CardOperationEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/card-operation.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                subscribe\n                            \n                            \n                                updateSubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, service: CardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/card-operation.effects.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    CardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subscribe\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            // loads card operations only after authentication of a default user ok.\n            ofType(AuthenticationActionTypes.AcceptLogIn),\n            switchMap(() => this.service.getCardOperation()\n                .pipe(\n                    map(operation => {\n                        if (operation.type && operation.type.toString() === 'ADD') {\n                            const opCards = operation.cards;\n                            return new LoadLightCardsSuccess({lightCards: opCards});\n                        }\n                        return new AddLightCardFailure(\n                            {\n                                error:\n                                    new Error(`unhandled action type '${operation.type}'`)\n                            });\n                    }),\n                    catchError((error, caught) => {\n                        this.store.dispatch(new AddLightCardFailure({error: error}));\n                        return caught;\n                    })\n                )\n            ),\n\n            catchError((error,caught )=> {\n                this.store.dispatch(new HandleUnexpectedError({error: error}));\n                return caught;\n            }))\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/card-operation.effects.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            // loads card operations only after authentication of a default user ok.\n            ofType(FeedActionTypes.ApplyFilter),\n            filter((af:ApplyFilter)=>af.payload.name == FilterType.TIME_FILTER),\n            switchMap((af:ApplyFilter) => this.service.updateCardSubscriptionWithDates(af.payload.status.start,af.payload.status.end)\n                .pipe(\n                    map(()=> {\n                        return new UpdatedSubscription();\n                    })\n                )\n            ),\n            catchError((error,caught )=> {\n                this.store.dispatch(new HandleUnexpectedError({error: error}))\n                return caught;\n            })\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/card-operation.effects.ts:66\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {CardService} from '@ofServices/card.service';\nimport {Observable} from 'rxjs';\nimport {catchError, filter, map, switchMap} from 'rxjs/operators';\nimport {\n    AddLightCardFailure,\n    HandleUnexpectedError,\n    LightCardActions,\n    LoadLightCardsSuccess,\n    UpdatedSubscription\n} from '@ofActions/light-card.actions';\nimport {AuthenticationActionTypes} from '@ofActions/authentication.actions';\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"@ofStore/index\";\nimport {ApplyFilter, FeedActionTypes} from \"@ofActions/feed.actions\";\nimport {FilterType} from \"@ofServices/filter.service\";\n\n@Injectable()\nexport class CardOperationEffects {\n\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private service: CardService) {\n    }\n\n    @Effect()\n    subscribe: Observable = this.actions$\n        .pipe(\n            // loads card operations only after authentication of a default user ok.\n            ofType(AuthenticationActionTypes.AcceptLogIn),\n            switchMap(() => this.service.getCardOperation()\n                .pipe(\n                    map(operation => {\n                        if (operation.type && operation.type.toString() === 'ADD') {\n                            const opCards = operation.cards;\n                            return new LoadLightCardsSuccess({lightCards: opCards});\n                        }\n                        return new AddLightCardFailure(\n                            {\n                                error:\n                                    new Error(`unhandled action type '${operation.type}'`)\n                            });\n                    }),\n                    catchError((error, caught) => {\n                        this.store.dispatch(new AddLightCardFailure({error: error}));\n                        return caught;\n                    })\n                )\n            ),\n\n            catchError((error,caught )=> {\n                this.store.dispatch(new HandleUnexpectedError({error: error}));\n                return caught;\n            }));\n\n    @Effect()\n    updateSubscription: Observable = this.actions$\n        .pipe(\n            // loads card operations only after authentication of a default user ok.\n            ofType(FeedActionTypes.ApplyFilter),\n            filter((af:ApplyFilter)=>af.payload.name == FilterType.TIME_FILTER),\n            switchMap((af:ApplyFilter) => this.service.updateCardSubscriptionWithDates(af.payload.status.start,af.payload.status.end)\n                .pipe(\n                    map(()=> {\n                        return new UpdatedSubscription();\n                    })\n                )\n            ),\n            catchError((error,caught )=> {\n                this.store.dispatch(new HandleUnexpectedError({error: error}))\n                return caught;\n            })\n        );\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CardService.html":{"url":"injectables/CardService.html","title":"injectable - CardService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/card.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                cardOperationsUrl\n                            \n                            \n                                    Readonly\n                                cardsUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fetchCardOperation\n                            \n                            \n                                getCardOperation\n                            \n                            \n                                    Private\n                                handleHeaders\n                            \n                            \n                                loadCard\n                            \n                            \n                                    Public\n                                updateCardSubscriptionWithDates\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient, authenticationService: AuthenticationService, guidService: GuidService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/card.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                    AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guidService\n                                                  \n                                                        \n                                                                    GuidService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchCardOperation\n                            \n                            \n                        \n                    \n                \n                \n                    \nfetchCardOperation(eventSource: EventSourcePolyfill)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/card.service.ts:41\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventSource\n                                                        \n                                                                    EventSourcePolyfill\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCardOperation\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCardOperation()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/card.service.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            handleHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        handleHeaders()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/card.service.ts:73\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     { headers: any; heartbeatTimeout: number; }\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadCard\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadCard(id: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/card.service.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            updateCardSubscriptionWithDates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        updateCardSubscriptionWithDates(rangeStart: number, rangeEnd: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/card.service.ts:65\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rangeStart\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        rangeEnd\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            cardOperationsUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/card.service.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            cardsUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/card.service.ts:21\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {CardOperation} from '@ofModel/card-operation.model';\nimport {EventSourcePolyfill} from 'ng-event-source';\nimport {AuthenticationService} from './authentication.service';\nimport {Card} from \"@ofModel/card.model\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {environment} from \"@env/environment\";\nimport {GuidService} from \"@ofServices/guid.service\";\n\n@Injectable()\nexport class CardService {\n    readonly cardOperationsUrl: string;\n    readonly cardsUrl: string;\n\n    constructor(private httpClient:HttpClient, private authenticationService: AuthenticationService,private guidService: GuidService) {\n        const clientId = this.guidService.getCurrentGuidString();\n        this.cardOperationsUrl = `${environment.urls.cards}/cardSubscription?clientId=${clientId}`;\n        this.cardsUrl = `${environment.urls.cards}/cards`;\n    }\n\n    loadCard(id: string): Observable {\n        return this.httpClient.get(`${this.cardsUrl}/${id}`);\n    }\n\n    getCardOperation(): Observable {\n        let minus2Hour = new Date(new Date().valueOf()-2*60*60*1000);\n        let plus48Hours = new Date(minus2Hour.valueOf()+48*60*60*1000);\n        return this.fetchCardOperation(new EventSourcePolyfill(\n            `${this.cardOperationsUrl}&notification=true&rangeStart=${minus2Hour.valueOf()}&rangeEnd=${plus48Hours.valueOf()}`\n            , this.handleHeaders()));\n    }\n\n    fetchCardOperation(eventSource: EventSourcePolyfill): Observable {\n        return Observable.create(observer => {\n            try {\n                eventSource.onmessage = message => {\n                    if (!message) {\n                        return observer.error(message);\n                    }\n                    return observer.next(JSON.parse(message.data));\n                };\n                eventSource.onerror = error => {\n                    console.error(`error occured from ES: ${error.toString()}`)\n                }\n\n            } catch (error) {\n                return observer.error(error);\n            }\n            return () => {\n                if (eventSource && eventSource.readyState !== eventSource.CLOSED) {\n                    eventSource.close();\n                }\n            };\n        })\n    }\n\n    public updateCardSubscriptionWithDates(rangeStart:number,rangeEnd:number):Observable{\n        return this.httpClient.post(\n            `${this.cardOperationsUrl}`,\n            {rangeStart:rangeStart,rangeEnd: rangeEnd},\n            {headers: this.authenticationService.getSecurityHeader()});\n    }\n\n// sse request not intercepted by core/services/interceptors.services/TokenInjector\n    private handleHeaders() {\n        return {headers: this.authenticationService.getSecurityHeader(),\n            heartbeatTimeout: 600000}\n            ;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CardState.html":{"url":"interfaces/CardState.html","title":"interface - CardState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CardState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/card.state.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        loading\n                                \n                                \n                                        selected\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                    \n                                \n                                \n                                    \n                                        loading:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                    \n                                \n                                \n                                    \n                                        selected:     Card\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Card\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Card} from \"@ofModel/card.model\";\n\nexport interface CardState{\n    selected: Card,\n    loading: boolean,\n    error: string\n}\n\nexport const cardInitialState: CardState = {\n    selected: null,\n    loading: false,\n    error: null\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CardsModule.html":{"url":"modules/CardsModule.html","title":"module - CardsModule","body":"\n                   \n\n\n\n\n    Modules\n    CardsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CardsModule\n\n\n\ncluster_CardsModule_declarations\n\n\n\ncluster_CardsModule_exports\n\n\n\ncluster_CardsModule_providers\n\n\n\n\nCardComponent\n\nCardComponent\n\n\n\nCardsModule\n\nCardsModule\n\nCardsModule -->\n\nCardComponent->CardsModule\n\n\n\n\n\nCardDetailsComponent\n\nCardDetailsComponent\n\nCardsModule -->\n\nCardDetailsComponent->CardsModule\n\n\n\n\n\nDetailComponent\n\nDetailComponent\n\nCardsModule -->\n\nDetailComponent->CardsModule\n\n\n\n\n\nDetailsComponent\n\nDetailsComponent\n\nCardsModule -->\n\nDetailsComponent->CardsModule\n\n\n\n\n\nCardComponent \n\nCardComponent \n\nCardComponent  -->\n\nCardsModule->CardComponent \n\n\n\n\n\nCardDetailsComponent \n\nCardDetailsComponent \n\nCardDetailsComponent  -->\n\nCardsModule->CardDetailsComponent \n\n\n\n\n\nDetailComponent \n\nDetailComponent \n\nDetailComponent  -->\n\nCardsModule->DetailComponent \n\n\n\n\n\nDetailsComponent \n\nDetailsComponent \n\nDetailsComponent  -->\n\nCardsModule->DetailsComponent \n\n\n\n\n\nHandlebarsService\n\nHandlebarsService\n\nCardsModule -->\n\nHandlebarsService->CardsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/cards/cards.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            CardComponent\n                        \n                        \n                            CardDetailsComponent\n                        \n                        \n                            DetailComponent\n                        \n                        \n                            DetailsComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            HandlebarsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CardComponent\n                        \n                        \n                            CardDetailsComponent\n                        \n                        \n                            DetailComponent\n                        \n                        \n                            DetailsComponent\n                        \n                    \n                \n            \n        \n\n        \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            forRoot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        forRoot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/cards.module.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     ModuleWithProviders\n\n                            \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CardComponent} from \"./components/card/card.component\";\nimport {CardDetailsComponent} from \"./components/card-details/card-details.component\";\nimport {DetailsComponent} from \"./components/details/details.component\";\nimport {DetailComponent} from \"./components/detail/detail.component\";\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {ThirdsService} from \"../../services/thirds.service\";\nimport {HandlebarsService} from \"./services/handlebars.service\";\n\n@NgModule({\n  declarations: [CardComponent, CardDetailsComponent, DetailsComponent, DetailComponent],\n  imports: [\n    CommonModule,\n      TranslateModule\n      // TranslateModule.forChild({\n      //     loader: {\n      //         provide: TranslateLoader,\n      //         useFactory: ThirdsI18nLoaderFactory,\n      //         deps:[ThirdsService]},\n      //     useDefaultLang: false\n      // })\n  ],\n    exports: [CardComponent, CardDetailsComponent, DetailsComponent, DetailComponent],\n    providers: [HandlebarsService]\n})\nexport class CardsModule {\n    static forRoot(): ModuleWithProviders{\n        return {\n            ngModule: CardsModule,\n            providers: [ThirdsService]\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckAuthenticationStatus.html":{"url":"classes/CheckAuthenticationStatus.html","title":"class - CheckAuthenticationStatus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckAuthenticationStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                First action dispatch by the application.\nIt aims to validate the current authentication if exists.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.CheckAuthenticationStatus\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\n\nexport enum AuthenticationActionTypes {\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n/**\n * First action dispatch by the application.\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    constructor(public payload: PayloadForSuccessfulAuthentication) {\n    }\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    constructor(public payload: { denialReason: string }) {\n    }\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n     AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckTokenResponse.html":{"url":"classes/CheckTokenResponse.html","title":"class - CheckTokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckTokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/authentication.service.ts\n        \n\n            \n                Description\n            \n            \n                class corresponding to the response of the web service checking jwt token when this token is a valid one.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                client_id\n                            \n                            \n                                exp\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            client_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:197\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:196\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sub\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:195\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError, map} from 'rxjs/operators';\nimport {Guid} from 'guid-typescript';\nimport {PayloadForSuccessfulAuthentication} from '@ofActions/authentication.actions';\nimport {environment} from \"@env/environment\";\nimport {GuidService} from \"@ofServices/guid.service\";\n\nexport enum LocalStorageAuthContent {\n    token = 'token',\n    expirationDate = 'expirationDate',\n    identifier = 'identifier',\n    clientId = 'clientId'\n}\n\nexport const ONE_SECOND = 1000;\n\n@Injectable()\nexport class AuthenticationService {\n\n    /** url to check authentication token (jwt) */\n    private checkTokenUrl = `${environment.urls.auth}/check_token`;\n    /** url to ask for an authentication token (jwt) */\n    private askTokenUrl = `${environment.urls.auth}/token`;\n\n    /**\n     * @constructor\n     * @param httpClient - Angular build-in\n     * @param guidService - create and store the unique id for this application and user\n     */\n    constructor(private httpClient: HttpClient,private guidService: GuidService) {\n    }\n\n    /**\n     * Call the web service which checks the authentication token. A valid token gives back the authentication information\n     * and an invalid one an error.\n     *\n     * @param token - jwt token\n     * @return an {Observable} which contains the deserializable content of the token\n     * an error is thrown otherwise\n     */\n    checkAuthentication(token: string): Observable {\n        const postData = new FormData();\n        postData.append('token', token);\n        return this.httpClient.post(this.checkTokenUrl, postData).pipe(\n            map(check => check),\n            catchError(this.handleError)\n        );\n    }\n\n    /**\n     * Given a pair of connection, ask the web service generating jwt authentication token a token if the pair is\n     * a registered one.\n     * @param login \n     * @param password\n     */\n    askToken(login: string, password: string): Observable {\n        const params = new URLSearchParams();\n        params.append('username', login);\n        params.append('password', password);\n        params.append('grant_type', 'password');\n        // beware clientId for token defines a type of authentication\n        params.append('client_id', 'clientIdPassword');\n\n        const headers = new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'});\n        return this.httpClient.post(this.askTokenUrl\n            , params.toString()\n            , {headers: headers}).pipe(\n            map(data => {\n                const trackism = {...data};\n\n                trackism.identifier = login;\n                // this clientId is used to identify unequivocally the session\n                trackism.clientId = this.guidService.getCurrentGuid();\n                return trackism;\n            }),\n            map(authObjt => {\n                    let successfulAuth = this.convert(authObjt);\n                    this.saveAuthenticationInformation(successfulAuth)\n                    return successfulAuth;\n                }\n            ),\n            catchError(this.handleError)\n        );\n\n    }\n\n    private handleError(error: any) {\n        console.error(error);\n        return throwError(error);\n    }\n\n    /**\n     * extract the jwt authentication token from the localstorage\n     */\n    public extractToken(): string {\n        return localStorage.getItem(LocalStorageAuthContent.token);\n    }\n\n    /**\n     * @return true if the expiration date stored in the `localestorage` is still running, false otherwise.\n     */\n    public verifyExpirationDate(): boolean {\n        // + to convert the stored number as a string back to number\n        const expirationDate = +localStorage.getItem(LocalStorageAuthContent.expirationDate);\n        const isNotANumber = isNaN(expirationDate);\n        const stillValid = isInTheFuture(expirationDate);\n        const finalResult = !isNotANumber && stillValid;\n        return finalResult;\n    }\n\n    /**\n     * @return true if the expiration date stored in the `localstorage` is over, false otherwise\n     */\n    public isExpirationDateOver(): boolean {\n        return !this.verifyExpirationDate();\n    }\n    /**\n     * clear the `localstorage` from all its content.\n     */\n    public clearAuthenticationInformation(): void {\n        localStorage.clear();\n    }\n\n    /**\n     * save the authentication informatios such as identifier, jwt token, expiration date and clientId in the\n     * `localstorage`.\n     * @param payload\n     */\n    public saveAuthenticationInformation(payload: PayloadForSuccessfulAuthentication) {\n        localStorage.setItem(LocalStorageAuthContent.identifier, payload.identifier);\n        localStorage.setItem(LocalStorageAuthContent.token, payload.token);\n        localStorage.setItem(LocalStorageAuthContent.expirationDate, payload.expirationDate.getTime().toString());\n        localStorage.setItem(LocalStorageAuthContent.clientId, payload.clientId.toString());\n    }\n\n    /**\n     * extract from the `localstorage` the authentication relevant information such as dentifier, jwt token,\n     * expiration date and clientId\n     * @return {PayloadForSuccessfulAuthentication}\n     */\n    public extractIdentificationInformation(): PayloadForSuccessfulAuthentication {\n        return new PayloadForSuccessfulAuthentication(\n            localStorage.getItem(LocalStorageAuthContent.identifier),\n            Guid.parse(localStorage.getItem(LocalStorageAuthContent.clientId)),\n            localStorage.getItem(LocalStorageAuthContent.token),\n            // as getItem return a string, `+` isUsed\n            new Date(+localStorage.getItem(LocalStorageAuthContent.expirationDate)),\n        );\n    }\n\n    /**\n     * helper method to convert an {AuthObject} instance into a {PayloadForSuccessfulAuthentication} instance.\n     * @param payload\n     */\n    public convert(payload: AuthObject): PayloadForSuccessfulAuthentication {\n        const expirationDate = Date.now() + ONE_SECOND * payload.expires_in;\n        return new PayloadForSuccessfulAuthentication(payload.identifier,\n            payload.clientId,\n            payload.access_token,\n            new Date(expirationDate)\n        );\n    }\n\n    /**\n     * helper method to put the jwt token into an appropriate string usable as an http header\n     */\n    public getSecurityHeader() {\n        return {'Authorization': `Bearer ${this.extractToken()}`};\n    }\n}\n\n/**\n * class used to try to login using the authentication web service.\n */\nexport class AuthObject {\n    identifier?: string;\n    access_token: string;\n    expires_in: number;\n    clientId: Guid;\n}\n\n/**\n * class corresponding to the response of the web service checking jwt token when this token is a valid one.\n */\nexport class CheckTokenResponse {\n    sub: string;\n    exp: number;\n    client_id: string;\n}\n\n/**\n * helper @method to confirm or not if the number corresponding to a given time is in the futur regarding the present\n * moment.\n * @param time - a number corresponding to an UTC time to test\n * @return  true if time is in the future regarding the present moment, false otherwise\n */\nexport function isInTheFuture(time: number): boolean {\n    return time > Date.now();\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigEffects.html":{"url":"injectables/ConfigEffects.html","title":"injectable - ConfigEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConfigEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/config.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loadById\n                            \n                            \n                                retry\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, service: ConfigService, retryDelay: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/config.effects.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        retryDelay\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadById\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            ofType(ConfigActionTypes.LoadConfig),\n            switchMap(action => this.service.fetchConfiguration()),\n            map((config: any) => {\n                return new LoadConfigSuccess({config: config});\n            }),\n            catchError((err, caught) => {\n                this.store.dispatch(new LoadConfigFailure(err));\n                return caught;\n            })\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/config.effects.ts:54\n                            \n                        \n\n                \n                    \n                        Manages load -> service request -> success/error\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            retry\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/config.effects.ts:71\n                            \n                        \n\n                \n                    \n                        Manages load retry upon error\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import {Inject, Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {Observable} from 'rxjs';\nimport {catchError, delay, filter, map, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {ConfigService} from '@ofServices/config.service';\nimport {AppState} from \"@ofStore/index\";\nimport {ConfigActionTypes, LoadConfig, LoadConfigFailure, LoadConfigSuccess} from \"@ofActions/config.actions\";\nimport {selectConfigRetry} from \"@ofSelectors/config.selectors\";\nimport {CONFIG_LOAD_MAX_RETRIES} from \"@ofStates/config.state\";\n\n// those effects are unused for the moment\n@Injectable()\nexport class ConfigEffects {\n\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private service: ConfigService,\n                @Inject('configRetryDelay')\n                private retryDelay: number = 5000,\n    ) {\n\n        if (this.retryDelay > 0)\n            this.retry = this.actions$\n                .pipe(\n                    ofType(ConfigActionTypes.LoadConfigFailure),\n                    withLatestFrom(this.store.select(selectConfigRetry)),\n                    filter(([action, retry]) => retry  new LoadConfig()),\n                    delay(this.retryDelay)\n                );\n        else\n            this.retry = this.actions$\n                .pipe(\n                    ofType(ConfigActionTypes.LoadConfigFailure),\n                    withLatestFrom(this.store.select(selectConfigRetry)),\n                    filter(([action, retry]) => retry  new LoadConfig())\n                );\n    }\n\n    /**\n     * Manages load -> service request -> success/error\n     */\n    @Effect()\n    loadById: Observable = this.actions$\n        .pipe(\n            ofType(ConfigActionTypes.LoadConfig),\n            switchMap(action => this.service.fetchConfiguration()),\n            map((config: any) => {\n                return new LoadConfigSuccess({config: config});\n            }),\n            catchError((err, caught) => {\n                this.store.dispatch(new LoadConfigFailure(err));\n                return caught;\n            })\n        );\n\n    /**\n     * Manages load retry upon error\n     */\n    @Effect()\n    retry: Observable;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigService.html":{"url":"injectables/ConfigService.html","title":"injectable - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/config.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                configUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fetchConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/config.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchConfiguration\n                            \n                            \n                        \n                    \n                \n                \n                    \nfetchConfiguration()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/config.service.ts:24\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            configUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/config.service.ts:18\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable, Injector} from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport {HttpClient, HttpParams, HttpUrlEncodingCodec} from \"@angular/common/http\";\nimport {AuthenticationService} from \"@ofServices/authentication.service\";\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"@ofStore/index\";\nimport {environment} from \"@env/environment\";\n\n@Injectable()\nexport class ConfigService {\n    private configUrl: string;\n\n    constructor(private httpClient: HttpClient) {\n        this.configUrl = `${environment.urls.config}`;\n    }\n\n    fetchConfiguration(): Observable {\n        return this.httpClient.get(`${this.configUrl}`)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConfigState.html":{"url":"interfaces/ConfigState.html","title":"interface - ConfigState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ConfigState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/config.state.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                                \n                                        error\n                                \n                                \n                                        loaded\n                                \n                                \n                                        loading\n                                \n                                \n                                        retry\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loaded\n                                    \n                                \n                                \n                                    \n                                        loaded:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                    \n                                \n                                \n                                    \n                                        loading:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        retry\n                                    \n                                \n                                \n                                    \n                                        retry:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Card} from \"@ofModel/card.model\";\n\nexport const CONFIG_LOAD_MAX_RETRIES = 5;\n\nexport interface ConfigState{\n    config:any,\n    loading: boolean,\n    loaded: boolean,\n    error: string,\n    retry: number\n}\n\nexport const configInitialState: ConfigState = {\n    config:{},\n    loading: false,\n    loaded: false,\n    error: null,\n    retry: 0\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomRouterEffects.html":{"url":"injectables/CustomRouterEffects.html","title":"injectable - CustomRouterEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CustomRouterEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/custom-router.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                navigateToCard\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, service: CardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/custom-router.effects.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    CardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            navigateToCard\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$.pipe(\n        ofType(ROUTER_NAVIGATION),\n        filter((action: RouterNavigationAction, index)=> {\n            return action.payload.event.url.indexOf(\"/feed/cards/\")>=0;\n        }),\n        switchMap(action=>{\n            const routerState:any = action.payload.routerState;\n            return [\n                new LoadCard({id: routerState.params['cid']}),\n                new SelectLightCard({selectedCardId: routerState.params['cid']})\n            ];\n        })\n    )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/custom-router.effects.ts:28\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from \"@angular/core\";\nimport {Action, Store} from \"@ngrx/store\";\nimport {AppState} from \"@ofStore/index\";\nimport {Actions, Effect, ofType} from \"@ngrx/effects\";\nimport {CardService} from \"@ofServices/card.service\";\nimport {Observable} from \"rxjs\";\nimport {ROUTER_NAVIGATION, RouterNavigationAction} from \"@ngrx/router-store\";\nimport {filter, switchMap} from \"rxjs/operators\";\nimport {LoadCard} from \"@ofActions/card.actions\";\nimport {SelectLightCard} from \"@ofActions/light-card.actions\";\n\n@Injectable()\nexport class CustomRouterEffects {\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private service: CardService\n    ) {}\n\n    @Effect()\n    navigateToCard: Observable = this.actions$.pipe(\n        ofType(ROUTER_NAVIGATION),\n        filter((action: RouterNavigationAction, index)=> {\n            return action.payload.event.url.indexOf(\"/feed/cards/\")>=0;\n        }),\n        switchMap(action=>{\n            const routerState:any = action.payload.routerState;\n            return [\n                new LoadCard({id: routerState.params['cid']}),\n                new SelectLightCard({selectedCardId: routerState.params['cid']})\n            ];\n        })\n    );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomRouterStateSerializer.html":{"url":"classes/CustomRouterStateSerializer.html","title":"class - CustomRouterStateSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomRouterStateSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/router.state.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        RouterStateSerializer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                extractParams\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            extractParams\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        extractParams(state: ActivatedRouteSnapshot)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/store/states/router.state.ts:55\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                        \n                                                                    ActivatedRouteSnapshot\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Params\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            serialize\n                            \n                            \n                        \n                    \n                \n                \n                    \nserialize(routerState: RouterStateSnapshot)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/store/states/router.state.ts:48\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        routerState\n                                                        \n                                                                    RouterStateSnapshot\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RouterStateUrl\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {RouterStateSerializer} from \"@ngrx/router-store\";\nimport {ActivatedRouteSnapshot, Params, RouterStateSnapshot} from \"@angular/router\";\n\nexport const initialState = {\n    state: {\n        url: window.location.pathname,\n        params: {},\n        queryParams: {}\n    },\n    navigationId: 0\n}\n\n/**\n * The RouterStateSerializer takes the current RouterStateSnapshot\n * and returns any pertinent information needed. The snapshot contains\n * all information about the state of the router at the given point in time.\n * The entire snapshot is complex and not always needed. In this case, you only\n * need the URL and query parameters from the snapshot in the store. Other items could be\n * returned such as route parameters and static route data.\n *\n * source: https://github.com/briebug/ngrx-complex-forms\n *\n */\n\nexport class RouterStateUrl {\n    /* istanbul ignore next */\n    constructor(\n        readonly url: string,\n        readonly params: Params,\n        readonly queryParams: Params) {\n    }\n}\n\nexport class CustomRouterStateSerializer\n    implements RouterStateSerializer {\n    serialize(routerState: RouterStateSnapshot): RouterStateUrl {\n        const {url} = routerState;\n        const params = this.extractParams(routerState.root);\n        const queryParams = routerState.root.queryParams;\n        return new RouterStateUrl(url, params, queryParams);\n    }\n\n    private extractParams(state: ActivatedRouteSnapshot): Params {\n        let params: Params = {...state.params};\n        for (let child of state.children) {\n            params = {...params, ...this.extractParams(child)}\n        }\n        return params;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DetailComponent.html":{"url":"components/DetailComponent.html","title":"component - DetailComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DetailComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/cards/components/detail/detail.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-detail\n            \n\n\n\n\n            \n                templateUrl\n                ./detail.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _htmlContent\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Readonly\n                                hrefsOfCssLink\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attachAction\n                            \n                            \n                                bindActions\n                            \n                            \n                                    Private\n                                initializeHandlebarsTemplates\n                            \n                            \n                                    Private\n                                initializeHrefsOfCssLink\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                reinsertScripts\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                card\n                            \n                            \n                                detail\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    htmlContent\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(element: ElementRef, thirds: ThirdsService, handlebars: HandlebarsService, sanitizer: DomSanitizer)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/cards/components/detail/detail.component.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        thirds\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        handlebars\n                                                  \n                                                        \n                                                                    HandlebarsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sanitizer\n                                                  \n                                                        \n                                                                    DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        card\n                    \n                \n                \n                    \n                        Type :     Card\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        detail\n                    \n                \n                \n                    \n                        Type :     CardDetail\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:20\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attachAction\n                            \n                            \n                        \n                    \n                \n                \n                    \nattachAction(button: HTMLButtonElement, action: Action, actionId: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:97\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        button\n                                                        \n                                                                    HTMLButtonElement\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        action\n                                                        \n                                                                    Action\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        actionId\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bindActions\n                            \n                            \n                        \n                    \n                \n                \n                    \nbindActions()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:83\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initializeHandlebarsTemplates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initializeHandlebarsTemplates()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:51\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initializeHrefsOfCssLink\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initializeHrefsOfCssLink()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:36\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:31\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reinsertScripts\n                            \n                            \n                        \n                    \n                \n                \n                    \nreinsertScripts()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:68\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _htmlContent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     SafeHtml\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            active\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            hrefsOfCssLink\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        htmlContent\n                    \n                \n\n                \n                    \n                        gethtmlContent()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:64\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, ElementRef, Input, OnInit} from '@angular/core';\nimport {Action, Card, CardDetail} from '@ofModel/card.model';\nimport {ThirdsService} from \"../../../../services/thirds.service\";\nimport {HandlebarsService} from \"../../services/handlebars.service\";\nimport {DomSanitizer, SafeHtml, SafeResourceUrl} from \"@angular/platform-browser\";\n\n@Component({\n    selector: 'of-detail',\n    templateUrl: './detail.component.html',\n})\nexport class DetailComponent implements OnInit {\n    public active = false;\n    @Input() detail: CardDetail;\n    @Input() card: Card;\n    readonly hrefsOfCssLink = new Array();\n    private _htmlContent: SafeHtml;\n\n    constructor(private element: ElementRef,\n                private thirds: ThirdsService,\n                private handlebars: HandlebarsService,\n                private sanitizer: DomSanitizer) {\n    }\n\n    ngOnInit() {\n        this.initializeHrefsOfCssLink();\n        this.initializeHandlebarsTemplates();\n    }\n\n    private initializeHrefsOfCssLink() {\n        if (this.detail && this.detail.styles) {\n            const publisher = this.card.publisher;\n            const publisherVersion = this.card.publisherVersion;\n            this.detail.styles.forEach(style => {\n                const cssUrl = this.thirds.computeThirdCssUrl(publisher, style, publisherVersion);\n                //needed to instantiate href of link for css in component rendering\n                const safeCssUrl = this.sanitizer.bypassSecurityTrustResourceUrl(cssUrl);\n                this.hrefsOfCssLink.push(safeCssUrl);\n\n                console.log(`this is the safe resource Url for css '${safeCssUrl.toString()}' and with local version '${safeCssUrl.toLocaleString()}'`)\n            });\n        }\n    }\n\n    private initializeHandlebarsTemplates() {\n        this.handlebars.executeTemplate(this.detail.templateName, this.card).subscribe(\n            html => {\n                this._htmlContent = this.sanitizer.bypassSecurityTrustHtml(html);\n                setTimeout(() => { // wait for DOM rendering\n                    this.reinsertScripts();\n                    this.bindActions()\n                });\n            }\n        );\n    }\n\n\n    get htmlContent() {\n        return this._htmlContent;\n    }\n\n    reinsertScripts(): void {\n        const scripts = this.element.nativeElement.getElementsByTagName('script');\n        const scriptsInitialLength = scripts.length;\n        for (let i = 0; i this.element.nativeElement.getElementsByTagName('button');\n\n        for (let button of buttons) {\n            if (button.attributes['action-id']) {\n                const actionId = button.attributes['action-id'].nodeValue;\n                if (actionId) {\n                    this.attachAction(button, this.card.actions[actionId], actionId);\n                }\n            }\n        }\n    }\n\n    attachAction(button: HTMLButtonElement, action: Action, actionId: string) {\n        button.classList.add('btn');\n        if (action.buttonStyle) {\n            for (let c of action.buttonStyle.split(' ')) {\n                button.classList.add(c);\n            }\n        } else {\n            button.classList.add('btn-light');\n        }\n        if (action.contentStyle) {\n            for (let c of action.contentStyle.split(' ')) {\n                button.children[0].classList.add(c);\n            }\n        } else {\n            button.children[0].classList.add('fa', 'fa-warning', 'text-dark');\n        }\n        button.addEventListener('click', (event: Event) => {\n            alert(`${actionId} was triggered.\\nAction handling is not yet implemented`);\n        });\n    }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DetailComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DetailsComponent.html":{"url":"components/DetailsComponent.html","title":"component - DetailsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DetailsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/cards/components/details/details.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-details\n            \n\n\n\n\n            \n                templateUrl\n                ./details.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _i18nPrefix\n                            \n                            \n                                details\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                selectDetail\n                            \n                            \n                                    Private\n                                updateAsync\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                card\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    i18nPrefix\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/cards/components/details/details.component.ts:20\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        card\n                    \n                \n                \n                    \n                        Type :     Card\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:19\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngAfterViewInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngAfterViewInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnChanges\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnChanges(changes: SimpleChanges)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:57\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changes\n                                                        \n                                                                    SimpleChanges\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectDetail\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectDetail(detail: DetailComponent)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        detail\n                                                        \n                                                                    DetailComponent\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            updateAsync\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        updateAsync()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:34\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _i18nPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            details\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QueryList\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ContentChildren(DetailComponent)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:18\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        i18nPrefix\n                    \n                \n\n                \n                    \n                        geti18nPrefix()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:53\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {AfterViewInit, Component, ContentChildren, Input, OnChanges, QueryList, SimpleChanges} from '@angular/core';\nimport {DetailComponent} from \"../detail/detail.component\";\nimport {Card} from \"@ofModel/card.model\";\n\n@Component({\n    selector: 'of-details',\n    templateUrl: './details.component.html',\n})\nexport class DetailsComponent implements AfterViewInit, OnChanges {\n\n    @ContentChildren(DetailComponent) details: QueryList;\n    @Input() card: Card;\n    private _i18nPrefix: string;\n\n    constructor() {\n    }\n\n    ngAfterViewInit(): void {\n        this.updateAsync();\n        this.details.changes.subscribe(\n            () => {\n                this.updateAsync();\n            }\n        );\n    }\n\n    private updateAsync() {\n        setTimeout(() => {\n            let activeDetail = this.details.filter((tab) => tab.active)\n            // if there is no active tab set, activate the first\n            if (activeDetail.length === 0) {\n                this.selectDetail(this.details.first);\n            }\n        });\n    }\n\n    selectDetail(detail: DetailComponent) {\n        // deactivate all tabs\n        this.details.toArray().forEach(detail => detail.active = false);\n\n        // activate the tab the user has clicked on.\n        if (detail)\n            detail.active = true;\n    }\n\n    public get i18nPrefix(){\n        return this._i18nPrefix;\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if(changes['card'].currentValue)\n            this._i18nPrefix = changes['card'].currentValue.publisher+'.'+changes['card'].currentValue.publisherVersion+'.';\n    }\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  \n    {{i18nPrefix+detailC.detail.title.key}}\n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{i18nPrefix+detailC.detail.title.key}}  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DetailsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FeedComponent.html":{"url":"components/FeedComponent.html","title":"component - FeedComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FeedComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/feed.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-cards\n            \n\n            \n                styleUrls\n                ./feed.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./feed.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lightCards$\n                            \n                            \n                                selection$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/feed.component.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngAfterViewInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngAfterViewInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/feed.component.ts:38\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/feed.component.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lightCards$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/feed.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selection$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/feed.component.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {AfterViewInit, Component, OnInit} from '@angular/core';\nimport {select, Store} from '@ngrx/store';\nimport {AppState} from '@ofStore/index';\nimport {Observable, of} from 'rxjs';\nimport {LightCard} from '@ofModel/light-card.model';\nimport * as feedSelectors from '@ofSelectors/feed.selectors';\nimport {catchError} from \"rxjs/operators\";\n\n@Component({\n    selector: 'of-cards',\n    templateUrl: './feed.component.html',\n    styleUrls: ['./feed.component.scss']\n})\nexport class FeedComponent implements OnInit, AfterViewInit {\n\n    lightCards$: Observable;\n    selection$: Observable;\n\n    constructor(private store: Store) {\n    }\n\n    ngOnInit() {\n        this.lightCards$ = this.store.pipe(\n            select(feedSelectors.selectFilteredFeed),\n            catchError(err => of([]))\n        );\n        this.selection$ = this.store.select(feedSelectors.selectLightCardSelection);\n    }\n\n\n    ngAfterViewInit() {\n    }\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n    \n        \n            \n        \n    \n    \n        \n            \n        \n        \n            \n        \n    \n\n\n\n    \n\n    \n                \n                    ./feed.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FeedComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FeedFiltersEffects.html":{"url":"injectables/FeedFiltersEffects.html","title":"injectable - FeedFiltersEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FeedFiltersEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/feed-filters.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loadFeedFilterOnAuthenticationSuccess\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, service: FilterService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/feed-filters.effects.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    FilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadFeedFilterOnAuthenticationSuccess\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            // loads card operations only after authentication of a default user ok.\n            ofType(AuthenticationActionTypes.AcceptLogIn),\n            map((action) => {\n                return new InitFilters({filters:this.service.defaultFilters});\n            }))\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/feed-filters.effects.ts:28\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {AuthenticationActionTypes} from '@ofActions/authentication.actions';\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"@ofStore/index\";\nimport {FilterService} from \"@ofServices/filter.service\";\nimport {FeedActions, InitFilters} from \"@ofActions/feed.actions\";\n\n@Injectable()\nexport class FeedFiltersEffects {\n\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private service: FilterService) {\n    }\n\n    @Effect()\n    loadFeedFilterOnAuthenticationSuccess: Observable = this.actions$\n        .pipe(\n            // loads card operations only after authentication of a default user ok.\n            ofType(AuthenticationActionTypes.AcceptLogIn),\n            map((action) => {\n                return new InitFilters({filters:this.service.defaultFilters});\n            }));\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FeedModule.html":{"url":"modules/FeedModule.html","title":"module - FeedModule","body":"\n                   \n\n\n\n\n    Modules\n    FeedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FeedModule\n\n\n\ncluster_FeedModule_declarations\n\n\n\ncluster_FeedModule_imports\n\n\n\ncluster_FeedModule_exports\n\n\n\n\nCardListComponent\n\nCardListComponent\n\n\n\nFeedModule\n\nFeedModule\n\nFeedModule -->\n\nCardListComponent->FeedModule\n\n\n\n\n\nFeedComponent\n\nFeedComponent\n\nFeedModule -->\n\nFeedComponent->FeedModule\n\n\n\n\n\nFiltersComponent\n\nFiltersComponent\n\nFeedModule -->\n\nFiltersComponent->FeedModule\n\n\n\n\n\nNoSelectionComponent\n\nNoSelectionComponent\n\nFeedModule -->\n\nNoSelectionComponent->FeedModule\n\n\n\n\n\nTimeFilterComponent\n\nTimeFilterComponent\n\nFeedModule -->\n\nTimeFilterComponent->FeedModule\n\n\n\n\n\nTimeLineComponent\n\nTimeLineComponent\n\nFeedModule -->\n\nTimeLineComponent->FeedModule\n\n\n\n\n\nTypeFilterComponent\n\nTypeFilterComponent\n\nFeedModule -->\n\nTypeFilterComponent->FeedModule\n\n\n\n\n\nFeedComponent \n\nFeedComponent \n\nFeedComponent  -->\n\nFeedModule->FeedComponent \n\n\n\n\n\nCardsModule\n\nCardsModule\n\nFeedModule -->\n\nCardsModule->FeedModule\n\n\n\n\n\nFeedRoutingModule\n\nFeedRoutingModule\n\nFeedModule -->\n\nFeedRoutingModule->FeedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/feed/feed.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            CardListComponent\n                        \n                        \n                            FeedComponent\n                        \n                        \n                            FiltersComponent\n                        \n                        \n                            NoSelectionComponent\n                        \n                        \n                            TimeFilterComponent\n                        \n                        \n                            TimeLineComponent\n                        \n                        \n                            TypeFilterComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CardsModule\n                        \n                        \n                            FeedRoutingModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FeedComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CardListComponent} from './components/card-list/card-list.component';\nimport {FeedComponent} from './feed.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {FeedRoutingModule} from \"./feed-routing.module\";\nimport {NoSelectionComponent} from './components/no-selection/no-selection.component';\nimport {TimeLineComponent} from './components/time-line/time-line.component';\nimport {CardsModule} from \"../cards/cards.module\";\nimport {FiltersComponent} from './components/card-list/filters/filters.component';\nimport {TypeFilterComponent} from './components/card-list/filters/type-filter/type-filter.component';\nimport {NgbModule} from \"@ng-bootstrap/ng-bootstrap\";\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {TimeFilterComponent} from './components/card-list/filters/time-filter/time-filter.component';\nimport {FontAwesomeModule} from \"@fortawesome/angular-fontawesome\";\nimport {library} from \"@fortawesome/fontawesome-svg-core\";\nimport {faClock} from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faClock);\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        TranslateModule,\n        NgbModule.forRoot(),\n        CardsModule,\n        FeedRoutingModule,\n        FontAwesomeModule\n    ],\n    declarations: [CardListComponent, FeedComponent, NoSelectionComponent, TimeLineComponent, FiltersComponent, TypeFilterComponent, TimeFilterComponent],\n    exports: [FeedComponent]\n})\nexport class FeedModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FeedRoutingModule.html":{"url":"modules/FeedRoutingModule.html","title":"module - FeedRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    FeedRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/feed/feed-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {NgModule} from '@angular/core';\nimport {FeedComponent} from \"./feed.component\";\n// import {AuthenticationGuard} from \"@ofServices/guard.service\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {DetailComponent} from \"../cards/components/detail/detail.component\";\nimport {CardDetailsComponent} from \"../cards/components/card-details/card-details.component\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: FeedComponent,\n        // canActivate: [AuthenticationGuard],\n        children: [\n            // {\n            //     path: '',\n            //     pathMatch: 'full',\n            //     redirectTo: 'cards'\n            // },\n            {\n                path: 'cards',\n                children : [\n                    {\n                        path: '',\n                        component: CardDetailsComponent,\n                    },\n                    {\n                        path: ':cid',\n                        component: CardDetailsComponent,\n                        children: [\n                            {\n                                path: 'details/:did',\n                                component: DetailComponent\n                            }\n                        ]\n                    }]\n            },\n            ]\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class FeedRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Filter.html":{"url":"classes/Filter.html","title":"class - Filter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Filter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/feed-filter.model.ts\n        \n\n            \n                Description\n            \n            \n                A Filter gather both the feed filtering behaviour and the filter status for\nfiltering parametrization and component state\nThe function property funktion takes two arguments :\n\ncard: the card for which to evaluate filter\nstatus: the status of the current filter\n\nBeware: we use a copy constructor for replication of filters as a store state so take care of funktion scope\nin Filter implementation (Instanciation and Inheritance). This is the reason why we pass the filter status upon\nfunktion\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyFilter\n                            \n                            \n                                chainFilter\n                            \n                            \n                                    Static\n                                chainFilter\n                            \n                            \n                                clone\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(funktion: (undefined,undefined) => void, active: boolean, status: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/feed-filter.model.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        funktion\n                                                  \n                                                        \n                                                                    function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        active\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            active\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:27\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            applyFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \napplyFilter(card: LightCard)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:42\n                            \n                        \n\n\n                \n                    \n                            apply the filter to the card, returns true if the card passes the filter, false otherwise\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        card\n                                                        \n                                                                    LightCard\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chainFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \nchainFilter(card: LightCard, next: Filter[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:55\n                            \n                        \n\n\n                \n                    \n                            Apply this filter to a card, then a chain of filter recursively.\nThe recursion stops when the card is filtered out\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        card\n                                                        \n                                                                    LightCard\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        next\n                                                        \n                                                                    Filter[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            chainFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        chainFilter(card: LightCard, next: Filter[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:66\n                            \n                        \n\n\n                \n                    \n                            Sequentially applies a chain of filters to a card\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        card\n                                                        \n                                                                    LightCard\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        next\n                                                        \n                                                                    Filter[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clone\n                            \n                            \n                        \n                    \n                \n                \n                    \nclone()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:31\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Filter\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {LightCard} from \"@ofModel/light-card.model\";\n\n/**\n * A Filter gather both the feed filtering behaviour and the filter status for\n * filtering parametrization and component state\n *\n * The function property funktion takes two arguments :\n *  * card: the card for which to evaluate filter\n *  * status: the status of the current filter\n *\n * Beware: we use a copy constructor for replication of filters as a store state so take care of funktion scope\n * in Filter implementation (Instanciation and Inheritance). This is the reason why we pass the filter status upon\n * funktion\n */\nexport class Filter {\n\n    constructor(\n        readonly funktion: (LightCard,any) => boolean,\n        public active:boolean,\n        public status: any\n    ) {\n    }\n\n    clone():Filter {\n        return new Filter(\n            this.funktion,\n            this.active,\n            this.status);\n    }\n\n    /**\n     * apply the filter to the card, returns true if the card passes the filter, false otherwise\n     * @param card\n     */\n    applyFilter(card: LightCard):boolean{\n        if(this.active){\n            return this.funktion(card,this.status);\n        }\n        return true;\n    }\n\n    /**\n     * Apply this filter to a card, then a chain of filter recursively.\n     * The recursion stops when the card is filtered out\n     * @param card\n     * @param next\n     */\n    chainFilter(card: LightCard, next: Filter[]){\n        if(this.applyFilter(card))\n            return !next || next.length == 0 || next[0].chainFilter(card,next.slice(1));\n        return false\n    }\n\n    /**\n     * Sequentially applies a chain of filters to a card\n     * @param card\n     * @param next\n     */\n    static chainFilter(card: LightCard, next: Filter[]){\n        return !next||next.length == 0 || next[0].chainFilter(card,next.slice(1));\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilterService.html":{"url":"injectables/FilterService.html","title":"injectable - FilterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FilterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/filter.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _defaultFilters\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                initFilters\n                            \n                            \n                                    Private\n                                initRecipientFilter\n                            \n                            \n                                    Private\n                                initTimeFilter\n                            \n                            \n                                    Private\n                                initTypeFilter\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    defaultFilters\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/filter.service.ts:17\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initFilters\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initFilters()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/filter.service.ts:82\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Map\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initRecipientFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initRecipientFilter()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/filter.service.ts:52\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initTimeFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initTimeFilter()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/filter.service.ts:60\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initTypeFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initTypeFilter()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/filter.service.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _defaultFilters\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/filter.service.ts:17\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        defaultFilters\n                    \n                \n\n                \n                    \n                        getdefaultFilters()\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/filter.service.ts:23\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Filter} from \"@ofModel/feed-filter.model\";\nimport {LightCard, Severity} from \"@ofModel/light-card.model\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FilterService {\n\n    private _defaultFilters = new Map();\n\n    constructor() {\n        this._defaultFilters = this.initFilters();\n    }\n\n    get defaultFilters(): Map {\n        return this._defaultFilters;\n    }\n\n\n    private initTypeFilter() {\n        const alarm = Severity.ALARM;\n        const action = Severity.ACTION;\n        const question = Severity.QUESTION;\n        const notification = Severity.NOTIFICATION;\n        return new Filter(\n            (card, status) => {\n                const result =\n                    status.alarm && card.severity == alarm ||\n                    status.action && card.severity == action ||\n                    status.question && card.severity == question ||\n                    status.notification && card.severity == notification;\n                return result;\n            },\n            true,\n            {\n                alarm: true,\n                action: true,\n                question: true,\n                notification: false\n            }\n        );\n    }\n\n    private initRecipientFilter() {\n        return new Filter(\n            (card, status) => false,\n            false,\n            {}\n        );\n    }\n\n    private initTimeFilter() {\n        return new Filter(\n            (card:LightCard, status) => {\n                if (!!status.start && !!status.end) {\n                    if (!card.endDate)\n                        return card.startDate  {\n        const filters = new Map();\n        filters.set(FilterType.TYPE_FILTER, this.initTypeFilter());\n        filters.set(FilterType.RECIPIENT_FILTER, this.initRecipientFilter());\n        filters.set(FilterType.TIME_FILTER, this.initTimeFilter());\n        return filters;\n    }\n}\n\nexport enum FilterType {\n    TYPE_FILTER,\n    RECIPIENT_FILTER,\n    TIME_FILTER,\n    TEST_FILTER\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FiltersComponent.html":{"url":"components/FiltersComponent.html","title":"component - FiltersComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FiltersComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/components/card-list/filters/filters.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-filters\n            \n\n\n\n\n            \n                templateUrl\n                ./filters.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/components/card-list/filters/filters.component.ts:14\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/filters.component.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'of-filters',\n  templateUrl: './filters.component.html',\n})\nexport class FiltersComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n    \n    \n    \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FiltersComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuidService.html":{"url":"classes/GuidService.html","title":"class - GuidService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuidService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/guid.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                guid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentGuid\n                            \n                            \n                                getCurrentGuidString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/guid.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            guid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Guid\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/guid.service.ts:16\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCurrentGuid\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCurrentGuid()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/guid.service.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Guid\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCurrentGuidString\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCurrentGuidString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/guid.service.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Inject} from \"@angular/core\";\nimport {Guid} from \"guid-typescript\";\n\n@Inject({\n    providedIn: 'root'\n})\nexport class GuidService {\n\n    private readonly guid: Guid;\n\n    constructor() {\n        this.guid = Guid.create();\n    }\n\n    getCurrentGuid(): Guid {\n        return this.guid;\n    }\n\n    getCurrentGuidString():string{\n        return this.getCurrentGuid().toString();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HandleUnexpectedError.html":{"url":"classes/HandleUnexpectedError.html","title":"class - HandleUnexpectedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HandleUnexpectedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/card.actions.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CardActionTypes.HandleUnexpectedError\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:40\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Card} from '@ofModel/card.model';\n\nexport enum CardActionTypes {\n    LoadCard = '[Card] Load Card',\n    LoadCardSuccess = '[Card] Load Card Success',\n    LoadCardFailure = '[Card] Load Card Fail',\n    HandleUnexpectedError = '[Card] Handle unexpected error related to card issue'\n}\n// needed by NGRX entities\nexport class LoadCard implements Action {\n    readonly type = CardActionTypes.LoadCard;\n\n    constructor(public payload: { id: string }) {\n    }\n}\nexport class LoadCardFailure implements Action {\n    readonly type = CardActionTypes.LoadCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadCardSuccess implements Action {\n    readonly type = CardActionTypes.LoadCardSuccess;\n\n    constructor(public payload: { card: Card }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = CardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type CardActions =\n    LoadCard\n    | LoadCardSuccess\n    | LoadCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HandleUnexpectedError-1.html":{"url":"classes/HandleUnexpectedError-1.html","title":"class - HandleUnexpectedError-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HandleUnexpectedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/config.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/config.actions.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/config.actions.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConfigActionTypes.HandleUnexpectedError\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/config.actions.ts:36\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\n\nexport enum ConfigActionTypes {\n    LoadConfig = '[Config] Load Config',\n    LoadConfigSuccess = '[Config] Load Config Success',\n    LoadConfigFailure = '[Config] Load Config Fail',\n    HandleUnexpectedError = '[Config] Handle unexpected error related to configuration issue'\n}\n// needed by NGRX entities\nexport class LoadConfig implements Action {\n    readonly type = ConfigActionTypes.LoadConfig;\n}\nexport class LoadConfigFailure implements Action {\n    readonly type = ConfigActionTypes.LoadConfigFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadConfigSuccess implements Action {\n    readonly type = ConfigActionTypes.LoadConfigSuccess;\n\n    constructor(public payload: { config: any }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = ConfigActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type ConfigActions =\n    LoadConfig\n    | LoadConfigSuccess\n    | LoadConfigFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HandleUnexpectedError-2.html":{"url":"classes/HandleUnexpectedError-2.html","title":"class - HandleUnexpectedError-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HandleUnexpectedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:72\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:74\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.HandleUnexpectedError\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:72\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    // | LoadLightCard\n    // | LoadLightCardSuccess\n    // | LoadLightCardFailure\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HandleUnexpectedError-3.html":{"url":"classes/HandleUnexpectedError-3.html","title":"class - HandleUnexpectedError-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HandleUnexpectedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/menu.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/menu.actions.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : MenuActionTypes.HandleUnexpectedError\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:39\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\n\nexport enum MenuActionTypes {\n    LoadMenu = '[Menu] Load Menu',\n    LoadMenuSuccess = '[Menu] Load Menu Success',\n    LoadMenuFailure = '[Menu] Load Menu Fail',\n    HandleUnexpectedError = '[Menu] Handle unexpected error'\n}\n// needed by NGRX entities\nexport class LoadMenu implements Action {\n    readonly type = MenuActionTypes.LoadMenu;\n\n    constructor() {\n    }\n}\nexport class LoadMenuFailure implements Action {\n    readonly type = MenuActionTypes.LoadMenuFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadMenuSuccess implements Action {\n    readonly type = MenuActionTypes.LoadMenuSuccess;\n\n    constructor(public payload: { menu: ThirdMenu[] }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    readonly type = MenuActionTypes.HandleUnexpectedError;\n\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type MenuActions =\n    LoadMenu\n    | LoadMenuSuccess\n    | LoadMenuFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HandlebarsService.html":{"url":"injectables/HandlebarsService.html","title":"injectable - HandlebarsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  HandlebarsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/modules/cards/services/handlebars.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                templateCache\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                executeTemplate\n                            \n                            \n                                    Private\n                                queryTemplate\n                            \n                            \n                                    Private\n                                registerArrayAtIndex\n                            \n                            \n                                    Private\n                                registerArrayAtIndexLength\n                            \n                            \n                                    Private\n                                registerBool\n                            \n                            \n                                    Private\n                                registerCardAction\n                            \n                            \n                                    Private\n                                registerDateFormat\n                            \n                            \n                                    Private\n                                registerI18n\n                            \n                            \n                                    Private\n                                registerMath\n                            \n                            \n                                    Private\n                                registerNow\n                            \n                            \n                                    Private\n                                registerNumberFormat\n                            \n                            \n                                    Private\n                                registerPreserveSpace\n                            \n                            \n                                    Private\n                                registerSlice\n                            \n                            \n                                    Private\n                                registerSort\n                            \n                            \n                                    Private\n                                registerSplit\n                            \n                            \n                                    Private\n                                registerSvg\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(time: TimeService, translate: TranslateService, thirds: ThirdsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/cards/services/handlebars.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        time\n                                                  \n                                                        \n                                                                    TimeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        thirds\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            executeTemplate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        executeTemplate(templateName: string, card: Card)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        templateName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        card\n                                                        \n                                                                    Card\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            queryTemplate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        queryTemplate(publisher: string, version: string, name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:49\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publisher\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        version\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerArrayAtIndex\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerArrayAtIndex()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:117\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerArrayAtIndexLength\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerArrayAtIndexLength()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:91\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerBool\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerBool()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:62\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerCardAction\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerCardAction()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:226\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerDateFormat\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerDateFormat()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:240\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerI18n\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerI18n()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:182\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerMath\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerMath()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:103\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerNow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerNow()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:255\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerNumberFormat\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerNumberFormat()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:248\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerPreserveSpace\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerPreserveSpace()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:262\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerSlice\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerSlice()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:123\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerSort\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerSort()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:140\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerSplit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerSplit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:97\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerSvg\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerSvg()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:208\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            templateCache\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:23\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from \"@angular/core\";\nimport {Card} from \"@ofModel/card.model\";\nimport * as Handlebars from \"handlebars/dist/handlebars.js\"\nimport {TimeService} from \"@ofServices/time.service\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport * as moment from 'moment';\nimport {Map} from \"@ofModel/map\";\nimport {Observable, of} from \"rxjs\";\nimport {map, tap} from \"rxjs/operators\";\nimport {ThirdsService} from \"../../../services/thirds.service\";\nimport {Guid} from \"guid-typescript\";\n\n@Injectable()\nexport class HandlebarsService {\n\n    private templateCache:Map = new Map();\n\n    constructor(private time:TimeService,\n                private translate: TranslateService,\n                private thirds: ThirdsService){\n        this.registerPreserveSpace();\n        this.registerNumberFormat();\n        this.registerDateFormat();\n        this.registerCardAction();\n        this.registerSvg();\n        this.registerI18n();\n        this.registerSort();\n        this.registerSlice();\n        this.registerArrayAtIndex();\n        this.registerMath();\n        this.registerSplit();\n        this.registerArrayAtIndexLength();\n        this.registerBool();\n        this.registerNow();\n    }\n\n    public executeTemplate(templateName: string, card: Card):Observable {\n        return this.queryTemplate(card.publisher,card.publisherVersion,templateName).pipe(\n            map(t=>t(card)));\n    }\n\n    private queryTemplate(publisher:string, version:string, name: string):Observable {\n        const locale = this.translate.getBrowserLang();\n        const key = `${publisher}.${version}.${name}.${locale}`;\n        let template = this.templateCache[key];\n        if(template){\n           return of(template);\n        }\n        return this.thirds.fetchHbsTemplate(publisher,version,name,locale).pipe(\n            map(s=>Handlebars.compile(s)),\n            tap(t=>this.templateCache[key]=t)\n        );\n    }\n\n    private registerBool() {\n        Handlebars.registerHelper('bool', function (v1, operator, v2, options) {\n            switch (operator) {\n                case '==':\n                    return (v1 == v2);\n                case '===':\n                    return (v1 === v2);\n                case '!=':\n                    return (v1 != v2);\n                case '!==':\n                    return (v1 !== v2);\n                case '':\n                    return (v1 > v2);\n                case '>=':\n                    return (v1 >= v2);\n                case '&&':\n                    return (v1 && v2);\n                case '||':\n                    return (v1 || v2);\n                default:\n                    return true;\n            }\n        });\n    }\n\n    private registerArrayAtIndexLength() {\n        Handlebars.registerHelper('arrayAtIndexLength', function (value, index, options) {\n            return value[index].length;\n        });\n    }\n\n    private registerSplit() {\n        Handlebars.registerHelper('split', function (value, splitValue, index, options) {\n            return value.split(splitValue)[index];\n        });\n    }\n\n    private registerMath(){\n        Handlebars.registerHelper(\"math\", function(lvalue, operator, rvalue, options) {\n            let result;\n            switch(operator) {\n                case \"+\": result = lvalue + rvalue; break;\n                case \"-\": result = lvalue - rvalue; break;\n                case \"*\": result = lvalue * rvalue; break;\n                case \"/\": result = lvalue / rvalue; break;\n                case \"%\": result = lvalue % rvalue; break;\n            }\n            return result;\n        });\n    }\n\n    private registerArrayAtIndex() {\n        Handlebars.registerHelper('arrayAtIndex', function (value, index, options) {\n            return value[index];\n        });\n    }\n\n    private registerSlice() {\n        Handlebars.registerHelper('slice', function () {\n            let args = [];\n            for (let index = 0; index =3) {\n                to = args[2];\n                return value.slice(from, to);\n            }\n            return value.slice(from);\n        });\n    }\n\n    private registerSort() {\n        Handlebars.registerHelper('sort', function () {\n            let args = [];\n            for (let index = 0; index  {\n            let args = [],\n                options = fctArgs[fctArgs.length - 1];\n            for (let i = 0; i \n                    document.getElementById('${svgUid}').addEventListener('load', function(){\n                            svgPanZoom(document.getElementById('${svgUid}'));});\n                    `\n        });\n    }\n\n    private registerCardAction() {\n        Handlebars.registerHelper('action', function () {\n            let args = [];\n            for (let i = 0; i `\n        });\n    }\n\n    private registerDateFormat() {\n        Handlebars.registerHelper('dateFormat', (value, options) => {\n            const m = moment(new Date(value));\n            m.locale(this.translate.getBrowserLang());\n            return m.format(options.hash.format);\n        });\n    }\n\n    private registerNumberFormat() {\n        Handlebars.registerHelper('numberFormat', (value, options) => {\n            const formatter = new Intl.NumberFormat(this.translate.getBrowserLang(), options.hash);\n            return formatter.format(value);\n        });\n    }\n\n    private registerNow() {\n        const that = this;\n        Handlebars.registerHelper('now', function (options) {\n            return that.time.currentTime();\n        })\n    }\n\n    private registerPreserveSpace() {\n        Handlebars.registerHelper(\"preserveSpace\", function (value, options) {\n            return value.replace(/ /g, '\\u00A0')\n        });\n    }\n}\n\nfunction sortOnKey(key){\n    return function(a,b){\n        if(typeof  a[key] == 'string' && typeof b[key] == 'string'){\n            if(a[key]b[key])\n                return 1\n            return 0;\n        }else if(typeof  a[key] == 'number' && typeof b[key] == 'number'){\n            return a[key]-b[key];\n        }\n        return 0;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/I18n.html":{"url":"classes/I18n.html","title":"class - I18n","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  I18n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/i18n.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(key: string, parameters: Map)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/i18n.model.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                    Map\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Map} from \"@ofModel/map\";\n\nexport class I18n {\n    constructor(\n        readonly key: string,\n        readonly parameters: Map) {\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/IconComponent.html":{"url":"components/IconComponent.html","title":"component - IconComponent","body":"\n                   \n\n\n\n\n\n  Components\n  IconComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/icon/icon.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-icon\n            \n\n            \n                styleUrls\n                icon.component.scss\n            \n\n\n\n            \n                templateUrl\n                icon.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                iconPath\n                            \n                            \n                                size\n                            \n                            \n                                sprites\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                big\n                            \n                            \n                                dark\n                            \n                            \n                                icon\n                            \n                            \n                                light\n                            \n                            \n                                medium\n                            \n                            \n                                small\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(platformLocation: PlatformLocation)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/icon/icon.component.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        platformLocation\n                                                  \n                                                        \n                                                                    PlatformLocation\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        big\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dark\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:22\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        icon\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:18\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        light\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        medium\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        small\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:19\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:32\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            iconPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sprites\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, Input, OnInit} from '@angular/core';\nimport {PlatformLocation} from \"@angular/common\";\n\n@Component({\n  selector: 'of-icon',\n  templateUrl:'icon.component.html',\n  styleUrls: ['icon.component.scss']\n})\nexport class IconComponent implements OnInit {\n\n  @Input() icon:string;\n  @Input() small:boolean;\n  @Input() medium:boolean;\n  @Input() big:boolean;\n  @Input() dark:boolean;\n  @Input() light:boolean;\n  size:string;\n  sprites:string;\n  iconPath:string;\n  constructor(platformLocation:PlatformLocation) {\n      let baseHref = platformLocation.getBaseHrefFromDOM();\n      this.iconPath = (baseHref?baseHref:'/')+'assets/images/icons/'\n  }\n\n  ngOnInit() {\n    this.big = this.big != undefined;\n    this.medium = this.medium != undefined && !this.big;\n    this.small = this.small != undefined && !this.medium;\n    this.dark = this.dark != undefined;\n    this.light = this.light != undefined && ! this.dark;\n    let size = this.big?'big':this.medium?'medium':'small'\n    switch (size) {\n        case 'big':\n          this.size = '64px';\n          break;\n        case 'medium':\n          this.size = '32px';\n          break;\n         default:\n          this.size = '16px';\n    }\n    if(this.dark||this.light){\n      this.sprites='sprites-mono.svg'\n    }else{\n      this.sprites='sprites.svg'\n    }\n  }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  \n\n\n    \n\n    \n                \n                    icon.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n@import \"~assets/styles/_variables.scss\";\n\n.dark{\n  fill: $dark;\n}\n.light{\n  fill: $light;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'IconComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InitFilters.html":{"url":"classes/InitFilters.html","title":"class - InitFilters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InitFilters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/feed.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/feed.actions.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/feed.actions.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : FeedActionTypes.InitFilter\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/feed.actions.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Filter} from \"@ofModel/feed-filter.model\";\nimport {FilterType} from \"@ofServices/filter.service\";\n\nexport enum FeedActionTypes {\n    ApplyFilter = '[Feed] Change filter Status',\n    InitFilter = '[Feed] Init filter',\n}\n\nexport class ApplyFilter implements Action {\n    readonly type = FeedActionTypes.ApplyFilter\n    constructor(public payload:{name: FilterType, active: boolean, status: any}){}\n}\n\nexport class InitFilters implements Action {\n    readonly type = FeedActionTypes.InitFilter\n    constructor(public payload:{filters: Map}){}\n}\n\nexport type FeedActions =\n    InitFilters\n    | ApplyFilter;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Input.html":{"url":"classes/Input.html","title":"class - Input","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Input\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/card.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: InputType, name: string, label: I18n, value: string, mandatory: boolean, maxLength: number, rows: number, values: ParameterListItem[], selectedValues: string[], unSelectedValues: string[])\n                    \n                \n                        \n                            \n                                Defined in src/app/model/card.model.ts:85\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                    InputType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mandatory\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rows\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    ParameterListItem[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        selectedValues\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        unSelectedValues\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Severity} from \"@ofModel/light-card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map} from \"@ofModel/map\";\n\nexport class Card {\n\n    constructor(\n        readonly uid: string,\n        readonly id: string,\n        readonly publisher: string,\n        readonly publisherVersion: string,\n        readonly publishDate: number,\n        readonly startDate: number,\n        readonly endDate: number,\n        readonly severity: Severity,\n        readonly mainRecipient: string,\n        readonly processId?: string,\n        readonly lttd?: number,\n        readonly title?: I18n,\n        readonly summary?: I18n,\n        readonly  data?: any,\n        readonly  details?: CardDetail[],\n        readonly  actions?: Map\n    ) {\n    }\n}\n\nexport enum TitlePosition {\n    UP, DOWN, NONE\n\n}\n\nexport class CardDetail {\n    constructor(\n        readonly titlePosition: TitlePosition,\n        readonly title: I18n,\n        readonly titleStyle: string,\n        readonly templateName: string,\n        readonly styles: string[]) {\n    }\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LightCardEffects.html":{"url":"injectables/LightCardEffects.html","title":"injectable - LightCardEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LightCardEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/light-card.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loadById\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, thirdService: ThirdsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/light-card.effects.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        thirdService\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadById\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            ofType(LightCardActionTypes.LoadLightCardsSuccess),\n            switchMap((action:LoadLightCardsSuccess)=>\n                    this.thirdService.loadI18nForLightCards(action.payload.lightCards)\n                        .pipe(\n                            tap(test=>console.log(`loaded lightCards:${test}`)),\n                            catchError((err,caught)=>{\n                                console.error(`i18 loading failed for card publishers`);\n                                console.error(err);\n                                return of(false);\n                            })\n                        )),\n            map(\n                ()=>{\n                    return new LoadLightCardsExtendedData();\n                }\n            )\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/light-card.effects.ts:30\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {Observable, of} from 'rxjs';\nimport {catchError, map, switchMap} from 'rxjs/operators';\nimport {AppState} from \"@ofStore/index\";\nimport {LightCardActionTypes, LoadLightCardsExtendedData, LoadLightCardsSuccess} from \"@ofActions/light-card.actions\";\nimport {ThirdsService} from \"@ofServices/thirds.service\";\nimport {tap} from \"rxjs/internal/operators/tap\";\n\n// those effects are unused for the moment\n@Injectable()\nexport class LightCardEffects {\n\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private thirdService: ThirdsService\n    ) {\n    }\n\n    @Effect()\n    loadById: Observable = this.actions$\n        .pipe(\n            ofType(LightCardActionTypes.LoadLightCardsSuccess),\n            switchMap((action:LoadLightCardsSuccess)=>\n                    this.thirdService.loadI18nForLightCards(action.payload.lightCards)\n                        .pipe(\n                            tap(test=>console.log(`loaded lightCards:${test}`)),\n                            catchError((err,caught)=>{\n                                console.error(`i18 loading failed for card publishers`);\n                                console.error(err);\n                                return of(false);\n                            })\n                        )),\n            map(\n                ()=>{\n                    return new LoadLightCardsExtendedData();\n                }\n            )\n        );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadCard.html":{"url":"classes/LoadCard.html","title":"class - LoadCard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/card.actions.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CardActionTypes.LoadCard\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Card} from '@ofModel/card.model';\n\nexport enum CardActionTypes {\n    LoadCard = '[Card] Load Card',\n    LoadCardSuccess = '[Card] Load Card Success',\n    LoadCardFailure = '[Card] Load Card Fail',\n    HandleUnexpectedError = '[Card] Handle unexpected error related to card issue'\n}\n// needed by NGRX entities\nexport class LoadCard implements Action {\n    readonly type = CardActionTypes.LoadCard;\n\n    constructor(public payload: { id: string }) {\n    }\n}\nexport class LoadCardFailure implements Action {\n    readonly type = CardActionTypes.LoadCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadCardSuccess implements Action {\n    readonly type = CardActionTypes.LoadCardSuccess;\n\n    constructor(public payload: { card: Card }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = CardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type CardActions =\n    LoadCard\n    | LoadCardSuccess\n    | LoadCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadCardFailure.html":{"url":"classes/LoadCardFailure.html","title":"class - LoadCardFailure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadCardFailure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/card.actions.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CardActionTypes.LoadCardFailure\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Card} from '@ofModel/card.model';\n\nexport enum CardActionTypes {\n    LoadCard = '[Card] Load Card',\n    LoadCardSuccess = '[Card] Load Card Success',\n    LoadCardFailure = '[Card] Load Card Fail',\n    HandleUnexpectedError = '[Card] Handle unexpected error related to card issue'\n}\n// needed by NGRX entities\nexport class LoadCard implements Action {\n    readonly type = CardActionTypes.LoadCard;\n\n    constructor(public payload: { id: string }) {\n    }\n}\nexport class LoadCardFailure implements Action {\n    readonly type = CardActionTypes.LoadCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadCardSuccess implements Action {\n    readonly type = CardActionTypes.LoadCardSuccess;\n\n    constructor(public payload: { card: Card }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = CardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type CardActions =\n    LoadCard\n    | LoadCardSuccess\n    | LoadCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadCardSuccess.html":{"url":"classes/LoadCardSuccess.html","title":"class - LoadCardSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadCardSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/card.actions.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CardActionTypes.LoadCardSuccess\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Card} from '@ofModel/card.model';\n\nexport enum CardActionTypes {\n    LoadCard = '[Card] Load Card',\n    LoadCardSuccess = '[Card] Load Card Success',\n    LoadCardFailure = '[Card] Load Card Fail',\n    HandleUnexpectedError = '[Card] Handle unexpected error related to card issue'\n}\n// needed by NGRX entities\nexport class LoadCard implements Action {\n    readonly type = CardActionTypes.LoadCard;\n\n    constructor(public payload: { id: string }) {\n    }\n}\nexport class LoadCardFailure implements Action {\n    readonly type = CardActionTypes.LoadCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadCardSuccess implements Action {\n    readonly type = CardActionTypes.LoadCardSuccess;\n\n    constructor(public payload: { card: Card }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = CardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type CardActions =\n    LoadCard\n    | LoadCardSuccess\n    | LoadCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadConfig.html":{"url":"classes/LoadConfig.html","title":"class - LoadConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/config.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConfigActionTypes.LoadConfig\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/config.actions.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\n\nexport enum ConfigActionTypes {\n    LoadConfig = '[Config] Load Config',\n    LoadConfigSuccess = '[Config] Load Config Success',\n    LoadConfigFailure = '[Config] Load Config Fail',\n    HandleUnexpectedError = '[Config] Handle unexpected error related to configuration issue'\n}\n// needed by NGRX entities\nexport class LoadConfig implements Action {\n    readonly type = ConfigActionTypes.LoadConfig;\n}\nexport class LoadConfigFailure implements Action {\n    readonly type = ConfigActionTypes.LoadConfigFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadConfigSuccess implements Action {\n    readonly type = ConfigActionTypes.LoadConfigSuccess;\n\n    constructor(public payload: { config: any }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = ConfigActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type ConfigActions =\n    LoadConfig\n    | LoadConfigSuccess\n    | LoadConfigFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadConfigFailure.html":{"url":"classes/LoadConfigFailure.html","title":"class - LoadConfigFailure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadConfigFailure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/config.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/config.actions.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/config.actions.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConfigActionTypes.LoadConfigFailure\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/config.actions.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\n\nexport enum ConfigActionTypes {\n    LoadConfig = '[Config] Load Config',\n    LoadConfigSuccess = '[Config] Load Config Success',\n    LoadConfigFailure = '[Config] Load Config Fail',\n    HandleUnexpectedError = '[Config] Handle unexpected error related to configuration issue'\n}\n// needed by NGRX entities\nexport class LoadConfig implements Action {\n    readonly type = ConfigActionTypes.LoadConfig;\n}\nexport class LoadConfigFailure implements Action {\n    readonly type = ConfigActionTypes.LoadConfigFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadConfigSuccess implements Action {\n    readonly type = ConfigActionTypes.LoadConfigSuccess;\n\n    constructor(public payload: { config: any }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = ConfigActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type ConfigActions =\n    LoadConfig\n    | LoadConfigSuccess\n    | LoadConfigFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadConfigSuccess.html":{"url":"classes/LoadConfigSuccess.html","title":"class - LoadConfigSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadConfigSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/config.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/config.actions.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/config.actions.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConfigActionTypes.LoadConfigSuccess\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/config.actions.ts:28\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\n\nexport enum ConfigActionTypes {\n    LoadConfig = '[Config] Load Config',\n    LoadConfigSuccess = '[Config] Load Config Success',\n    LoadConfigFailure = '[Config] Load Config Fail',\n    HandleUnexpectedError = '[Config] Handle unexpected error related to configuration issue'\n}\n// needed by NGRX entities\nexport class LoadConfig implements Action {\n    readonly type = ConfigActionTypes.LoadConfig;\n}\nexport class LoadConfigFailure implements Action {\n    readonly type = ConfigActionTypes.LoadConfigFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadConfigSuccess implements Action {\n    readonly type = ConfigActionTypes.LoadConfigSuccess;\n\n    constructor(public payload: { config: any }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = ConfigActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type ConfigActions =\n    LoadConfig\n    | LoadConfigSuccess\n    | LoadConfigFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadLightCards.html":{"url":"classes/LoadLightCards.html","title":"class - LoadLightCards","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadLightCards\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.LoadLightCards\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    // | LoadLightCard\n    // | LoadLightCardSuccess\n    // | LoadLightCardFailure\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadLightCardsExtendedData.html":{"url":"classes/LoadLightCardsExtendedData.html","title":"class - LoadLightCardsExtendedData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadLightCardsExtendedData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:35\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.LoadLightCardsExtendedData\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    // | LoadLightCard\n    // | LoadLightCardSuccess\n    // | LoadLightCardFailure\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadLightCardsFailure.html":{"url":"classes/LoadLightCardsFailure.html","title":"class - LoadLightCardsFailure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadLightCardsFailure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.LoadLightCardsFailure\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:42\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    // | LoadLightCard\n    // | LoadLightCardSuccess\n    // | LoadLightCardFailure\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadLightCardsSuccess.html":{"url":"classes/LoadLightCardsSuccess.html","title":"class - LoadLightCardsSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadLightCardsSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.LoadLightCardsSuccess\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:28\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    // | LoadLightCard\n    // | LoadLightCardSuccess\n    // | LoadLightCardFailure\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMenu.html":{"url":"classes/LoadMenu.html","title":"class - LoadMenu","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMenu\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/menu.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/menu.actions.ts:19\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : MenuActionTypes.LoadMenu\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\n\nexport enum MenuActionTypes {\n    LoadMenu = '[Menu] Load Menu',\n    LoadMenuSuccess = '[Menu] Load Menu Success',\n    LoadMenuFailure = '[Menu] Load Menu Fail',\n    HandleUnexpectedError = '[Menu] Handle unexpected error'\n}\n// needed by NGRX entities\nexport class LoadMenu implements Action {\n    readonly type = MenuActionTypes.LoadMenu;\n\n    constructor() {\n    }\n}\nexport class LoadMenuFailure implements Action {\n    readonly type = MenuActionTypes.LoadMenuFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadMenuSuccess implements Action {\n    readonly type = MenuActionTypes.LoadMenuSuccess;\n\n    constructor(public payload: { menu: ThirdMenu[] }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    readonly type = MenuActionTypes.HandleUnexpectedError;\n\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type MenuActions =\n    LoadMenu\n    | LoadMenuSuccess\n    | LoadMenuFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMenuFailure.html":{"url":"classes/LoadMenuFailure.html","title":"class - LoadMenuFailure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMenuFailure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/menu.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/menu.actions.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : MenuActionTypes.LoadMenuFailure\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\n\nexport enum MenuActionTypes {\n    LoadMenu = '[Menu] Load Menu',\n    LoadMenuSuccess = '[Menu] Load Menu Success',\n    LoadMenuFailure = '[Menu] Load Menu Fail',\n    HandleUnexpectedError = '[Menu] Handle unexpected error'\n}\n// needed by NGRX entities\nexport class LoadMenu implements Action {\n    readonly type = MenuActionTypes.LoadMenu;\n\n    constructor() {\n    }\n}\nexport class LoadMenuFailure implements Action {\n    readonly type = MenuActionTypes.LoadMenuFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadMenuSuccess implements Action {\n    readonly type = MenuActionTypes.LoadMenuSuccess;\n\n    constructor(public payload: { menu: ThirdMenu[] }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    readonly type = MenuActionTypes.HandleUnexpectedError;\n\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type MenuActions =\n    LoadMenu\n    | LoadMenuSuccess\n    | LoadMenuFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMenuSuccess.html":{"url":"classes/LoadMenuSuccess.html","title":"class - LoadMenuSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMenuSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/menu.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/menu.actions.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : MenuActionTypes.LoadMenuSuccess\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\n\nexport enum MenuActionTypes {\n    LoadMenu = '[Menu] Load Menu',\n    LoadMenuSuccess = '[Menu] Load Menu Success',\n    LoadMenuFailure = '[Menu] Load Menu Fail',\n    HandleUnexpectedError = '[Menu] Handle unexpected error'\n}\n// needed by NGRX entities\nexport class LoadMenu implements Action {\n    readonly type = MenuActionTypes.LoadMenu;\n\n    constructor() {\n    }\n}\nexport class LoadMenuFailure implements Action {\n    readonly type = MenuActionTypes.LoadMenuFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadMenuSuccess implements Action {\n    readonly type = MenuActionTypes.LoadMenuSuccess;\n\n    constructor(public payload: { menu: ThirdMenu[] }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    readonly type = MenuActionTypes.HandleUnexpectedError;\n\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type MenuActions =\n    LoadMenu\n    | LoadMenuSuccess\n    | LoadMenuFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/login/login.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-login\n            \n\n\n            \n                styles\n                .btn-primary {margin-right: 8px;}\n            \n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hide\n                            \n                            \n                                userForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onSubmit\n                            \n                            \n                                resetForm\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/login/login.component.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onSubmit\n                            \n                            \n                        \n                    \n                \n                \n                    \nonSubmit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            resetForm\n                            \n                            \n                        \n                    \n                \n                \n                    \nresetForm()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:43\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hide\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {Store} from '@ngrx/store';\nimport {TryToLogIn} from '@ofActions/authentication.actions';\nimport {AppState} from '@ofStore/index';\n\n@Component({\n    selector: 'of-login',\n    templateUrl: './login.component.html',\n    styles: ['.btn-primary {margin-right: 8px;}']\n})\nexport class LoginComponent implements OnInit {\n\n    hide: boolean;\n    userForm: FormGroup;\n    /* istanbul ignore next */\n    constructor( private store: Store) {}\n\n    ngOnInit() {\n        this.hide = true;\n        this.userForm = new FormGroup({\n                identifier: new FormControl(''),\n                password: new FormControl('')\n            }\n        );\n    }\n\n    onSubmit(): void {\n        if (this.userForm.valid) {\n            const username = this.userForm.get('identifier').value;\n            const password = this.userForm.get('password').value;\n            this.store.dispatch(new TryToLogIn({username: username, password: password}));\n        }\n    }\n\n    resetForm(): void {\n        this.userForm.reset();\n    }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n    \n        \n            \n                \n                    Identifier\n                    \n                    \n                        Password\n                        \n                    \n                    \n                        Login\n                        \n                        Reset\n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n    \n            .btn-primary {margin-right: 8px;}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                            Identifier                                                                Password                                                                                        Login                                                Reset                                                                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Map.html":{"url":"classes/Map.html","title":"class - Map","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Map\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/map.ts\n        \n\n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    T\n\n                    \n                \n                        \n                            \n                                Defined in src/app/model/map.ts:8\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        export class Map {\n    [key: string]: T;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MenuEffects.html":{"url":"injectables/MenuEffects.html","title":"injectable - MenuEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MenuEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/menu.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                load\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, service: ThirdsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/menu.effects.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            load\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            ofType(MenuActionTypes.LoadMenu),\n            switchMap(action => this.service.computeThirdsMenu()),\n            switchMap(menu=>zip(of(menu),this.service.loadI18nForMenuEntries(menu)\n                .pipe(\n                    catchError((err,caught)=>{\n                        console.error(err);\n                        return of(false);\n                    })\n                ))),\n            map(array =>\n                new LoadMenuSuccess({menu: array[0]})\n            ),\n            catchError((err, caught) => {\n                console.error(err);\n                this.store.dispatch(new LoadMenuFailure(err));\n                return caught;\n            })\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/menu.effects.ts:29\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {Observable, of, zip} from 'rxjs';\nimport {catchError, map, switchMap} from 'rxjs/operators';\nimport {AppState} from \"@ofStore/index\";\nimport {LoadCard} from \"@ofActions/card.actions\";\nimport {ThirdsService} from \"@ofServices/thirds.service\";\nimport {LoadMenuFailure, LoadMenuSuccess, MenuActionTypes} from \"@ofActions/menu.actions\";\n\n@Injectable()\nexport class MenuEffects {\n\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private service: ThirdsService\n    ) {\n    }\n\n    @Effect()\n    load: Observable = this.actions$\n        .pipe(\n            ofType(MenuActionTypes.LoadMenu),\n            switchMap(action => this.service.computeThirdsMenu()),\n            switchMap(menu=>zip(of(menu),this.service.loadI18nForMenuEntries(menu)\n                .pipe(\n                    catchError((err,caught)=>{\n                        console.error(err);\n                        return of(false);\n                    })\n                ))),\n            map(array =>\n                new LoadMenuSuccess({menu: array[0]})\n            ),\n            catchError((err, caught) => {\n                console.error(err);\n                this.store.dispatch(new LoadMenuFailure(err));\n                return caught;\n            })\n        );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MenuState.html":{"url":"interfaces/MenuState.html","title":"interface - MenuState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MenuState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/menu.state.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        loading\n                                \n                                \n                                        menu\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                    \n                                \n                                \n                                    \n                                        loading:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        menu\n                                    \n                                \n                                \n                                    \n                                        menu:     ThirdMenu[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ThirdMenu[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {ThirdMenu} from \"@ofModel/thirds.model\";\n\nexport interface MenuState{\n    menu: ThirdMenu[],\n    loading: boolean,\n    error:string\n}\n\nexport const menuInitialState: MenuState = {\n    menu:[],\n    loading: false,\n    error:null\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavbarComponent.html":{"url":"components/NavbarComponent.html","title":"component - NavbarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NavbarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/navbar/navbar.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-navbar\n            \n\n\n\n\n            \n                templateUrl\n                ./navbar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _thirdMenus\n                            \n                            \n                                currentPath\n                            \n                            \n                                expandedMenu\n                            \n                            \n                                navbarCollapsed\n                            \n                            \n                                navigationRoutes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logOut\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                toggleMenu\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    thirdMenus\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/navbar/navbar.component.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logOut\n                            \n                            \n                        \n                    \n                \n                \n                    \nlogOut()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:50\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:36\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleMenu\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleMenu(index: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:58\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        index\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _thirdMenus\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expandedMenu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            navbarCollapsed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            navigationRoutes\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : navigationRoutes\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:28\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        thirdMenus\n                    \n                \n\n                \n                    \n                        getthirdMenus()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/navbar/navbar.component.ts:54\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\nimport {navigationRoutes} from '../../app-routing.module';\nimport {Store} from '@ngrx/store';\nimport {TryToLogOut} from '@ofActions/authentication.actions';\nimport {AppState} from '@ofStore/index';\nimport {selectCurrentUrl} from '@ofSelectors/router.selectors';\nimport {LoadMenu} from \"@ofActions/menu.actions\";\nimport {selectMenuStateMenu} from \"@ofSelectors/menu.selectors\";\nimport {Observable} from \"rxjs\";\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\nimport {tap} from \"rxjs/operators\";\nimport * as _ from 'lodash';\n\n@Component({\n  selector: 'of-navbar',\n  templateUrl: './navbar.component.html',\n})\nexport class NavbarComponent implements OnInit {\n\n    navbarCollapsed = true;\n    navigationRoutes = navigationRoutes;\n    currentPath: any;\n    private _thirdMenus: Observable;\n    expandedMenu:boolean[]=[];\n\n    constructor(private store: Store) {\n    }\n\n    ngOnInit() {\n        this.store.select(selectCurrentUrl).subscribe(url=>{\n            if(url)\n                this.currentPath = url.split('/')[1];\n        });\n        this._thirdMenus=this.store.select(selectMenuStateMenu)\n            .pipe(tap(menus=>{\n                this.expandedMenu=new Array(menus.length);\n                _.fill(this.expandedMenu,false);\n            }));\n        this.store.dispatch(new LoadMenu());\n    }\n\n\n    logOut(){\n        this.store.dispatch(new TryToLogOut());\n    }\n\n    get thirdMenus(){\n        return this._thirdMenus;\n    }\n\n    toggleMenu(index:number){\n        this.expandedMenu[index]=!this.expandedMenu[index];\n        if(this.expandedMenu[index])\n            setTimeout(()=>this.expandedMenu[index]=false,5000);\n    }\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  \n    \n      \n    \n  \n  \n    \n  \n  \n    \n      \n        {{'menu.'+link.path}}\n      \n      1\">\n        1\"\n           translate\n        >{{tMenu.id}}.{{tMenu.version}}.{{tMenu.label}}\n        {{tMenu.entries[0].label}}\n        1\"\n             [ngbCollapse]=\"!expandedMenu[index]\">\n          {{tMenu.id}}.{{tMenu.version}}.{{entry.label}}\n        \n      \n      \n        \n          menu.logout\n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                              {{\\'menu.\\'+link.path}}            1\">        1\"           translate        >{{tMenu.id}}.{{tMenu.version}}.{{tMenu.label}}        {{tMenu.entries[0].label}}        1\"             [ngbCollapse]=\"!expandedMenu[index]\">          {{tMenu.id}}.{{tMenu.version}}.{{entry.label}}                                      menu.logout                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavbarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NoSelectionComponent.html":{"url":"components/NoSelectionComponent.html","title":"component - NoSelectionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NoSelectionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/components/no-selection/no-selection.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-no-selection\n            \n\n\n\n\n            \n                templateUrl\n                ./no-selection.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/components/no-selection/no-selection.component.ts:14\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/no-selection/no-selection.component.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'of-no-selection',\n  templateUrl: './no-selection.component.html',\n})\nexport class NoSelectionComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  no-selection works!\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  no-selection works!'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NoSelectionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParameterListItem.html":{"url":"classes/ParameterListItem.html","title":"class - ParameterListItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParameterListItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/card.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(label: I18n, value: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/card.model.ts:101\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Severity} from \"@ofModel/light-card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map} from \"@ofModel/map\";\n\nexport class Card {\n\n    constructor(\n        readonly uid: string,\n        readonly id: string,\n        readonly publisher: string,\n        readonly publisherVersion: string,\n        readonly publishDate: number,\n        readonly startDate: number,\n        readonly endDate: number,\n        readonly severity: Severity,\n        readonly mainRecipient: string,\n        readonly processId?: string,\n        readonly lttd?: number,\n        readonly title?: I18n,\n        readonly summary?: I18n,\n        readonly  data?: any,\n        readonly  details?: CardDetail[],\n        readonly  actions?: Map\n    ) {\n    }\n}\n\nexport enum TitlePosition {\n    UP, DOWN, NONE\n\n}\n\nexport class CardDetail {\n    constructor(\n        readonly titlePosition: TitlePosition,\n        readonly title: I18n,\n        readonly titleStyle: string,\n        readonly templateName: string,\n        readonly styles: string[]) {\n    }\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PayloadForSuccessfulAuthentication.html":{"url":"classes/PayloadForSuccessfulAuthentication.html","title":"class - PayloadForSuccessfulAuthentication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PayloadForSuccessfulAuthentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clientId\n                            \n                            \n                                    Public\n                                expirationDate\n                            \n                            \n                                    Public\n                                identifier\n                            \n                            \n                                    Public\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(identifier: string, clientId: Guid, token: string, expirationDate: Date)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/authentication.actions.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        identifier\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clientId\n                                                  \n                                                        \n                                                                    Guid\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        token\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        expirationDate\n                                                  \n                                                        \n                                                                    Date\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            clientId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Guid\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            expirationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            identifier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\n\nexport enum AuthenticationActionTypes {\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n/**\n * First action dispatch by the application.\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    constructor(public payload: PayloadForSuccessfulAuthentication) {\n    }\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    constructor(public payload: { denialReason: string }) {\n    }\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n     AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RejectLogIn.html":{"url":"classes/RejectLogIn.html","title":"class - RejectLogIn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RejectLogIn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used to notify the store that the authentication is not possible.\nEmmited by {AuthenticationEffect} in the following {Observable} @members:\n\nTryToLogin;\nCheckAuthentication\nand in the handleRejectedLogin @method called by the ChecAuthentication {Observable}\n\nUsed in the {function} reducer of the {authentication.reducer.ts} file to create a new state\nwithout any authentication information and containing a message about login rejection\nby filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/authentication.actions.ts:93\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:95\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.RejectLogIn\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:93\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\n\nexport enum AuthenticationActionTypes {\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n/**\n * First action dispatch by the application.\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    constructor(public payload: PayloadForSuccessfulAuthentication) {\n    }\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    constructor(public payload: { denialReason: string }) {\n    }\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n     AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RouterStateUrl.html":{"url":"classes/RouterStateUrl.html","title":"class - RouterStateUrl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RouterStateUrl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/router.state.ts\n        \n\n            \n                Description\n            \n            \n                The RouterStateSerializer takes the current RouterStateSnapshot\nand returns any pertinent information needed. The snapshot contains\nall information about the state of the router at the given point in time.\nThe entire snapshot is complex and not always needed. In this case, you only\nneed the URL and query parameters from the snapshot in the store. Other items could be\nreturned such as route parameters and static route data.\nsource: https://github.com/briebug/ngrx-complex-forms\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string, params: Params, queryParams: Params)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/states/router.state.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                    Params\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryParams\n                                                  \n                                                        \n                                                                    Params\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {RouterStateSerializer} from \"@ngrx/router-store\";\nimport {ActivatedRouteSnapshot, Params, RouterStateSnapshot} from \"@angular/router\";\n\nexport const initialState = {\n    state: {\n        url: window.location.pathname,\n        params: {},\n        queryParams: {}\n    },\n    navigationId: 0\n}\n\n/**\n * The RouterStateSerializer takes the current RouterStateSnapshot\n * and returns any pertinent information needed. The snapshot contains\n * all information about the state of the router at the given point in time.\n * The entire snapshot is complex and not always needed. In this case, you only\n * need the URL and query parameters from the snapshot in the store. Other items could be\n * returned such as route parameters and static route data.\n *\n * source: https://github.com/briebug/ngrx-complex-forms\n *\n */\n\nexport class RouterStateUrl {\n    /* istanbul ignore next */\n    constructor(\n        readonly url: string,\n        readonly params: Params,\n        readonly queryParams: Params) {\n    }\n}\n\nexport class CustomRouterStateSerializer\n    implements RouterStateSerializer {\n    serialize(routerState: RouterStateSnapshot): RouterStateUrl {\n        const {url} = routerState;\n        const params = this.extractParams(routerState.root);\n        const queryParams = routerState.root.queryParams;\n        return new RouterStateUrl(url, params, queryParams);\n    }\n\n    private extractParams(state: ActivatedRouteSnapshot): Params {\n        let params: Params = {...state.params};\n        for (let child of state.children) {\n            params = {...params, ...this.extractParams(child)}\n        }\n        return params;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectLightCard.html":{"url":"classes/SelectLightCard.html","title":"class - SelectLightCard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectLightCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.SelectLightCard\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:50\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    // | LoadLightCard\n    // | LoadLightCardSuccess\n    // | LoadLightCardFailure\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ServicesModule.html":{"url":"modules/ServicesModule.html","title":"module - ServicesModule","body":"\n                   \n\n\n\n\n    Modules\n    ServicesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ServicesModule\n\n\n\ncluster_ServicesModule_providers\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\n\n\nServicesModule\n\nServicesModule\n\nServicesModule -->\n\nAuthenticationService->ServicesModule\n\n\n\n\n\nCardService\n\nCardService\n\nServicesModule -->\n\nCardService->ServicesModule\n\n\n\n\n\nConfigService\n\nConfigService\n\nServicesModule -->\n\nConfigService->ServicesModule\n\n\n\n\n\nFilterService\n\nFilterService\n\nServicesModule -->\n\nFilterService->ServicesModule\n\n\n\n\n\nThirdsService\n\nThirdsService\n\nServicesModule -->\n\nThirdsService->ServicesModule\n\n\n\n\n\nTimeService\n\nTimeService\n\nServicesModule -->\n\nTimeService->ServicesModule\n\n\n\n\n\nTokenInjector\n\nTokenInjector\n\nServicesModule -->\n\nTokenInjector->ServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/services/services.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            CardService\n                        \n                        \n                            ConfigService\n                        \n                        \n                            FilterService\n                        \n                        \n                            ThirdsService\n                        \n                        \n                            TimeService\n                        \n                        \n                            TokenInjector\n                        \n                    \n                \n            \n        \n\n        \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            forRoot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        forRoot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/services.module.ts:42\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     ModuleWithProviders\n\n                            \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {ModuleWithProviders, NgModule, Optional, SkipSelf} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HTTP_INTERCEPTORS} from '@angular/common/http';\nimport {AuthenticationService} from './authentication.service';\nimport {TokenInjector} from './interceptors.service';\n// import {AuthenticationGuard} from './guard.service';\nimport {CardService} from './card.service';\nimport {GuidService} from \"@ofServices/guid.service\";\nimport {TimeService} from \"@ofServices/time.service\";\nimport {ThirdsService} from \"@ofServices/thirds.service\";\nimport {FilterService} from \"@ofServices/filter.service\";\nimport {ConfigService} from \"@ofServices/config.service\";\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    providers: [\n        ConfigService,\n        CardService,\n        AuthenticationService,\n        TimeService,\n        ThirdsService,\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: TokenInjector,\n            multi: true\n        },\n        GuidService,\n        FilterService\n\n    ]\n})\nexport class ServicesModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ServicesModule\n        };\n    }\n\n    constructor(\n        @Optional()\n        @SkipSelf()\n            parentModule: ServicesModule\n    ) {\n        if (parentModule) {\n            throw new Error(\n                'ServicesModule is already loaded. Import it in the AppModule only'\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StateModule.html":{"url":"modules/StateModule.html","title":"module - StateModule","body":"\n                   \n\n\n\n\n    Modules\n    StateModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StateModule\n\n\n\ncluster_StateModule_imports\n\n\n\n\n!environment\n\n!environment\n\n\n\nStateModule\n\nStateModule\n\nStateModule -->\n\n!environment->StateModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/store/state.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            !environment\n                        \n                    \n                \n            \n        \n\n        \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            forRoot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        forRoot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/store/state.module.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     ModuleWithProviders\n\n                            \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport {appEffects, appReducer, storeConfig} from './index';\nimport {environment} from '@env/environment';\nimport {StoreDevtoolsModule} from '@ngrx/store-devtools';\nimport {NavigationActionTiming, RouterStateSerializer, StoreRouterConnectingModule} from '@ngrx/router-store';\nimport {CustomRouterStateSerializer} from '@ofStore/states/router.state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StoreModule.forRoot(appReducer, storeConfig),\n    StoreRouterConnectingModule.forRoot({\n        navigationActionTiming: NavigationActionTiming.PostActivation,\n        serializer: CustomRouterStateSerializer\n    }),\n    EffectsModule.forRoot(appEffects),\n    !environment.production ? StoreDevtoolsModule.instrument() : [],\n  ],\n  declarations: [],\n    providers:[{provide:'configRetryDelay',useValue:5000}]\n})\nexport class StateModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: StateModule\n      ,\n      providers: [\n        /**\n         * The `RouterStateSnapshot` provided by the `Router` is a large complex structure.\n         * A custom RouterStateSerializer is used to parse the `RouterStateSnapshot` provided\n         * by `@ngrx/router-store` to include only the desired pieces of the snapshot.\n         */\n        {provide: RouterStateSerializer, useClass: CustomRouterStateSerializer}\n      ]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Third.html":{"url":"classes/Third.html","title":"class - Third","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Third\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/thirds.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, version: string, i18nLabelKey: string, templates?: string[], csses?: string[], locales?: string[], menuEntries?: ThirdMenuEntry[])\n                    \n                \n                        \n                            \n                                Defined in src/app/model/thirds.model.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        version\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18nLabelKey\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templates\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        csses\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        locales\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        menuEntries\n                                                  \n                                                        \n                                                                    ThirdMenuEntry[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Third{\n    constructor(\n        readonly name:string,\n        readonly version:string,\n        readonly i18nLabelKey: string,\n        readonly templates?:string[],\n        readonly csses?:string[],\n        readonly locales?:string[],\n        readonly menuEntries?:ThirdMenuEntry[]\n    ){}\n}\n\nexport class ThirdMenuEntry{\n    constructor(\n        readonly id:string,\n        readonly label: string,\n        readonly url: string\n    ){}\n}\n\nexport class ThirdMenu{\n    constructor(\n        readonly id: string,\n        readonly version: string,\n        readonly label: string,\n        readonly entries: ThirdMenuEntry[]){}\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThirdMenu.html":{"url":"classes/ThirdMenu.html","title":"class - ThirdMenu","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThirdMenu\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/thirds.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, version: string, label: string, entries: ThirdMenuEntry[])\n                    \n                \n                        \n                            \n                                Defined in src/app/model/thirds.model.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        version\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    ThirdMenuEntry[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Third{\n    constructor(\n        readonly name:string,\n        readonly version:string,\n        readonly i18nLabelKey: string,\n        readonly templates?:string[],\n        readonly csses?:string[],\n        readonly locales?:string[],\n        readonly menuEntries?:ThirdMenuEntry[]\n    ){}\n}\n\nexport class ThirdMenuEntry{\n    constructor(\n        readonly id:string,\n        readonly label: string,\n        readonly url: string\n    ){}\n}\n\nexport class ThirdMenu{\n    constructor(\n        readonly id: string,\n        readonly version: string,\n        readonly label: string,\n        readonly entries: ThirdMenuEntry[]){}\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThirdMenuEntry.html":{"url":"classes/ThirdMenuEntry.html","title":"class - ThirdMenuEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThirdMenuEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/thirds.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, label: string, url: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/thirds.model.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Third{\n    constructor(\n        readonly name:string,\n        readonly version:string,\n        readonly i18nLabelKey: string,\n        readonly templates?:string[],\n        readonly csses?:string[],\n        readonly locales?:string[],\n        readonly menuEntries?:ThirdMenuEntry[]\n    ){}\n}\n\nexport class ThirdMenuEntry{\n    constructor(\n        readonly id:string,\n        readonly label: string,\n        readonly url: string\n    ){}\n}\n\nexport class ThirdMenu{\n    constructor(\n        readonly id: string,\n        readonly version: string,\n        readonly label: string,\n        readonly entries: ThirdMenuEntry[]){}\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThirdsI18nLoader.html":{"url":"classes/ThirdsI18nLoader.html","title":"class - ThirdsI18nLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThirdsI18nLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/thirds.service.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        TranslateLoader\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTranslation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(thirdsService: ThirdsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/thirds.service.ts:176\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        thirdsService\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTranslation\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTranslation(lang: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:180\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lang\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable, Injector} from '@angular/core';\nimport {HttpClient, HttpParams, HttpUrlEncodingCodec} from \"@angular/common/http\";\nimport {environment} from \"../../environments/environment\";\nimport {AuthenticationService} from \"@ofServices/authentication.service\";\nimport {empty, from, merge, Observable, of, throwError} from \"rxjs\";\nimport {TranslateLoader, TranslateService} from \"@ngx-translate/core\";\nimport {Map} from \"../model/map\";\nimport {catchError, concatMap, filter, map, reduce, switchMap} from \"rxjs/operators\";\nimport * as _ from 'lodash';\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"../store/index\";\nimport {LightCard} from \"../model/light-card.model\";\nimport {Third, ThirdMenu} from \"@ofModel/thirds.model\";\n\n@Injectable()\nexport class ThirdsService {\n    readonly thirdsUrl: string;\n    private loaded: string[] = [];\n    private loading: string[] = [];\n    private urlCleaner: HttpUrlEncodingCodec;\n\n    constructor(private httpClient: HttpClient,\n                private authenticationService: AuthenticationService,\n                private store: Store,\n                private $injector: Injector,\n    ) {\n        this.urlCleaner = new HttpUrlEncodingCodec();\n        this.thirdsUrl = `${environment.urls.thirds}`;\n    }\n\n    fetchHbsTemplate(publisher: string, version: string, name: string, locale: string): Observable {\n        const params = new HttpParams()\n                .set(\"locale\", locale)\n                .set(\"version\", version);\n        return this.httpClient.get(`${this.thirdsUrl}/${publisher}/templates/${name}`,{\n            params,\n            headers: this.authenticationService.getSecurityHeader(),\n            responseType: 'text'\n        })\n    }\n\n    computeThirdCssUrl(publisher: string, styleName: string, version: string){\n        //manage url character encoding\n        const resourceUrl = this.urlCleaner.encodeValue(`${this.thirdsUrl}/${publisher}/css/${styleName}`);\n        const versionParam = new HttpParams().set('version',version);\n        return `${resourceUrl}?${versionParam.toString()}`;\n    }\n\n    fetchI18nJson(publisher: string, version: string, locales: string[]): Observable> {\n        let previous: Observable;\n        for (let locale of locales) {\n            const params = new HttpParams()\n                .set(\"locale\", locale)\n                .set(\"version\", version);\n            const httpCall = this.httpClient.get(`${this.thirdsUrl}/${publisher}/i18n`, {\n                params,\n                headers: this.authenticationService.getSecurityHeader()\n            }).pipe(\n                map(r => {\n                        const object = {};\n                        object[locale] = {};\n                        object[locale][publisher] = {};\n                        object[locale][publisher][version] = r;\n                        return object;\n                    }\n                ));\n            if (previous) {\n                previous = merge(previous, httpCall);\n            } else {\n                previous = httpCall;\n            }\n        }\n        if (previous == null) {\n            return empty();\n        }\n        const result = previous.pipe(\n            reduce((acc, val) => _.merge(acc,val))\n        );\n\n        return result;\n    }\n\n    computeThirdsMenu(): Observable{\n        return this.httpClient.get(`${this.thirdsUrl}/`, {\n            headers: this.authenticationService.getSecurityHeader()\n        }).pipe(\n            switchMap(ts=>from(ts)),\n            filter((t:Third)=>!(!t.menuEntries)),\n            map(t=>\n                new ThirdMenu(t.name, t.version, t.i18nLabelKey, t.menuEntries)\n            ),\n            reduce((menus:ThirdMenu[],menu:ThirdMenu)=>{\n                menus.push(menu);\n                return menus;\n            },[])\n        );\n    }\n\n    loadI18nForLightCards(cards:LightCard[]){\n        let observable = from(cards).pipe(\n            map(card=> card.publisher + '###' + card.publisherVersion));\n        return this.subscribeToLoadI18n(observable);\n    }\n\n    loadI18nForMenuEntries(menus:ThirdMenu[]){\n        const observable = from(menus).pipe(\n            map(menu=> menu.id + '###' + menu.version)\n        );\n        return this.subscribeToLoadI18n(observable);\n    }\n\n    private subscribeToLoadI18n(observable) {\n        return observable\n            .pipe(\n                reduce((ids: string[], id: string) => {\n                    ids.push(id);\n                    return ids;\n                }, []),\n                switchMap((ids:string[]) => {\n                    let work = _.uniq(ids);\n                    work = _.difference(work, this.loading)\n                    return from(_.difference(work, this.loaded))\n                }),\n                concatMap((id: string) => {\n                    this.loading.push(id);\n                    const input = id.split('###');\n\n                    let publisher = input[0];\n                    let version = input[1];\n                    return this.fetchI18nJson(publisher, version, this.translate().getLangs())\n                        .pipe(map(trans => {\n                                return {id: id, translation: trans};\n                            }),\n                            catchError(err => {\n                                _.remove(this.loading, id);\n                                return throwError(err);\n                            })\n                        );\n                }),\n                reduce((acc, val) => _.merge(acc,val)),\n                map(\n                    (result:any) => {\n                        let langs = this.translate().getLangs();\n                        for (let lang of langs) {\n                            let translationElement = result.translation[lang];\n                            if (translationElement) {\n                                this.translate().setTranslation(lang, translationElement, true);\n                                // needed otherwise only one translation apply\n                                this.translate().use(lang);\n                            }\n                        }\n                        _.remove(this.loading, result.id);\n                        this.loaded.push(result.id);\n                        return true;\n                    }\n                ),\n                catchError((error,caught )=>{\n                    console.error('something went wrong during translation',error);\n                    return caught;\n                })\n            )\n    }\n\n    private translate(): TranslateService {\n        return this.$injector.get(TranslateService);\n    }\n}\n\nexport class ThirdsI18nLoader implements TranslateLoader {\n\n    constructor(thirdsService: ThirdsService) {}\n\n    getTranslation(lang: string): Observable {\n        return of({});\n    }\n\n}\n\nexport function ThirdsI18nLoaderFactory(thirdsService: ThirdsService): TranslateLoader {\n    return new ThirdsI18nLoader(thirdsService);\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThirdsService.html":{"url":"injectables/ThirdsService.html","title":"injectable - ThirdsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ThirdsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/thirds.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                loaded\n                            \n                            \n                                    Private\n                                loading\n                            \n                            \n                                    Readonly\n                                thirdsUrl\n                            \n                            \n                                    Private\n                                urlCleaner\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                computeThirdCssUrl\n                            \n                            \n                                computeThirdsMenu\n                            \n                            \n                                fetchHbsTemplate\n                            \n                            \n                                fetchI18nJson\n                            \n                            \n                                loadI18nForLightCards\n                            \n                            \n                                loadI18nForMenuEntries\n                            \n                            \n                                    Private\n                                subscribeToLoadI18n\n                            \n                            \n                                    Private\n                                translate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient, authenticationService: AuthenticationService, store: Store, $injector: Injector)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/thirds.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                    AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        $injector\n                                                  \n                                                        \n                                                                    Injector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            computeThirdCssUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomputeThirdCssUrl(publisher: string, styleName: string, version: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:49\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publisher\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        styleName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        version\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            computeThirdsMenu\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomputeThirdsMenu()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:90\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchHbsTemplate\n                            \n                            \n                        \n                    \n                \n                \n                    \nfetchHbsTemplate(publisher: string, version: string, name: string, locale: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:38\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publisher\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        version\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        locale\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchI18nJson\n                            \n                            \n                        \n                    \n                \n                \n                    \nfetchI18nJson(publisher: string, version: string, locales: string[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:56\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publisher\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        version\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        locales\n                                                        \n                                                                    string[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadI18nForLightCards\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadI18nForLightCards(cards: LightCard[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:106\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cards\n                                                        \n                                                                    LightCard[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadI18nForMenuEntries\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadI18nForMenuEntries(menus: ThirdMenu[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:112\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        menus\n                                                        \n                                                                    ThirdMenu[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscribeToLoadI18n\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        subscribeToLoadI18n(observable)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:119\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        observable\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            translate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        translate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:171\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     TranslateService\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loaded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loading\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            thirdsUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            urlCleaner\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HttpUrlEncodingCodec\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:27\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable, Injector} from '@angular/core';\nimport {HttpClient, HttpParams, HttpUrlEncodingCodec} from \"@angular/common/http\";\nimport {environment} from \"../../environments/environment\";\nimport {AuthenticationService} from \"@ofServices/authentication.service\";\nimport {empty, from, merge, Observable, of, throwError} from \"rxjs\";\nimport {TranslateLoader, TranslateService} from \"@ngx-translate/core\";\nimport {Map} from \"../model/map\";\nimport {catchError, concatMap, filter, map, reduce, switchMap} from \"rxjs/operators\";\nimport * as _ from 'lodash';\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"../store/index\";\nimport {LightCard} from \"../model/light-card.model\";\nimport {Third, ThirdMenu} from \"@ofModel/thirds.model\";\n\n@Injectable()\nexport class ThirdsService {\n    readonly thirdsUrl: string;\n    private loaded: string[] = [];\n    private loading: string[] = [];\n    private urlCleaner: HttpUrlEncodingCodec;\n\n    constructor(private httpClient: HttpClient,\n                private authenticationService: AuthenticationService,\n                private store: Store,\n                private $injector: Injector,\n    ) {\n        this.urlCleaner = new HttpUrlEncodingCodec();\n        this.thirdsUrl = `${environment.urls.thirds}`;\n    }\n\n    fetchHbsTemplate(publisher: string, version: string, name: string, locale: string): Observable {\n        const params = new HttpParams()\n                .set(\"locale\", locale)\n                .set(\"version\", version);\n        return this.httpClient.get(`${this.thirdsUrl}/${publisher}/templates/${name}`,{\n            params,\n            headers: this.authenticationService.getSecurityHeader(),\n            responseType: 'text'\n        })\n    }\n\n    computeThirdCssUrl(publisher: string, styleName: string, version: string){\n        //manage url character encoding\n        const resourceUrl = this.urlCleaner.encodeValue(`${this.thirdsUrl}/${publisher}/css/${styleName}`);\n        const versionParam = new HttpParams().set('version',version);\n        return `${resourceUrl}?${versionParam.toString()}`;\n    }\n\n    fetchI18nJson(publisher: string, version: string, locales: string[]): Observable> {\n        let previous: Observable;\n        for (let locale of locales) {\n            const params = new HttpParams()\n                .set(\"locale\", locale)\n                .set(\"version\", version);\n            const httpCall = this.httpClient.get(`${this.thirdsUrl}/${publisher}/i18n`, {\n                params,\n                headers: this.authenticationService.getSecurityHeader()\n            }).pipe(\n                map(r => {\n                        const object = {};\n                        object[locale] = {};\n                        object[locale][publisher] = {};\n                        object[locale][publisher][version] = r;\n                        return object;\n                    }\n                ));\n            if (previous) {\n                previous = merge(previous, httpCall);\n            } else {\n                previous = httpCall;\n            }\n        }\n        if (previous == null) {\n            return empty();\n        }\n        const result = previous.pipe(\n            reduce((acc, val) => _.merge(acc,val))\n        );\n\n        return result;\n    }\n\n    computeThirdsMenu(): Observable{\n        return this.httpClient.get(`${this.thirdsUrl}/`, {\n            headers: this.authenticationService.getSecurityHeader()\n        }).pipe(\n            switchMap(ts=>from(ts)),\n            filter((t:Third)=>!(!t.menuEntries)),\n            map(t=>\n                new ThirdMenu(t.name, t.version, t.i18nLabelKey, t.menuEntries)\n            ),\n            reduce((menus:ThirdMenu[],menu:ThirdMenu)=>{\n                menus.push(menu);\n                return menus;\n            },[])\n        );\n    }\n\n    loadI18nForLightCards(cards:LightCard[]){\n        let observable = from(cards).pipe(\n            map(card=> card.publisher + '###' + card.publisherVersion));\n        return this.subscribeToLoadI18n(observable);\n    }\n\n    loadI18nForMenuEntries(menus:ThirdMenu[]){\n        const observable = from(menus).pipe(\n            map(menu=> menu.id + '###' + menu.version)\n        );\n        return this.subscribeToLoadI18n(observable);\n    }\n\n    private subscribeToLoadI18n(observable) {\n        return observable\n            .pipe(\n                reduce((ids: string[], id: string) => {\n                    ids.push(id);\n                    return ids;\n                }, []),\n                switchMap((ids:string[]) => {\n                    let work = _.uniq(ids);\n                    work = _.difference(work, this.loading)\n                    return from(_.difference(work, this.loaded))\n                }),\n                concatMap((id: string) => {\n                    this.loading.push(id);\n                    const input = id.split('###');\n\n                    let publisher = input[0];\n                    let version = input[1];\n                    return this.fetchI18nJson(publisher, version, this.translate().getLangs())\n                        .pipe(map(trans => {\n                                return {id: id, translation: trans};\n                            }),\n                            catchError(err => {\n                                _.remove(this.loading, id);\n                                return throwError(err);\n                            })\n                        );\n                }),\n                reduce((acc, val) => _.merge(acc,val)),\n                map(\n                    (result:any) => {\n                        let langs = this.translate().getLangs();\n                        for (let lang of langs) {\n                            let translationElement = result.translation[lang];\n                            if (translationElement) {\n                                this.translate().setTranslation(lang, translationElement, true);\n                                // needed otherwise only one translation apply\n                                this.translate().use(lang);\n                            }\n                        }\n                        _.remove(this.loading, result.id);\n                        this.loaded.push(result.id);\n                        return true;\n                    }\n                ),\n                catchError((error,caught )=>{\n                    console.error('something went wrong during translation',error);\n                    return caught;\n                })\n            )\n    }\n\n    private translate(): TranslateService {\n        return this.$injector.get(TranslateService);\n    }\n}\n\nexport class ThirdsI18nLoader implements TranslateLoader {\n\n    constructor(thirdsService: ThirdsService) {}\n\n    getTranslation(lang: string): Observable {\n        return of({});\n    }\n\n}\n\nexport function ThirdsI18nLoaderFactory(thirdsService: ThirdsService): TranslateLoader {\n    return new ThirdsI18nLoader(thirdsService);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThirdsServiceMock.html":{"url":"classes/ThirdsServiceMock.html","title":"class - ThirdsServiceMock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThirdsServiceMock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tests/mocks/thirds.service.mock.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                computeThirdsMenu\n                            \n                            \n                                loadI18nForMenuEntries\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            computeThirdsMenu\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomputeThirdsMenu()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/tests/mocks/thirds.service.mock.ts:5\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadI18nForMenuEntries\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadI18nForMenuEntries()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/tests/mocks/thirds.service.mock.ts:14\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Observable, of} from \"rxjs\";\nimport {ThirdMenu, ThirdMenuEntry} from \"@ofModel/thirds.model\";\n\nexport class ThirdsServiceMock {\n    computeThirdsMenu(): Observable{\n        return of([new ThirdMenu('t1', '1', 'tLabel1', [\n            new ThirdMenuEntry('id1', 'label1', 'link1'),\n            new ThirdMenuEntry('id2', 'label2', 'link2'),\n        ]),\n            new ThirdMenu('t2', '1', 'tLabel2', [\n                new ThirdMenuEntry('id3', 'label3', 'link3'),\n            ])])\n    }\n    loadI18nForMenuEntries(){return of(true)}\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimeFilterComponent.html":{"url":"components/TimeFilterComponent.html","title":"component - TimeFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TimeFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-time-filter\n            \n\n\n\n\n            \n                templateUrl\n                ./time-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _filter$\n                            \n                            \n                                    Private\n                                ngUnsubscribe$\n                            \n                            \n                                timeFilterForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createFormGroup\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    filter$\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, timeService: TimeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timeService\n                                                  \n                                                        \n                                                                    TimeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            createFormGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        createFormGroup()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts:90\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts:40\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts:45\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _filter$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ngUnsubscribe$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timeFilterForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts:33\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        filter$\n                    \n                \n\n                \n                    \n                        getfilter$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts:29\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport {buildFilterSelector} from \"@ofSelectors/feed.selectors\";\nimport {FilterType} from \"@ofServices/filter.service\";\nimport {Filter} from \"@ofModel/feed-filter.model\";\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"@ofStore/index\";\nimport {Observable, Subject, timer} from \"rxjs\";\nimport {debounce, distinctUntilChanged, first, takeUntil} from \"rxjs/operators\";\nimport * as _ from \"lodash\";\nimport {ApplyFilter} from \"@ofActions/feed.actions\";\nimport {TimeService} from \"@ofServices/time.service\";\n\n@Component({\n    selector: 'of-time-filter',\n    templateUrl: './time-filter.component.html'\n})\nexport class TimeFilterComponent implements OnInit, OnDestroy {\n    private ngUnsubscribe$ = new Subject();\n    private _filter$: Observable;\n\n    get filter$(): Observable {\n        return this._filter$;\n    }\n\n    timeFilterForm: FormGroup;\n\n    constructor(private store: Store,\n                private timeService: TimeService) {\n        this.timeFilterForm = this.createFormGroup();\n    }\n\n    ngOnDestroy() {\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n    }\n\n    ngOnInit() {\n        this._filter$ = this.store.select(buildFilterSelector(FilterType.TIME_FILTER));\n        this._filter$.pipe(takeUntil(this.ngUnsubscribe$)).subscribe((next: Filter) => {\n            if (next) {\n                if (this.timeService.parseString(this.timeFilterForm.get('start').value) != next.status.start) {\n                    if(!!next.status.start)\n                        this.timeFilterForm.get('start').setValue(this.timeService.asLocalString(next.status.start));\n                    else\n                        this.timeFilterForm.get('start').setValue(null);\n                }\n                if (this.timeService.parseString(this.timeFilterForm.get('end').value) != next.status.end) {\n                    if(!!next.status.end)\n                        this.timeFilterForm.get('end').setValue(this.timeService.asLocalString(next.status.end));\n                    else\n                        this.timeFilterForm.get('end').setValue(null);\n                }\n            } else {\n                if (!!this.timeFilterForm.get('start').value)\n                    this.timeFilterForm.get('start').setValue(null);\n                if (!!this.timeFilterForm.get('end').value)\n                    this.timeFilterForm.get('end').setValue(null);\n            }\n        });\n        this._filter$.pipe(first(), takeUntil(this.ngUnsubscribe$)).subscribe(() => {\n            this.timeFilterForm\n                .valueChanges\n                .pipe(\n                    takeUntil(this.ngUnsubscribe$),\n                    distinctUntilChanged((formA, formB) => {\n                        return _.isEqual(formA, formB);\n                    }),\n                    debounce(() => timer(500)))\n                .subscribe(form => this.store.dispatch(\n                    new ApplyFilter({\n                        name: FilterType.TIME_FILTER,\n                        active: !!form.start || !!form.end,\n                        status: {\n                            start: form.start ? this.timeService.parseString(form.start) : null,\n                            end: form.end ? this.timeService.parseString(form.end) : null\n                        }\n                    }))\n                );\n        });\n    }\n\n    private createFormGroup() {\n        return new FormGroup({\n            start: new FormControl(),\n            end: new FormControl()\n        }, {updateOn: 'change'});\n    }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n  \n    \n      \n        feed.filters.time.start.label\n        \n      \n      \n        feed.filters.time.end.label\n        \n      \n    \n  \n  feed.filters.time.title\n  \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    feed.filters.time.start.label                            feed.filters.time.end.label                      feed.filters.time.title        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimeFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimeLineComponent.html":{"url":"components/TimeLineComponent.html","title":"component - TimeLineComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TimeLineComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/components/time-line/time-line.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-time-line\n            \n\n\n\n\n            \n                templateUrl\n                ./time-line.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/components/time-line/time-line.component.ts:14\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/time-line/time-line.component.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'of-time-line',\n  templateUrl: './time-line.component.html',\n})\nexport class TimeLineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  Time Line goes here\n  \n  \n  \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Time Line goes here        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimeLineComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeService.html":{"url":"injectables/TimeService.html","title":"injectable - TimeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/time.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                asLocalString\n                            \n                            \n                                    Public\n                                asString\n                            \n                            \n                                    Public\n                                currentTime\n                            \n                            \n                                    Public\n                                parseString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/time.service.ts:11\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            asLocalString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        asLocalString(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/time.service.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            asString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        asString(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/time.service.ts:24\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            currentTime\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        currentTime()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/time.service.ts:16\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            parseString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        parseString(value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/time.service.ts:20\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\n\n@Injectable()\nexport class TimeService {\n\n    constructor() {\n    }\n\n    public currentTime(): number {\n        return Date.now();\n    }\n\n    public parseString(value: string): number {\n        return Date.parse(value);\n    }\n\n    public asString(value: number): string {\n        return new Date(value).toISOString();\n    }\n\n    public asLocalString(value: number): string {\n        return new Date(value).toISOString().slice(0, -8);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/TokenInjector.html":{"url":"interceptors/TokenInjector.html","title":"interceptor - TokenInjector","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  TokenInjector\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/interceptors.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addAuthHeadersIfNecessary\n                            \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/interceptors.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                    AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            addAuthHeadersIfNecessary\n                            \n                            \n                        \n                    \n                \n                \n                    \naddAuthHeadersIfNecessary(request: HttpRequest)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/interceptors.service.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                        \n                                                                    HttpRequest\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     HttpRequest\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intercept\n                            \n                            \n                        \n                    \n                \n                \n                    \nintercept(request: HttpRequest, next: HttpHandler)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/interceptors.service.ts:20\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                        \n                                                                    HttpRequest\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        next\n                                                        \n                                                                    HttpHandler\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {AuthenticationService} from './authentication.service';\n\n@Injectable()\nexport class TokenInjector implements HttpInterceptor {\n    /* istanbul ignore next */\n    constructor(private authenticationService: AuthenticationService) {\n    }\n\n    /* istanbul ignore next */\n    intercept(request: HttpRequest, next: HttpHandler): Observable> {\n        return next.handle(this.addAuthHeadersIfNecessary(request));\n    }\n\n\n    addAuthHeadersIfNecessary(request: HttpRequest): HttpRequest {\n        const url = request.url;\n\n        const notCheckTokenRequest = !(url.endsWith('/auth/check_token') || url.endsWith('/auth/token'));\n        if (notCheckTokenRequest) {\n            const update = {setHeaders: this.authenticationService.getSecurityHeader()};\n            request = request.clone(update);\n        }\n        return request;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TryToLogIn.html":{"url":"classes/TryToLogIn.html","title":"class - TryToLogIn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TryToLogIn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used to push login/password pair to the authentication service\nEmitted by {LoginComponent} in the onSubmit @method which is called\nwhen the user click on the Login button of the login page form.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/authentication.actions.ts:63\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.TryToLogIn\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:63\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\n\nexport enum AuthenticationActionTypes {\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n/**\n * First action dispatch by the application.\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    constructor(public payload: PayloadForSuccessfulAuthentication) {\n    }\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    constructor(public payload: { denialReason: string }) {\n    }\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n     AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TryToLogOut.html":{"url":"classes/TryToLogOut.html","title":"class - TryToLogOut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TryToLogOut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used when the user logout\nEmitted by {NavbarComponent} win the logOut @method which is called\nwhen the user click on the logOut button of the navbar\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.TryToLogOut\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:76\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\n\nexport enum AuthenticationActionTypes {\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n/**\n * First action dispatch by the application.\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    constructor(public payload: PayloadForSuccessfulAuthentication) {\n    }\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    constructor(public payload: { denialReason: string }) {\n    }\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n     AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TypeFilterComponent.html":{"url":"components/TypeFilterComponent.html","title":"component - TypeFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TypeFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-type-filter\n            \n\n            \n                styleUrls\n                ./type-filter.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./type-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _filter$\n                            \n                            \n                                    Private\n                                ngUnsubscribe$\n                            \n                            \n                                typeFilterForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createFormGroup\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    filter$\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            createFormGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        createFormGroup()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts:53\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts:59\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _filter$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ngUnsubscribe$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            typeFilterForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts:28\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        filter$\n                    \n                \n\n                \n                    \n                        getfilter$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts:32\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Observable, Subject, timer} from \"rxjs\";\nimport {Filter} from \"@ofModel/feed-filter.model\";\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"@ofStore/index\";\nimport {buildFilterSelector} from \"@ofSelectors/feed.selectors\";\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport {debounce, distinctUntilChanged, first, takeUntil} from \"rxjs/operators\";\nimport {ApplyFilter} from \"@ofActions/feed.actions\";\nimport * as _ from 'lodash';\nimport {FilterType} from \"@ofServices/filter.service\";\n\n\n@Component({\n    selector: 'of-type-filter',\n    templateUrl: './type-filter.component.html',\n    styleUrls: ['./type-filter.component.scss']\n})\nexport class TypeFilterComponent implements OnInit, OnDestroy {\n    private ngUnsubscribe$ = new Subject();\n    typeFilterForm: FormGroup;\n\n    private _filter$: Observable;\n\n    get filter$(): Observable{\n        return this._filter$;\n    }\n\n    // set filter$(filter: Observable) {\n    //     this._filter$ = filter;\n    // }\n\n    constructor(private store: Store) {\n        this.typeFilterForm = this.createFormGroup();\n    }\n\n    private createFormGroup() {\n        return new FormGroup({\n            alarm: new FormControl(),\n            action: new FormControl(),\n            question: new FormControl(),\n            notification: new FormControl()\n        },{updateOn: 'change'});\n    }\n\n    ngOnDestroy() {\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n    }\n\n\n    ngOnInit() {\n        this._filter$ = this.store.select(buildFilterSelector(FilterType.TYPE_FILTER));\n        this._filter$.pipe(takeUntil(this.ngUnsubscribe$)).subscribe((next: Filter) => {\n            if (next) {\n                this.typeFilterForm.get('alarm').setValue(!next.active || next.status.alarm);\n                this.typeFilterForm.get('action').setValue(!next.active || next.status.action);\n                this.typeFilterForm.get('question').setValue(!next.active || next.status.question);\n                this.typeFilterForm.get('notification').setValue(!next.active || next.status.notification);\n            } else {\n                this.typeFilterForm.get('alarm').setValue(true);\n                this.typeFilterForm.get('action').setValue(true);\n                this.typeFilterForm.get('question').setValue(true);\n                this.typeFilterForm.get('notification').setValue(true);\n            }\n        });\n        this._filter$.pipe(first(),takeUntil(this.ngUnsubscribe$)).subscribe(()=>{\n            this.typeFilterForm\n                .valueChanges\n                .pipe(\n                    takeUntil(this.ngUnsubscribe$),\n                    distinctUntilChanged((formA, formB)=>{\n                        return _.isEqual(formA,formB);\n                    }),\n                    debounce(() => timer(500)))\n                .subscribe(form => this.store.dispatch(\n                    new ApplyFilter({\n                        name: FilterType.TYPE_FILTER,\n                        active: !(form.alarm && form.action && form.question && form.notification),\n                        status: form\n                    }))\n                );\n        });\n    }\n\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n    \n        \n            \n                \n                feed.filters.type.alarm.label\n            \n            \n                \n                feed.filters.type.action.label\n            \n            \n                \n                feed.filters.type.question.label\n            \n            \n                \n                feed.filters.type.notification.label\n            \n        \n    \n    feed.filters.type.title\n    \n        \n            \n                \n                \n            \n            \n                \n                \n            \n        \n    \n\n\n    \n\n    \n                \n                    ./type-filter.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n@import \"~assets/styles/_variables.scss\";\n\n$cell-width: 10;\n\n.type-selections {\n  display: table;\n  width: $cell-width * 2px;\n  height: $cell-width * 2px;\n}\n\n.type-row {\n  display: table-row;\n}\n\n.type-cell {\n  display: table-cell;\n}\n\n/deep/ .popover {\n  background-color: $dark;\n  .popover-header {\n    color: $light;\n    background-color: $dark;\n  }\n  .popover-body {\n    color: $light;\n  }\n  .arrow::after{\n    border-right-color: $dark;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                        feed.filters.type.alarm.label                                                        feed.filters.type.action.label                                                        feed.filters.type.question.label                                                        feed.filters.type.notification.label                            feed.filters.type.title                                                                                                                                        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TypeFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatedSubscription.html":{"url":"classes/UpdatedSubscription.html","title":"class - UpdatedSubscription","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatedSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:64\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.UpdatedSubscription\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:64\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    // | LoadLightCard\n    // | LoadLightCardSuccess\n    // | LoadLightCardFailure\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/app/components/icon/icon.component.ts\n            \n            component\n            IconComponent\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/app/components/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/components/navbar/navbar.component.ts\n            \n            component\n            NavbarComponent\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/model/card.model.ts\n            \n            class\n            Action\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/card.model.ts\n            \n            class\n            Card\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/card.model.ts\n            \n            class\n            CardDetail\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/card.model.ts\n            \n            class\n            Input\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/card.model.ts\n            \n            class\n            ParameterListItem\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/feed-filter.model.ts\n            \n            class\n            Filter\n            \n                50 %\n                (4/8)\n            \n        \n        \n            \n                \n                src/app/model/i18n.model.ts\n            \n            class\n            I18n\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/map.ts\n            \n            class\n            Map\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/model/thirds.model.ts\n            \n            class\n            Third\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/thirds.model.ts\n            \n            class\n            ThirdMenu\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/thirds.model.ts\n            \n            class\n            ThirdMenuEntry\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/modules/archives/archives.component.ts\n            \n            component\n            ArchivesComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/modules/cards/components/card-details/card-details.component.ts\n            \n            component\n            CardDetailsComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/modules/cards/components/card/card.component.ts\n            \n            component\n            CardComponent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/modules/cards/components/detail/detail.component.ts\n            \n            component\n            DetailComponent\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/app/modules/cards/components/details/details.component.ts\n            \n            component\n            DetailsComponent\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/modules/cards/services/handlebars.service.ts\n            \n            injectable\n            HandlebarsService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/app/modules/cards/services/handlebars.service.ts\n            \n            function\n            sortOnKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/modules/feed/components/card-list/card-list.component.ts\n            \n            component\n            CardListComponent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/modules/feed/components/card-list/filters/filters.component.ts\n            \n            component\n            FiltersComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts\n            \n            component\n            TimeFilterComponent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts\n            \n            component\n            TypeFilterComponent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/modules/feed/components/no-selection/no-selection.component.ts\n            \n            component\n            NoSelectionComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/modules/feed/components/time-line/time-line.component.ts\n            \n            component\n            TimeLineComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/modules/feed/feed.component.ts\n            \n            component\n            FeedComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/services/authentication.service.ts\n            \n            class\n            AuthObject\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/services/authentication.service.ts\n            \n            class\n            CheckTokenResponse\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/services/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                src/app/services/authentication.service.ts\n            \n            function\n            isInTheFuture\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/services/authentication.service.ts\n            \n            variable\n            ONE_SECOND\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/services/card.service.ts\n            \n            injectable\n            CardService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/services/config.service.ts\n            \n            injectable\n            ConfigService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/services/filter.service.ts\n            \n            injectable\n            FilterService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/services/guid.service.ts\n            \n            class\n            GuidService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/services/interceptors.service.ts\n            \n            interceptor\n            TokenInjector\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/services/thirds.service.ts\n            \n            class\n            ThirdsI18nLoader\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/services/thirds.service.ts\n            \n            injectable\n            ThirdsService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/app/services/thirds.service.ts\n            \n            function\n            ThirdsI18nLoaderFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/services/time.service.ts\n            \n            injectable\n            TimeService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            AcceptLogIn\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            AcceptLogOut\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            AcceptLogOutSuccess\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            CheckAuthenticationStatus\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            PayloadForSuccessfulAuthentication\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            RejectLogIn\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            TryToLogIn\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            TryToLogOut\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/store/actions/card.actions.ts\n            \n            class\n            HandleUnexpectedError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/card.actions.ts\n            \n            class\n            LoadCard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/card.actions.ts\n            \n            class\n            LoadCardFailure\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/card.actions.ts\n            \n            class\n            LoadCardSuccess\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/config.actions.ts\n            \n            class\n            HandleUnexpectedError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/config.actions.ts\n            \n            class\n            LoadConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/store/actions/config.actions.ts\n            \n            class\n            LoadConfigFailure\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/config.actions.ts\n            \n            class\n            LoadConfigSuccess\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/feed.actions.ts\n            \n            class\n            ApplyFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/feed.actions.ts\n            \n            class\n            InitFilters\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            AddLightCardFailure\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            HandleUnexpectedError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            LoadLightCards\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            LoadLightCardsExtendedData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            LoadLightCardsFailure\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            LoadLightCardsSuccess\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            SelectLightCard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            UpdatedSubscription\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/actions/menu.actions.ts\n            \n            class\n            HandleUnexpectedError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/menu.actions.ts\n            \n            class\n            LoadMenu\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/actions/menu.actions.ts\n            \n            class\n            LoadMenuFailure\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/menu.actions.ts\n            \n            class\n            LoadMenuSuccess\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/effects/authentication.effects.ts\n            \n            injectable\n            AuthenticationEffects\n            \n                70 %\n                (7/10)\n            \n        \n        \n            \n                \n                src/app/store/effects/card-operation.effects.ts\n            \n            injectable\n            CardOperationEffects\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/effects/card.effects.ts\n            \n            injectable\n            CardEffects\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/effects/config.effects.ts\n            \n            injectable\n            ConfigEffects\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/app/store/effects/custom-router.effects.ts\n            \n            injectable\n            CustomRouterEffects\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/effects/feed-filters.effects.ts\n            \n            injectable\n            FeedFiltersEffects\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/effects/light-card.effects.ts\n            \n            injectable\n            LightCardEffects\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/effects/menu.effects.ts\n            \n            injectable\n            MenuEffects\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/index.ts\n            \n            interface\n            AppState\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/store/index.ts\n            \n            variable\n            appEffects\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/index.ts\n            \n            variable\n            appMetaReducers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/index.ts\n            \n            variable\n            appReducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/index.ts\n            \n            variable\n            storeConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            variable\n            getExpirationDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            variable\n            getExpirationTime\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            variable\n            getIdentifier\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            variable\n            getToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            variable\n            UTC_beginning_time\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/card.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/card.reducer.ts\n            \n            variable\n            getSelectedId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/config.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/light-card.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/menu.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/menu.reducer.ts\n            \n            variable\n            getSelectedId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/authentication.selectors.ts\n            \n            variable\n            selectAuthenticationState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/authentication.selectors.ts\n            \n            variable\n            selectExpirationTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/card.selectors.ts\n            \n            variable\n            selectCardState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/card.selectors.ts\n            \n            variable\n            selectCardStateSelection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/card.selectors.ts\n            \n            variable\n            selectCardStateSelectionDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/config.selectors.ts\n            \n            function\n            buildConfigSelector\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/config.selectors.ts\n            \n            variable\n            selectConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/config.selectors.ts\n            \n            variable\n            selectConfigData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/config.selectors.ts\n            \n            variable\n            selectConfigLoaded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/config.selectors.ts\n            \n            variable\n            selectConfigRetry\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/config.selectors.ts\n            \n            variable\n            selectMaxedRetries\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            function\n            buildFilterSelector\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectActiveFiltersArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectFilter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectFilteredFeed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectLastCards\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectLightCardSelection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectLightCardsState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/menu.selectors.ts\n            \n            variable\n            selectMenuState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/menu.selectors.ts\n            \n            variable\n            selectMenuStateMenu\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/router.selectors.ts\n            \n            variable\n            selectCurrentUrl\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/router.selectors.ts\n            \n            variable\n            selectRouterState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/authentication.state.ts\n            \n            interface\n            AuthState\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/store/states/authentication.state.ts\n            \n            variable\n            authInitialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/card.state.ts\n            \n            interface\n            CardState\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/states/card.state.ts\n            \n            variable\n            cardInitialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/config.state.ts\n            \n            interface\n            ConfigState\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/store/states/config.state.ts\n            \n            variable\n            CONFIG_LOAD_MAX_RETRIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/config.state.ts\n            \n            variable\n            configInitialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/feed.state.ts\n            \n            interface\n            CardFeedState\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/store/states/feed.state.ts\n            \n            function\n            sortByStartDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/feed.state.ts\n            \n            variable\n            feedInitialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/feed.state.ts\n            \n            variable\n            LightCardAdapter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/menu.state.ts\n            \n            interface\n            MenuState\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/states/menu.state.ts\n            \n            variable\n            menuInitialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/router.state.ts\n            \n            class\n            CustomRouterStateSerializer\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/states/router.state.ts\n            \n            class\n            RouterStateUrl\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/store/states/router.state.ts\n            \n            variable\n            initialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/translate.config.ts\n            \n            function\n            HttpLoaderFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/translate.config.ts\n            \n            variable\n            i18nPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/translate.config.ts\n            \n            variable\n            prodI18nPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/translate.config.ts\n            \n            variable\n            translateConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            context\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            require\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            appendFixedLengthAlphanumericValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            forcePositiveAndOneMinimum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            generateRandomArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            generateRandomPositiveIntegerWithinRangeWithOneAsMinimum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getFixedLengthAlphanumericValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getOneRandomAddCardOperation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getOneRandomCard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getOneRandomCardDetail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getOneRandomCardWithRandomDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getOneRandomLigthCard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getPositiveRandomNumberWithinRange\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getRandomAlphanumericValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getRandomI18nData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getRandomIndex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getRandomMenu\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getRandomThird\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getSeveralRandomLightCards\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            handleMaxAgainstMin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            pickARandomItemOfAnEnum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/mocks/thirds.service.mock.ts\n            \n            class\n            ThirdsServiceMock\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^7.2.2\n        \n            @angular/common : ^7.2.2\n        \n            @angular/compiler : ^7.2.2\n        \n            @angular/core : ^7.2.2\n        \n            @angular/forms : ^7.2.2\n        \n            @angular/http : ^7.2.2\n        \n            @angular/platform-browser : ^7.2.2\n        \n            @angular/platform-browser-dynamic : ^7.2.2\n        \n            @angular/router : ^7.2.2\n        \n            @fortawesome/angular-fontawesome : ^0.3.0\n        \n            @fortawesome/fontawesome-svg-core : ^1.2.17\n        \n            @fortawesome/free-solid-svg-icons : ^5.8.1\n        \n            @ng-bootstrap/ng-bootstrap : ^4.0.0\n        \n            @ngrx/effects : ^7.1.0\n        \n            @ngrx/entity : ^7.1.0\n        \n            @ngrx/router-store : ^7.1.0\n        \n            @ngrx/store : ^7.1.0\n        \n            @ngrx/store-devtools : ^7.1.0\n        \n            @ngx-translate/core : ^11.0.1\n        \n            @ngx-translate/http-loader : ^4.0.0\n        \n            bootstrap : ^4.2.1\n        \n            core-js : ^2.6.3\n        \n            guid-typescript : ^1.0.9\n        \n            handlebars : ^4.0.12\n        \n            lodash : ^4.17.11\n        \n            moment : ^2.24.0\n        \n            ng-event-source : ^1.0.14\n        \n            ngrx-router : ^2.0.1\n        \n            rxjs : ^6.3.3\n        \n            svg-pan-zoom : ^3.6.0\n        \n            tslib : ^1.9.3\n        \n            zone.js : ^0.8.29\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActionType   (src/.../card.model.ts)\n                        \n                        \n                            AuthenticationActionTypes   (src/.../authentication.actions.ts)\n                        \n                        \n                            CardActionTypes   (src/.../card.actions.ts)\n                        \n                        \n                            CardOperationType   (src/.../card-operation.model.ts)\n                        \n                        \n                            ConfigActionTypes   (src/.../config.actions.ts)\n                        \n                        \n                            FeedActionTypes   (src/.../feed.actions.ts)\n                        \n                        \n                            FilterType   (src/.../filter.service.ts)\n                        \n                        \n                            InputType   (src/.../card.model.ts)\n                        \n                        \n                            LightCardActionTypes   (src/.../light-card.actions.ts)\n                        \n                        \n                            LocalStorageAuthContent   (src/.../authentication.service.ts)\n                        \n                        \n                            MenuActionTypes   (src/.../menu.actions.ts)\n                        \n                        \n                            Severity   (src/.../light-card.model.ts)\n                        \n                        \n                            Sound   (src/.../light-card.model.ts)\n                        \n                        \n                            TitlePosition   (src/.../card.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/model/card.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ActionType\n                    \n                \n                        \n                            \n                                 EXTERNAL\n                            \n                        \n                        \n                            \n                                 JNLP\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        InputType\n                    \n                \n                        \n                            \n                                 TEXT\n                            \n                        \n                        \n                            \n                                 LIST\n                            \n                        \n                        \n                            \n                                 LIST_RADIO\n                            \n                        \n                        \n                            \n                                 SWITCH_LIST\n                            \n                        \n                        \n                            \n                                 LONGTEXT\n                            \n                        \n                        \n                            \n                                 BOOLEAN\n                            \n                        \n                        \n                            \n                                 STATIC\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TitlePosition\n                    \n                \n                        \n                            \n                                 UP\n                            \n                        \n                        \n                            \n                                 DOWN\n                            \n                        \n                        \n                            \n                                 NONE\n                            \n                        \n            \n        \n\n    src/app/store/actions/authentication.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthenticationActionTypes\n                    \n                \n                        \n                            \n                                 CheckAuthenticationStatus\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Check Authentication Status\n                            \n                        \n                        \n                            \n                                 AcceptLogIn\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Accept the user log in attempt\n                            \n                        \n                        \n                            \n                                 RejectLogIn\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Reject the user log in attempt\n                            \n                        \n                        \n                            \n                                 TryToLogIn\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Try to log the user in\n                            \n                        \n                        \n                            \n                                 TryToLogOut\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Try to log the user out\n                            \n                        \n                        \n                            \n                                 AcceptLogOut\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Accept the user log out attempt\n                            \n                        \n                        \n                            \n                                 AcceptLogOutSuccess\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Success Accept the user log out attempt\n                            \n                        \n            \n        \n\n    src/app/store/actions/card.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        CardActionTypes\n                    \n                \n                        \n                            \n                                 LoadCard\n                            \n                        \n                        \n                            \n                                Value : [Card] Load Card\n                            \n                        \n                        \n                            \n                                 LoadCardSuccess\n                            \n                        \n                        \n                            \n                                Value : [Card] Load Card Success\n                            \n                        \n                        \n                            \n                                 LoadCardFailure\n                            \n                        \n                        \n                            \n                                Value : [Card] Load Card Fail\n                            \n                        \n                        \n                            \n                                 HandleUnexpectedError\n                            \n                        \n                        \n                            \n                                Value : [Card] Handle unexpected error related to card issue\n                            \n                        \n            \n        \n\n    src/app/model/card-operation.model.ts\n    \n        \n            \n                \n                    \n                        \n                        CardOperationType\n                    \n                \n                        \n                            \n                                 ADD\n                            \n                        \n                        \n                            \n                                Value : ADD\n                            \n                        \n                        \n                            \n                                 UPDATE\n                            \n                        \n                        \n                            \n                                Value : UPDATE\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n            \n        \n\n    src/app/store/actions/config.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        ConfigActionTypes\n                    \n                \n                        \n                            \n                                 LoadConfig\n                            \n                        \n                        \n                            \n                                Value : [Config] Load Config\n                            \n                        \n                        \n                            \n                                 LoadConfigSuccess\n                            \n                        \n                        \n                            \n                                Value : [Config] Load Config Success\n                            \n                        \n                        \n                            \n                                 LoadConfigFailure\n                            \n                        \n                        \n                            \n                                Value : [Config] Load Config Fail\n                            \n                        \n                        \n                            \n                                 HandleUnexpectedError\n                            \n                        \n                        \n                            \n                                Value : [Config] Handle unexpected error related to configuration issue\n                            \n                        \n            \n        \n\n    src/app/store/actions/feed.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        FeedActionTypes\n                    \n                \n                        \n                            \n                                 ApplyFilter\n                            \n                        \n                        \n                            \n                                Value : [Feed] Change filter Status\n                            \n                        \n                        \n                            \n                                 InitFilter\n                            \n                        \n                        \n                            \n                                Value : [Feed] Init filter\n                            \n                        \n            \n        \n\n    src/app/services/filter.service.ts\n    \n        \n            \n                \n                    \n                        \n                        FilterType\n                    \n                \n                        \n                            \n                                 TYPE_FILTER\n                            \n                        \n                        \n                            \n                                 RECIPIENT_FILTER\n                            \n                        \n                        \n                            \n                                 TIME_FILTER\n                            \n                        \n                        \n                            \n                                 TEST_FILTER\n                            \n                        \n            \n        \n\n    src/app/store/actions/light-card.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        LightCardActionTypes\n                    \n                \n                        \n                            \n                                 LoadLightCards\n                            \n                        \n                        \n                            \n                                Value : [LCard] Load\n                            \n                        \n                        \n                            \n                                 LoadLightCardsSuccess\n                            \n                        \n                        \n                            \n                                Value : [LCard] Load Success\n                            \n                        \n                        \n                            \n                                 LoadLightCardsExtendedData\n                            \n                        \n                        \n                            \n                                Value : [LCard] Load Extended Data\n                            \n                        \n                        \n                            \n                                 LoadLightCardsFailure\n                            \n                        \n                        \n                            \n                                Value : [LCard] Load Fail\n                            \n                        \n                        \n                            \n                                 SelectLightCard\n                            \n                        \n                        \n                            \n                                Value : [LCard] Select One\n                            \n                        \n                        \n                            \n                                 AddLightCardFailure\n                            \n                        \n                        \n                            \n                                Value : [LCard] Add Light Card Fail\n                            \n                        \n                        \n                            \n                                 UpdatedSubscription\n                            \n                        \n                        \n                            \n                                Value : [LCard] UpdateSubscription\n                            \n                        \n                        \n                            \n                                 HandleUnexpectedError\n                            \n                        \n                        \n                            \n                                Value : [LCard] Handle unexpected error related to authentication issue\n                            \n                        \n            \n        \n\n    src/app/services/authentication.service.ts\n    \n        \n            \n                \n                    \n                        \n                        LocalStorageAuthContent\n                    \n                \n                        \n                            \n                                 token\n                            \n                        \n                        \n                            \n                                Value : token\n                            \n                        \n                        \n                            \n                                 expirationDate\n                            \n                        \n                        \n                            \n                                Value : expirationDate\n                            \n                        \n                        \n                            \n                                 identifier\n                            \n                        \n                        \n                            \n                                Value : identifier\n                            \n                        \n                        \n                            \n                                 clientId\n                            \n                        \n                        \n                            \n                                Value : clientId\n                            \n                        \n            \n        \n\n    src/app/store/actions/menu.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        MenuActionTypes\n                    \n                \n                        \n                            \n                                 LoadMenu\n                            \n                        \n                        \n                            \n                                Value : [Menu] Load Menu\n                            \n                        \n                        \n                            \n                                 LoadMenuSuccess\n                            \n                        \n                        \n                            \n                                Value : [Menu] Load Menu Success\n                            \n                        \n                        \n                            \n                                 LoadMenuFailure\n                            \n                        \n                        \n                            \n                                Value : [Menu] Load Menu Fail\n                            \n                        \n                        \n                            \n                                 HandleUnexpectedError\n                            \n                        \n                        \n                            \n                                Value : [Menu] Handle unexpected error\n                            \n                        \n            \n        \n\n    src/app/model/light-card.model.ts\n    \n        \n            \n                \n                    \n                        \n                        Severity\n                    \n                \n                        \n                            \n                                 ALARM\n                            \n                        \n                        \n                            \n                                Value : ALARM\n                            \n                        \n                        \n                            \n                                 ACTION\n                            \n                        \n                        \n                            \n                                Value : ACTION\n                            \n                        \n                        \n                            \n                                 NOTIFICATION\n                            \n                        \n                        \n                            \n                                Value : NOTIFICATION\n                            \n                        \n                        \n                            \n                                 QUESTION\n                            \n                        \n                        \n                            \n                                Value : QUESTION\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Sound\n                    \n                \n                        \n                            \n                                 NOTIFICATION\n                            \n                        \n                        \n                            \n                                 QUESTION\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_ArchivesModule\n\n\n\ncluster_ArchivesModule_declarations\n\n\n\ncluster_ArchivesModule_imports\n\n\n\ncluster_CardsModule\n\n\n\ncluster_CardsModule_declarations\n\n\n\ncluster_CardsModule_exports\n\n\n\ncluster_CardsModule_providers\n\n\n\ncluster_FeedModule\n\n\n\ncluster_FeedModule_declarations\n\n\n\ncluster_FeedModule_imports\n\n\n\ncluster_FeedModule_exports\n\n\n\ncluster_ServicesModule\n\n\n\ncluster_ServicesModule_providers\n\n\n\ncluster_StateModule\n\n\n\ncluster_StateModule_imports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nIconComponent\n\nIconComponent\n\nAppModule -->\n\nIconComponent->AppModule\n\n\n\n\n\nLoginComponent\n\nLoginComponent\n\nAppModule -->\n\nLoginComponent->AppModule\n\n\n\n\n\nNavbarComponent\n\nNavbarComponent\n\nAppModule -->\n\nNavbarComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nServicesModule\n\nServicesModule\n\nAppModule -->\n\nServicesModule->AppModule\n\n\n\n\n\nStateModule\n\nStateModule\n\nAppModule -->\n\nStateModule->AppModule\n\n\n\n\n\nArchivesComponent\n\nArchivesComponent\n\n\n\nArchivesModule\n\nArchivesModule\n\nArchivesModule -->\n\nArchivesComponent->ArchivesModule\n\n\n\n\n\nArchivesRoutingModule\n\nArchivesRoutingModule\n\nArchivesModule -->\n\nArchivesRoutingModule->ArchivesModule\n\n\n\n\n\nCardComponent\n\nCardComponent\n\n\n\nCardsModule\n\nCardsModule\n\nCardsModule -->\n\nCardComponent->CardsModule\n\n\n\n\n\nCardDetailsComponent\n\nCardDetailsComponent\n\nCardsModule -->\n\nCardDetailsComponent->CardsModule\n\n\n\n\n\nDetailComponent\n\nDetailComponent\n\nCardsModule -->\n\nDetailComponent->CardsModule\n\n\n\n\n\nDetailsComponent\n\nDetailsComponent\n\nCardsModule -->\n\nDetailsComponent->CardsModule\n\n\n\n\n\nCardComponent \n\nCardComponent \n\nCardComponent  -->\n\nCardsModule->CardComponent \n\n\n\n\n\nCardDetailsComponent \n\nCardDetailsComponent \n\nCardDetailsComponent  -->\n\nCardsModule->CardDetailsComponent \n\n\n\n\n\nDetailComponent \n\nDetailComponent \n\nDetailComponent  -->\n\nCardsModule->DetailComponent \n\n\n\n\n\nDetailsComponent \n\nDetailsComponent \n\nDetailsComponent  -->\n\nCardsModule->DetailsComponent \n\n\n\n\n\nFeedModule\n\nFeedModule\n\nFeedModule -->\n\nCardsModule->FeedModule\n\n\n\n\n\nHandlebarsService\n\nHandlebarsService\n\nCardsModule -->\n\nHandlebarsService->CardsModule\n\n\n\n\n\nCardListComponent\n\nCardListComponent\n\nFeedModule -->\n\nCardListComponent->FeedModule\n\n\n\n\n\nFeedComponent\n\nFeedComponent\n\nFeedModule -->\n\nFeedComponent->FeedModule\n\n\n\n\n\nFiltersComponent\n\nFiltersComponent\n\nFeedModule -->\n\nFiltersComponent->FeedModule\n\n\n\n\n\nNoSelectionComponent\n\nNoSelectionComponent\n\nFeedModule -->\n\nNoSelectionComponent->FeedModule\n\n\n\n\n\nTimeFilterComponent\n\nTimeFilterComponent\n\nFeedModule -->\n\nTimeFilterComponent->FeedModule\n\n\n\n\n\nTimeLineComponent\n\nTimeLineComponent\n\nFeedModule -->\n\nTimeLineComponent->FeedModule\n\n\n\n\n\nTypeFilterComponent\n\nTypeFilterComponent\n\nFeedModule -->\n\nTypeFilterComponent->FeedModule\n\n\n\n\n\nFeedComponent \n\nFeedComponent \n\nFeedComponent  -->\n\nFeedModule->FeedComponent \n\n\n\n\n\nFeedRoutingModule\n\nFeedRoutingModule\n\nFeedModule -->\n\nFeedRoutingModule->FeedModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nServicesModule -->\n\nAuthenticationService->ServicesModule\n\n\n\n\n\nCardService\n\nCardService\n\nServicesModule -->\n\nCardService->ServicesModule\n\n\n\n\n\nConfigService\n\nConfigService\n\nServicesModule -->\n\nConfigService->ServicesModule\n\n\n\n\n\nFilterService\n\nFilterService\n\nServicesModule -->\n\nFilterService->ServicesModule\n\n\n\n\n\nThirdsService\n\nThirdsService\n\nServicesModule -->\n\nThirdsService->ServicesModule\n\n\n\n\n\nTimeService\n\nTimeService\n\nServicesModule -->\n\nTimeService->ServicesModule\n\n\n\n\n\nTokenInjector\n\nTokenInjector\n\nServicesModule -->\n\nTokenInjector->ServicesModule\n\n\n\n\n\n!environment\n\n!environment\n\nStateModule -->\n\n!environment->StateModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    16 Components\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    48 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        16 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArchivesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArchivesRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CardsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FeedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FeedRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ServicesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StateModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthenticationActions   (src/.../authentication.actions.ts)\n                        \n                        \n                            CardActions   (src/.../card.actions.ts)\n                        \n                        \n                            ConfigActions   (src/.../config.actions.ts)\n                        \n                        \n                            FeedActions   (src/.../feed.actions.ts)\n                        \n                        \n                            LightCardActions   (src/.../light-card.actions.ts)\n                        \n                        \n                            MenuActions   (src/.../menu.actions.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/store/actions/authentication.actions.ts\n    \n    \n        \n            \n                \n                    \n                    AuthenticationActions\n                \n            \n            \n                \n                        AcceptLogIn | RejectLogIn | TryToLogIn | TryToLogOut | CheckAuthenticationStatus | AcceptLogOut | AcceptLogOutSuccess\n\n                \n            \n        \n    \n    src/app/store/actions/card.actions.ts\n    \n    \n        \n            \n                \n                    \n                    CardActions\n                \n            \n            \n                \n                        LoadCard | LoadCardSuccess | LoadCardFailure | HandleUnexpectedError\n\n                \n            \n        \n    \n    src/app/store/actions/config.actions.ts\n    \n    \n        \n            \n                \n                    \n                    ConfigActions\n                \n            \n            \n                \n                        LoadConfig | LoadConfigSuccess | LoadConfigFailure | HandleUnexpectedError\n\n                \n            \n        \n    \n    src/app/store/actions/feed.actions.ts\n    \n    \n        \n            \n                \n                    \n                    FeedActions\n                \n            \n            \n                \n                        InitFilters | ApplyFilter\n\n                \n            \n        \n    \n    src/app/store/actions/light-card.actions.ts\n    \n    \n        \n            \n                \n                    \n                    LightCardActions\n                \n            \n            \n                \n                        LoadLightCards | LoadLightCardsSuccess | LoadLightCardsFailure | SelectLightCard | AddLightCardFailure | UpdatedSubscription | HandleUnexpectedError\n\n                \n            \n        \n    \n    src/app/store/actions/menu.actions.ts\n    \n    \n        \n            \n                \n                    \n                    MenuActions\n                \n            \n            \n                \n                        LoadMenu | LoadMenuSuccess | LoadMenuFailure | HandleUnexpectedError\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appEffects   (src/.../index.ts)\n                        \n                        \n                            appMetaReducers   (src/.../index.ts)\n                        \n                        \n                            appReducer   (src/.../index.ts)\n                        \n                        \n                            authInitialState   (src/.../authentication.state.ts)\n                        \n                        \n                            cardInitialState   (src/.../card.state.ts)\n                        \n                        \n                            CONFIG_LOAD_MAX_RETRIES   (src/.../config.state.ts)\n                        \n                        \n                            configInitialState   (src/.../config.state.ts)\n                        \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            feedInitialState   (src/.../feed.state.ts)\n                        \n                        \n                            getExpirationDate   (src/.../authentication.reducer.ts)\n                        \n                        \n                            getExpirationTime   (src/.../authentication.reducer.ts)\n                        \n                        \n                            getIdentifier   (src/.../authentication.reducer.ts)\n                        \n                        \n                            getSelectedId   (src/.../card.reducer.ts)\n                        \n                        \n                            getSelectedId   (src/.../menu.reducer.ts)\n                        \n                        \n                            getToken   (src/.../authentication.reducer.ts)\n                        \n                        \n                            i18nPath   (src/.../translate.config.ts)\n                        \n                        \n                            initialState   (src/.../router.state.ts)\n                        \n                        \n                            LightCardAdapter   (src/.../feed.state.ts)\n                        \n                        \n                            menuInitialState   (src/.../menu.state.ts)\n                        \n                        \n                            ONE_SECOND   (src/.../authentication.service.ts)\n                        \n                        \n                            prodI18nPath   (src/.../translate.config.ts)\n                        \n                        \n                               (src/.../feed.selectors.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                        \n                            selectActiveFiltersArray   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectAuthenticationState   (src/.../authentication.selectors.ts)\n                        \n                        \n                            selectCardState   (src/.../card.selectors.ts)\n                        \n                        \n                            selectCardStateSelection   (src/.../card.selectors.ts)\n                        \n                        \n                            selectCardStateSelectionDetails   (src/.../card.selectors.ts)\n                        \n                        \n                            selectConfig   (src/.../config.selectors.ts)\n                        \n                        \n                            selectConfigData   (src/.../config.selectors.ts)\n                        \n                        \n                            selectConfigLoaded   (src/.../config.selectors.ts)\n                        \n                        \n                            selectConfigRetry   (src/.../config.selectors.ts)\n                        \n                        \n                            selectCurrentUrl   (src/.../router.selectors.ts)\n                        \n                        \n                            selectExpirationTime   (src/.../authentication.selectors.ts)\n                        \n                        \n                            selectFilter   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectFilteredFeed   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectLastCards   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectLightCardSelection   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectLightCardsState   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectMaxedRetries   (src/.../config.selectors.ts)\n                        \n                        \n                            selectMenuState   (src/.../menu.selectors.ts)\n                        \n                        \n                            selectMenuStateMenu   (src/.../menu.selectors.ts)\n                        \n                        \n                            selectRouterState   (src/.../router.selectors.ts)\n                        \n                        \n                            storeConfig   (src/.../index.ts)\n                        \n                        \n                            translateConfig   (src/.../translate.config.ts)\n                        \n                        \n                            UTC_beginning_time   (src/.../authentication.reducer.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/store/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            appEffects\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    CardEffects,\n    ConfigEffects,\n    CardOperationEffects,\n    RouterEffects,\n    CustomRouterEffects,\n    AuthenticationEffects,\n    MenuEffects,\n    LightCardEffects,\n    FeedFiltersEffects]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            appMetaReducers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MetaReducer[]\n\n                        \n                    \n                    \n                        \n                            Default value : !environment.production\n    ? [storeFreeze]\n    : []\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            appReducer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ActionReducerMap\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    router: fromRouter.routerReducer,\n    feed: lightCardReducer,\n    authentication: authenticationReducer,\n    card: cardReducer,\n    menu: menuReducer,\n    config: configReducer\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            storeConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    metaReducers: appMetaReducers,\n    // initialState: {\n    //     router: routerInitialState,\n    // }\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/authentication.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            authInitialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     AuthState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    identifier: null,\n    clientId: null,\n    token: null,\n    expirationDate: new Date(0),\n    denialReason: null\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/card.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cardInitialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CardState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    selected: null,\n    loading: false,\n    error: null\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/config.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CONFIG_LOAD_MAX_RETRIES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 5\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configInitialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ConfigState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    config:{},\n    loading: false,\n    loaded: false,\n    error: null,\n    retry: 0\n}\n                        \n                    \n\n\n            \n        \n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false,\n    urls: {\n      authentication: '',\n        auth: 'http://localhost:2002/auth',\n        cards: 'http://localhost:2002/cards',\n        archives : '',\n        thirds: 'http://localhost:2002/thirds',\n        config: 'http://localhost:2002/config'\n    }\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true,\n    urls: {\n        authentication: '',\n        auth: '/auth',\n        cards: '/cards',\n        archives : '',\n        thirds: '/thirds',\n        config: '/config'\n    }\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/feed.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            feedInitialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CardFeedState\n\n                        \n                    \n                    \n                        \n                            Default value : LightCardAdapter.getInitialState(\n    {\n        selectedCardId: null,\n        lastCards: [],\n        loading: false,\n        error: '',\n        filters: new Map()\n    })\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LightCardAdapter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EntityAdapter\n\n                        \n                    \n                    \n                        \n                            Default value : createEntityAdapter({\n    sortComparer:sortByStartDate\n})\n                        \n                    \n\n\n            \n        \n\n    src/app/store/reducers/authentication.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getExpirationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: AuthState) => state.expirationDate\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getExpirationTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: AuthState) => {\n    const expirationDate = getExpirationDate(state);\n    const token = getToken(state);\n    if (token && expirationDate) {\n        return expirationDate.getTime();\n    } else {\n        return UTC_beginning_time;\n    }\n}\n                        \n                    \n\n                \n                    \n                        return the stored expiration time otherwise the beginning\nof the UTC time which should be always in the past.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getIdentifier\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: AuthState) => state.identifier\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: AuthState) => state.token\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            UTC_beginning_time\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n\n\n            \n        \n\n    src/app/store/reducers/card.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getSelectedId\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: CardFeedState) => state.selectedCardId\n                        \n                    \n\n\n            \n        \n\n    src/app/store/reducers/menu.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getSelectedId\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: CardFeedState) => state.selectedCardId\n                        \n                    \n\n\n            \n        \n\n    src/app/translate.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            i18nPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"/assets/i18n/\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            prodI18nPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"/ui/assets/i18n/\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            translateConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TranslateModuleConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n    }\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/router.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            initialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    state: {\n        url: window.location.pathname,\n        params: {},\n        queryParams: {}\n    },\n    navigationId: 0\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/menu.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            menuInitialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MenuState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    menu:[],\n    loading: false,\n    error:null\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/services/authentication.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ONE_SECOND\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1000\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/feed.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardAdapter.getSelectors(selectLightCardsState)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectActiveFiltersArray\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectFilter,\n    (filters) =>{\n      let result = [];\n      for(let v of filters.values()) {\n        if(v.active)\n          result.push(v);\n      }\n      return result;\n    })\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectFilter\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectLightCardsState,\n    state => state.filters)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectFilteredFeed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectFeed,selectActiveFiltersArray,\n    (feed:LightCard[],filters:Filter[])=>{\n    if(filters && filters.length>0)\n      return feed.filter(card=>Filter.chainFilter(card,filters));\n    else return feed;\n    })\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectLastCards\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectLightCardsState,\n    state => state.lastCards)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectLightCardSelection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(\n    selectLightCardsState,\n    state => state.selectedCardId)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectLightCardsState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state:AppState) => state.feed\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/authentication.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            selectAuthenticationState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createFeatureSelector('authentication')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectExpirationTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectAuthenticationState, fromAuthentication.getExpirationTime)\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/card.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            selectCardState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state:AppState) => state.card\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectCardStateSelection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectCardState, (cardState:CardState)=> cardState.selected)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectCardStateSelectionDetails\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectCardStateSelection, (card:Card)=> {\n    return card==null?null:card.details;\n})\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/config.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            selectConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state:AppState) => state.config\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectConfigData\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectConfig, (configState:ConfigState)=> configState.config)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectConfigLoaded\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectConfig, (configState:ConfigState)=> configState.loaded)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectConfigRetry\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectConfig, (configState:ConfigState)=> configState.retry)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectMaxedRetries\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectConfigRetry, (retries:number)=> retries >= CONFIG_LOAD_MAX_RETRIES)\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/router.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            selectCurrentUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectRouterState,\n    (router) => {\n        if (router)\n            return router.state && router.state.url\n        return null;\n    })\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectRouterState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createFeatureSelector('router')\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/menu.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            selectMenuState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state:AppState) => state.menu\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectMenuStateMenu\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectMenuState, (menuState:MenuState)=> menuState.menu)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
