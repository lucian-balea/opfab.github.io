var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/AcceptLogIn.html",[0,0.214,1,1.963]],["body/classes/AcceptLogIn.html",[0,0.37,1,2.823,2,0.538,3,0.087,4,0.079,5,0.15,6,1.525,7,1.307,8,1.54,9,3.731,10,2.39,11,2.951,12,2.352,13,3.266,14,3.757,15,2.115,16,3.337,17,2.145,18,3.5,19,3.061,20,2.87,21,2.622,22,2.5,23,3.026,24,2.444,25,3.058,26,3.5,27,2.936,28,1.584,29,3.148,30,3.337,31,3.5,32,0.514,33,1.376,34,0.223,35,0.606,36,1.121,37,1.891,38,1.539,39,0.351,40,1.219,41,3.026,42,0.346,43,4.522,44,0.417,45,0.012,46,0.364,47,0.39,48,3.011,49,0.625,50,0.538,51,0.186,52,0.571,53,2.358,54,1.307,55,0.219,56,0.745,57,1.525,58,2.54,59,1.356,60,1.356,61,3.002,62,3.058,63,3.442,64,3.191,65,2.54,66,1.664,67,2.115,68,2.719,69,2.198,70,3.026,71,2.54,72,0.973,73,1.893,74,1.262,75,1.053,76,1.307,77,1.307,78,1.356,79,1.356,80,1.525,81,1.746,82,1.356,83,1.746,84,1.746,85,1.408,86,1.746,87,1.511,88,1.511,89,1.467,90,1.664,91,1.746,92,1.746,93,1.464,94,1.219,95,0.916,96,1.664,97,2.446,98,2.622,99,2.358,100,2.29,101,1.591,102,0.944,103,1.664,104,1.664,105,1.464,106,3.058,107,0.944,108,1.746,109,1.591,110,1.664,111,2.622,112,1.186,113,1.746,114,1.746,115,3.5,116,1.664,117,1.746,118,2.622,119,1.525,120,1.746,121,2.5,122,1.591,123,1.746,124,1.591,125,1.746,126,1.664,127,1.746,128,2.5,129,2.5,130,1.746,131,1.746,132,1.591,133,0.004,134,0.006,135,0.004]],["title/classes/AcceptLogOut.html",[0,0.214,70,1.963]],["body/classes/AcceptLogOut.html",[0,0.374,1,2.585,2,0.554,3,0.09,4,0.081,5,0.142,6,1.571,7,1.346,8,1.547,9,3.702,10,1.639,11,2.66,12,2.35,13,3.206,14,3.798,15,1.45,16,3.387,17,2.226,18,3.552,19,2.951,20,2.443,21,1.798,22,1.714,23,2.865,24,2.237,25,2.8,26,3.204,27,2.688,28,1.45,29,2.68,30,3.055,31,2.68,32,0.504,33,1.388,34,0.23,35,0.619,36,0.957,37,1.538,38,1.552,39,0.429,41,2.162,42,0.295,45,0.012,49,0.643,50,0.554,51,0.19,52,0.588,53,2.4,54,1.346,55,0.221,56,0.767,57,1.571,58,2.585,59,1.396,60,1.396,61,3.055,62,3.127,63,3.48,64,3.238,65,2.585,66,1.714,67,2.162,68,2.951,69,2.237,70,3.329,71,2.585,72,1.002,73,1.921,74,1.299,75,1.067,76,1.346,77,1.346,78,1.396,79,1.396,80,1.571,81,1.798,82,1.396,83,1.798,84,1.798,85,1.45,86,1.798,87,1.538,88,1.538,89,1.493,90,1.714,91,1.798,92,1.798,93,1.508,94,1.255,95,0.943,96,1.714,97,2.489,98,2.68,99,2.4,100,2.342,101,1.639,102,0.972,103,1.714,104,1.714,105,1.508,106,3.319,107,0.972,108,1.798,109,1.639,110,1.714,111,2.68,112,1.213,113,1.798,114,1.798,115,3.984,116,1.714,117,1.798,118,2.68,119,1.571,120,1.798,121,2.556,122,1.639,123,2.68,124,2.443,125,2.68,126,2.556,127,2.68,128,3.055,129,3.055,130,1.798,131,1.798,132,1.639,133,0.004,134,0.006,135,0.004,136,4.623]],["title/classes/AcceptLogOutSuccess.html",[0,0.214,71,1.963]],["body/classes/AcceptLogOutSuccess.html",[0,0.373,1,2.583,2,0.553,3,0.09,4,0.081,5,0.152,6,1.569,7,1.345,8,1.547,9,3.756,10,1.637,11,2.844,12,2.362,13,3.294,14,3.797,15,1.449,16,3.053,17,2.165,18,3.202,19,2.949,20,2.441,21,1.796,22,1.712,23,2.863,24,2.478,25,3.101,26,3.55,27,2.978,28,1.606,29,2.678,30,3.385,31,2.678,32,0.508,33,1.388,34,0.229,35,0.619,36,0.957,37,1.537,38,1.551,39,0.241,41,2.16,42,0.197,45,0.012,49,0.643,50,0.553,51,0.19,52,0.588,53,2.398,54,1.345,55,0.221,56,0.766,57,1.569,58,2.583,59,1.395,60,1.395,61,3.053,62,3.08,63,3.479,64,3.236,65,2.583,66,1.712,67,2.16,68,2.757,69,2.236,70,3.212,71,2.863,72,1.001,73,1.92,74,1.298,75,1.066,76,1.345,77,1.345,78,1.395,79,1.395,80,1.569,81,1.796,82,1.395,83,1.796,84,1.796,85,1.449,86,1.796,87,1.537,88,1.537,89,1.492,90,1.712,91,1.796,92,1.796,93,1.506,94,1.254,95,0.942,96,1.712,97,2.487,98,2.678,99,2.398,100,2.34,101,1.637,102,0.971,103,1.712,104,1.712,105,1.506,106,3.101,107,0.971,108,1.796,109,1.637,110,1.712,111,3.202,112,1.449,113,1.796,114,1.796,115,3.797,116,1.712,117,1.796,118,3.202,119,1.569,120,1.796,121,2.553,122,1.637,123,1.796,124,1.637,125,1.796,126,1.712,127,1.796,128,3.053,129,3.053,130,2.678,131,2.678,132,1.637,133,0.004,134,0.006,135,0.004,137,3.098]],["title/classes/Action.html",[0,0.214,8,0.797]],["body/classes/Action.html",[0,0.366,2,0.698,3,0.113,4,0.102,5,0.091,8,1.036,32,0.435,38,1.83,39,0.578,42,0.249,44,0.541,45,0.012,46,0.66,47,0.506,50,0.976,51,0.259,55,0.226,56,1.558,75,1.386,97,2.836,133,0.005,134,0.007,135,0.005,138,2.383,139,3.423,140,4.398,141,4.161,142,3.849,143,4.316,144,3.047,145,4.316,146,4.316,147,3.329,148,3.072,149,4.316,150,4.316,151,4.316,152,4.316,153,4.316,154,3.906,155,3.842,156,1.479,157,1.386,158,2.518,159,1.765,160,2.264,161,0.698,162,2.676,163,1.431,164,2.383,165,2.676,166,2.676,167,3.349,168,2.676,169,2.676,170,2.676,171,2.676,172,2.676,173,3.332,174,2.676,175,1.431,176,2.383,177,3.019,178,1.978,179,4.061,180,2.383,181,2.518,182,2.518,183,2.676,184,2.518,185,1.978,186,2.518,187,2.518,188,2.518,189,2.797,190,3.522,191,2.159,192,2.383,193,2.518,194,2.518,195,2.518,196,1.899,197,2.676,198,2.676,199,2.676,200,2.676,201,3.332,202,2.676,203,2.676]],["title/classes/AddLightCardFailure.html",[0,0.214,204,2.042]],["body/classes/AddLightCardFailure.html",[0,0.395,2,0.729,3,0.119,4,0.107,5,0.095,8,1.517,12,1.17,32,0.535,33,1.494,34,0.303,35,0.755,36,0.976,37,2.191,38,1.658,39,0.437,40,1.653,42,0.411,44,0.566,45,0.012,46,0.493,47,0.529,49,0.847,50,0.729,51,0.231,52,0.775,55,0.232,56,1.01,72,1.32,73,2.287,87,2.029,88,2.029,89,1.971,133,0.005,134,0.007,135,0.005,156,1.546,157,1.449,161,0.729,175,1.496,204,3.381,205,3.675,206,2.158,207,2.702,208,5.634,209,4.084,210,3.437,211,2.28,212,2.257,213,3.266,214,4.481,215,2.814,216,3.016,217,2.853,218,2.367,219,3.266,220,2.36,221,3.136,222,2.068,223,1.28,224,2.257,225,1.986,226,2.218,227,1.711,228,1.711,229,2.088,230,1.986,231,1.986,232,1.598,233,1.653,234,1.773,235,2.491,236,2.491,237,2.257,238,2.491,239,2.491,240,2.491,241,2.491,242,2.491,243,2.257,244,2.491,245,2.491,246,2.491]],["title/components/AppComponent.html",[247,1.101,248,1.699]],["body/components/AppComponent.html",[0,0.194,3,0.11,4,0.14,5,0.124,8,1.178,12,1.931,17,1.888,32,0.453,33,1.017,34,0.282,35,0.718,36,0.658,39,0.295,42,0.47,44,0.527,45,0.011,46,0.749,47,0.492,49,0.789,50,0.679,51,0.327,52,0.721,55,0.11,58,2.506,59,2.413,60,3.035,62,1.539,75,0.619,80,1.925,82,1.712,85,3.152,95,1.156,100,1.925,102,1.192,107,1.192,112,1.934,133,0.005,134,0.007,135,0.005,144,1.902,159,1.229,161,0.957,173,3.786,185,1.925,222,1.925,223,1.192,247,1.628,248,2.728,249,2.413,250,1.712,251,1.778,252,1.778,253,3.331,254,3.144,255,1.778,256,3.886,257,4.259,258,3.672,259,6.207,260,2.506,261,5.359,262,4.933,263,6.207,264,6.207,265,1.582,266,3.414,267,1.925,268,4.253,269,4.345,270,5.359,271,3.801,272,3.933,273,4.259,274,4.259,275,5.359,276,3.018,277,4.696,278,5.359,279,5.359,280,6.207,281,1.058,282,1.539,283,3.801,284,3.801,285,4.696,286,3.801,287,0.789,288,1.439,289,1.593,290,2.204,291,1.539,292,1.848,293,2.605,294,3.021,295,3.331,296,3.021,297,3.801,298,2.101,299,2.101,300,3.021,301,3.021,302,1.393,303,1.307,304,3.801,305,3.801,306,3.801,307,3.801,308,3.801,309,3.801,310,3.801,311,3.801,312,3.801,313,3.021,314,3.801,315,3.801,316,3.801,317,3.801,318,3.801,319,3.021,320,3.801,321,2.319,322,1.712,323,1.65,324,1.712,325,1.712,326,1.712,327,1.712,328,1.712,329,1.712,330,1.712,331,1.712,332,1.712,333,1.65,334,1.712,335,1.65,336,1.712,337,1.712,338,1.712,339,1.712,340,3.021,341,3.021,342,3.331,343,1.393,344,2.506,345,2.506,346,1.778,347,3.152,348,1.778,349,1.778,350,1.487,351,1.778,352,1.539,353,1.778,354,1.487,355,2.506,356,1.539,357,1.778,358,1.487,359,1.778,360,1.539,361,1.487,362,1.778,363,1.539,364,1.778,365,1.778,366,1.778,367,1.539,368,1.778,369,1.539,370,1.307,371,1.712,372,1.778,373,1.778]],["title/modules/AppModule.html",[374,1.759,375,2.877]],["body/modules/AppModule.html",[0,0.231,3,0.131,4,0.158,5,0.14,36,0.783,45,0.011,51,0.351,55,0.131,69,1.83,95,2.365,102,1.418,107,2.437,133,0.006,134,0.008,135,0.006,223,1.418,248,3.39,273,3.594,287,0.938,298,2.5,299,2.5,322,2.036,323,1.963,324,2.036,325,2.036,326,2.036,327,2.036,328,2.036,329,2.036,330,2.036,331,2.036,332,2.036,333,1.963,334,2.036,335,1.963,336,2.036,337,2.036,338,2.036,339,2.036,343,1.657,363,3.146,374,1.895,375,5.908,376,2.199,377,2.5,378,4.146,379,4.204,380,3.683,381,2.39,382,3.963,383,3.963,384,3.963,385,3.963,386,5.327,387,5.178,388,5.178,389,3.5,390,2.622,391,4.522,392,3.337,393,6.038,394,4.798,395,3.099,396,3.337,397,6.038,398,4.522,399,6.038,400,2.5,401,3.892,402,6.038,403,6.038,404,2.622,405,5.29,406,6.038,407,3.319,408,4.522,409,6.038,410,3.319,411,3.963,412,4.522,413,3.319,414,4.522,415,4.522,416,3.963,417,4.522,418,3.963,419,3.594,420,4.522,421,4.522,422,4.522,423,4.522,424,3.099,425,3.594]],["title/modules/AppRoutingModule.html",[374,1.759,386,2.877]],["body/modules/AppRoutingModule.html",[0,0.265,3,0.15,4,0.172,5,0.153,36,0.898,45,0.012,51,0.324,55,0.192,95,2.209,99,2.25,102,1.625,109,2.74,133,0.007,134,0.009,135,0.007,223,1.625,247,1.731,287,1.076,322,2.334,323,2.25,324,2.334,325,2.334,326,2.334,327,2.334,328,2.334,329,2.334,330,2.334,331,2.334,332,2.334,333,2.25,334,2.334,335,2.25,336,2.334,337,2.334,338,2.334,339,2.334,376,2.521,381,2.74,386,4.522,392,2.865,396,3.648,416,4.542,426,5.184,427,4.119,428,6.6,429,5.245,430,4.928,431,3.005,432,5.328,433,4.119,434,2.334,435,3.005,436,2.133,437,6.412,438,3.648,439,6.6,440,5.184,441,5.245,442,3.804,443,5.184,444,4.542,445,5.184,446,5.184,447,5.184,448,5.184,449,5.184,450,4.542,451,5.184,452,4.542,453,5.184,454,5.184,455,3.804,456,5.184]],["title/interfaces/AppState.html",[291,1.699,457,2.042]],["body/interfaces/AppState.html",[3,0.134,4,0.12,5,0.107,12,2.18,15,2.862,25,3.703,32,0.485,34,0.342,35,0.82,45,0.011,51,0.356,52,0.876,55,0.221,112,1.801,133,0.006,134,0.008,135,0.006,161,1.359,233,2.477,291,2.477,434,2.078,435,2.676,436,2.363,438,4.205,455,3.387,457,2.244,458,2.976,459,3.668,460,4.205,461,4.625,462,4.714,463,4.714,464,4.714,465,4.714,466,7.312,467,4.615,468,3.946,469,3.162,470,4.044,471,5.362,472,4.615,473,5.362,474,5.362,475,5.362,476,4.615,477,4.193,478,4.615,479,4.193,480,4.615,481,4.615,482,4.615,483,5.362,484,4.615,485,5.362,486,4.615,487,4.615,488,5.362,489,4.615,490,5.362,491,4.615,492,4.615,493,4.615,494,4.193,495,4.615,496,4.615,497,4.615,498,4.193,499,4.615,500,4.193,501,4.615,502,4.615,503,3.387,504,3.387,505,4.044,506,4.863,507,3.387,508,4.044,509,3.162,510,4.044]],["title/classes/ApplyFilter.html",[0,0.214,511,2.561]],["body/classes/ApplyFilter.html",[0,0.344,2,0.955,3,0.155,4,0.14,5,0.124,8,1.467,32,0.541,33,1.398,34,0.396,35,0.902,36,1.166,37,2.049,38,1.604,39,0.415,40,2.165,42,0.469,44,0.741,45,0.011,46,0.646,47,0.693,49,1.11,50,0.955,51,0.303,52,1.015,55,0.224,56,1.323,60,3.031,73,2.11,75,1.096,133,0.007,134,0.009,135,0.007,144,1.898,156,2.024,157,1.898,207,3.087,211,2.165,272,3.925,438,3.721,511,4.716,512,3.665,513,6.732,514,5.348,515,5.898,516,4.211,517,4.25,518,4.25,519,4.25,520,4.25,521,4.749,522,5.898,523,3.665,524,4.686,525,4.25]],["title/components/ArchivesComponent.html",[247,1.101,350,1.643]],["body/components/ArchivesComponent.html",[0,0.249,3,0.141,4,0.166,5,0.147,33,1.204,34,0.361,36,0.844,39,0.548,42,0.404,45,0.011,46,0.766,51,0.2,55,0.141,95,1.483,102,1.528,107,1.528,133,0.006,134,0.008,135,0.006,161,1.133,185,2.469,223,1.528,247,1.85,248,1.973,249,2.856,250,2.195,251,2.279,252,2.279,254,3.571,255,2.279,256,4.015,258,4.346,260,2.966,265,1.873,266,3.783,281,1.356,282,1.973,287,1.011,322,2.195,323,2.116,324,2.195,325,2.195,326,2.195,327,2.195,328,2.195,329,2.195,330,2.195,331,2.195,332,2.195,333,2.116,334,2.195,335,2.116,336,2.195,337,2.195,338,2.195,339,2.195,343,1.786,344,2.966,345,2.966,346,2.279,347,3.492,348,2.279,349,2.279,350,2.922,351,2.279,352,1.973,353,2.279,354,1.907,355,2.966,356,1.973,357,2.279,358,1.907,359,2.279,360,1.973,361,1.907,362,2.279,363,1.973,364,2.279,365,2.279,366,2.279,367,1.973,368,2.279,369,1.973,370,1.676,371,2.195,372,2.279,373,2.279,442,5.481,526,4.271,527,7.052,528,6.343,529,4.874,530,4.874,531,5.558]],["title/modules/ArchivesModule.html",[374,1.759,532,3.081]],["body/modules/ArchivesModule.html",[0,0.28,3,0.159,4,0.178,5,0.159,36,0.949,45,0.011,51,0.32,55,0.159,69,2.217,102,1.718,133,0.007,134,0.009,135,0.007,223,1.718,287,1.137,322,2.467,323,2.379,324,2.467,325,2.467,326,2.467,327,2.467,328,2.467,329,2.467,330,2.467,331,2.467,332,2.467,333,2.379,334,2.467,335,2.379,336,2.467,337,2.467,338,2.467,339,2.467,343,2.007,350,3.202,374,2.296,376,2.664,377,3.028,378,4.544,379,3.176,380,3.342,381,2.896,389,3.962,390,3.176,392,3.778,396,3.778,401,4.406,404,3.176,413,4.02,442,4.02,532,6.157,533,4.801,534,4.801,535,4.801,536,5.607,537,5.479,538,4.801]],["title/modules/ArchivesRoutingModule.html",[374,1.759,536,2.877]],["body/modules/ArchivesRoutingModule.html",[0,0.292,3,0.166,4,0.183,5,0.163,36,0.989,45,0.012,51,0.325,55,0.166,102,1.791,133,0.007,134,0.009,135,0.007,223,1.791,247,1.498,287,1.185,322,2.572,323,2.479,324,2.572,325,2.572,326,2.572,327,2.572,328,2.572,329,2.572,330,2.572,331,2.572,332,2.572,333,2.479,334,2.572,335,2.479,336,2.572,337,2.572,338,2.572,339,2.572,350,2.744,376,2.777,381,3.018,392,3.157,396,3.876,427,4.539,429,5.572,430,4.892,431,3.311,432,5.145,433,4.539,436,1.846,437,4.539,441,4.539,536,4.804,538,5.004,539,5.711,540,5.004]],["title/classes/AuthObject.html",[0,0.214,541,2.877]],["body/classes/AuthObject.html",[0,0.329,2,0.471,3,0.077,4,0.069,5,0.061,7,1.145,9,2.433,12,2.129,13,1.84,17,1.715,23,2.34,24,1.067,27,1.282,28,1.765,32,0.411,34,0.195,35,0.548,36,1.205,37,1.137,39,0.205,41,3.147,42,0.359,45,0.012,47,0.529,51,0.286,53,2.447,54,1.145,55,0.187,56,0.652,59,1.84,62,1.067,67,1.911,74,2.703,75,1.244,76,3.1,77,3.493,78,2.538,79,2.538,82,1.187,93,1.987,94,2.469,99,2.648,102,0.827,105,2.741,112,0.692,133,0.003,134,0.005,135,0.003,144,1.776,159,0.852,163,0.966,167,3.132,175,0.966,189,1.833,223,1.569,229,1.104,276,1.987,282,1.067,287,0.547,288,0.998,289,1.105,290,1.529,302,0.966,303,1.721,370,2.097,400,1.458,434,1.187,435,1.529,436,2.358,541,3.862,542,1.609,543,2.999,544,4.847,545,3.977,546,3.977,547,2.637,548,2.637,549,2.637,550,2.637,551,1.207,552,3.053,553,2.096,554,1.807,555,1.335,556,3.268,557,1.807,558,1.935,559,2.8,560,1.935,561,1.282,562,5.675,563,2.096,564,2.096,565,3.248,566,2.096,567,2.096,568,4.766,569,1.935,570,1.935,571,2.096,572,2.096,573,2.096,574,1.935,575,2.8,576,2.096,577,3.248,578,1.935,579,2.224,580,1.807,581,2.096,582,3.248,583,2.096,584,3.439,585,2.096,586,2.096,587,2.096,588,2.096,589,2.096,590,2.096,591,2.096,592,3.248,593,2.635,594,1.935,595,2.096,596,2.096,597,2.096,598,1.529,599,2.096,600,2.096,601,2.096,602,2.096,603,1.935,604,2.096,605,2.096,606,2.096,607,2.635,608,2.096,609,2.096,610,2.096,611,2.096,612,2.096,613,2.096,614,2.096,615,2.096,616,2.096,617,2.096,618,3.248,619,2.096,620,2.096,621,2.096,622,2.096,623,2.096,624,2.096,625,2.096,626,3.248,627,2.096,628,2.096,629,2.096,630,1.807,631,1.807,632,2.999,633,4.847,634,2.096,635,3.248,636,2.34,637,3.862,638,3.429,639,2.096,640,2.096,641,1.935,642,2.096,643,3.248,644,2.096,645,3.248,646,2.096,647,3.248,648,2.096,649,3.248,650,2.096,651,2.096,652,2.096,653,1.935,654,2.096,655,2.096,656,2.096,657,2.096,658,2.8,659,2.096,660,2.096,661,2.096,662,2.096,663,2.096,664,2.096,665,2.096,666,2.096,667,2.096,668,2.096,669,2.096,670,2.096,671,2.096,672,2.096,673,2.096,674,2.096,675,2.096,676,3.672,677,3.248,678,2.096,679,2.999,680,2.096,681,2.096,682,2.096,683,2.096,684,2.096,685,2.096,686,2.096,687,2.096,688,1.935,689,2.096,690,2.096,691,2.096,692,2.096,693,2.096,694,3.672,695,2.096,696,2.096,697,1.7,698,2.096,699,2.096,700,2.096,701,1.935,702,1.935,703,2.999,704,2.999,705,2.369,706,1.807,707,1.807,708,1.935,709,1.935]],["title/interfaces/AuthState.html",[457,2.042,462,2.707]],["body/interfaces/AuthState.html",[3,0.165,4,0.149,5,0.132,28,1.495,32,0.517,34,0.422,35,0.938,45,0.011,51,0.234,53,3.524,54,2.474,55,0.203,74,3.401,75,1.387,76,3.524,77,3.524,78,3.655,79,3.414,122,4.29,133,0.007,134,0.009,135,0.007,436,1.842,457,2.771,458,3.674,462,4.887,710,4.529,711,4.529,712,5.098,713,4.994]],["title/injectables/AuthenticationEffects.html",[15,1.963,551,1.24]],["body/injectables/AuthenticationEffects.html",[0,0.108,1,2.555,3,0.061,4,0.055,5,0.049,7,1.485,8,1.498,11,2.157,12,2.262,13,2.892,14,1.891,15,1.599,17,2.46,19,2.776,20,2.626,22,2.746,23,2.323,28,1.79,32,0.489,34,0.156,35,0.458,37,1.787,39,0.266,42,0.409,44,0.598,45,0.012,46,0.776,47,0.559,49,1.134,50,0.976,51,0.273,52,0.4,55,0.061,57,1.067,59,1.54,60,1.54,62,2.972,63,1.732,64,1.808,65,2.019,68,2.776,70,3.384,71,2.019,75,0.703,77,1.874,79,2.237,80,1.732,82,1.944,85,2.736,87,0.952,88,0.952,89,0.924,90,1.891,94,2.599,97,2.237,99,3.09,100,1.732,101,3.093,103,1.891,106,1.732,110,1.891,112,1.741,116,2.746,119,1.732,121,1.891,124,2.626,126,2.746,128,3.02,129,1.891,132,3.931,133,0.006,134,0.004,135,0.003,159,0.681,178,3.122,229,0.924,265,1.01,267,1.067,274,3.949,281,0.952,287,0.437,288,0.797,289,0.883,290,1.221,291,0.853,292,1.025,302,0.772,303,1.484,321,2.086,341,2.718,431,1.221,436,1.395,461,4.126,551,1.01,555,1.067,561,3.123,568,3.404,574,2.51,575,2.343,578,2.51,579,2.151,584,2.086,632,2.51,637,2.343,653,3.646,697,3.773,714,1.025,715,1.846,716,3.42,717,4.969,718,2.107,719,3.42,720,3.42,721,2.997,722,3.42,723,3.42,724,4.969,725,3.42,726,3.42,727,2.107,728,3.42,729,2.107,730,3.42,731,4.354,732,3.42,733,4.969,734,3.42,735,3.333,736,5.117,737,2.107,738,6.423,739,5.852,740,3.42,741,5.852,742,3.42,743,3.42,744,3.42,745,3.404,746,3.031,747,3.42,748,2.503,749,3.42,750,3.42,751,3.42,752,3.42,753,3.42,754,3.42,755,2.718,756,3.646,757,2.718,758,5.463,759,3.42,760,2.107,761,3.42,762,3.42,763,2.997,764,3.42,765,4.969,766,3.42,767,2.718,768,3.42,769,3.42,770,2.386,771,5.463,772,3.42,773,2.107,774,2.997,775,3.42,776,3.42,777,3.42,778,3.42,779,3.42,780,3.42,781,3.42,782,2.718,783,3.42,784,2.997,785,3.42,786,4.969,787,4.969,788,2.107,789,3.42,790,3.42,791,3.42,792,3.42,793,3.42,794,3.42,795,3.42,796,2.107,797,3.42,798,2.997,799,1.358,800,1.221,801,2.107,802,5.463,803,2.107,804,2.107,805,2.107,806,2.107]],["title/injectables/AuthenticationService.html",[551,1.24,561,2.042]],["body/injectables/AuthenticationService.html",[0,0.277,3,0.06,4,0.054,5,0.048,7,1.47,9,1.646,12,2.192,13,2.221,17,1.866,20,1.789,23,2.538,24,0.842,27,1.646,28,1.609,32,0.407,34,0.154,35,0.454,36,1.379,37,1.372,39,0.263,41,3.316,42,0.466,44,0.806,45,0.012,46,0.703,47,0.753,49,0.702,50,0.605,51,0.263,53,1.858,54,0.903,55,0.169,56,0.515,59,1.928,62,1.37,67,0.973,74,2.274,75,1.265,76,2.869,77,3.567,78,2.221,79,2.878,82,1.525,93,2.398,94,2.355,99,2.357,102,0.652,105,2.829,112,0.888,133,0.003,134,0.004,135,0.003,144,1.926,159,0.673,163,1.241,167,2.762,175,0.762,189,1.989,223,1.702,229,1.466,265,1,276,2.398,281,1.935,282,1.733,287,0.432,288,0.788,289,0.872,290,1.206,302,0.762,303,2.273,370,1.866,400,1.15,434,0.937,435,1.206,436,2.196,541,3.987,542,1.269,543,1.527,544,4.624,545,1.654,546,1.654,551,1,552,3.549,553,1.654,554,1.426,555,1.054,556,3.706,557,1.426,558,1.527,559,2.32,560,1.527,561,1.646,562,6.024,563,3.402,564,2.691,565,3.92,566,3.402,567,2.691,568,4.38,569,2.485,570,2.485,571,2.691,572,1.654,573,2.691,574,2.485,575,2.933,576,2.691,577,3.402,578,2.485,579,2.128,580,2.32,581,2.691,582,3.92,583,2.691,584,3.741,585,2.691,586,1.654,587,1.654,588,1.654,589,1.654,590,1.654,591,1.654,592,2.691,593,2.76,594,2.485,595,2.691,596,2.691,597,2.691,598,1.206,599,1.654,600,1.654,601,1.654,602,1.654,603,1.527,604,1.654,605,1.654,606,1.654,607,2.183,608,1.654,609,1.654,610,1.654,611,1.654,612,1.654,613,1.654,614,1.654,615,1.654,616,1.654,617,1.654,618,2.691,619,1.654,620,1.654,621,1.654,622,1.654,623,1.654,624,1.654,625,1.654,626,2.691,627,1.654,628,1.654,629,2.691,630,1.426,631,1.426,632,3.619,633,5.4,634,3.92,635,2.691,636,2.538,637,4.38,638,3.719,639,2.691,640,2.691,641,2.485,642,3.92,643,4.314,644,1.654,645,2.691,646,1.654,647,2.691,648,1.654,649,2.691,650,2.691,651,3.92,652,1.654,653,2.485,654,3.92,655,1.654,656,2.691,657,2.691,658,3.38,659,2.691,660,1.654,661,1.654,662,1.654,663,1.654,664,1.654,665,1.654,666,1.654,667,1.654,668,2.691,669,2.691,670,3.92,671,1.654,672,1.654,673,1.654,674,1.654,675,1.654,676,3.983,677,3.92,678,2.691,679,2.485,680,1.654,681,1.654,682,1.654,683,1.654,684,1.654,685,2.691,686,2.691,687,2.691,688,2.485,689,2.691,690,3.92,691,2.691,692,1.654,693,1.654,694,3.141,695,1.654,696,1.654,697,1.342,698,1.654,699,1.654,700,1.654,701,1.527,702,1.527,703,2.485,704,2.485,705,1.963,706,1.426,707,1.426,708,1.527,709,1.527,714,1.012,807,3.386,808,3.386,809,3.386,810,1.654,811,3.386,812,2.081,813,2.081,814,2.081,815,2.081,816,2.081,817,2.081,818,2.081,819,2.081,820,2.081,821,2.081,822,2.081,823,2.081]],["title/classes/Card.html",[0,0.214,161,0.75]],["body/classes/Card.html",[0,0.362,2,0.677,3,0.11,4,0.099,5,0.088,8,0.719,32,0.395,38,1.827,39,0.572,42,0.241,44,0.525,45,0.012,46,0.646,47,0.491,50,0.955,51,0.255,55,0.224,56,1.533,75,1.408,97,1.707,133,0.005,134,0.007,135,0.005,138,2.312,140,3.448,141,3.593,142,3.918,143,2.597,144,2.79,145,2.597,146,2.597,147,2.003,148,2.408,149,2.597,150,2.597,151,2.597,152,2.597,153,2.597,155,4.618,156,1.435,157,1.345,158,2.444,159,2.176,160,2.197,161,0.955,162,3.665,163,2.271,164,3.781,165,4.246,166,4.246,167,3.718,168,4.246,169,4.246,170,4.246,171,4.246,172,4.246,173,4.107,174,4.246,175,2.271,176,3.781,177,3.721,178,3.139,179,3.995,180,2.312,181,2.444,182,2.444,183,2.597,184,2.444,185,1.92,186,2.444,187,2.444,188,2.444,189,2.774,190,3.448,191,2.095,192,2.312,193,2.444,194,2.444,195,2.444,196,1.843,197,2.597,198,2.597,199,2.597,200,2.597,201,3.263,202,2.597,203,2.597,824,3.791,825,3.791,826,6.016]],["title/components/CardComponent.html",[247,1.101,352,1.699]],["body/components/CardComponent.html",[0,0.186,3,0.106,4,0.136,5,0.121,32,0.446,33,0.987,34,0.27,35,0.697,36,1.26,39,0.283,42,0.488,44,0.505,45,0.012,46,0.733,47,0.472,49,0.757,50,0.651,51,0.314,52,0.692,55,0.106,75,0.988,95,1.109,102,1.143,107,1.143,112,1.964,133,0.005,134,0.007,135,0.005,144,1.847,147,2.75,148,2.732,156,1.38,157,1.294,161,1.391,173,2.225,185,1.847,189,1.907,191,2.876,211,2.944,222,3.351,223,1.143,225,1.773,247,1.591,248,1.476,249,2.343,250,1.642,251,1.705,252,1.705,254,3.073,255,1.705,256,3.862,258,3.566,260,2.433,262,4.822,265,1.536,266,3.351,269,2.351,281,1.448,282,2.106,287,0.757,291,1.476,292,1.773,293,2.499,298,2.016,299,2.016,302,1.336,303,2.405,313,2.898,322,1.642,323,1.583,324,1.642,325,1.642,326,1.642,327,1.642,328,1.642,329,1.642,330,1.642,331,1.642,332,1.642,333,1.583,334,1.642,335,1.583,336,1.642,337,1.642,338,1.642,339,1.642,340,2.898,343,1.336,344,2.433,345,2.433,346,1.705,347,3.094,348,1.705,349,1.705,350,1.427,351,1.705,352,2.678,353,1.705,354,1.427,355,2.433,356,1.476,357,1.705,358,1.427,359,1.705,360,1.476,361,1.427,362,1.705,363,1.476,364,1.705,365,1.705,366,1.705,367,1.476,368,1.705,369,1.476,370,1.254,371,1.642,372,1.705,373,1.705,431,2.114,461,4.217,579,1.015,827,3.196,828,6.067,829,5.204,830,5.316,831,6.067,832,3.819,833,5.316,834,3.647,835,4.452,836,3.094,837,5.204,838,3.647,839,3.647,840,3.647,841,3.647,842,3.647,843,3.196,844,3.647,845,3.647,846,2.676,847,3.647,848,4.56,849,3.647,850,3.196,851,3.196,852,3.196,853,5.204,854,3.647,855,3.647,856,5.204,857,2.898,858,3.196,859,5.204,860,3.647,861,3.647,862,3.647,863,5.797,864,3.647,865,5.316,866,3.647,867,5.316,868,3.647,869,3.647,870,3.647,871,3.647,872,3.647,873,3.647,874,3.647,875,3.647,876,3.647]],["title/classes/CardDetail.html",[0,0.214,177,2.321]],["body/classes/CardDetail.html",[0,0.372,2,0.727,3,0.118,4,0.106,5,0.095,8,0.773,32,0.41,38,1.834,39,0.585,42,0.259,44,0.564,45,0.012,46,0.679,47,0.527,50,1.004,51,0.264,55,0.228,56,1.593,75,1.4,97,1.833,133,0.005,134,0.007,135,0.005,138,2.484,140,3.624,141,3.733,142,3.884,143,2.79,144,2.835,145,2.79,146,2.79,147,2.152,148,2.532,149,2.79,150,2.79,151,2.79,152,2.79,153,2.79,155,3.928,156,1.541,157,1.445,158,2.625,159,1.817,160,2.36,161,0.727,162,2.79,163,1.492,164,2.484,165,2.79,166,2.79,167,3.393,168,2.79,169,2.79,170,2.79,171,2.79,172,2.79,173,4.236,174,2.79,175,1.492,176,2.484,177,3.559,178,2.062,179,4.858,180,2.484,181,2.625,182,2.625,183,4.412,184,4.151,185,3.261,186,2.625,187,2.625,188,2.625,189,2.83,190,3.624,191,2.25,192,2.484,193,2.625,194,2.625,195,2.625,196,1.98,197,2.79,198,2.79,199,2.79,200,2.79,201,3.43,202,2.79,203,2.79,877,4.071,878,4.071]],["title/components/CardDetailsComponent.html",[247,1.101,354,1.643]],["body/components/CardDetailsComponent.html",[0,0.237,3,0.135,4,0.121,5,0.108,32,0.439,33,1.167,34,0.344,35,0.824,39,0.361,42,0.467,44,0.644,45,0.011,46,0.832,47,0.602,51,0.322,52,0.882,55,0.135,95,1.414,107,1.457,112,2.055,133,0.006,134,0.008,135,0.006,161,1.492,176,4.652,177,3.398,247,1.807,248,1.881,249,2.768,250,2.093,251,2.173,252,2.173,254,3.489,255,2.173,256,3.992,260,2.875,265,1.815,266,3.713,267,2.354,281,1.293,282,1.881,287,0.964,289,1.947,291,1.881,292,2.26,302,1.703,343,1.703,344,2.875,345,2.875,346,2.173,347,3.428,348,2.173,349,2.173,350,1.818,351,2.173,352,1.881,353,2.173,354,2.869,355,2.875,356,1.881,357,2.173,358,1.818,359,2.173,360,1.881,361,1.818,362,2.173,363,1.881,364,2.173,365,2.173,366,2.173,367,1.881,368,2.173,369,1.881,370,1.598,371,2.093,372,2.173,373,2.173,770,2.569,879,6.681,880,5.595,881,4.072,882,5.387,883,6.148,884,4.647,885,4.647,886,2.26,887,4.647,888,4.647,889,4.072,890,4.647,891,4.647,892,4.647,893,4.647,894,4.647]],["title/injectables/CardEffects.html",[477,2.877,551,1.24]],["body/injectables/CardEffects.html",[0,0.25,3,0.142,4,0.128,5,0.114,8,0.928,17,2.149,28,1.668,32,0.405,34,0.362,35,0.852,39,0.38,42,0.405,44,0.678,45,0.012,46,0.591,47,0.633,49,1.015,50,0.874,51,0.341,52,0.928,55,0.142,87,1.361,88,1.361,89,1.321,94,2.859,112,2.084,133,0.006,134,0.008,135,0.006,159,1.581,161,1.385,178,4.097,267,2.478,287,1.015,288,1.852,289,2.05,291,1.98,292,2.379,302,1.792,303,2.186,321,3.879,477,4.357,551,1.877,555,2.478,579,2.081,705,2.836,714,2.379,735,2.984,736,4.554,745,4.357,746,3.879,748,2.836,755,5.053,756,5.488,799,3.154,800,2.836,886,2.379,895,4.286,896,6.19,897,4.134,898,4.892,899,6.358,900,5.053,901,6.358,902,6.358,903,6.358,904,6.358,905,4.892,906,3.59,907,2.984,908,2.288,909,2.585,910,2.585,911,3.59,912,4.286,913,4.286,914,4.286]],["title/interfaces/CardFeedState.html",[457,2.042,464,2.707]],["body/interfaces/CardFeedState.html",[3,0.133,4,0.119,5,0.106,7,1.987,11,3.386,24,1.852,28,1.2,32,0.483,34,0.339,35,0.815,45,0.012,51,0.281,55,0.212,75,1.27,133,0.006,134,0.008,135,0.006,144,2.426,156,1.732,157,1.624,159,2.355,161,1.087,163,2.23,189,1.677,211,3.272,229,2.211,319,4.836,436,1.967,438,4.312,457,2.225,458,2.95,464,4.408,516,3.613,517,3.637,518,3.637,579,1.273,712,2.95,767,4.836,915,3.358,916,6.085,917,7.586,918,6.975,919,4.836,920,6.975,921,7.287,922,3.923,923,6.085,924,6.085,925,4.615,926,6.085,927,6.085,928,6.085,929,5.332,930,6.085,931,6.326,932,6.085,933,6.085,934,6.085,935,5.332,936,5.332,937,4.01,938,4.01,939,4.01,940,4.576,941,4.576,942,3.637,943,4.01,944,3.637,945,4.01]],["title/components/CardListComponent.html",[247,1.101,356,1.699]],["body/components/CardListComponent.html",[0,0.257,3,0.146,4,0.131,5,0.117,32,0.412,34,0.373,36,1.121,39,0.556,42,0.456,45,0.011,46,0.782,51,0.266,55,0.146,75,1.054,95,1.53,107,1.577,133,0.007,134,0.008,135,0.007,147,3.421,148,3.223,156,1.904,157,1.785,161,1.43,192,3.949,211,2.897,237,3.957,247,1.878,248,2.035,249,2.915,250,2.265,251,2.352,252,2.352,255,2.352,256,4.029,260,3.027,287,1.043,343,1.843,344,3.027,345,3.027,346,2.352,347,3.534,348,2.352,349,2.352,350,1.968,351,2.352,352,2.035,353,2.352,354,1.968,355,3.027,356,3.059,357,2.352,358,1.968,359,2.352,360,2.035,361,1.968,362,2.352,363,2.035,364,2.352,365,2.352,366,2.352,367,2.035,368,2.352,369,2.035,370,1.729,371,2.265,372,2.352,373,2.352,946,6.622,947,6.006,948,4.406,949,6.473,950,5.688,951,6.473,952,5.029]],["title/injectables/CardOperationEffects.html",[479,2.877,551,1.24]],["body/injectables/CardOperationEffects.html",[0,0.218,3,0.124,4,0.111,5,0.099,8,1.101,12,1.663,17,2.007,28,2.005,32,0.451,34,0.316,35,0.778,39,0.331,42,0.37,44,0.591,45,0.012,46,0.515,47,0.552,49,1.369,50,0.762,51,0.331,52,0.809,55,0.124,57,2.16,62,2.349,87,1.186,88,1.186,89,1.152,94,2.67,112,2.005,133,0.006,134,0.008,135,0.006,159,1.378,161,1.037,178,3.96,204,3.208,216,1.994,224,3.208,226,1.466,229,2.064,243,2.357,267,2.16,287,0.885,288,1.614,289,1.787,290,2.472,291,1.726,292,2.074,302,1.563,303,1.995,321,4.32,436,1.876,479,3.976,551,1.713,555,2.16,579,2.214,714,2.074,735,2.602,736,4.253,745,3.976,746,4.32,748,3.824,756,5.608,763,5.085,799,2.749,800,2.472,897,3.914,906,3.129,953,5.78,954,3.737,955,6.597,956,4.265,957,5.803,958,5.803,959,5.803,960,5.803,961,5.803,962,7.081,963,5.803,964,7.081,965,5.803,966,5.803,967,5.803,968,5.803,969,5.803,970,5.803,971,5.803,972,4.265,973,3.389,974,3.389]],["title/injectables/CardService.html",[551,1.24,897,2.321]],["body/injectables/CardService.html",[0,0.211,3,0.12,4,0.148,5,0.096,17,2.36,28,1.492,32,0.467,34,0.307,35,0.762,38,1.571,39,0.321,42,0.494,44,0.9,45,0.012,46,0.784,47,0.841,51,0.329,55,0.12,67,1.936,75,1.263,76,1.797,79,1.864,119,2.88,133,0.005,134,0.007,135,0.005,161,0.739,163,1.517,167,1.864,229,1.536,265,1.679,281,1.946,287,0.859,288,1.567,302,1.517,303,2.405,400,2.289,410,3.038,434,1.864,435,2.4,436,1.338,551,1.679,552,4.266,556,4.497,557,2.837,561,3.683,579,2.198,607,3.667,714,2.013,810,3.29,886,2.013,897,3.144,908,2.659,975,3.628,976,6.496,977,6.496,978,5.687,979,6.994,980,6.994,981,5.687,982,5.687,983,7.331,984,4.14,985,5.687,986,4.14,987,4.14,988,5.687,989,5.687,990,4.14,991,4.14,992,3.628,993,4.14,994,4.14,995,3.29,996,3.29,997,4.14,998,4.14,999,4.14,1000,4.14,1001,4.14,1002,4.14,1003,4.14,1004,4.14,1005,4.14,1006,4.14,1007,4.14,1008,4.14,1009,4.14,1010,4.14,1011,4.14,1012,4.14,1013,4.14,1014,4.14,1015,4.14,1016,4.14,1017,4.14,1018,4.14,1019,4.14,1020,4.14,1021,4.14,1022,4.14,1023,4.14,1024,4.14,1025,4.14,1026,3.628,1027,4.14,1028,4.14,1029,3.038,1030,4.14]],["title/interfaces/CardState.html",[457,2.042,463,2.707]],["body/interfaces/CardState.html",[3,0.175,4,0.157,5,0.14,32,0.494,34,0.446,35,0.97,45,0.011,51,0.247,55,0.21,75,1.264,133,0.008,134,0.009,135,0.008,144,2.755,161,1.439,189,2.205,229,2.226,436,1.945,457,2.926,458,3.879,463,5.005,712,4.666,886,2.926,919,6.549,925,4.777,1031,4.782,1032,4.782]],["title/modules/CardsModule.html",[374,1.759,1033,2.877]],["body/modules/CardsModule.html",[0,0.227,3,0.129,4,0.156,5,0.139,36,0.772,42,0.284,45,0.012,51,0.334,55,0.129,69,1.803,102,1.397,133,0.006,134,0.008,135,0.006,189,1.632,196,2.907,223,1.397,265,1.315,281,1.239,287,0.924,298,2.463,299,2.463,322,2.006,323,1.934,324,2.006,325,2.006,326,2.006,327,2.006,328,2.006,329,2.006,330,2.006,331,2.006,332,2.006,333,1.934,334,2.006,335,1.934,336,2.006,337,2.006,338,2.006,339,2.006,343,1.632,352,3.382,354,3.27,358,3.27,360,3.382,374,1.867,376,2.166,377,2.463,378,4.115,379,2.583,380,4.398,381,3.565,389,3.465,390,2.583,392,2.463,396,3.729,401,3.854,404,2.583,418,5.237,424,3.053,579,1.239,836,2.795,846,3.269,880,3.269,1033,5.899,1034,3.904,1035,3.904,1036,3.904,1037,3.904,1038,4.99,1039,4.455,1040,5.361,1041,4.455,1042,5.361,1043,4.455,1044,3.904,1045,3.904,1046,4.455,1047,4.455,1048,4.096,1049,4.75,1050,3.904,1051,4.455,1052,3.54,1053,3.904,1054,4.455,1055,4.455]],["title/classes/CheckAuthenticationStatus.html",[0,0.214,58,1.963]],["body/classes/CheckAuthenticationStatus.html",[0,0.376,1,2.613,2,0.564,3,0.092,4,0.082,5,0.144,6,1.6,7,1.372,8,1.552,9,3.654,10,1.67,11,2.684,12,2.357,13,3.116,14,3.651,15,1.477,16,3.089,17,2.105,18,3.24,19,2.974,20,2.477,21,1.832,22,1.746,23,2.891,24,2.262,25,2.831,26,3.24,27,2.718,28,1.466,29,2.717,30,3.089,31,2.717,32,0.506,33,1.396,34,0.234,35,0.628,36,0.968,37,1.555,38,1.559,39,0.245,41,2.192,42,0.201,45,0.012,49,0.656,50,0.564,51,0.193,52,0.599,53,2.426,54,1.372,55,0.222,56,0.782,57,1.6,58,2.891,59,1.423,60,1.423,61,3.089,62,3.095,63,3.504,64,3.268,65,2.613,66,1.746,67,2.192,68,2.784,69,2.262,70,3.088,71,2.613,72,1.021,73,1.939,74,1.324,75,1.075,76,1.372,77,1.372,78,1.423,79,1.423,80,2.374,81,2.717,82,2.111,83,2.717,84,2.717,85,2.192,86,2.717,87,1.555,88,1.555,89,1.51,90,2.591,91,1.832,92,1.832,93,1.536,94,1.279,95,0.961,96,1.746,97,2.517,98,2.717,99,2.426,100,2.374,101,1.67,102,0.991,103,1.746,104,1.746,105,1.536,106,3.132,107,0.991,108,1.832,109,1.67,110,1.746,111,2.717,112,1.23,113,1.832,114,1.832,115,3.584,116,1.746,117,1.832,118,2.717,119,1.6,120,1.832,121,2.591,122,1.67,123,1.832,124,1.67,125,1.832,126,1.746,127,1.832,128,2.591,129,2.591,130,1.832,131,1.832,132,1.67,133,0.004,134,0.006,135,0.004,1056,3.159]],["title/classes/CheckTokenResponse.html",[0,0.214,697,2.707]],["body/classes/CheckTokenResponse.html",[0,0.33,2,0.474,3,0.077,4,0.069,5,0.062,7,1.152,9,1.996,12,2.094,13,1.849,17,1.72,23,2.349,24,1.074,27,1.29,28,1.769,32,0.39,34,0.197,35,0.55,36,1.207,37,1.142,39,0.206,41,3.154,42,0.32,45,0.012,51,0.286,53,2.181,54,1.152,55,0.188,56,0.656,59,1.849,62,1.074,67,1.24,74,2.369,75,1.246,76,2.928,77,3.534,78,2.546,79,2.546,82,1.194,93,1.996,94,2.475,99,2.455,102,0.832,105,2.749,112,0.696,133,0.003,134,0.005,135,0.003,144,1.782,159,0.857,163,0.972,167,3.138,175,0.972,189,1.84,223,1.773,229,1.109,276,1.996,282,1.074,287,0.55,288,1.004,289,1.111,290,1.538,302,0.972,303,1.727,370,2.103,400,1.466,434,1.194,435,1.538,436,2.362,541,3.442,542,1.618,543,1.946,544,4.86,545,2.108,546,2.108,551,1.212,552,3.064,553,2.108,554,1.817,555,1.343,556,3.278,557,1.817,558,1.946,559,2.813,560,1.946,561,1.29,562,5.808,563,2.108,564,2.108,565,3.263,566,2.108,567,2.108,568,4.775,569,1.946,570,1.946,571,2.108,572,2.108,573,2.108,574,1.946,575,3.442,576,2.108,577,3.263,578,1.946,579,2.226,580,1.817,581,2.108,582,3.263,583,2.108,584,3.449,585,2.108,586,2.108,587,2.108,588,2.108,589,2.108,590,2.108,591,2.108,592,3.263,593,2.647,594,1.946,595,2.108,596,2.108,597,2.108,598,1.538,599,2.108,600,2.108,601,2.108,602,2.108,603,1.946,604,2.108,605,2.108,606,2.108,607,2.647,608,2.108,609,2.108,610,2.108,611,2.108,612,2.108,613,2.108,614,2.108,615,2.108,616,2.108,617,2.108,618,3.263,619,2.108,620,2.108,621,2.108,622,2.108,623,2.108,624,2.108,625,2.108,626,3.263,627,2.108,628,2.108,629,2.108,630,1.817,631,1.817,632,3.013,633,4.86,634,2.108,635,3.263,636,2.349,637,3.874,638,3.442,639,2.108,640,2.108,641,1.946,642,2.108,643,3.263,644,2.108,645,3.263,646,2.108,647,3.263,648,2.108,649,3.263,650,2.108,651,2.108,652,2.108,653,1.946,654,2.108,655,2.108,656,2.108,657,2.108,658,2.813,659,2.108,660,2.108,661,2.108,662,2.108,663,2.108,664,2.108,665,2.108,666,2.108,667,2.108,668,2.108,669,2.108,670,2.108,671,2.108,672,2.108,673,2.108,674,2.108,675,2.108,676,3.686,677,3.263,678,2.108,679,3.013,680,2.108,681,2.108,682,2.108,683,2.108,684,2.108,685,2.108,686,2.108,687,2.108,688,1.946,689,2.108,690,2.108,691,2.108,692,2.108,693,2.108,694,4.149,695,3.263,696,3.263,697,2.647,698,3.992,699,3.992,700,3.992,701,1.946,702,1.946,703,3.013,704,3.013,705,2.38,706,1.817,707,1.817,708,1.946,709,1.946,1057,2.652,1058,2.652,1059,2.652]],["title/injectables/CustomRouterEffects.html",[494,2.877,551,1.24]],["body/injectables/CustomRouterEffects.html",[0,0.25,3,0.142,4,0.128,5,0.114,8,0.93,17,2.151,28,1.963,32,0.406,34,0.524,35,0.853,39,0.381,42,0.406,44,0.679,45,0.011,46,0.592,47,0.635,49,1.017,50,0.875,51,0.344,52,0.93,55,0.142,87,1.363,88,1.363,89,1.324,94,2.862,112,2.123,133,0.006,134,0.008,135,0.006,178,4.099,221,2.383,267,2.482,287,1.017,288,1.855,289,2.053,291,1.984,292,2.383,302,1.796,303,2.189,436,2.057,468,3.16,494,4.362,516,2.59,551,1.879,579,2.082,714,2.383,731,5.578,735,2.99,736,4.558,748,2.841,799,3.16,800,2.841,897,4.137,900,5.059,906,3.596,908,2.292,911,3.596,973,3.895,974,3.895,1060,6.195,1061,4.294,1062,7.07,1063,4.901,1064,6.366,1065,6.366,1066,7.07,1067,6.366,1068,6.366,1069,6.366,1070,6.366,1071,7.484,1072,6.366,1073,4.901,1074,4.901]],["title/classes/CustomRouterStateSerializer.html",[0,0.214,1075,2.877]],["body/classes/CustomRouterStateSerializer.html",[0,0.312,2,0.823,3,0.134,4,0.16,5,0.107,11,2.978,13,2.753,28,1.209,32,0.389,33,1.16,34,0.341,38,1.423,39,0.358,42,0.389,44,1.012,45,0.012,46,0.738,47,0.792,51,0.251,55,0.199,75,0.75,85,2.155,87,1.282,88,1.282,89,1.245,112,1.604,133,0.006,134,0.008,135,0.006,175,1.688,196,2.24,232,2.392,265,1.805,276,3.553,281,1.909,303,2.359,370,1.584,431,2.671,436,2.362,461,2.671,468,2.97,469,4.7,509,3.157,579,1.701,580,3.157,593,2.97,598,4.922,658,3.157,1075,4.188,1076,3.381,1077,5.807,1078,6.113,1079,6.113,1080,5.356,1081,6.402,1082,4.607,1083,5.356,1084,6.043,1085,4.607,1086,5.356,1087,3.662,1088,5.807,1089,3.662,1090,2.811,1091,3.662,1092,4.037,1093,5.452,1094,4.037,1095,4.037,1096,4.858,1097,3.662,1098,3.381,1099,3.662,1100,4.037,1101,4.037,1102,4.037,1103,5.356,1104,4.037,1105,4.037,1106,4.037,1107,4.037,1108,4.037,1109,4.037,1110,4.037,1111,4.037,1112,4.037]],["title/components/DetailComponent.html",[247,1.101,358,1.643]],["body/components/DetailComponent.html",[0,0.182,3,0.103,4,0.093,5,0.083,8,1.41,32,0.441,33,0.971,34,0.264,35,0.685,36,1.037,39,0.276,42,0.501,44,0.709,45,0.012,46,0.79,47,0.662,49,0.739,50,0.636,51,0.285,55,0.103,75,0.975,95,1.083,100,2.591,107,1.116,133,0.005,134,0.007,135,0.005,147,2.703,148,2.696,161,1.358,163,1.304,177,3.309,189,1.874,225,1.731,247,1.57,248,1.441,249,2.303,250,1.603,251,2.392,252,1.665,254,3.032,255,1.665,256,3.848,260,2.392,265,1.51,266,3.314,281,1.82,282,2.805,287,0.739,302,1.304,303,2.481,323,2.221,343,1.304,344,2.799,345,3.06,346,1.665,347,3.06,348,1.665,349,1.665,350,1.393,351,1.665,352,1.441,353,1.665,354,1.393,355,2.392,356,1.441,357,1.665,358,2.56,359,1.665,360,1.441,361,1.393,362,1.665,363,1.441,364,1.665,365,1.665,366,1.665,367,1.441,368,1.665,369,1.441,370,1.224,371,1.603,372,1.665,373,1.665,394,2.829,395,2.439,436,1.935,523,4.102,579,0.99,832,3.753,835,4.393,836,3.06,846,2.613,857,5.508,886,1.731,995,2.829,1038,4.219,1050,3.12,1090,2.172,1113,3.12,1114,5.115,1115,5.986,1116,5.115,1117,5.986,1118,6.544,1119,5.986,1120,3.56,1121,6.544,1122,4.757,1123,5.986,1124,6.544,1125,5.115,1126,3.56,1127,3.56,1128,5.115,1129,5.986,1130,6.931,1131,3.56,1132,3.56,1133,3.56,1134,3.56,1135,5.986,1136,3.56,1137,3.56,1138,3.56,1139,3.56,1140,3.56,1141,5.115,1142,3.56,1143,3.12,1144,3.56,1145,3.56,1146,3.56,1147,3.56,1148,3.56,1149,3.56,1150,3.56,1151,3.56,1152,3.56,1153,3.56,1154,3.56,1155,3.56,1156,3.56,1157,3.56,1158,3.56,1159,5.115,1160,3.56,1161,3.56,1162,3.56,1163,3.56,1164,3.56,1165,3.56,1166,3.56,1167,3.56,1168,3.56,1169,3.12,1170,3.56,1171,3.56,1172,3.56,1173,3.56,1174,3.56]],["title/components/DetailsComponent.html",[247,1.101,360,1.699]],["body/components/DetailsComponent.html",[0,0.2,3,0.114,4,0.102,5,0.091,32,0.458,33,1.04,34,0.291,35,0.734,36,0.68,39,0.49,42,0.505,44,0.759,45,0.012,46,0.825,47,0.709,51,0.259,55,0.114,62,1.588,75,0.892,80,1.987,95,1.193,107,1.23,133,0.005,134,0.007,135,0.005,147,2.896,148,2.467,161,1.393,176,4.386,189,1.437,247,1.656,248,1.588,249,2.467,250,1.767,251,1.835,252,1.835,255,1.835,256,3.904,260,2.562,265,1.617,281,1.901,282,3.015,287,0.814,303,2.561,343,1.437,344,2.562,345,2.562,346,1.835,347,3.196,348,1.835,349,1.835,350,1.535,351,1.835,352,1.588,353,1.835,354,1.535,355,2.562,356,1.588,357,1.835,358,2.813,359,1.835,360,2.766,361,1.535,362,1.835,363,1.588,364,1.835,365,1.835,366,1.835,367,1.588,368,1.835,369,1.588,370,1.349,371,1.767,372,1.835,373,1.835,523,2.688,579,1.091,636,1.835,735,2.393,798,3.438,830,5.532,832,4.02,833,5.532,843,3.438,848,4.801,857,4.354,882,4.801,886,1.908,1090,2.393,1143,3.438,1175,3.438,1176,5.532,1177,6.314,1178,5.988,1179,5.479,1180,5.479,1181,6.834,1182,5.479,1183,3.923,1184,3.923,1185,5.479,1186,6.834,1187,3.923,1188,3.438,1189,5.479,1190,3.923,1191,3.923,1192,6.314,1193,5.479,1194,3.923,1195,3.923,1196,3.923,1197,3.923,1198,5.479,1199,3.923,1200,3.923,1201,3.923,1202,3.923,1203,5.479,1204,3.438,1205,5.479,1206,3.923,1207,3.923,1208,3.923,1209,3.923,1210,3.923,1211,5.479,1212,3.923,1213,3.923,1214,5.479]],["title/components/FeedComponent.html",[247,1.101,361,1.643]],["body/components/FeedComponent.html",[0,0.221,3,0.125,4,0.153,5,0.136,17,2.263,32,0.423,33,1.111,34,0.32,35,0.784,36,0.748,39,0.335,42,0.474,44,0.598,45,0.011,46,0.802,47,0.559,51,0.322,52,0.82,55,0.125,95,1.314,102,1.354,107,1.354,112,2.012,133,0.006,134,0.008,135,0.006,156,1.635,157,1.533,161,1.046,185,2.188,211,1.748,222,2.188,223,1.354,237,3.67,247,1.742,248,1.748,249,2.636,250,1.945,251,2.02,252,2.02,254,3.363,255,2.02,256,3.955,258,4.011,260,2.737,265,1.728,266,3.605,267,2.188,281,1.629,282,2.369,287,0.896,288,1.635,289,1.81,291,1.748,292,2.1,302,1.583,322,1.945,323,1.875,324,1.945,325,1.945,326,1.945,327,1.945,328,1.945,329,1.945,330,1.945,331,1.945,332,1.945,333,1.875,334,1.945,335,1.875,336,1.945,337,1.945,338,1.945,339,1.945,343,1.583,344,2.737,345,2.737,346,2.02,347,3.329,348,2.02,349,2.02,350,1.69,351,2.02,352,1.748,353,2.02,354,1.69,355,2.737,356,1.748,357,2.02,358,1.69,359,2.02,360,1.748,361,2.785,362,2.02,363,1.748,364,2.02,365,2.02,366,2.02,367,1.748,368,2.02,369,1.748,370,1.485,371,1.945,372,2.02,373,2.02,555,2.188,770,2.388,922,3.774,950,5.277,1176,5.818,1178,6.237,1215,3.785,1216,6.64,1217,5.854,1218,5.854,1219,4.319,1220,4.319,1221,4.319,1222,4.319,1223,4.319,1224,4.319,1225,4.319,1226,4.319,1227,3.433,1228,4.319,1229,4.319]],["title/modules/FeedModule.html",[374,1.759,1230,3.081]],["body/modules/FeedModule.html",[0,0.25,3,0.142,4,0.166,5,0.148,36,0.847,45,0.011,51,0.341,55,0.142,69,1.98,102,1.534,133,0.006,134,0.008,135,0.006,223,1.534,287,1.015,322,2.203,323,2.124,324,2.203,325,2.203,326,2.203,327,2.203,328,2.203,329,2.203,330,2.203,331,2.203,332,2.203,333,2.124,334,2.203,335,2.124,336,2.203,337,2.203,338,2.203,339,2.203,343,1.792,356,3.216,361,3.316,367,3.216,369,3.216,374,2.05,376,2.379,377,2.704,378,4.309,379,2.836,380,2.984,381,3.733,389,3.686,390,2.836,392,3.515,396,3.515,401,4.099,404,2.836,405,5.571,407,3.59,413,3.59,438,2.704,947,3.888,1033,5.444,1044,4.286,1230,6.343,1231,4.286,1232,4.286,1233,4.286,1234,4.286,1235,5.444,1236,4.892,1237,4.892,1238,4.286,1239,4.892,1240,3.888,1241,4.892,1242,4.892,1243,3.888,1244,4.892,1245,4.892]],["title/modules/FeedRoutingModule.html",[374,1.759,1235,2.877]],["body/modules/FeedRoutingModule.html",[0,0.265,3,0.15,4,0.172,5,0.153,36,0.898,45,0.012,51,0.331,55,0.15,102,1.625,133,0.007,134,0.009,135,0.007,223,1.625,247,2.005,287,1.076,322,2.334,323,2.25,324,2.334,325,2.334,326,2.334,327,2.334,328,2.334,329,2.334,330,2.334,331,2.334,332,2.334,333,2.25,334,2.334,335,2.25,336,2.334,337,2.334,338,2.334,339,2.334,354,2.841,358,2.582,361,2.582,376,2.521,381,2.74,392,2.865,396,3.648,427,4.119,429,5.245,430,4.681,431,3.005,432,4.843,433,4.119,436,1.675,437,6.412,441,4.119,444,4.542,540,4.542,880,3.804,922,4.255,1045,4.542,1235,4.522,1238,4.542,1246,5.184,1247,5.184,1248,5.184,1249,7.261,1250,5.184,1251,5.184,1252,5.184,1253,5.184]],["title/classes/Filter.html",[0,0.214,516,2.219]],["body/classes/Filter.html",[0,0.178,2,0.624,3,0.101,4,0.091,5,0.081,7,1.518,11,2.817,24,2.398,28,0.917,30,3.587,32,0.457,34,0.259,35,0.676,36,1.242,38,0.725,39,0.504,42,0.471,44,0.899,45,0.012,46,0.783,47,0.84,51,0.243,55,0.101,60,3.641,69,2.043,85,2.36,89,2.115,112,1.324,133,0.005,134,0.007,135,0.005,142,1.7,144,2.442,155,2.132,156,1.323,157,1.24,158,2.254,159,1.13,160,2.026,161,1.502,189,2.171,196,2.881,211,3.121,247,1.324,265,1.49,274,4.011,281,1.995,282,1.415,335,2.191,438,2.79,511,3.079,516,4.556,523,4.446,568,4.715,579,1.995,584,3.079,603,3.704,636,2.771,767,5.156,931,5.156,1091,4.011,1254,6.632,1255,3.063,1256,5.048,1257,5.048,1258,5.048,1259,5.048,1260,5.048,1261,7.568,1262,5.048,1263,5.048,1264,5.048,1265,4.423,1266,5.048,1267,5.048,1268,5.048,1269,5.048,1270,5.048,1271,5.048,1272,5.048,1273,5.048,1274,5.048,1275,6.488,1276,5.925,1277,3.496,1278,3.496,1279,3.496,1280,3.496,1281,3.496,1282,5.048,1283,3.496,1284,5.048,1285,6.488,1286,3.496,1287,6.488,1288,5.048,1289,5.048,1290,5.048,1291,5.048,1292,3.496,1293,5.048,1294,5.048,1295,3.496,1296,3.496,1297,3.496,1298,3.496,1299,3.496,1300,3.496,1301,3.496,1302,3.496,1303,3.496,1304,3.496,1305,3.496,1306,5.048]],["title/classes/GuidService.html",[0,0.214,556,2.434]],["body/classes/GuidService.html",[0,0.293,2,1.024,3,0.166,4,0.15,5,0.133,32,0.365,34,0.425,35,0.942,38,1.577,39,0.59,42,0.505,45,0.011,51,0.289,53,3.702,54,2.49,55,0.166,75,0.934,133,0.007,134,0.009,135,0.007,257,4.558,265,2.075,281,1.956,287,1.19,303,2.614,556,4.075,579,1.956,1307,5.026,1308,7.925,1309,7.602,1310,7.03,1311,5.735,1312,5.735,1313,7.03,1314,5.735,1315,7.03,1316,5.735,1317,5.735,1318,5.735]],["title/classes/HandleUnexpectedError.html",[0,0.214,226,1.444]],["body/classes/HandleUnexpectedError.html",[0,0.376,2,0.84,3,0.137,4,0.123,5,0.109,8,1.492,12,1.348,32,0.537,33,1.453,34,0.349,35,0.83,36,1.073,37,2.23,38,1.631,39,0.365,40,1.904,42,0.441,44,0.652,45,0.012,46,0.568,47,0.609,49,0.976,50,0.84,51,0.255,52,0.893,55,0.228,56,1.164,72,1.52,73,2.31,75,0.766,87,1.724,88,1.724,89,1.674,133,0.006,134,0.008,135,0.006,161,1.484,163,1.724,207,2.904,215,2.805,220,1.971,226,2.533,227,1.971,228,1.971,229,2.068,230,2.287,231,2.287,232,1.841,233,1.904,234,2.042,886,2.287,907,2.87,908,3.241,909,3.663,910,3.663,1319,2.87,1320,6.197,1321,4.704,1322,4.548,1323,3.452,1324,3.452,1325,3.452,1326,3.223]],["title/classes/HandleUnexpectedError-1.html",[0,0.179,226,1.204,1327,2.569]],["body/classes/HandleUnexpectedError-1.html",[0,0.395,2,0.729,3,0.119,4,0.107,5,0.095,8,1.517,12,1.17,32,0.535,33,1.494,34,0.303,35,0.755,36,0.976,37,2.191,38,1.658,39,0.437,40,1.653,42,0.411,44,0.566,45,0.012,46,0.493,47,0.529,49,0.847,50,0.729,51,0.231,52,0.775,55,0.232,56,1.01,72,1.32,73,2.287,87,2.029,88,2.029,89,1.971,133,0.005,134,0.007,135,0.005,156,1.546,157,1.449,161,0.729,175,1.496,204,3.136,205,3.675,206,2.158,207,2.702,210,2.491,211,2.28,212,2.257,213,3.266,214,4.481,215,2.814,216,3.016,217,2.853,218,2.367,219,3.266,220,2.36,221,3.136,222,2.068,223,1.28,224,2.257,225,1.986,226,2.391,227,1.711,228,1.711,229,2.088,230,1.986,231,1.986,232,1.598,233,1.653,234,1.773,235,2.491,236,2.491,237,2.257,238,2.491,239,2.491,240,2.491,241,2.491,242,3.437,243,2.257,244,2.491,245,2.491,246,2.491,1328,5.634,1329,4.084]],["title/classes/HandleUnexpectedError-2.html",[0,0.179,226,1.204,452,3.067]],["body/classes/HandleUnexpectedError-2.html",[0,0.381,2,0.867,3,0.141,4,0.127,5,0.113,8,1.505,32,0.539,33,1.468,34,0.36,35,0.848,36,1.096,37,2.206,38,1.645,39,0.491,40,1.966,42,0.448,44,0.673,45,0.012,46,0.586,47,0.629,49,1.008,50,0.867,51,0.26,52,0.922,55,0.23,56,1.202,72,1.57,73,2.207,133,0.006,134,0.008,135,0.006,207,2.949,215,2.849,220,2.035,226,2.564,227,2.035,228,2.035,229,2.089,232,1.9,233,1.966,234,2.108,460,4.527,1330,2.963,1331,6.328,1332,4.857,1333,4.644,1334,2.652,1335,2.567,1336,3.131,1337,3.891,1338,3.891,1339,3.891,1340,3.564,1341,3.564,1342,3.564,1343,3.328]],["title/injectables/HandlebarsService.html",[551,1.24,1038,2.707]],["body/injectables/HandlebarsService.html",[0,0.129,3,0.073,4,0.066,5,0.059,17,1.483,24,2.975,28,1.279,32,0.351,34,0.508,35,0.53,36,0.844,39,0.196,42,0.506,44,0.675,45,0.012,46,0.766,47,0.631,49,0.821,50,1.184,51,0.302,53,1.718,54,1.099,55,0.073,75,1.197,133,0.009,134,0.005,135,0.003,159,1.934,160,1.467,161,1.133,164,1.544,167,1.782,184,1.631,250,1.139,265,1.168,268,3.34,269,3.554,281,2.174,282,3.101,287,0.525,288,0.958,289,1.06,298,1.399,299,1.399,302,0.927,303,2.962,370,0.87,436,1.934,551,1.168,579,2.305,636,1.183,705,2.294,714,1.23,770,1.399,835,3.577,836,2.578,846,1.857,886,1.23,1038,2.552,1090,3.87,1098,5.556,1122,2.011,1327,2.904,1344,2.011,1345,3.958,1346,3.958,1347,3.958,1348,5.513,1349,5.513,1350,5.513,1351,5.513,1352,5.513,1353,4.874,1354,5.513,1355,5.513,1356,5.513,1357,5.513,1358,5.513,1359,5.513,1360,5.513,1361,4.874,1362,2.53,1363,3.143,1364,3.958,1365,3.958,1366,2.53,1367,2.53,1368,2.414,1369,2.53,1370,2.53,1371,2.53,1372,2.53,1373,2.53,1374,2.53,1375,2.53,1376,2.53,1377,2.53,1378,2.53,1379,2.53,1380,2.53,1381,2.53,1382,2.53,1383,2.53,1384,2.53,1385,2.217,1386,2.53,1387,2.53,1388,2.53,1389,2.53,1390,2.53,1391,2.53,1392,2.53,1393,2.53,1394,2.53,1395,2.53,1396,2.53,1397,2.53,1398,2.53,1399,2.53,1400,2.53,1401,2.53,1402,2.53,1403,2.53,1404,2.53,1405,2.53,1406,1.857,1407,2.53,1408,2.011,1409,2.53,1410,1.857,1411,2.53,1412,2.53,1413,2.53,1414,2.53,1415,2.53,1416,2.53,1417,2.53,1418,2.53,1419,7.052,1420,4.874,1421,7.052,1422,7.213,1423,2.217,1424,2.53,1425,2.53,1426,2.53,1427,2.53,1428,2.53,1429,2.53,1430,2.53,1431,6.343,1432,2.53,1433,5.983,1434,5.242,1435,2.53,1436,2.53,1437,2.53,1438,5.513,1439,2.53,1440,2.53,1441,3.958,1442,2.53,1443,2.53,1444,2.53,1445,2.53,1446,2.53,1447,2.53,1448,2.53,1449,2.53,1450,2.53,1451,2.53,1452,2.53,1453,2.53,1454,2.53,1455,2.53,1456,2.53,1457,2.53,1458,2.53,1459,2.53,1460,2.53,1461,2.53,1462,2.53,1463,2.53,1464,2.217,1465,2.53,1466,3.958,1467,4.874,1468,3.958,1469,4.874,1470,2.53]],["title/classes/I18n.html",[0,0.214,142,2.042]],["body/classes/I18n.html",[0,0.319,2,1.117,3,0.182,4,0.163,5,0.145,32,0.398,38,1.537,39,0.575,42,0.398,44,1.13,45,0.011,46,0.755,47,0.81,51,0.257,55,0.182,75,1.285,133,0.008,134,0.01,135,0.008,142,3.602,159,2.637,160,3.626,1410,5.435,1471,5.481,1472,6.255,1473,6.255]],["title/components/IconComponent.html",[247,1.101,363,1.699]],["body/components/IconComponent.html",[0,0.191,3,0.109,4,0.138,5,0.123,32,0.506,33,1.006,34,0.277,35,0.71,36,0.648,39,0.291,42,0.512,44,0.519,45,0.012,46,0.743,47,0.485,49,0.777,51,0.275,55,0.109,75,1.09,95,1.139,102,1.174,107,1.174,133,0.005,134,0.007,135,0.005,144,2.507,147,2.802,148,3.397,161,0.947,185,1.896,223,1.174,225,3.255,247,1.615,248,1.515,249,2.387,250,1.686,251,1.75,252,1.75,254,3.117,255,1.75,256,3.877,258,3.632,260,1.75,265,1.565,266,3.39,281,1.041,282,1.515,287,0.777,322,1.686,323,1.625,324,1.686,325,1.686,326,1.686,327,1.686,328,1.686,329,1.686,330,1.686,331,1.686,332,1.686,333,1.625,334,1.686,335,1.625,336,1.686,337,1.686,338,1.686,339,1.686,343,1.372,344,2.479,345,2.479,346,1.75,347,3.13,348,1.75,349,1.75,350,1.465,351,1.75,352,1.515,353,1.75,354,1.465,355,2.479,356,1.515,357,1.75,358,1.465,359,1.75,360,1.515,361,1.465,362,1.75,363,2.709,364,1.75,365,1.75,366,1.75,367,1.515,368,1.75,369,1.515,370,1.287,371,1.686,372,1.75,373,1.75,404,2.17,434,1.686,435,2.17,865,4.645,867,5.865,1098,3.89,1169,5.865,1423,3.28,1434,4.645,1474,3.28,1475,6.694,1476,6.155,1477,3.743,1478,5.301,1479,5.301,1480,6.155,1481,6.155,1482,3.743,1483,6.694,1484,5.301,1485,3.743,1486,3.743,1487,3.743,1488,3.743,1489,3.743,1490,3.743,1491,3.743,1492,3.743,1493,3.743,1494,3.743,1495,3.743,1496,3.743,1497,3.743,1498,3.743,1499,3.743,1500,3.743,1501,3.743,1502,3.743,1503,3.743,1504,3.743,1505,3.743,1506,3.743,1507,3.743,1508,3.743,1509,6.155,1510,7.065,1511,6.155,1512,5.301,1513,6.155,1514,5.301,1515,3.743,1516,6.155,1517,3.743,1518,3.743,1519,3.743,1520,3.743,1521,3.743,1522,3.743,1523,3.743,1524,3.743,1525,5.301]],["title/classes/InitFilter.html",[0,0.214,521,2.707]],["body/classes/InitFilter.html",[0,0.344,2,0.955,3,0.155,4,0.14,5,0.124,8,1.467,32,0.541,33,1.398,34,0.396,35,0.902,36,1.166,37,2.049,38,1.604,39,0.415,40,2.165,42,0.469,44,0.741,45,0.011,46,0.646,47,0.693,49,1.11,50,0.955,51,0.303,52,1.015,55,0.224,56,1.323,60,3.031,73,2.11,75,1.096,133,0.007,134,0.009,135,0.007,144,1.898,156,2.024,157,1.898,207,3.087,211,2.165,272,3.925,438,3.721,511,4.494,512,3.665,515,4.686,516,4.211,517,4.25,518,4.25,519,4.25,520,4.25,521,4.984,522,5.898,523,3.665,524,5.898,525,4.25,1526,6.732,1527,5.348]],["title/classes/Input.html",[0,0.214,148,1.891]],["body/classes/Input.html",[0,0.368,2,0.706,3,0.115,4,0.103,5,0.092,8,0.75,32,0.437,38,1.831,39,0.58,42,0.252,44,0.548,45,0.012,46,0.828,47,0.512,50,1.224,51,0.26,55,0.227,56,1.568,75,1.402,97,1.78,133,0.005,134,0.007,135,0.005,138,2.411,139,3.463,140,3.55,141,4.179,142,3.859,143,2.708,144,2.882,145,2.708,146,2.708,147,2.089,148,2.854,149,2.708,150,2.708,151,2.708,152,2.708,153,2.708,155,3.867,156,1.496,157,1.402,158,2.548,159,1.78,160,2.291,161,0.706,162,2.708,163,1.448,164,2.411,165,2.708,166,2.708,167,3.619,168,2.708,169,2.708,170,2.708,171,2.708,172,2.708,173,3.359,174,2.708,175,1.448,176,2.411,177,3.044,178,2.002,179,4.086,180,2.411,181,2.548,182,2.548,183,2.708,184,2.548,185,2.002,186,2.548,187,2.548,188,2.548,189,2.807,190,4.42,191,2.184,192,2.411,193,2.548,194,2.548,195,2.548,196,1.922,197,4.343,198,4.343,199,4.343,200,4.343,201,4.182,202,4.343,203,4.343,1528,3.952]],["title/injectables/LightCardEffects.html",[500,2.877,551,1.24]],["body/injectables/LightCardEffects.html",[0,0.244,3,0.139,4,0.125,5,0.111,8,0.907,17,2.125,28,1.643,32,0.399,34,0.354,35,0.839,39,0.371,42,0.399,44,0.662,45,0.011,46,0.577,47,0.619,49,0.992,50,0.854,51,0.345,52,0.907,55,0.139,87,1.33,88,1.33,89,1.291,112,2.071,133,0.006,134,0.008,135,0.006,159,2.257,161,1.247,178,4.075,212,2.642,216,2.235,217,3.537,267,2.42,287,0.992,288,1.809,289,2.002,291,1.934,292,2.324,302,1.751,303,2.153,500,4.291,551,1.849,555,2.42,579,2.062,705,2.77,714,2.324,735,2.915,736,4.503,745,4.291,746,4.522,748,2.77,757,4.977,770,2.642,799,3.081,800,2.77,836,3.466,886,2.324,896,6.12,897,2.642,906,3.507,907,2.915,908,2.235,909,2.526,910,2.526,911,3.507,912,4.188,913,4.188,914,4.188,925,3.63,973,3.798,974,3.798,1529,6.12,1530,4.188,1531,6.985,1532,4.779,1533,6.262,1534,6.262,1535,6.262,1536,5.487,1537,6.262,1538,5.487,1539,6.262,1540,5.487,1541,4.779,1542,3.798]],["title/classes/LoadCard.html",[0,0.214,908,1.963]],["body/classes/LoadCard.html",[0,0.376,2,0.84,3,0.137,4,0.123,5,0.109,8,1.492,12,1.348,32,0.537,33,1.453,34,0.349,35,0.83,36,1.073,37,2.23,38,1.631,39,0.365,40,1.904,42,0.441,44,0.652,45,0.012,46,0.568,47,0.609,49,0.976,50,0.84,51,0.255,52,0.893,55,0.228,56,1.164,72,1.52,73,2.31,75,0.766,87,1.724,88,1.724,89,1.674,133,0.006,134,0.008,135,0.006,161,1.484,163,1.724,207,2.904,215,2.805,220,1.971,226,2.383,227,1.971,228,1.971,229,2.068,230,2.287,231,2.287,232,1.841,233,1.904,234,2.042,886,2.287,907,2.87,908,3.445,909,3.663,910,3.663,1319,2.87,1322,3.452,1323,4.548,1324,3.452,1325,3.452,1326,3.223,1543,6.197,1544,4.704]],["title/classes/LoadCardFailure.html",[0,0.214,909,2.219]],["body/classes/LoadCardFailure.html",[0,0.376,2,0.84,3,0.137,4,0.123,5,0.109,8,1.492,12,1.348,32,0.537,33,1.453,34,0.349,35,0.83,36,1.073,37,2.23,38,1.631,39,0.365,40,1.904,42,0.441,44,0.652,45,0.012,46,0.568,47,0.609,49,0.976,50,0.84,51,0.255,52,0.893,55,0.228,56,1.164,72,1.52,73,2.31,75,0.766,87,1.724,88,1.724,89,1.674,133,0.006,134,0.008,135,0.006,161,1.484,163,1.724,207,2.904,215,2.805,220,1.971,226,2.383,227,1.971,228,1.971,229,2.068,230,2.287,231,2.287,232,1.841,233,1.904,234,2.042,886,2.287,907,2.87,908,3.241,909,3.893,910,3.663,1319,2.87,1322,3.452,1323,3.452,1324,4.548,1325,3.452,1326,3.223,1545,6.197,1546,4.704]],["title/classes/LoadCardSuccess.html",[0,0.214,910,2.219]],["body/classes/LoadCardSuccess.html",[0,0.376,2,0.84,3,0.137,4,0.123,5,0.109,8,1.492,12,1.348,32,0.537,33,1.453,34,0.349,35,0.83,36,1.073,37,2.23,38,1.631,39,0.365,40,1.904,42,0.441,44,0.652,45,0.012,46,0.568,47,0.609,49,0.976,50,0.84,51,0.255,52,0.893,55,0.228,56,1.164,72,1.52,73,2.31,75,0.766,87,1.724,88,1.724,89,1.674,133,0.006,134,0.008,135,0.006,161,1.484,163,1.724,207,2.904,215,2.805,220,1.971,226,2.383,227,1.971,228,1.971,229,2.068,230,2.287,231,2.287,232,1.841,233,1.904,234,2.042,886,2.287,907,2.87,908,3.241,909,3.663,910,3.893,1319,2.87,1322,3.452,1323,3.452,1324,3.452,1325,4.548,1326,3.223,1547,6.197,1548,4.704]],["title/classes/LoadLightCards.html",[0,0.214,213,2.126]],["body/classes/LoadLightCards.html",[0,0.399,2,0.759,3,0.123,4,0.111,5,0.099,8,1.53,12,1.218,32,0.519,33,1.509,34,0.315,35,0.776,37,2.058,38,1.673,39,0.33,42,0.271,45,0.012,49,0.882,50,0.759,51,0.238,52,0.807,55,0.234,56,1.052,72,1.374,73,2.32,87,2.058,88,2.058,89,1.999,133,0.006,134,0.008,135,0.006,156,1.609,157,1.509,161,0.759,175,1.558,204,3.203,205,3.061,206,2.247,210,2.593,211,2.344,212,2.35,213,3.582,214,4.529,215,2.862,216,3.08,217,2.933,218,2.464,219,3.336,220,2.426,221,3.203,222,2.153,223,1.333,224,2.35,225,2.067,226,2.265,227,1.781,228,1.781,229,2.11,230,2.067,231,2.067,232,1.663,233,1.721,234,1.846,235,3.533,236,2.593,237,2.35,238,2.593,239,2.593,240,2.593,241,2.593,242,2.593,243,2.35,244,2.593,245,2.593,246,2.593,1549,4.251]],["title/classes/LoadLightCardsExtendedData.html",[0,0.214,217,2.126]],["body/classes/LoadLightCardsExtendedData.html",[0,0.398,2,0.753,3,0.122,4,0.11,5,0.098,8,1.527,12,1.209,32,0.519,33,1.506,34,0.312,35,0.772,37,2.053,38,1.67,39,0.509,42,0.367,45,0.012,49,0.875,50,0.753,51,0.237,52,0.8,55,0.234,56,1.044,72,1.363,73,2.313,87,2.053,88,2.053,89,1.993,133,0.006,134,0.008,135,0.006,156,1.597,157,1.497,161,0.753,175,1.545,204,3.19,205,3.467,206,2.229,210,2.573,211,2.331,212,2.332,213,3.322,214,4.519,215,2.853,216,3.067,217,3.322,218,2.445,219,3.322,220,2.413,221,3.19,222,2.136,223,1.322,224,2.332,225,2.051,226,2.255,227,1.767,228,1.767,229,2.106,230,2.051,231,2.051,232,1.65,233,1.707,234,1.831,235,2.573,236,2.573,237,2.332,238,3.514,239,2.573,240,2.573,241,2.573,242,2.573,243,2.332,244,2.573,245,2.573,246,2.573,1550,5.76]],["title/classes/LoadLightCardsFailure.html",[0,0.214,219,2.126]],["body/classes/LoadLightCardsFailure.html",[0,0.395,2,0.729,3,0.119,4,0.107,5,0.095,8,1.517,12,1.17,32,0.535,33,1.494,34,0.303,35,0.755,36,0.976,37,2.191,38,1.658,39,0.437,40,1.653,42,0.411,44,0.566,45,0.012,46,0.493,47,0.529,49,0.847,50,0.729,51,0.231,52,0.775,55,0.232,56,1.01,72,1.32,73,2.287,87,2.029,88,2.029,89,1.971,133,0.005,134,0.007,135,0.005,156,1.546,157,1.449,161,0.729,175,1.496,204,3.136,205,3.675,206,2.158,207,2.702,210,2.491,211,2.28,212,2.257,213,3.266,214,4.481,215,2.814,216,3.016,217,2.853,218,2.367,219,3.521,220,2.36,221,3.136,222,2.068,223,1.28,224,2.257,225,1.986,226,2.218,227,1.711,228,1.711,229,2.088,230,1.986,231,1.986,232,1.598,233,1.653,234,1.773,235,2.491,236,2.491,237,2.257,238,2.491,239,3.437,240,2.491,241,2.491,242,2.491,243,2.257,244,2.491,245,2.491,246,2.491,1551,5.634,1552,4.084]],["title/classes/LoadLightCardsSuccess.html",[0,0.214,216,1.963]],["body/classes/LoadLightCardsSuccess.html",[0,0.395,2,0.729,3,0.119,4,0.107,5,0.095,8,1.517,12,1.17,32,0.535,33,1.494,34,0.303,35,0.755,36,0.976,37,2.191,38,1.658,39,0.437,40,1.653,42,0.411,44,0.566,45,0.012,46,0.493,47,0.529,49,0.847,50,0.729,51,0.231,52,0.775,55,0.232,56,1.01,72,1.32,73,2.287,87,2.029,88,2.029,89,1.971,133,0.005,134,0.007,135,0.005,156,1.546,157,1.449,161,0.729,175,1.496,204,3.136,205,3.675,206,2.158,207,2.702,210,2.491,211,2.28,212,2.257,213,3.266,214,4.481,215,2.814,216,3.251,217,2.853,218,2.367,219,3.266,220,2.36,221,3.136,222,2.068,223,1.28,224,2.257,225,1.986,226,2.218,227,1.711,228,1.711,229,2.088,230,1.986,231,1.986,232,1.598,233,1.653,234,1.773,235,2.491,236,3.437,237,2.257,238,2.491,239,2.491,240,2.491,241,2.491,242,2.491,243,2.257,244,2.491,245,2.491,246,2.491,1553,5.634,1554,4.084]],["title/classes/LoadMenu.html",[0,0.214,1337,2.321]],["body/classes/LoadMenu.html",[0,0.386,2,0.9,3,0.146,4,0.132,5,0.117,8,1.52,32,0.519,33,1.485,34,0.373,35,0.868,37,1.993,38,1.662,39,0.556,42,0.413,45,0.012,49,1.045,50,0.9,51,0.266,52,0.956,55,0.232,56,1.246,72,1.628,73,2.246,133,0.007,134,0.008,135,0.007,215,2.9,220,2.111,226,2.463,227,2.111,228,2.111,229,2.114,232,1.971,233,2.039,234,2.187,460,4.562,1330,3.074,1333,3.697,1334,2.715,1335,2.663,1336,3.248,1337,4.181,1338,3.96,1339,3.96,1340,4.755,1341,3.697,1342,3.697,1343,3.452,1555,6.481]],["title/classes/LoadMenuFailure.html",[0,0.214,1339,2.321]],["body/classes/LoadMenuFailure.html",[0,0.381,2,0.867,3,0.141,4,0.127,5,0.113,8,1.505,32,0.539,33,1.468,34,0.36,35,0.848,36,1.096,37,2.206,38,1.645,39,0.491,40,1.966,42,0.448,44,0.673,45,0.012,46,0.586,47,0.629,49,1.008,50,0.867,51,0.26,52,0.922,55,0.23,56,1.202,72,1.57,73,2.207,133,0.006,134,0.008,135,0.006,207,2.949,215,2.849,220,2.035,226,2.42,227,2.035,228,2.035,229,2.089,232,1.9,233,1.966,234,2.108,460,4.527,1330,2.963,1333,3.564,1334,2.652,1335,2.567,1336,3.131,1337,3.891,1338,3.891,1339,4.123,1340,3.564,1341,4.644,1342,3.564,1343,3.328,1556,6.328,1557,4.857]],["title/classes/LoadMenuSuccess.html",[0,0.214,1338,2.321]],["body/classes/LoadMenuSuccess.html",[0,0.381,2,0.867,3,0.141,4,0.127,5,0.113,8,1.505,32,0.539,33,1.468,34,0.36,35,0.848,36,1.096,37,2.206,38,1.645,39,0.491,40,1.966,42,0.448,44,0.673,45,0.012,46,0.586,47,0.629,49,1.008,50,0.867,51,0.26,52,0.922,55,0.23,56,1.202,72,1.57,73,2.207,133,0.006,134,0.008,135,0.006,207,2.949,215,2.849,220,2.035,226,2.42,227,2.035,228,2.035,229,2.089,232,1.9,233,1.966,234,2.108,460,4.527,1330,2.963,1333,3.564,1334,2.652,1335,2.567,1336,3.131,1337,3.891,1338,4.123,1339,3.891,1340,3.564,1341,3.564,1342,4.644,1343,3.328,1558,6.328,1559,4.857]],["title/components/LoginComponent.html",[95,1.277,247,1.101]],["body/components/LoginComponent.html",[0,0.214,3,0.122,4,0.109,5,0.097,19,1.888,28,1.715,32,0.416,33,1.088,34,0.311,35,0.768,39,0.445,42,0.484,44,0.581,45,0.011,46,0.79,47,0.543,51,0.302,52,0.795,55,0.122,74,2.739,87,1.166,88,1.166,89,1.132,95,2.139,96,3.886,99,3.052,104,3.17,105,3.697,107,1.314,112,1.994,133,0.005,134,0.007,135,0.005,144,2.035,161,1.024,185,3.311,247,1.715,248,1.697,249,2.583,250,1.888,251,1.96,252,1.96,254,3.311,255,1.96,256,3.94,260,2.682,265,1.693,266,3.561,267,2.123,281,1.819,282,2.98,287,0.87,290,2.43,291,1.697,292,2.038,303,1.441,321,2.557,340,5.196,341,5.196,342,5.729,343,1.536,344,2.682,345,2.682,346,1.96,347,3.287,348,1.96,349,1.96,350,1.64,351,1.96,352,1.697,353,1.96,354,1.64,355,2.682,356,1.697,357,1.96,358,1.64,359,1.96,360,1.697,361,1.64,362,1.96,363,1.697,364,1.96,365,1.96,366,1.96,367,1.697,368,1.96,369,1.697,370,1.441,371,1.888,372,1.96,373,1.96,390,3.325,407,3.076,436,1.854,636,1.96,1560,3.673,1561,6.538,1562,6.538,1563,5.736,1564,6.538,1565,6.538,1566,7.03,1567,5.736,1568,4.192,1569,4.192,1570,4.192,1571,4.192,1572,7.03,1573,6.538,1574,4.192,1575,4.192,1576,4.192,1577,4.192,1578,4.192,1579,4.192,1580,4.192]],["title/classes/Map.html",[0,0.214,159,1.357]],["body/classes/Map.html",[0,0.334,2,1.169,3,0.19,4,0.171,5,0.152,42,0.417,45,0.011,55,0.19,75,1.238,133,0.009,134,0.01,135,0.009,159,2.458,1410,5.581,1581,5.733,1582,6.543,1583,7.606,1584,6.543]],["title/injectables/MenuEffects.html",[498,2.877,551,1.24]],["body/injectables/MenuEffects.html",[0,0.237,3,0.135,4,0.121,5,0.108,8,0.882,17,2.096,28,1.613,32,0.392,34,0.344,35,0.824,39,0.361,42,0.392,44,0.644,45,0.012,46,0.561,47,0.602,49,0.964,50,0.83,51,0.34,52,0.882,55,0.135,87,1.293,88,1.293,89,1.255,94,2.788,112,2.055,133,0.006,134,0.008,135,0.006,159,1.502,178,4.047,215,2.788,267,2.354,287,0.964,288,1.759,289,1.947,291,1.881,292,2.26,302,1.703,303,2.114,321,3.75,460,3.398,498,4.212,551,1.815,555,2.354,579,2.04,714,2.26,735,2.835,736,4.442,745,4.212,746,4.472,748,2.694,755,4.886,756,5.38,757,5.826,770,2.569,799,2.996,800,2.694,836,3.428,900,4.886,908,2.173,911,3.41,925,4.25,1334,1.947,1335,2.456,1336,2.996,1338,2.569,1339,2.569,1536,5.387,1538,6.424,1540,5.387,1542,3.693,1585,4.072,1586,4.647,1587,6.148,1588,6.148,1589,6.148,1590,6.148,1591,6.148,1592,6.148,1593,6.148,1594,6.148,1595,6.148,1596,6.148,1597,4.647,1598,4.647,1599,4.072]],["title/interfaces/MenuState.html",[457,2.042,465,2.707]],["body/interfaces/MenuState.html",[3,0.176,4,0.158,5,0.141,32,0.496,34,0.449,35,0.974,45,0.011,51,0.249,55,0.211,75,1.183,133,0.008,134,0.009,135,0.008,144,2.763,189,2.22,229,2.103,436,1.958,457,2.946,458,3.906,460,4.564,465,5.019,925,4.786,1334,3.382,1335,3.202,1600,4.814,1601,6.058,1602,4.814,1603,5.308]],["title/components/NavbarComponent.html",[107,1.316,247,1.101]],["body/components/NavbarComponent.html",[0,0.198,3,0.113,4,0.101,5,0.09,17,1.909,32,0.456,33,1.031,34,0.403,35,0.728,39,0.301,42,0.51,44,0.753,45,0.011,46,0.821,47,0.704,49,1.302,50,1.121,51,0.338,52,0.736,55,0.113,68,2.447,95,1.18,106,3.444,107,2.132,109,2.872,112,1.947,133,0.005,134,0.007,135,0.005,144,1.376,161,0.971,167,2.447,247,1.646,248,1.57,249,2.447,250,1.746,251,1.813,252,1.813,254,3.178,255,1.813,256,3.897,260,2.541,262,4.986,265,1.604,266,3.444,267,1.964,268,3.724,269,2.5,273,3.082,281,1.746,282,2.539,287,0.805,288,1.468,289,1.625,290,2.248,291,1.57,292,1.886,293,2.657,295,3.398,298,2.144,299,2.144,302,1.421,303,2.157,313,3.082,321,3.315,343,1.421,344,2.541,345,2.541,346,1.813,347,3.18,348,1.813,349,1.813,350,1.517,351,1.813,352,1.57,353,1.813,354,1.517,355,2.541,356,1.57,357,1.813,358,1.517,359,1.813,360,1.57,361,1.517,362,1.813,363,1.57,364,1.813,365,1.813,366,1.813,367,1.57,368,1.813,369,1.57,370,1.333,371,1.746,372,1.813,373,1.813,413,2.846,450,6.502,579,1.079,636,2.541,770,2.144,832,3.988,850,3.398,851,3.398,852,3.398,1327,5.445,1334,1.625,1335,2.05,1337,3.004,1599,3.398,1604,3.398,1605,5.435,1606,6.274,1607,5.435,1608,6.274,1609,5.435,1610,6.274,1611,5.435,1612,3.878,1613,3.878,1614,3.878,1615,3.878,1616,3.878,1617,3.878,1618,3.878,1619,3.878,1620,3.878,1621,3.878,1622,3.082,1623,3.878,1624,3.082,1625,2.846,1626,3.878,1627,3.878,1628,3.878,1629,3.878,1630,3.878,1631,3.878,1632,3.878,1633,3.878,1634,3.878,1635,3.878,1636,3.878,1637,3.878,1638,5.435,1639,5.435,1640,5.435,1641,5.435,1642,5.435,1643,3.878]],["title/components/NoSelectionComponent.html",[247,1.101,367,1.699]],["body/components/NoSelectionComponent.html",[0,0.263,3,0.149,4,0.134,5,0.119,33,1.246,34,0.381,39,0.562,42,0.418,45,0.011,46,0.793,51,0.211,55,0.149,95,1.565,107,1.613,133,0.007,134,0.009,135,0.007,161,1.173,247,1.898,248,2.082,249,2.957,250,2.316,251,2.405,252,2.405,254,3.664,255,2.405,256,4.04,260,3.071,265,1.939,266,3.86,281,1.431,282,2.082,287,1.067,343,1.885,344,3.071,345,3.071,346,2.405,347,3.564,348,2.405,349,2.405,350,2.013,351,2.405,352,2.082,353,2.405,354,2.013,355,3.071,356,2.082,357,2.405,358,2.013,359,2.405,360,2.082,361,2.013,362,2.405,363,2.082,364,2.405,365,2.405,366,2.405,367,3.085,368,2.405,369,2.082,370,1.769,371,2.316,372,2.405,373,2.405,531,5.755,950,6.057,1240,5.749,1644,6.339,1645,4.507,1646,6.567,1647,5.144,1648,5.144]],["title/classes/ParameterListItem.html",[0,0.214,201,2.561]],["body/classes/ParameterListItem.html",[0,0.374,2,0.741,3,0.12,4,0.108,5,0.096,8,0.787,32,0.414,38,1.835,39,0.588,42,0.264,44,0.574,45,0.012,46,0.687,47,0.537,50,1.25,51,0.267,55,0.229,56,1.608,75,1.386,97,1.867,133,0.005,134,0.007,135,0.005,138,2.53,140,3.67,141,4.057,142,3.9,143,2.841,144,2.846,145,2.841,146,2.841,147,2.191,148,2.564,149,2.841,150,2.841,151,2.841,152,2.841,153,2.841,155,3.966,156,1.57,157,1.471,158,2.673,159,1.84,160,2.404,161,0.741,162,2.841,163,1.519,164,2.53,165,2.841,166,2.841,167,3.412,168,2.841,169,2.841,170,2.841,171,2.841,172,2.841,173,3.473,174,2.841,175,1.519,176,2.53,177,3.147,178,2.1,179,4.192,180,2.53,181,2.673,182,2.673,183,2.841,184,2.673,185,2.1,186,2.673,187,2.673,188,2.673,189,2.844,190,3.67,191,2.292,192,2.53,193,2.673,194,2.673,195,2.673,196,2.016,197,2.841,198,2.841,199,2.841,200,2.841,201,3.966,202,2.841,203,2.841,1649,4.147,1650,4.147]],["title/classes/PayloadForSuccessfulAuthentication.html",[0,0.214,41,1.963]],["body/classes/PayloadForSuccessfulAuthentication.html",[0,0.371,1,2.547,2,0.54,3,0.088,4,0.079,5,0.141,6,1.532,8,1.52,9,3.612,10,1.599,11,2.627,12,2.328,13,3.066,14,3.584,15,1.414,16,3.01,17,2.071,18,3.157,19,2.92,20,2.398,21,1.753,22,1.672,23,2.83,24,2.204,25,2.758,26,3.157,27,2.648,28,1.429,29,2.631,30,3.01,31,2.631,32,0.514,33,1.34,34,0.224,35,0.608,36,1.331,37,1.515,38,1.465,39,0.352,41,2.547,42,0.413,44,0.419,45,0.012,46,0.365,47,0.392,51,0.186,52,0.574,53,2.956,54,1.313,55,0.22,56,0.748,57,1.532,58,2.547,59,1.362,60,1.362,61,3.01,62,3.062,63,3.448,64,3.198,65,2.547,66,1.672,67,2.122,68,2.725,69,2.204,70,3.032,71,2.547,72,0.978,73,1.897,74,2.535,75,1.251,76,2.815,77,2.815,78,2.92,79,2.725,80,1.532,81,1.753,82,1.362,83,1.753,84,1.753,85,1.414,86,1.753,87,1.515,88,1.515,89,1.471,90,1.672,91,1.753,92,1.753,93,1.471,94,1.224,95,0.92,96,1.672,97,2.452,98,2.631,99,2.364,100,2.298,101,1.599,102,0.948,103,1.672,104,1.672,105,1.471,106,3.065,107,0.948,108,1.753,109,1.599,110,1.672,111,2.631,112,1.19,113,1.753,114,1.753,115,3.508,116,1.672,117,1.753,118,2.631,119,1.532,120,1.753,121,2.508,122,1.599,123,1.753,124,1.599,125,1.753,126,1.672,127,1.753,128,2.508,129,2.508,130,1.753,131,1.753,132,1.599,133,0.004,134,0.006,135,0.004,1651,3.025,1652,3.025,1653,3.025,1654,3.025,1655,3.025,1656,3.025]],["title/classes/RejectLogIn.html",[0,0.214,65,1.963]],["body/classes/RejectLogIn.html",[0,0.369,1,2.524,2,0.532,3,0.087,4,0.078,5,0.15,6,1.51,7,1.294,8,1.538,9,3.723,10,1.576,11,2.797,12,2.349,13,3.164,14,3.562,15,1.394,16,3.321,17,2.2,18,3.483,19,3.049,20,2.853,21,1.728,22,1.648,23,3.013,24,2.431,25,3.043,26,3.483,27,2.921,28,1.576,29,3.13,30,3.321,31,2.602,32,0.522,33,1.372,34,0.221,35,0.601,36,1.116,37,1.884,38,1.535,39,0.349,40,1.207,41,2.099,42,0.344,44,0.413,45,0.012,46,0.36,47,0.386,49,0.619,50,0.532,51,0.184,52,0.566,53,2.344,54,1.294,55,0.219,56,0.738,57,1.51,58,2.524,59,1.342,60,1.342,61,2.984,62,3.051,63,3.429,64,3.175,65,2.809,66,1.648,67,2.099,68,2.705,69,2.185,70,3.013,71,2.524,72,0.964,73,1.883,74,1.249,75,1.049,76,1.294,77,1.294,78,1.342,79,1.342,80,1.51,81,1.728,82,1.342,83,1.728,84,1.728,85,1.394,86,1.728,87,1.502,88,1.502,89,1.458,90,1.648,91,1.728,92,1.728,93,1.45,94,1.207,95,0.907,96,1.648,97,2.705,98,2.602,99,2.608,100,2.273,101,1.576,102,0.935,103,1.648,104,1.648,105,1.45,106,3.043,107,0.935,108,1.728,109,1.576,110,1.648,111,3.13,112,1.416,113,2.602,114,2.602,115,3.735,116,2.481,117,2.602,118,3.13,119,2.273,120,2.602,121,3.321,122,1.576,123,1.728,124,1.576,125,1.728,126,1.648,127,1.728,128,2.481,129,2.481,130,1.728,131,1.728,132,1.576,133,0.004,134,0.006,135,0.004,207,2.262,1657,4.489,1658,2.981]],["title/classes/RouterStateUrl.html",[0,0.214,469,2.877]],["body/classes/RouterStateUrl.html",[0,0.305,2,0.793,3,0.129,4,0.176,5,0.103,7,1.928,11,2.924,13,3.242,28,1.165,32,0.283,33,0.843,38,1.397,39,0.463,42,0.283,44,1.041,45,0.012,46,0.536,47,0.575,51,0.245,55,0.195,75,1.096,85,2.789,87,1.235,88,1.235,89,1.199,112,1.767,133,0.006,134,0.008,135,0.006,175,2.185,196,2.9,232,2.817,276,3.76,281,1.659,303,1.527,370,2.051,431,2.574,436,2.327,461,3.457,468,2.863,469,4.614,509,3.042,579,1.659,580,4.087,593,3.845,598,4.989,658,4.087,1075,3.042,1076,3.258,1077,5.721,1080,3.891,1081,5.226,1083,3.891,1084,5.721,1086,3.891,1087,3.529,1088,6.146,1089,3.529,1090,2.709,1091,4.74,1092,5.226,1093,6.146,1094,5.226,1095,5.226,1096,5.721,1097,4.74,1098,4.376,1099,4.74,1100,5.226,1101,5.226,1102,5.226,1103,6.308,1104,5.226,1105,5.226,1106,3.891,1107,3.891,1108,3.891,1109,3.891,1110,3.891,1111,3.891,1112,3.891,1659,4.44,1660,4.44]],["title/classes/SelectLightCard.html",[0,0.214,221,2.042]],["body/classes/SelectLightCard.html",[0,0.395,2,0.729,3,0.119,4,0.107,5,0.095,8,1.517,12,1.17,32,0.535,33,1.494,34,0.303,35,0.755,36,0.976,37,2.191,38,1.658,39,0.437,40,1.653,42,0.411,44,0.566,45,0.012,46,0.493,47,0.529,49,0.847,50,0.729,51,0.231,52,0.775,55,0.232,56,1.01,72,1.32,73,2.287,87,2.029,88,2.029,89,1.971,133,0.005,134,0.007,135,0.005,156,1.546,157,1.449,161,0.729,175,1.496,204,3.136,205,3.675,206,2.158,207,2.702,210,2.491,211,2.28,212,2.257,213,3.266,214,4.481,215,2.814,216,3.016,217,2.853,218,2.367,219,3.266,220,2.36,221,3.381,222,2.068,223,1.28,224,2.257,225,1.986,226,2.218,227,1.711,228,1.711,229,2.088,230,1.986,231,1.986,232,1.598,233,1.653,234,1.773,235,2.491,236,2.491,237,2.257,238,2.491,239,2.491,240,3.437,241,2.491,242,2.491,243,2.257,244,2.491,245,2.491,246,2.491,1661,5.634,1662,4.084]],["title/modules/ServicesModule.html",[374,1.759,387,2.877]],["body/modules/ServicesModule.html",[0,0.238,3,0.135,4,0.161,5,0.143,28,1.223,36,0.808,39,0.362,42,0.297,45,0.012,47,0.798,51,0.343,55,0.135,69,1.887,102,1.462,133,0.006,134,0.008,135,0.006,196,2.996,223,1.462,229,1.26,265,1.377,281,1.297,287,0.968,322,2.1,323,2.025,324,2.1,325,2.1,326,2.1,327,2.1,328,2.1,329,2.1,330,2.1,331,2.1,332,2.1,333,2.025,334,2.1,335,2.025,336,2.1,337,2.1,338,2.1,339,2.1,343,1.709,374,1.954,375,3.195,376,2.268,377,2.578,378,2.845,379,2.703,380,4.21,381,2.465,387,5.893,389,3.572,390,2.703,392,2.578,396,3.815,400,2.578,401,3.973,404,2.703,424,3.195,425,3.706,432,3.422,556,3.572,557,3.195,561,3.813,579,1.297,636,2.181,836,3.667,897,4.335,996,3.706,1040,5.484,1042,5.484,1363,5.056,1385,4.086,1542,3.706,1663,4.086,1664,4.086,1665,5.373,1666,4.663,1667,4.663,1668,6.162,1669,6.162,1670,4.663,1671,4.663,1672,4.663,1673,4.663,1674,6.162,1675,4.663,1676,4.663,1677,3.706]],["title/modules/StateModule.html",[374,1.759,388,2.877]],["body/modules/StateModule.html",[0,0.245,3,0.139,4,0.164,5,0.146,9,2.336,34,0.356,36,0.832,42,0.306,45,0.012,51,0.339,52,1.192,55,0.139,69,1.945,102,1.506,112,1.648,133,0.006,134,0.008,135,0.006,196,3.056,223,1.506,265,1.418,281,1.337,287,0.997,322,2.164,323,2.086,324,2.164,325,2.164,326,2.164,327,2.164,328,2.164,329,2.164,330,2.164,331,2.164,332,2.164,333,2.086,334,2.164,335,2.086,336,2.164,337,2.164,338,2.164,339,2.164,343,1.76,374,2.013,376,2.336,377,2.656,378,3.833,379,2.785,380,3.833,381,2.539,388,5.52,389,3.643,390,2.785,392,3.474,396,3.871,401,4.051,404,2.785,424,3.292,425,3.818,434,3.471,435,2.785,455,3.526,461,2.785,468,4.051,470,4.21,503,3.526,504,3.526,507,4.611,579,1.337,800,2.785,1040,5.565,1042,5.565,1075,4.798,1077,5.565,1084,4.994,1093,3.818,1096,3.818,1678,4.21,1679,4.21,1680,4.805,1681,4.805,1682,4.805,1683,4.805,1684,4.805,1685,4.21,1686,6.284,1687,4.805,1688,4.805,1689,4.805,1690,4.805,1691,4.805,1692,4.805,1693,4.805,1694,5.506,1695,4.805,1696,4.805,1697,4.805,1698,4.805,1699,4.805,1700,4.805,1701,4.805]],["title/classes/Third.html",[0,0.214,1702,2.434]],["body/classes/Third.html",[0,0.381,2,0.983,3,0.16,4,0.144,5,0.128,32,0.35,38,1.8,39,0.606,42,0.35,44,0.762,45,0.011,46,0.827,47,0.712,55,0.217,75,1.427,133,0.007,134,0.009,135,0.007,141,3.972,163,2.016,276,2.675,826,6.206,1334,2.305,1368,4.552,1406,4.037,1702,3.972,1703,4.037,1704,5.501,1705,5.93,1706,6.851,1707,6.851,1708,5.445,1709,6.851,1710,5.035,1711,5.501,1712,4.372,1713,4.372,1714,4.372,1715,4.372,1716,4.372,1717,4.372,1718,4.372]],["title/classes/ThirdMenu.html",[0,0.214,1334,1.759]],["body/classes/ThirdMenu.html",[0,0.387,2,1.016,3,0.165,4,0.148,5,0.132,32,0.362,38,1.807,39,0.614,42,0.362,44,0.788,45,0.011,46,0.687,47,0.736,55,0.22,75,1.408,133,0.007,134,0.009,135,0.007,141,4.58,163,2.562,276,2.765,1334,2.93,1368,4.62,1406,4.173,1702,3.297,1703,4.173,1705,4.519,1710,5.094,1712,4.519,1713,4.519,1714,4.519,1715,4.519,1716,4.519,1717,4.519,1718,6.019,1719,4.983,1720,5.687]],["title/classes/ThirdMenuEntry.html",[0,0.214,1710,2.707]],["body/classes/ThirdMenuEntry.html",[0,0.388,2,1.024,3,0.166,4,0.15,5,0.133,32,0.365,38,1.809,39,0.615,42,0.365,44,0.795,45,0.011,46,0.693,47,0.743,55,0.221,75,1.41,133,0.007,134,0.009,135,0.007,141,4.594,163,2.576,276,3.697,1334,2.403,1368,3.499,1406,4.209,1702,3.325,1703,4.209,1705,4.558,1710,4.901,1712,4.558,1713,4.558,1714,4.558,1715,4.558,1716,4.558,1717,4.558,1718,4.558,1719,5.026,1721,5.735]],["title/classes/ThirdsI18nLoader.html",[0,0.214,1722,3.081]],["body/classes/ThirdsI18nLoader.html",[0,0.246,2,0.585,3,0.095,4,0.085,5,0.076,17,2.346,24,1.325,28,1.65,32,0.307,33,0.913,34,0.243,39,0.254,42,0.307,44,0.667,45,0.012,46,0.689,47,0.623,51,0.328,52,0.621,55,0.166,75,1.331,112,1.497,133,0.007,134,0.006,135,0.004,142,1.592,148,1.475,157,1.162,159,1.845,163,2.568,175,1.2,189,1.2,191,1.81,211,1.325,229,0.885,265,1.421,268,2.244,269,3.103,281,0.911,287,0.679,288,1.24,289,1.372,291,1.325,298,1.81,299,1.81,301,2.602,302,1.2,303,2.608,400,1.81,434,1.475,436,2.342,516,1.731,551,1.421,552,3.482,554,2.244,555,1.658,561,2.775,579,2.31,598,3.647,607,3.679,630,2.244,631,2.244,636,2.251,712,2.111,746,3.482,748,1.898,770,1.81,782,2.602,836,3.277,925,1.898,1029,4.188,1048,4.311,1227,2.602,1334,1.372,1335,1.731,1368,3.838,1408,5,1624,2.602,1625,2.403,1677,2.602,1702,1.898,1708,3.825,1722,3.532,1723,2.403,1724,4.813,1725,4.218,1726,3.275,1727,4.218,1728,3.275,1729,4.218,1730,5.001,1731,5.001,1732,2.869,1733,4.218,1734,2.869,1735,2.869,1736,2.869,1737,2.869,1738,2.869,1739,2.869,1740,2.869,1741,2.869,1742,2.869,1743,2.869,1744,4.218,1745,4.218,1746,2.869,1747,2.869,1748,2.869,1749,5.873,1750,5.001,1751,2.869,1752,2.869,1753,3.825,1754,2.869,1755,2.869,1756,2.869,1757,2.869,1758,2.869,1759,2.869,1760,4.218,1761,4.218,1762,4.218,1763,2.602,1764,2.869,1765,2.869,1766,2.869,1767,2.869,1768,2.869,1769,2.869,1770,2.869,1771,2.869,1772,2.869,1773,2.869,1774,2.869,1775,2.869,1776,2.869,1777,2.869,1778,2.869,1779,4.218,1780,2.869,1781,2.869,1782,2.869,1783,2.869,1784,2.869,1785,2.869,1786,2.869,1787,2.869,1788,2.869,1789,4.218,1790,2.869,1791,2.869,1792,2.869,1793,2.869,1794,2.869,1795,2.869,1796,2.869,1797,2.869,1798,2.869,1799,2.869,1800,4.218,1801,2.869,1802,2.869,1803,2.869,1804,2.869,1805,2.869,1806,2.869,1807,4.218,1808,2.869,1809,2.869,1810,2.869,1811,4.218,1812,2.869,1813,2.869,1814,2.869,1815,2.869,1816,2.602,1817,2.869]],["title/injectables/ThirdsService.html",[551,1.24,836,1.963]],["body/injectables/ThirdsService.html",[0,0.216,3,0.08,4,0.072,5,0.064,17,2.348,24,1.115,28,1.513,32,0.449,33,0.523,34,0.204,35,0.566,39,0.214,42,0.486,44,0.91,45,0.012,46,0.874,47,0.85,49,1.067,50,0.919,51,0.317,52,0.523,55,0.149,75,1.376,112,1.794,133,0.007,134,0.006,135,0.004,142,1.34,148,1.241,157,0.978,159,1.663,163,2.406,164,2.579,175,1.01,189,1.549,191,1.523,211,2.082,229,0.744,265,1.248,268,3.953,269,3.317,281,1.902,287,0.572,288,1.043,289,1.155,291,1.115,298,1.523,299,1.523,301,2.19,302,1.01,303,2.814,400,1.523,434,1.241,436,2.21,516,1.456,551,1.248,552,4.006,554,1.888,555,1.396,561,3.325,579,2.254,598,3.345,607,3.317,630,1.888,631,1.888,636,1.977,712,1.777,714,1.34,746,3.138,748,1.597,770,1.523,782,2.19,810,2.19,836,2.698,922,1.777,925,2.982,1029,3.775,1048,3.525,1227,2.19,1334,2.155,1335,1.456,1368,4.304,1408,5.219,1624,2.19,1625,2.022,1677,4.088,1702,1.597,1708,4.585,1722,2.022,1723,2.022,1725,2.414,1727,2.414,1729,2.414,1730,5.991,1731,4.507,1732,2.414,1733,3.705,1734,2.414,1735,2.414,1736,2.414,1737,2.414,1738,2.414,1739,4.507,1740,4.507,1741,2.414,1742,2.414,1743,3.705,1744,3.705,1745,3.705,1746,2.414,1747,2.414,1748,3.705,1749,5.453,1750,4.507,1751,2.414,1752,2.414,1753,3.36,1754,2.414,1755,2.414,1756,2.414,1757,2.414,1758,2.414,1759,2.414,1760,3.705,1761,3.705,1762,3.705,1763,4.585,1764,2.414,1765,2.414,1766,2.414,1767,2.414,1768,2.414,1769,2.414,1770,2.414,1771,2.414,1772,2.414,1773,2.414,1774,3.705,1775,2.414,1776,2.414,1777,2.414,1778,2.414,1779,3.705,1780,2.414,1781,2.414,1782,2.414,1783,2.414,1784,3.705,1785,2.414,1786,2.414,1787,2.414,1788,2.414,1789,3.705,1790,2.414,1791,2.414,1792,2.414,1793,2.414,1794,2.414,1795,2.414,1796,2.414,1797,2.414,1798,2.414,1799,2.414,1800,3.705,1801,2.414,1802,2.414,1803,2.414,1804,2.414,1805,2.414,1806,2.414,1807,3.705,1808,2.414,1809,2.414,1810,2.414,1811,3.705,1812,2.414,1813,2.414,1814,2.414,1815,2.414,1816,2.19,1817,2.414,1818,4.228,1819,4.228,1820,4.228,1821,3.705,1822,4.228,1823,4.228,1824,2.756,1825,2.756,1826,2.756,1827,2.756,1828,2.756,1829,2.756,1830,2.756,1831,2.756,1832,2.756,1833,2.756,1834,2.756,1835,2.756]],["title/classes/ThirdsServiceMock.html",[0,0.214,1836,3.337]],["body/classes/ThirdsServiceMock.html",[0,0.301,2,1.051,3,0.171,4,0.154,5,0.137,17,2.339,28,2.097,34,0.436,42,0.455,45,0.011,51,0.293,55,0.171,133,0.008,134,0.009,135,0.008,265,2.108,281,1.987,288,2.228,579,1.637,1327,5.241,1334,2.466,1335,3.111,1710,3.795,1763,6.354,1821,6.737,1836,5.676,1837,5.157,1838,5.886,1839,5.886,1840,5.886,1841,5.886,1842,5.886,1843,5.886,1844,5.886,1845,5.886,1846,5.886,1847,5.886,1848,5.886,1849,5.886,1850,5.886,1851,5.886,1852,5.886,1853,5.886,1854,5.886,1855,5.886]],["title/components/TimeLineComponent.html",[247,1.101,369,1.699]],["body/components/TimeLineComponent.html",[0,0.258,3,0.147,4,0.132,5,0.117,33,1.233,34,0.375,39,0.557,42,0.414,45,0.011,46,0.784,51,0.208,55,0.147,95,1.538,107,1.586,133,0.007,134,0.008,135,0.007,161,1.16,247,1.883,248,2.047,249,2.925,250,2.277,251,2.365,252,2.365,254,3.635,255,2.365,256,4.032,260,3.038,265,1.918,266,3.836,281,1.407,282,2.047,287,1.049,343,1.853,344,3.038,345,3.038,346,2.365,347,3.542,348,2.365,349,2.365,350,1.979,351,2.365,352,2.047,353,2.365,354,1.979,355,3.038,356,2.047,357,2.365,358,1.979,359,2.365,360,2.047,361,1.979,362,2.365,363,2.047,364,2.365,365,2.365,366,2.365,367,2.047,368,2.365,369,3.065,370,2.803,371,3.527,372,2.365,373,2.365,1243,5.703,1856,6.289,1857,4.431,1858,6.496,1859,5.057,1860,5.057,1861,6.496,1862,6.496]],["title/injectables/TimeService.html",[551,1.24,1363,2.707]],["body/injectables/TimeService.html",[0,0.317,3,0.18,4,0.162,5,0.144,34,0.46,36,1.363,39,0.611,42,0.47,45,0.011,51,0.255,55,0.18,133,0.008,134,0.01,135,0.008,167,2.797,265,2.178,281,1.728,287,1.289,551,2.178,579,1.728,679,4.558,714,3.02,1363,4.756,1863,5.443,1864,7.869,1865,6.211,1866,6.211,1867,6.211]],["title/interceptors/TokenInjector.html",[1665,2.877,1868,3.679]],["body/interceptors/TokenInjector.html",[0,0.263,3,0.149,4,0.134,5,0.119,10,2.719,17,2.201,32,0.461,33,0.976,34,0.381,39,0.399,42,0.461,44,1.002,45,0.012,46,0.874,47,0.937,51,0.313,55,0.149,87,1.827,88,1.827,89,2.127,133,0.007,134,0.009,135,0.007,265,1.939,276,2.501,281,1.827,287,1.067,288,1.947,302,1.885,400,2.843,436,2.338,551,1.939,561,3.916,579,1.827,996,4.088,1026,6.678,1029,3.775,1665,4.5,1869,5.144,1870,4.507,1871,6.567,1872,6.567,1873,5.144,1874,5.144,1875,6.567,1876,8.368,1877,5.144,1878,6.567,1879,7.622,1880,5.144,1881,5.144,1882,6.567,1883,5.144,1884,5.144,1885,6.567,1886,5.144,1887,5.144,1888,5.144,1889,5.144]],["title/classes/TryToLogIn.html",[0,0.214,19,1.891]],["body/classes/TryToLogIn.html",[0,0.371,1,2.553,2,0.543,3,0.088,4,0.079,5,0.141,6,1.539,7,1.319,8,1.542,9,3.683,10,1.606,11,2.633,12,2.343,13,3.071,14,3.77,15,1.421,16,3.018,17,2.075,18,3.165,19,3.071,20,2.406,21,1.761,22,1.679,23,3.038,24,2.21,25,2.766,26,3.165,27,2.655,28,1.432,29,2.639,30,3.018,31,2.639,32,0.521,33,1.38,34,0.225,35,0.61,36,1.125,37,1.897,38,1.543,39,0.354,40,1.23,41,2.129,42,0.348,44,0.421,45,0.012,46,0.367,47,0.393,49,0.63,50,0.543,51,0.187,52,0.576,53,2.371,54,1.319,55,0.22,56,0.752,57,1.539,58,2.553,59,1.368,60,1.368,61,3.018,62,3.112,63,3.454,64,3.205,65,2.553,66,1.679,67,2.129,68,2.731,69,2.21,70,3.038,71,2.553,72,0.982,73,1.901,74,1.273,75,1.058,76,1.319,77,1.319,78,1.368,79,1.368,80,1.539,81,1.761,82,1.368,83,1.761,84,1.761,85,1.421,86,1.761,87,1.519,88,1.519,89,1.475,90,1.679,91,2.639,92,2.639,93,2.214,94,1.843,95,1.385,96,2.517,97,2.731,98,3.165,99,2.82,100,2.766,101,2.406,102,1.427,103,2.517,104,1.679,105,1.477,106,3.072,107,0.953,108,1.761,109,1.606,110,1.679,111,2.639,112,1.194,113,1.761,114,1.761,115,3.516,116,1.679,117,1.761,118,2.639,119,1.539,120,1.761,121,2.517,122,1.606,123,1.761,124,1.606,125,1.761,126,1.679,127,1.761,128,2.517,129,2.517,130,1.761,131,1.761,132,1.606,133,0.004,134,0.006,135,0.004,207,2.288,1890,4.553,1891,3.038]],["title/classes/TryToLogOut.html",[0,0.214,68,1.891]],["body/classes/TryToLogOut.html",[0,0.375,1,2.603,2,0.56,3,0.091,4,0.082,5,0.143,6,1.589,7,1.362,8,1.55,9,3.712,10,1.658,11,2.675,12,2.341,13,3.108,14,3.815,15,1.467,16,3.077,17,2.099,18,3.227,19,2.965,20,2.465,21,1.819,22,1.734,23,3.079,24,2.253,25,2.819,26,3.227,27,2.706,28,1.46,29,2.703,30,3.077,31,2.703,32,0.505,33,1.393,34,0.232,35,0.625,36,0.964,37,1.548,38,1.556,39,0.244,41,2.181,42,0.2,45,0.012,49,0.651,50,0.56,51,0.192,52,0.595,53,2.416,54,1.362,55,0.222,56,0.776,57,1.589,58,2.603,59,1.413,60,1.413,61,3.077,62,3.174,63,3.495,64,3.257,65,2.603,66,1.734,67,2.181,68,2.965,69,2.253,70,3.079,71,2.603,72,1.014,73,1.932,74,1.315,75,1.072,76,1.362,77,1.362,78,1.413,79,1.413,80,1.589,81,1.819,82,1.413,83,1.819,84,1.819,85,1.467,86,1.819,87,1.548,88,1.548,89,1.503,90,1.734,91,1.819,92,1.819,93,1.526,94,1.27,95,0.954,96,1.734,97,2.775,98,3.227,99,2.416,100,2.819,101,1.658,102,0.984,103,1.734,104,1.734,105,1.526,106,3.619,107,1.462,108,2.703,109,2.465,110,2.578,111,2.703,112,1.223,113,1.819,114,1.819,115,3.572,116,1.734,117,1.819,118,2.703,119,1.589,120,1.819,121,2.578,122,1.658,123,1.819,124,1.658,125,1.819,126,1.734,127,1.819,128,2.578,129,2.578,130,1.819,131,1.819,132,1.658,133,0.004,134,0.006,135,0.004,1892,3.137]],["title/coverage.html",[1893,5.031]],["body/coverage.html",[0,0.432,1,1.015,5,0.05,6,3.289,8,0.412,15,1.015,19,0.977,24,3.228,25,2.56,28,0.569,32,0.138,41,1.015,45,0.012,58,1.015,65,1.015,68,0.977,70,1.015,71,1.015,74,0.909,95,0.66,107,0.68,133,0.003,134,0.005,135,0.003,138,3.384,142,1.055,148,0.977,159,0.701,161,0.388,177,1.199,201,1.324,204,1.055,205,3.298,206,3.298,213,1.099,216,1.015,217,1.099,219,1.099,221,1.055,226,1.514,247,1.913,248,0.878,253,1.901,291,0.878,293,1.487,294,1.724,296,1.724,300,1.724,350,0.849,352,0.878,354,0.849,356,0.878,358,0.849,360,0.878,361,0.849,363,0.878,367,0.878,369,0.878,419,1.724,434,1.577,457,2.697,459,4.408,462,1.399,463,1.399,464,1.399,465,1.399,469,1.487,477,1.487,479,1.487,494,1.487,498,1.487,500,1.487,503,1.592,504,1.592,506,1.724,507,1.592,509,1.487,511,1.324,512,2.4,516,1.147,521,1.399,526,1.901,541,1.487,542,3.384,551,2.079,556,1.258,559,1.487,561,1.055,697,1.399,710,2.783,711,1.724,715,1.901,827,1.901,836,1.015,879,1.901,880,1.592,881,1.901,895,1.901,897,1.199,908,1.015,909,1.147,910,1.147,915,3.709,942,1.724,944,1.724,946,1.901,947,1.724,948,1.901,953,1.901,954,1.901,975,1.901,1031,2.783,1032,1.724,1038,1.399,1049,1.724,1060,1.901,1061,1.901,1075,1.487,1076,3.232,1090,5.396,1113,1.901,1175,1.901,1215,1.901,1240,1.724,1243,1.724,1254,1.901,1255,1.901,1307,1.901,1319,3.084,1330,3.084,1334,0.909,1337,1.199,1338,1.199,1339,1.199,1344,2.783,1363,1.399,1471,1.901,1474,1.901,1529,1.901,1530,1.901,1560,1.901,1581,1.901,1585,1.901,1600,2.783,1602,1.724,1604,1.901,1622,1.724,1644,1.901,1645,1.901,1665,1.487,1702,1.258,1703,3.232,1710,1.399,1722,1.592,1723,3.232,1836,1.724,1837,1.901,1856,1.901,1857,1.901,1863,1.901,1868,1.901,1870,1.901,1893,1.901,1894,2.17,1895,2.17,1896,2.17,1897,2.17,1898,2.17,1899,2.17,1900,3.502,1901,6.886,1902,5.547,1903,2.17,1904,8.643,1905,7.397,1906,3.502,1907,3.502,1908,2.17,1909,2.17,1910,1.901,1911,7.715,1912,5.055,1913,2.17,1914,2.17,1915,5.055,1916,5.055,1917,3.502,1918,2.17,1919,3.502,1920,3.502,1921,7.382,1922,2.17,1923,2.17,1924,2.17,1925,5.055,1926,2.17,1927,4.714,1928,1.901,1929,1.901,1930,1.901,1931,1.901,1932,1.901,1933,2.783,1934,3.069,1935,1.901,1936,1.901,1937,2.783,1938,3.069,1939,1.901,1940,3.859,1941,1.901,1942,1.901,1943,1.901,1944,5.468,1945,1.901,1946,1.901,1947,1.901,1948,1.901,1949,1.901,1950,1.901,1951,3.069,1952,1.901,1953,3.069,1954,1.901,1955,2.17,1956,1.901,1957,4.017,1958,1.724,1959,1.901,1960,1.901,1961,1.901,1962,1.901,1963,3.069,1964,1.901,1965,1.901,1966,6.481,1967,1.901,1968,1.901,1969,1.901,1970,1.901,1971,1.901,1972,1.901,1973,1.901,1974,1.901,1975,1.901,1976,1.901,1977,1.901,1978,1.901,1979,1.901,1980,1.901,1981,2.17,1982,2.17]],["title/dependencies.html",[377,2.793,1983,3.501]],["body/dependencies.html",[4,0.14,45,0.012,52,1.282,53,2.336,54,2.336,112,1.411,133,0.007,134,0.009,135,0.007,233,2.178,287,1.116,288,2.037,298,3.735,299,2.974,377,2.974,379,3.917,389,3.119,394,5.37,395,4.63,404,3.119,407,3.948,410,4.958,411,4.714,431,3.119,461,3.119,468,3.469,705,3.119,800,3.119,863,4.714,937,4.714,995,4.276,1052,4.276,1122,4.276,1625,3.948,1685,4.714,1984,5.38,1985,8.435,1986,5.38,1987,5.38,1988,5.38,1989,6.757,1990,7.982,1991,5.38,1992,5.38,1993,5.38,1994,4.714,1995,5.38,1996,5.38,1997,5.38,1998,5.38,1999,5.38,2000,5.38,2001,5.38,2002,5.38,2003,5.38,2004,5.38,2005,5.38,2006,4.714,2007,5.38,2008,5.38,2009,5.38,2010,5.38,2011,5.38,2012,5.38]],["title/miscellaneous/enumerations.html",[2013,2.029,2014,4.428]],["body/miscellaneous/enumerations.html",[1,1.884,6,2.04,8,0.764,10,2.95,12,2.312,19,1.814,34,0.298,45,0.011,50,1.559,57,2.827,58,1.884,59,1.814,60,2.513,61,3.54,62,3.04,63,3.804,64,3.654,65,1.884,66,2.227,67,2.61,68,1.814,69,2.592,70,1.884,71,1.884,72,2.234,74,2.338,76,2.423,77,2.423,78,2.513,133,0.005,134,0.007,135,0.005,138,2.458,140,3.598,144,1.43,155,3.405,161,1.402,175,1.476,179,3.598,180,2.458,181,2.597,182,2.597,186,2.597,187,2.597,188,2.597,190,3.598,191,2.227,192,2.458,193,2.597,194,2.597,195,2.597,196,1.959,204,1.959,205,2.129,206,2.95,212,3.085,213,2.04,214,4.464,215,3.265,216,1.884,217,2.04,218,2.335,219,2.04,220,2.896,221,1.959,222,2.04,223,1.263,224,3.54,225,1.959,226,2.202,227,2.683,228,2.683,229,1.73,230,2.714,231,2.714,272,2.956,438,3.085,460,4.257,511,2.458,512,2.76,516,2.95,519,4.435,520,3.202,521,2.597,542,2.458,558,4.095,907,3.405,908,1.884,909,2.129,910,2.129,1319,2.458,1330,2.458,1336,3.598,1337,2.227,1338,2.227,1339,2.227,2013,2.335,2014,3.53,2015,6.404,2016,3.53,2017,3.53,2018,5.581,2019,4.029,2020,5.581,2021,3.53,2022,5.089,2023,3.202,2024,3.53,2025,6.404,2026,5.581,2027,4.029,2028,5.581,2029,4.029,2030,4.029,2031,5.581,2032,5.581]],["title/miscellaneous/functions.html",[2013,2.029,2033,4.428]],["body/miscellaneous/functions.html",[7,1.623,8,1.462,11,2.904,23,1.748,25,3.902,32,0.491,34,0.277,44,1.17,45,0.011,46,1.02,47,1.093,75,1.15,133,0.005,134,0.007,135,0.005,142,1.818,144,1.326,161,1.098,167,3.788,189,1.37,211,2.143,281,2.34,300,4.209,370,2.3,462,2.41,463,2.41,464,2.41,465,2.41,542,2.28,584,2.28,593,2.41,636,1.748,676,2.743,688,2.743,694,3.886,701,2.743,702,2.743,703,3.886,704,3.886,705,3.07,706,2.561,707,2.561,708,2.743,709,2.743,826,5.316,836,1.748,858,6.75,915,2.743,938,3.275,939,4.64,992,3.275,1048,2.561,1049,4.209,1334,1.566,1344,2.971,1410,2.743,1464,3.275,1702,2.167,1723,2.743,1816,2.971,1910,4.64,1927,2.971,1933,2.971,1935,3.275,1936,4.64,1937,2.971,1956,4.64,1957,2.971,1958,4.209,1966,3.275,1967,4.64,1968,4.64,1969,4.64,1970,4.64,1971,5.389,1972,4.64,1973,4.64,1974,4.64,1975,4.64,1976,5.389,1977,5.389,1978,5.389,1979,4.64,1980,4.64,2013,2.167,2022,2.971,2023,2.971,2033,3.275,2034,8.239,2035,3.275,2036,3.275,2037,3.275,2038,3.275,2039,3.275,2040,3.738,2041,3.738,2042,3.738,2043,5.296,2044,5.296,2045,3.738,2046,7.062,2047,3.738,2048,3.738,2049,3.738,2050,3.738,2051,3.738,2052,3.738,2053,3.738,2054,3.738,2055,3.738,2056,3.738,2057,6.69,2058,3.738]],["title/index.html",[34,0.259,2059,3.501,2060,3.067]],["body/index.html",[5,0.167,16,3.981,27,1.916,45,0.011,62,2.224,63,1.996,82,2.85,93,1.916,94,2.915,99,1.711,101,2.905,106,1.996,119,2.783,124,2.083,133,0.005,134,0.007,135,0.005,161,0.982,180,2.404,225,1.916,229,1.064,232,1.542,257,3.131,276,2.672,277,3.453,285,3.453,319,3.131,370,1.89,371,2.475,395,3.766,410,4.644,434,1.774,457,2.672,543,5.024,569,4.033,570,5.024,575,2.7,594,2.891,638,2.7,641,4.033,707,5.11,721,6,774,3.453,784,3.453,922,4.414,929,3.453,1099,4.367,1188,3.453,1204,3.453,1265,6,1368,2.404,1694,3.453,1921,3.453,1994,4.815,2060,6,2061,6.328,2062,3.94,2063,3.94,2064,5.496,2065,3.94,2066,3.94,2067,3.94,2068,3.94,2069,3.94,2070,3.94,2071,3.94,2072,3.94,2073,6.328,2074,6.328,2075,7.201,2076,6.328,2077,3.94,2078,5.496,2079,3.94,2080,7.201,2081,3.94,2082,3.94,2083,5.496,2084,5.496,2085,3.94,2086,5.496,2087,3.94,2088,3.94,2089,3.94,2090,3.94,2091,7.201,2092,5.496,2093,5.496,2094,3.94,2095,7.201,2096,7.201,2097,3.94,2098,7.93,2099,3.94,2100,3.94,2101,3.94,2102,3.94,2103,3.94,2104,3.94,2105,3.94,2106,3.94,2107,3.94,2108,3.94,2109,3.94,2110,3.94,2111,6.328,2112,3.94,2113,3.94,2114,3.94,2115,3.94,2116,3.94,2117,3.94,2118,3.94,2119,3.94,2120,3.94,2121,3.94,2122,3.94,2123,3.94,2124,3.94,2125,3.94,2126,3.453,2127,3.94,2128,3.94,2129,3.94,2130,3.94,2131,3.94,2132,3.94,2133,6.847,2134,3.94,2135,3.94,2136,3.94,2137,3.94,2138,3.94,2139,3.94,2140,5.496,2141,3.94,2142,3.94,2143,3.94,2144,3.94,2145,3.94,2146,3.94,2147,3.94,2148,5.496,2149,3.94,2150,3.94,2151,3.94,2152,3.94,2153,3.94,2154,3.94,2155,3.94,2156,3.94,2157,3.94,2158,3.94,2159,3.94,2160,3.94,2161,3.94,2162,5.496,2163,3.131,2164,3.94,2165,3.94,2166,3.94,2167,3.94,2168,3.94,2169,3.94,2170,3.94,2171,3.94,2172,5.496,2173,3.94,2174,3.94,2175,3.94,2176,3.94,2177,3.94,2178,3.94,2179,3.94,2180,3.94,2181,3.94,2182,3.94,2183,3.94]],["title/modules.html",[376,2.792]],["body/modules.html",[45,0.01,133,0.008,134,0.01,135,0.008,375,4.246,376,3.013,386,4.246,387,4.246,388,4.246,395,5.774,532,4.548,536,4.246,1033,4.246,1230,4.548,1235,4.246,2006,7.383,2126,6.888,2184,8.426,2185,8.634,2186,7.861]],["title/overview.html",[2187,5.031]],["body/overview.html",[2,0.76,45,0.011,69,1.723,95,2.005,107,2.067,133,0.006,134,0.008,135,0.006,248,3.163,249,1.917,343,1.56,350,2.579,352,3.163,354,3.058,356,2.668,358,3.058,360,3.163,361,3.058,363,2.668,367,2.668,369,2.668,374,1.784,375,5.833,376,2.07,377,2.354,378,2.597,379,2.468,380,2.597,381,2.25,382,3.731,383,3.731,384,3.731,385,3.731,386,4.516,387,5.723,388,5.072,389,3.361,390,2.468,430,2.745,434,2.968,458,2.745,532,5.605,533,3.731,534,3.731,535,3.731,536,4.516,561,3.205,714,2.07,836,3.082,897,3.644,1033,5.833,1034,3.731,1035,3.731,1036,3.731,1037,3.731,1038,4.25,1230,6.195,1231,3.731,1232,3.731,1233,3.731,1234,3.731,1235,4.516,1363,4.25,1663,3.731,1664,3.731,1665,4.516,1678,3.731,1679,3.731,1954,3.731,2187,3.731,2188,4.258,2189,4.258,2190,4.258,2191,4.258,2192,4.258]],["title/routes.html",[430,3.702]],["body/routes.html",[45,0.01,133,0.009,134,0.01,135,0.009,430,4.423]],["title/miscellaneous/typealiases.html",[2013,2.029,2193,5.053]],["body/miscellaneous/typealiases.html",[1,2.746,6,2.974,19,2.645,32,0.374,34,0.435,45,0.012,58,2.746,65,2.746,68,2.645,70,2.746,71,2.746,132,3.77,133,0.008,134,0.009,135,0.008,204,2.856,205,3.104,206,3.77,213,2.974,216,2.746,219,2.974,221,2.856,226,2.641,243,3.943,511,3.583,512,4.024,521,3.786,525,5.668,908,2.746,909,3.104,910,3.104,1319,3.583,1326,4.887,1330,3.583,1337,3.246,1338,3.246,1339,3.246,1343,4.887,2013,3.405,2016,5.146,2017,5.146,2021,5.146,2022,4.667,2024,5.146,2194,5.873]],["title/miscellaneous/variables.html",[2013,2.029,2163,4.016]],["body/miscellaneous/variables.html",[11,3.203,12,1.47,15,1.283,28,1.106,32,0.513,34,0.203,45,0.012,49,1.781,50,1.533,74,1.15,75,0.686,76,1.191,77,2.228,78,2.311,122,1.45,133,0.007,134,0.006,135,0.004,159,0.887,161,0.49,167,1.898,189,2.109,229,1.139,276,1.334,293,2.888,294,3.349,296,3.349,333,1.191,370,1.449,419,3.349,424,1.88,434,2.592,436,1.362,438,1.517,442,3.093,455,2.014,459,2.181,460,2.33,461,3.337,462,4.005,463,1.769,464,3.308,465,1.769,471,2.405,473,2.405,474,2.405,475,2.405,477,1.88,479,1.88,483,2.405,485,2.405,488,2.405,490,2.405,494,1.88,498,1.88,500,1.88,503,3.093,504,3.093,505,2.405,506,4.078,507,3.093,508,2.405,509,3.516,510,2.405,542,1.674,552,1.674,559,2.888,560,2.014,579,1.96,584,1.674,598,1.591,636,1.971,637,1.88,638,1.88,706,1.88,710,2.181,711,3.349,712,4.543,713,2.405,835,3.765,889,2.405,915,2.014,918,2.405,919,2.181,920,2.405,922,3.308,925,2.975,931,3.349,935,2.405,936,2.405,942,3.349,943,2.405,944,3.349,945,2.405,1031,2.181,1032,3.349,1048,1.88,1052,2.181,1053,2.405,1076,2.014,1087,2.181,1088,2.181,1089,2.181,1090,2.571,1097,2.181,1600,2.181,1602,3.349,1603,2.405,1622,3.349,1753,4.575,1927,2.181,1928,3.693,1929,3.693,1930,3.693,1931,3.693,1932,4.496,1933,2.181,1934,5.044,1937,2.181,1938,2.405,1939,3.693,1940,2.405,1941,3.693,1942,3.693,1943,3.693,1944,2.405,1945,3.693,1946,3.693,1947,3.693,1948,3.693,1949,3.693,1950,4.496,1951,2.405,1952,3.693,1953,2.405,1957,2.181,1958,2.181,1959,3.693,1960,3.693,1961,2.405,1962,2.405,1963,2.405,1964,3.693,1965,3.693,2013,1.591,2023,2.181,2035,4.496,2036,5.443,2037,2.405,2038,2.405,2039,3.693,2163,2.181,2195,5.757,2196,2.744,2197,2.744,2198,4.215,2199,2.744,2200,2.744,2201,2.744,2202,2.744,2203,6.828,2204,4.215,2205,5.131,2206,4.215,2207,4.215,2208,2.744,2209,2.744,2210,4.215,2211,4.215,2212,5.131,2213,2.744,2214,2.744,2215,2.744,2216,2.744,2217,2.744,2218,2.744,2219,2.744,2220,2.744,2221,2.744,2222,2.744,2223,2.744,2224,5.131,2225,2.744,2226,2.744,2227,2.744,2228,2.744,2229,2.744,2230,2.744,2231,2.744,2232,2.744,2233,2.744,2234,2.744,2235,4.215,2236,2.744,2237,2.744,2238,2.744,2239,2.744,2240,2.744,2241,2.744,2242,5.131,2243,2.744,2244,2.744,2245,2.744,2246,2.744,2247,2.744,2248,2.744,2249,2.744,2250,2.744,2251,2.744,2252,2.744,2253,2.744,2254,2.744,2255,2.744,2256,2.744,2257,2.744,2258,2.744,2259,2.744,2260,2.744]]],"invertedIndex":[["",{"_index":45,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1090,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"injectables/HandlebarsService.html":{},"classes/RouterStateUrl.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.8.29",{"_index":2012,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1904,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1900,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1898,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1922,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":1909,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1901,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1905,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1911,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1906,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1912,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1899,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1907,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1908,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1327,"title":{"classes/HandleUnexpectedError-1.html":{}},"body":{"injectables/HandlebarsService.html":{},"components/NavbarComponent.html":{},"classes/ThirdsServiceMock.html":{}}}],["1.0.14",{"_index":2003,"title":{},"body":{"dependencies.html":{}}}],["1.0.9",{"_index":1999,"title":{},"body":{"dependencies.html":{}}}],["1.9.3",{"_index":2010,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1920,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1925,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1924,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1916,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1914,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1955,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":1897,"title":{},"body":{"coverage.html":{}}}],["10/15",{"_index":1918,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1919,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":560,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["11",{"_index":2190,"title":{},"body":{"overview.html":{}}}],["11.0.1",{"_index":1991,"title":{},"body":{"dependencies.html":{}}}],["13",{"_index":2189,"title":{},"body":{"overview.html":{}}}],["14",{"_index":1896,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":1954,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["16px",{"_index":1519,"title":{},"body":{"components/IconComponent.html":{}}}],["2",{"_index":452,"title":{"classes/HandleUnexpectedError-2.html":{}},"body":{"modules/AppRoutingModule.html":{}}}],["2.0",{"_index":334,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["2.0.1",{"_index":2004,"title":{},"body":{"dependencies.html":{}}}],["2.24.0",{"_index":2002,"title":{},"body":{"dependencies.html":{}}}],["2.6.3",{"_index":1996,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1913,"title":{},"body":{"coverage.html":{}}}],["2018",{"_index":324,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["25",{"_index":1915,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":1439,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["3.6.0",{"_index":2008,"title":{},"body":{"dependencies.html":{}}}],["30000",{"_index":1030,"title":{},"body":{"injectables/CardService.html":{}}}],["30px",{"_index":872,"title":{},"body":{"components/CardComponent.html":{}}}],["32px",{"_index":1518,"title":{},"body":{"components/IconComponent.html":{}}}],["33",{"_index":1923,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":1989,"title":{},"body":{"dependencies.html":{}}}],["4.0.12",{"_index":2000,"title":{},"body":{"dependencies.html":{}}}],["4.17.11",{"_index":2001,"title":{},"body":{"dependencies.html":{}}}],["4.2.1",{"_index":1993,"title":{},"body":{"dependencies.html":{}}}],["4.7.0",{"_index":1998,"title":{},"body":{"dependencies.html":{}}}],["4/8",{"_index":1903,"title":{},"body":{"coverage.html":{}}}],["400px",{"_index":860,"title":{},"body":{"components/CardComponent.html":{}}}],["43",{"_index":2191,"title":{},"body":{"overview.html":{}}}],["5",{"_index":2192,"title":{},"body":{"overview.html":{}}}],["50",{"_index":1902,"title":{},"body":{"coverage.html":{}}}],["5008",{"_index":2097,"title":{},"body":{"index.html":{}}}],["5009",{"_index":2103,"title":{},"body":{"index.html":{}}}],["5010",{"_index":2106,"title":{},"body":{"index.html":{}}}],["5011",{"_index":2110,"title":{},"body":{"index.html":{}}}],["5012",{"_index":2115,"title":{},"body":{"index.html":{}}}],["5px",{"_index":862,"title":{},"body":{"components/CardComponent.html":{}}}],["6.0.8",{"_index":2065,"title":{},"body":{"index.html":{}}}],["6.3.3",{"_index":2005,"title":{},"body":{"dependencies.html":{}}}],["6/9",{"_index":1926,"title":{},"body":{"coverage.html":{}}}],["64px",{"_index":1517,"title":{},"body":{"components/IconComponent.html":{}}}],["66",{"_index":1917,"title":{},"body":{"coverage.html":{}}}],["7.1.0",{"_index":1990,"title":{},"body":{"dependencies.html":{}}}],["7.2.2",{"_index":1985,"title":{},"body":{"dependencies.html":{}}}],["7479",{"_index":2101,"title":{},"body":{"index.html":{}}}],["7483",{"_index":2105,"title":{},"body":{"index.html":{}}}],["7488",{"_index":2108,"title":{},"body":{"index.html":{}}}],["7493",{"_index":2113,"title":{},"body":{"index.html":{}}}],["8",{"_index":613,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["8px",{"_index":342,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{}}}],["9",{"_index":2188,"title":{},"body":{"overview.html":{}}}],["_",{"_index":1624,"title":{},"body":{"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["_.difference(work",{"_index":1791,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["_.fill(this.expandedmenu,false",{"_index":1631,"title":{},"body":{"components/NavbarComponent.html":{}}}],["_.merge(acc,val",{"_index":1762,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["_.remove(this.loading",{"_index":1807,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["_.uniq(ids",{"_index":1790,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["_htmlcontent",{"_index":1115,"title":{},"body":{"components/DetailComponent.html":{}}}],["_i18nprefix",{"_index":830,"title":{},"body":{"components/CardComponent.html":{},"components/DetailsComponent.html":{}}}],["_thirdmenus",{"_index":1606,"title":{},"body":{"components/NavbarComponent.html":{}}}],["a[key",{"_index":1467,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["accept",{"_index":61,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["acceptlogin",{"_index":1,"title":{"classes/AcceptLogIn.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["acceptlogin(authenticationinfo",{"_index":781,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["acceptlogin(authinfo",{"_index":805,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["acceptlogout",{"_index":70,"title":{"classes/AcceptLogOut.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["acceptlogoutsuccess",{"_index":71,"title":{"classes/AcceptLogOutSuccess.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["acceptlogoutsucess",{"_index":742,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["access_token",{"_index":545,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["accessors",{"_index":832,"title":{},"body":{"components/CardComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/NavbarComponent.html":{}}}],["accordingly",{"_index":724,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["acronym",{"_index":2073,"title":{},"body":{"index.html":{}}}],["action",{"_index":8,"title":{"classes/Action.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["action.buttonstyle",{"_index":1160,"title":{},"body":{"components/DetailComponent.html":{}}}],["action.buttonstyle.split",{"_index":1161,"title":{},"body":{"components/DetailComponent.html":{}}}],["action.contentstyle",{"_index":1163,"title":{},"body":{"components/DetailComponent.html":{}}}],["action.contentstyle.split",{"_index":1164,"title":{},"body":{"components/DetailComponent.html":{}}}],["action.payload",{"_index":777,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["action.payload.event.url.indexof(\"/feed/cards/\")>=0",{"_index":1067,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["action.payload.routerstate",{"_index":1069,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["actionid",{"_index":1130,"title":{},"body":{"components/DetailComponent.html":{}}}],["actionreducermap",{"_index":473,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["actions",{"_index":178,"title":{},"body":{"classes/Action.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"classes/ParameterListItem.html":{}}}],["actiontype",{"_index":140,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["activate",{"_index":1205,"title":{},"body":{"components/DetailsComponent.html":{}}}],["activatedroutesnapshot",{"_index":1081,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["active",{"_index":523,"title":{},"body":{"classes/ApplyFilter.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/Filter.html":{},"classes/InitFilter.html":{}}}],["active:boolean",{"_index":1297,"title":{},"body":{"classes/Filter.html":{}}}],["activedetail",{"_index":1200,"title":{},"body":{"components/DetailsComponent.html":{}}}],["activedetail.length",{"_index":1206,"title":{},"body":{"components/DetailsComponent.html":{}}}],["actual_component",{"_index":373,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["add",{"_index":224,"title":{},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"miscellaneous/enumerations.html":{}}}],["addauthheadersifnecessary",{"_index":1871,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["addauthheadersifnecessary(request",{"_index":1875,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["added",{"_index":923,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["addlightcardfailure",{"_index":204,"title":{"classes/AddLightCardFailure.html":{}},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["addlightcardfailure({error",{"_index":969,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["admin",{"_index":2130,"title":{},"body":{"index.html":{}}}],["afterviewinit",{"_index":1176,"title":{},"body":{"components/DetailsComponent.html":{},"components/FeedComponent.html":{}}}],["aims",{"_index":83,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["alarm",{"_index":2030,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["alert(`${actionid",{"_index":1171,"title":{},"body":{"components/DetailComponent.html":{}}}],["aliases",{"_index":2194,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":873,"title":{},"body":{"components/CardComponent.html":{}}}],["already",{"_index":1676,"title":{},"body":{"modules/ServicesModule.html":{}}}],["always",{"_index":1097,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"miscellaneous/variables.html":{}}}],["angular",{"_index":569,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"index.html":{}}}],["angular/animations",{"_index":1984,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":400,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{}}}],["angular/compiler",{"_index":1986,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":287,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":407,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{},"components/LoginComponent.html":{},"dependencies.html":{}}}],["angular/http",{"_index":1987,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":394,"title":{},"body":{"modules/AppModule.html":{},"components/DetailComponent.html":{},"dependencies.html":{}}}],["angular/router",{"_index":431,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"classes/CustomRouterStateSerializer.html":{},"modules/FeedRoutingModule.html":{},"classes/RouterStateUrl.html":{},"dependencies.html":{}}}],["app",{"_index":273,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/NavbarComponent.html":{}}}],["app.component",{"_index":414,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":261,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":259,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":248,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{},"coverage.html":{},"overview.html":{}}}],["appeffects",{"_index":503,"title":{},"body":{"interfaces/AppState.html":{},"modules/StateModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appendfixedlengthalphanumericvalue",{"_index":1967,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["appendfixedlengthalphanumericvalue(length",{"_index":2042,"title":{},"body":{"miscellaneous/functions.html":{}}}],["application",{"_index":82,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"index.html":{}}}],["application/x",{"_index":609,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["applies",{"_index":1294,"title":{},"body":{"classes/Filter.html":{}}}],["apply",{"_index":767,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"interfaces/CardFeedState.html":{},"classes/Filter.html":{}}}],["applyfilter",{"_index":511,"title":{"classes/ApplyFilter.html":{}},"body":{"classes/ApplyFilter.html":{},"classes/Filter.html":{},"classes/InitFilter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["applyfilter(card",{"_index":1282,"title":{},"body":{"classes/Filter.html":{}}}],["appmetareducers",{"_index":506,"title":{},"body":{"interfaces/AppState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":375,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"modules.html":{},"overview.html":{}}}],["appreducer",{"_index":504,"title":{},"body":{"interfaces/AppState.html":{},"modules/StateModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appropriate",{"_index":686,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["approutingmodule",{"_index":386,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["appstate",{"_index":291,"title":{"interfaces/AppState.html":{}},"body":{"components/AppComponent.html":{},"interfaces/AppState.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{}}}],["archives",{"_index":442,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"miscellaneous/variables.html":{}}}],["archives'},{'name",{"_index":351,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["archives.component",{"_index":538,"title":{},"body":{"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{}}}],["archives.component.html",{"_index":528,"title":{},"body":{"components/ArchivesComponent.html":{}}}],["archives.component.scss",{"_index":527,"title":{},"body":{"components/ArchivesComponent.html":{}}}],["archivescomponent",{"_index":350,"title":{"components/ArchivesComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{},"coverage.html":{},"overview.html":{}}}],["archivesmodule",{"_index":532,"title":{"modules/ArchivesModule.html":{}},"body":{"modules/ArchivesModule.html":{},"modules.html":{},"overview.html":{}}}],["archivesroutingmodule",{"_index":536,"title":{"modules/ArchivesRoutingModule.html":{}},"body":{"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":1438,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["args[2",{"_index":1440,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["arguments",{"_index":1263,"title":{},"body":{"classes/Filter.html":{}}}],["array(menus.length",{"_index":1630,"title":{},"body":{"components/NavbarComponent.html":{}}}],["array[0",{"_index":1594,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["artifacts",{"_index":2144,"title":{},"body":{"index.html":{}}}],["ask",{"_index":565,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["asktoken",{"_index":807,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["asktoken(login",{"_index":597,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["asktokenurl",{"_index":566,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["assets/i18n",{"_index":2225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/styles/_variables.scss",{"_index":1524,"title":{},"body":{"components/IconComponent.html":{}}}],["attachaction",{"_index":1116,"title":{},"body":{"components/DetailComponent.html":{}}}],["attachaction(button",{"_index":1128,"title":{},"body":{"components/DetailComponent.html":{}}}],["attempt",{"_index":64,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["auth",{"_index":2212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authenticate",{"_index":787,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["authenticated",{"_index":320,"title":{},"body":{"components/AppComponent.html":{}}}],["authentication",{"_index":12,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authentication.reducer.ts",{"_index":26,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authentication.service",{"_index":996,"title":{},"body":{"injectables/CardService.html":{},"modules/ServicesModule.html":{},"interceptors/TokenInjector.html":{}}}],["authenticationactions",{"_index":132,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/typealiases.html":{}}}],["authenticationactiontypes",{"_index":57,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["authenticationactiontypes.acceptlogin",{"_index":31,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.acceptlogout",{"_index":129,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.acceptlogoutsuccess",{"_index":131,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.checkauthenticationstatus",{"_index":90,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.rejectlogin",{"_index":121,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.trytologin",{"_index":103,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.trytologout",{"_index":110,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationeffect",{"_index":115,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationeffects",{"_index":15,"title":{"injectables/AuthenticationEffects.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"interfaces/AppState.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authenticationguard",{"_index":432,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{}}}],["authenticationreducer",{"_index":471,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["authenticationservice",{"_index":561,"title":{"injectables/AuthenticationService.html":{}},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{},"coverage.html":{},"overview.html":{}}}],["authenticationservice,private",{"_index":998,"title":{},"body":{"injectables/CardService.html":{}}}],["authinfo",{"_index":803,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["authinitialstate",{"_index":711,"title":{},"body":{"interfaces/AuthState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authobject",{"_index":541,"title":{"classes/AuthObject.html":{}},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"coverage.html":{}}}],["authorization",{"_index":691,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["authservice",{"_index":717,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["authstate",{"_index":462,"title":{"interfaces/AuthState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/AuthState.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":2126,"title":{},"body":{"index.html":{},"modules.html":{}}}],["awesome",{"_index":1997,"title":{},"body":{"dependencies.html":{}}}],["b[key",{"_index":1469,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["back",{"_index":577,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["background",{"_index":2138,"title":{},"body":{"index.html":{}}}],["badge",{"_index":870,"title":{},"body":{"components/CardComponent.html":{}}}],["base",{"_index":2043,"title":{},"body":{"miscellaneous/functions.html":{}}}],["based",{"_index":2154,"title":{},"body":{"index.html":{}}}],["basehref",{"_index":1505,"title":{},"body":{"components/IconComponent.html":{}}}],["basehref?basehref:'/')+'assets/images/icons",{"_index":1508,"title":{},"body":{"components/IconComponent.html":{}}}],["bearer",{"_index":692,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["before",{"_index":2119,"title":{},"body":{"index.html":{}}}],["beginning",{"_index":2220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["behaviour",{"_index":1258,"title":{},"body":{"classes/Filter.html":{}}}],["beware",{"_index":603,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{}}}],["big",{"_index":1480,"title":{},"body":{"components/IconComponent.html":{}}}],["big:boolean",{"_index":1498,"title":{},"body":{"components/IconComponent.html":{}}}],["bindactions",{"_index":1117,"title":{},"body":{"components/DetailComponent.html":{}}}],["boolean",{"_index":144,"title":{},"body":{"classes/Action.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"components/LoginComponent.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["boot",{"_index":2122,"title":{},"body":{"index.html":{}}}],["bootstrap",{"_index":379,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"dependencies.html":{},"overview.html":{}}}],["bootstrap/ng",{"_index":411,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["border",{"_index":871,"title":{},"body":{"components/CardComponent.html":{}}}],["both",{"_index":1257,"title":{},"body":{"classes/Filter.html":{}}}],["bottom",{"_index":861,"title":{},"body":{"components/CardComponent.html":{}}}],["break",{"_index":1434,"title":{},"body":{"injectables/HandlebarsService.html":{},"components/IconComponent.html":{}}}],["browse",{"_index":2185,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":395,"title":{},"body":{"modules/AppModule.html":{},"components/DetailComponent.html":{},"dependencies.html":{},"index.html":{},"modules.html":{}}}],["browser/animations",{"_index":398,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":397,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":393,"title":{},"body":{"modules/AppModule.html":{}}}],["btn",{"_index":1561,"title":{},"body":{"components/LoginComponent.html":{}}}],["bugs",{"_index":2181,"title":{},"body":{"index.html":{}}}],["build",{"_index":570,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"index.html":{}}}],["business",{"_index":721,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"index.html":{}}}],["button",{"_index":100,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"components/DetailComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["button.addeventlistener('click',(event",{"_index":1170,"title":{},"body":{"components/DetailComponent.html":{}}}],["button.attributes['action",{"_index":1155,"title":{},"body":{"components/DetailComponent.html":{}}}],["button.children[0].classlist.add('fa",{"_index":1166,"title":{},"body":{"components/DetailComponent.html":{}}}],["button.children[0].classlist.add(c",{"_index":1165,"title":{},"body":{"components/DetailComponent.html":{}}}],["button.classlist.add('btn",{"_index":1159,"title":{},"body":{"components/DetailComponent.html":{}}}],["button.classlist.add(c",{"_index":1162,"title":{},"body":{"components/DetailComponent.html":{}}}],["buttons",{"_index":1153,"title":{},"body":{"components/DetailComponent.html":{}}}],["buttonstyle",{"_index":145,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["c",{"_index":323,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["call",{"_index":573,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["called",{"_index":97,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["calling",{"_index":765,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["canactivate",{"_index":441,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["caps",{"_index":866,"title":{},"body":{"components/CardComponent.html":{}}}],["card",{"_index":161,"title":{"classes/Card.html":{}},"body":{"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"components/ArchivesComponent.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/SelectLightCard.html":{},"components/TimeLineComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["card'},{'name",{"_index":353,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["card):observable",{"_index":1402,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["card.actions",{"_index":974,"title":{},"body":{"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/LightCardEffects.html":{}}}],["card.actions.ts",{"_index":206,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["card.actions.ts:23",{"_index":1549,"title":{},"body":{"classes/LoadLightCards.html":{}}}],["card.actions.ts:27",{"_index":1553,"title":{},"body":{"classes/LoadLightCardsSuccess.html":{}}}],["card.actions.ts:29",{"_index":1554,"title":{},"body":{"classes/LoadLightCardsSuccess.html":{}}}],["card.actions.ts:34",{"_index":1550,"title":{},"body":{"classes/LoadLightCardsExtendedData.html":{}}}],["card.actions.ts:41",{"_index":1551,"title":{},"body":{"classes/LoadLightCardsFailure.html":{}}}],["card.actions.ts:43",{"_index":1552,"title":{},"body":{"classes/LoadLightCardsFailure.html":{}}}],["card.actions.ts:49",{"_index":1661,"title":{},"body":{"classes/SelectLightCard.html":{}}}],["card.actions.ts:51",{"_index":1662,"title":{},"body":{"classes/SelectLightCard.html":{}}}],["card.actions.ts:56",{"_index":208,"title":{},"body":{"classes/AddLightCardFailure.html":{}}}],["card.actions.ts:58",{"_index":209,"title":{},"body":{"classes/AddLightCardFailure.html":{}}}],["card.actions.ts:64",{"_index":1328,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{}}}],["card.actions.ts:66",{"_index":1329,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{}}}],["card.component.html",{"_index":829,"title":{},"body":{"components/CardComponent.html":{}}}],["card.component.scss",{"_index":828,"title":{},"body":{"components/CardComponent.html":{}}}],["card.effects",{"_index":502,"title":{},"body":{"interfaces/AppState.html":{}}}],["card.effects.ts",{"_index":1530,"title":{},"body":{"injectables/LightCardEffects.html":{},"coverage.html":{}}}],["card.effects.ts:22",{"_index":1532,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["card.effects.ts:32",{"_index":1541,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["card.model",{"_index":157,"title":{},"body":{"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/ParameterListItem.html":{},"classes/SelectLightCard.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["card.model.ts",{"_index":2025,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["card.publisher",{"_index":1777,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["card.publisherversion",{"_index":1778,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["card.reducer",{"_index":487,"title":{},"body":{"interfaces/AppState.html":{}}}],["card.reducer.ts",{"_index":1936,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["card.service",{"_index":1672,"title":{},"body":{"modules/ServicesModule.html":{}}}],["card1",{"_index":2058,"title":{},"body":{"miscellaneous/functions.html":{}}}],["card1.startdate",{"_index":940,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["card2",{"_index":939,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/functions.html":{}}}],["card2.startdate",{"_index":941,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["card:card",{"_index":889,"title":{},"body":{"components/CardDetailsComponent.html":{},"miscellaneous/variables.html":{}}}],["card==null?null:card.details",{"_index":2252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cardactions",{"_index":1326,"title":{},"body":{"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"miscellaneous/typealiases.html":{}}}],["cardactiontypes",{"_index":907,"title":{},"body":{"injectables/CardEffects.html":{},"classes/HandleUnexpectedError.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"miscellaneous/enumerations.html":{}}}],["cardactiontypes.handleunexpectederror",{"_index":1322,"title":{},"body":{"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{}}}],["cardactiontypes.loadcard",{"_index":1323,"title":{},"body":{"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{}}}],["cardactiontypes.loadcardfailure",{"_index":1324,"title":{},"body":{"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{}}}],["cardactiontypes.loadcardsuccess",{"_index":1325,"title":{},"body":{"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{}}}],["cardcomponent",{"_index":352,"title":{"components/CardComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{},"coverage.html":{},"overview.html":{}}}],["carddetail",{"_index":177,"title":{"classes/CardDetail.html":{}},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"components/DetailComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"coverage.html":{}}}],["carddetailscomponent",{"_index":354,"title":{"components/CardDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{},"coverage.html":{},"overview.html":{}}}],["cardeffects",{"_index":477,"title":{"injectables/CardEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/CardEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cardfeedstate",{"_index":464,"title":{"interfaces/CardFeedState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/CardFeedState.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["cardinitialstate",{"_index":1032,"title":{},"body":{"interfaces/CardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cardlistcomponent",{"_index":356,"title":{"components/CardListComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{},"coverage.html":{},"overview.html":{}}}],["cardoperation",{"_index":992,"title":{},"body":{"injectables/CardService.html":{},"miscellaneous/functions.html":{}}}],["cardoperationeffects",{"_index":479,"title":{"injectables/CardOperationEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/CardOperationEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cardoperationsurl",{"_index":976,"title":{},"body":{"injectables/CardService.html":{}}}],["cardoperationtype",{"_index":2018,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cardreducer",{"_index":488,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["cards",{"_index":922,"title":{},"body":{"interfaces/CardFeedState.html":{},"components/FeedComponent.html":{},"modules/FeedRoutingModule.html":{},"injectables/ThirdsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["cards'},{'name",{"_index":362,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["cards/cards.module",{"_index":1245,"title":{},"body":{"modules/FeedModule.html":{}}}],["cards/components/card",{"_index":1248,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["cards/components/detail/detail.component",{"_index":1247,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["cardselectors",{"_index":887,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["cardservice",{"_index":897,"title":{"injectables/CardService.html":{}},"body":{"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"injectables/CustomRouterEffects.html":{},"injectables/LightCardEffects.html":{},"modules/ServicesModule.html":{},"coverage.html":{},"overview.html":{}}}],["cardsmodule",{"_index":1033,"title":{"modules/CardsModule.html":{}},"body":{"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules.html":{},"overview.html":{}}}],["cardstate",{"_index":463,"title":{"interfaces/CardState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/CardState.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["cardstate.selected",{"_index":2250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cardstate:cardstate",{"_index":2249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cardsurl",{"_index":977,"title":{},"body":{"injectables/CardService.html":{}}}],["care",{"_index":1267,"title":{},"body":{"classes/Filter.html":{}}}],["case",{"_index":1098,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"classes/RouterStateUrl.html":{}}}],["catch",{"_index":1020,"title":{},"body":{"injectables/CardService.html":{}}}],["catcherror",{"_index":555,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckTokenResponse.html":{},"components/FeedComponent.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["catcherror((err",{"_index":755,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/MenuEffects.html":{}}}],["catcherror((err,caught",{"_index":1536,"title":{},"body":{"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["catcherror((error",{"_index":968,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["catcherror((error,caught",{"_index":970,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["catcherror(err",{"_index":1227,"title":{},"body":{"components/FeedComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["catcherror(error",{"_index":782,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["catcherror(this.handleerror",{"_index":592,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["caught",{"_index":756,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/MenuEffects.html":{}}}],["center",{"_index":874,"title":{},"body":{"components/CardComponent.html":{}}}],["chain",{"_index":1287,"title":{},"body":{"classes/Filter.html":{}}}],["chainfilter",{"_index":1275,"title":{},"body":{"classes/Filter.html":{}}}],["chainfilter(card",{"_index":1285,"title":{},"body":{"classes/Filter.html":{}}}],["change",{"_index":520,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilter.html":{},"miscellaneous/enumerations.html":{}}}],["changes",{"_index":1188,"title":{},"body":{"components/DetailsComponent.html":{},"index.html":{}}}],["changes['card'].currentvalue.publisher+'.'+changes['card'].currentvalue.publisherversion",{"_index":1213,"title":{},"body":{"components/DetailsComponent.html":{}}}],["charset=utf",{"_index":612,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["checauthentication",{"_index":117,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["check",{"_index":59,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["checkauthentication",{"_index":20,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["checkauthentication(token",{"_index":585,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["checkauthenticationstatus",{"_index":58,"title":{"classes/CheckAuthenticationStatus.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["checking",{"_index":696,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["checks",{"_index":574,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["checktokenresponse",{"_index":697,"title":{"classes/CheckTokenResponse.html":{}},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"coverage.html":{}}}],["checktokenurl",{"_index":563,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["child",{"_index":1110,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["children",{"_index":1249,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["cid",{"_index":1252,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["class",{"_index":0,"title":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/I18n.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/Map.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"classes/ThirdsServiceMock.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/I18n.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/Map.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"classes/ThirdsServiceMock.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"overview.html":{}}}],["clear",{"_index":653,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["clearauthenticationinformation",{"_index":654,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["cli",{"_index":2064,"title":{},"body":{"index.html":{}}}],["click",{"_index":98,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["clicked",{"_index":798,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"components/DetailsComponent.html":{}}}],["clicking",{"_index":794,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["client",{"_index":2092,"title":{},"body":{"index.html":{}}}],["client_id",{"_index":700,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["clientid",{"_index":76,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["clientidpassword",{"_index":606,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["clone",{"_index":1276,"title":{},"body":{"classes/Filter.html":{}}}],["clone():filter",{"_index":1298,"title":{},"body":{"classes/Filter.html":{}}}],["cloud",{"_index":2094,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":382,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":385,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":383,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":384,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_archivesmodule",{"_index":533,"title":{},"body":{"modules/ArchivesModule.html":{},"overview.html":{}}}],["cluster_archivesmodule_declarations",{"_index":534,"title":{},"body":{"modules/ArchivesModule.html":{},"overview.html":{}}}],["cluster_archivesmodule_imports",{"_index":535,"title":{},"body":{"modules/ArchivesModule.html":{},"overview.html":{}}}],["cluster_cardsmodule",{"_index":1034,"title":{},"body":{"modules/CardsModule.html":{},"overview.html":{}}}],["cluster_cardsmodule_declarations",{"_index":1035,"title":{},"body":{"modules/CardsModule.html":{},"overview.html":{}}}],["cluster_cardsmodule_exports",{"_index":1036,"title":{},"body":{"modules/CardsModule.html":{},"overview.html":{}}}],["cluster_cardsmodule_providers",{"_index":1037,"title":{},"body":{"modules/CardsModule.html":{},"overview.html":{}}}],["cluster_feedmodule",{"_index":1231,"title":{},"body":{"modules/FeedModule.html":{},"overview.html":{}}}],["cluster_feedmodule_declarations",{"_index":1232,"title":{},"body":{"modules/FeedModule.html":{},"overview.html":{}}}],["cluster_feedmodule_exports",{"_index":1234,"title":{},"body":{"modules/FeedModule.html":{},"overview.html":{}}}],["cluster_feedmodule_imports",{"_index":1233,"title":{},"body":{"modules/FeedModule.html":{},"overview.html":{}}}],["cluster_servicesmodule",{"_index":1663,"title":{},"body":{"modules/ServicesModule.html":{},"overview.html":{}}}],["cluster_servicesmodule_providers",{"_index":1664,"title":{},"body":{"modules/ServicesModule.html":{},"overview.html":{}}}],["cluster_statemodule",{"_index":1678,"title":{},"body":{"modules/StateModule.html":{},"overview.html":{}}}],["cluster_statemodule_imports",{"_index":1679,"title":{},"body":{"modules/StateModule.html":{},"overview.html":{}}}],["code",{"_index":328,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["collection",{"_index":932,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["command",{"_index":2075,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":401,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["completely",{"_index":2123,"title":{},"body":{"index.html":{}}}],["complex",{"_index":1096,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{}}}],["component",{"_index":247,"title":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":348,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["components",{"_index":249,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{},"overview.html":{}}}],["components/card",{"_index":1044,"title":{},"body":{"modules/CardsModule.html":{},"modules/FeedModule.html":{}}}],["components/card/card.component",{"_index":1043,"title":{},"body":{"modules/CardsModule.html":{}}}],["components/detail/detail.component",{"_index":1047,"title":{},"body":{"modules/CardsModule.html":{}}}],["components/details/details.component",{"_index":1046,"title":{},"body":{"modules/CardsModule.html":{}}}],["components/icon/icon.component",{"_index":417,"title":{},"body":{"modules/AppModule.html":{}}}],["components/login/login.component",{"_index":416,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["components/navbar/navbar.component",{"_index":415,"title":{},"body":{"modules/AppModule.html":{}}}],["components/no",{"_index":1239,"title":{},"body":{"modules/FeedModule.html":{}}}],["components/time",{"_index":1242,"title":{},"body":{"modules/FeedModule.html":{}}}],["computethirdsmenu",{"_index":1763,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{}}}],["confirm",{"_index":701,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/functions.html":{}}}],["connect",{"_index":2120,"title":{},"body":{"index.html":{}}}],["connection",{"_index":594,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"index.html":{}}}],["consequence",{"_index":743,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["consist",{"_index":916,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["console.debug(`current",{"_index":307,"title":{},"body":{"components/AppComponent.html":{}}}],["console.debug(`receiving",{"_index":1810,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["console.debug(`translation",{"_index":1802,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["console.error('error",{"_index":783,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["console.error(`error",{"_index":1016,"title":{},"body":{"injectables/CardService.html":{}}}],["console.error(`i18",{"_index":1537,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["console.error(`i18n",{"_index":1591,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["console.error(`menu",{"_index":1595,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["console.error(`translation",{"_index":1806,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["console.error(err",{"_index":757,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["console.error(error",{"_index":630,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["const",{"_index":436,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"modules/FeedRoutingModule.html":{},"injectables/HandlebarsService.html":{},"components/LoginComponent.html":{},"interfaces/MenuState.html":{},"classes/RouterStateUrl.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":39,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["constructor(authenticationservice",{"_index":1873,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["constructor(element",{"_index":1120,"title":{},"body":{"components/DetailComponent.html":{}}}],["constructor(funktion",{"_index":1277,"title":{},"body":{"classes/Filter.html":{}}}],["constructor(httpclient",{"_index":810,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"injectables/ThirdsService.html":{}}}],["constructor(id",{"_index":1719,"title":{},"body":{"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["constructor(identifier",{"_index":1651,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["constructor(key",{"_index":1472,"title":{},"body":{"classes/I18n.html":{}}}],["constructor(label",{"_index":1649,"title":{},"body":{"classes/ParameterListItem.html":{}}}],["constructor(name",{"_index":1704,"title":{},"body":{"classes/Third.html":{}}}],["constructor(payload",{"_index":40,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/InitFilter.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{}}}],["constructor(platformlocation",{"_index":1482,"title":{},"body":{"components/IconComponent.html":{}}}],["constructor(platformlocation:platformlocation",{"_index":1504,"title":{},"body":{"components/IconComponent.html":{}}}],["constructor(private",{"_index":302,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"components/FeedComponent.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{}}}],["constructor(public",{"_index":73,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/InitFilter.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["constructor(router",{"_index":834,"title":{},"body":{"components/CardComponent.html":{}}}],["constructor(store",{"_index":267,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{}}}],["constructor(thirdsservice",{"_index":1725,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["constructor(time",{"_index":1362,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["constructor(titleposition",{"_index":877,"title":{},"body":{"classes/CardDetail.html":{}}}],["constructor(type",{"_index":139,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{}}}],["constructor(uid",{"_index":824,"title":{},"body":{"classes/Card.html":{}}}],["constructor(url",{"_index":1659,"title":{},"body":{"classes/RouterStateUrl.html":{}}}],["consultation",{"_index":2109,"title":{},"body":{"index.html":{}}}],["consultation/build/pidfile",{"_index":2112,"title":{},"body":{"index.html":{}}}],["consume",{"_index":127,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["containers",{"_index":2084,"title":{},"body":{"index.html":{}}}],["containing",{"_index":29,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["contains",{"_index":580,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["content",{"_index":582,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["contentchildren",{"_index":1196,"title":{},"body":{"components/DetailsComponent.html":{}}}],["contentchildren(detailcomponent",{"_index":1193,"title":{},"body":{"components/DetailsComponent.html":{}}}],["contentstyle",{"_index":146,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["context",{"_index":1964,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["convert",{"_index":643,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["convert(payload",{"_index":678,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["copy",{"_index":335,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["copyright",{"_index":322,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["core",{"_index":1994,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["core/services/interceptors.services/tokeninjector",{"_index":1028,"title":{},"body":{"injectables/CardService.html":{}}}],["corresponding",{"_index":694,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/functions.html":{}}}],["coverage",{"_index":1893,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":27,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"index.html":{}}}],["createentityadapter",{"_index":935,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["createfeatureselector('authentication",{"_index":2244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createfeatureselector('router",{"_index":2256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector",{"_index":2241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectauthenticationstate",{"_index":2245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectcardstate",{"_index":2248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectcardstateselection",{"_index":2251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectfeed,selectactivefiltersarray",{"_index":2237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectfilter",{"_index":2230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectlightcardsstate",{"_index":2235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectmenustate",{"_index":2258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectrouterstate",{"_index":2253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["csses",{"_index":1707,"title":{},"body":{"classes/Third.html":{}}}],["csses?:string",{"_index":1714,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["current",{"_index":85,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["currently",{"_index":319,"title":{},"body":{"components/AppComponent.html":{},"interfaces/CardFeedState.html":{},"index.html":{}}}],["currentpath",{"_index":262,"title":{},"body":{"components/AppComponent.html":{},"components/CardComponent.html":{},"components/NavbarComponent.html":{}}}],["currenttime",{"_index":1864,"title":{},"body":{"injectables/TimeService.html":{}}}],["currenttime():number",{"_index":1867,"title":{},"body":{"injectables/TimeService.html":{}}}],["custom",{"_index":1697,"title":{},"body":{"modules/StateModule.html":{}}}],["customroutereffects",{"_index":494,"title":{"injectables/CustomRouterEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/CustomRouterEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["customrouterstateserializer",{"_index":1075,"title":{"classes/CustomRouterStateSerializer.html":{}},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{},"coverage.html":{}}}],["dark",{"_index":1169,"title":{},"body":{"components/DetailComponent.html":{},"components/IconComponent.html":{}}}],["dark:boolean",{"_index":1499,"title":{},"body":{"components/IconComponent.html":{}}}],["data",{"_index":175,"title":{},"body":{"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/Input.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/ParameterListItem.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/enumerations.html":{}}}],["date",{"_index":79,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["date(+localstorage.getitem(localstorageauthcontent.expirationdate",{"_index":675,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["date(0",{"_index":713,"title":{},"body":{"interfaces/AuthState.html":{},"miscellaneous/variables.html":{}}}],["date(expirationdate",{"_index":684,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["date(now.valueof()+24*60*60*1000",{"_index":1007,"title":{},"body":{"injectables/CardService.html":{}}}],["date(value",{"_index":1450,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["date.now",{"_index":679,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"injectables/TimeService.html":{}}}],["deactivate",{"_index":1208,"title":{},"body":{"components/DetailsComponent.html":{}}}],["debug",{"_index":2095,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":378,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"overview.html":{}}}],["declared",{"_index":2068,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":735,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailsComponent.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["default",{"_index":49,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"injectables/ThirdsService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":2128,"title":{},"body":{"index.html":{}}}],["defined",{"_index":42,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["defines",{"_index":604,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["delete",{"_index":2028,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["denialreason",{"_index":122,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"interfaces/AuthState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/variables.html":{}}}],["dentifier",{"_index":669,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["dependencies",{"_index":377,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deps",{"_index":2228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deps:[thirdsservice",{"_index":1054,"title":{},"body":{"modules/CardsModule.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"interfaces/CardFeedState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/functions.html":{}}}],["deserializable",{"_index":581,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["desired",{"_index":1700,"title":{},"body":{"modules/StateModule.html":{}}}],["detail",{"_index":857,"title":{},"body":{"components/CardComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{}}}],["detail'},{'name",{"_index":359,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["detail.active",{"_index":1211,"title":{},"body":{"components/DetailsComponent.html":{}}}],["detail.component.html",{"_index":1114,"title":{},"body":{"components/DetailComponent.html":{}}}],["detail/detail.component",{"_index":1197,"title":{},"body":{"components/DetailsComponent.html":{}}}],["detailcomponent",{"_index":358,"title":{"components/DetailComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{},"coverage.html":{},"overview.html":{}}}],["details",{"_index":176,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"components/DetailsComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["details'},{'name",{"_index":355,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["details.component",{"_index":1045,"title":{},"body":{"modules/CardsModule.html":{},"modules/FeedRoutingModule.html":{}}}],["details.component.html",{"_index":882,"title":{},"body":{"components/CardDetailsComponent.html":{},"components/DetailsComponent.html":{}}}],["details.component.ts",{"_index":881,"title":{},"body":{"components/CardDetailsComponent.html":{},"coverage.html":{}}}],["details.component.ts:21",{"_index":885,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["details.component.ts:22",{"_index":883,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["details.component.ts:28",{"_index":884,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["details/:did",{"_index":1253,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["details/card",{"_index":880,"title":{},"body":{"components/CardDetailsComponent.html":{},"modules/CardsModule.html":{},"modules/FeedRoutingModule.html":{},"coverage.html":{}}}],["details:carddetail",{"_index":890,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["detailscomponent",{"_index":360,"title":{"components/DetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{},"coverage.html":{},"overview.html":{}}}],["development",{"_index":2159,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1685,"title":{},"body":{"modules/StateModule.html":{},"dependencies.html":{}}}],["directive",{"_index":346,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["directives",{"_index":372,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["directory",{"_index":2150,"title":{},"body":{"index.html":{}}}],["dispatch",{"_index":81,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["display",{"_index":768,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["displayed",{"_index":2140,"title":{},"body":{"index.html":{}}}],["distributed",{"_index":337,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["docker",{"_index":2083,"title":{},"body":{"index.html":{}}}],["document",{"_index":2067,"title":{},"body":{"index.html":{}}}],["document.getelementbyid('${svguid}').addeventlistener('load",{"_index":1444,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["documentation",{"_index":1894,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":251,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["domsanitizer",{"_index":1124,"title":{},"body":{"components/DetailComponent.html":{}}}],["done",{"_index":279,"title":{},"body":{"components/AppComponent.html":{}}}],["down",{"_index":181,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["drive",{"_index":2157,"title":{},"body":{"index.html":{}}}],["during",{"_index":929,"title":{},"body":{"interfaces/CardFeedState.html":{},"index.html":{}}}],["dynamic",{"_index":1988,"title":{},"body":{"dependencies.html":{}}}],["earlier",{"_index":2168,"title":{},"body":{"index.html":{}}}],["effect",{"_index":736,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["effects",{"_index":913,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/LightCardEffects.html":{}}}],["effectsmodule",{"_index":1683,"title":{},"body":{"modules/StateModule.html":{}}}],["effectsmodule.forroot(appeffects",{"_index":1692,"title":{},"body":{"modules/StateModule.html":{}}}],["element",{"_index":345,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["elementref",{"_index":1121,"title":{},"body":{"components/DetailComponent.html":{}}}],["emit",{"_index":741,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["emits",{"_index":791,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["emitted",{"_index":14,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["emittedby",{"_index":764,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["emmited",{"_index":114,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["empty",{"_index":1733,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["enable",{"_index":2170,"title":{},"body":{"index.html":{}}}],["enabletracing",{"_index":454,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["enddate",{"_index":169,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["entire",{"_index":1095,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["entities",{"_index":234,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{}}}],["entityadapter",{"_index":936,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["entitystate",{"_index":917,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["entries",{"_index":1718,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["enum",{"_index":56,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["enumerations",{"_index":2014,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env/environment",{"_index":435,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"components/IconComponent.html":{},"modules/StateModule.html":{}}}],["environment",{"_index":434,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"components/IconComponent.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["environment.production",{"_index":455,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"modules/StateModule.html":{},"miscellaneous/variables.html":{}}}],["environment.urls.auth}/check_token",{"_index":564,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["environment.urls.auth}/token",{"_index":567,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["environment.urls.cards}/cardoperations?clientid=${clientid}&notification=true",{"_index":1001,"title":{},"body":{"injectables/CardService.html":{}}}],["environment.urls.cards}/cards",{"_index":1003,"title":{},"body":{"injectables/CardService.html":{}}}],["environment.urls.thirds",{"_index":1742,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["environments/environment",{"_index":1732,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["err",{"_index":759,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["error",{"_index":229,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckTokenResponse.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"interfaces/MenuState.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["error(`unhandled",{"_index":967,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["error.tostring",{"_index":1019,"title":{},"body":{"injectables/CardService.html":{}}}],["error:null",{"_index":1603,"title":{},"body":{"interfaces/MenuState.html":{},"miscellaneous/variables.html":{}}}],["error:string",{"_index":1601,"title":{},"body":{"interfaces/MenuState.html":{}}}],["errormsg",{"_index":730,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["es",{"_index":1018,"title":{},"body":{"injectables/CardService.html":{}}}],["evaluate",{"_index":1264,"title":{},"body":{"classes/Filter.html":{}}}],["event",{"_index":995,"title":{},"body":{"injectables/CardService.html":{},"components/DetailComponent.html":{},"dependencies.html":{}}}],["eventsource",{"_index":985,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsource.close",{"_index":1024,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsource.closed",{"_index":1023,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsource.onerror",{"_index":1015,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsource.onmessage",{"_index":1012,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsource.readystate",{"_index":1022,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsourcepolyfill",{"_index":983,"title":{},"body":{"injectables/CardService.html":{}}}],["example",{"_index":2131,"title":{},"body":{"index.html":{}}}],["exceeded",{"_index":753,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["execute",{"_index":2152,"title":{},"body":{"index.html":{}}}],["executetemplate",{"_index":1346,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["executetemplate(templatename",{"_index":1365,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["exists",{"_index":86,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["exp",{"_index":699,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["expandedmenu",{"_index":1607,"title":{},"body":{"components/NavbarComponent.html":{}}}],["expandedmenu:boolean",{"_index":1626,"title":{},"body":{"components/NavbarComponent.html":{}}}],["expiration",{"_index":637,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["expirationdate",{"_index":78,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["expirationdate.gettime",{"_index":2219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expires_in",{"_index":546,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["export",{"_index":55,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["exports",{"_index":381,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"overview.html":{}}}],["extended",{"_index":218,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"miscellaneous/enumerations.html":{}}}],["extends",{"_index":934,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["external",{"_index":186,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["extract",{"_index":632,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["extractidentificationinformation",{"_index":670,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["extractparams",{"_index":1078,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{}}}],["extractparams(state",{"_index":1080,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["extracttoken",{"_index":634,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["fa",{"_index":1167,"title":{},"body":{"components/DetailComponent.html":{}}}],["fabric",{"_index":2072,"title":{},"body":{"index.html":{}}}],["fail",{"_index":220,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"miscellaneous/enumerations.html":{}}}],["failed",{"_index":1538,"title":{},"body":{"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["fake",{"_index":2134,"title":{},"body":{"index.html":{}}}],["false",{"_index":189,"title":{},"body":{"classes/Action.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckTokenResponse.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/Filter.html":{},"classes/Input.html":{},"interfaces/MenuState.html":{},"classes/ParameterListItem.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["fctargs[fctargs.length",{"_index":1443,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["feed",{"_index":438,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"interfaces/CardFeedState.html":{},"modules/FeedModule.html":{},"classes/Filter.html":{},"classes/InitFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["feed.component",{"_index":1238,"title":{},"body":{"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{}}}],["feed.component.html",{"_index":1217,"title":{},"body":{"components/FeedComponent.html":{}}}],["feed.component.scss",{"_index":1216,"title":{},"body":{"components/FeedComponent.html":{}}}],["feed.filter(card=>filter.chainfilter(card,filters",{"_index":2239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feed:lightcard[],filters:filter",{"_index":2238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feedactions",{"_index":525,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilter.html":{},"miscellaneous/typealiases.html":{}}}],["feedactiontypes",{"_index":519,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilter.html":{},"miscellaneous/enumerations.html":{}}}],["feedactiontypes.applyfilter",{"_index":515,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilter.html":{}}}],["feedactiontypes.initfilter",{"_index":524,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilter.html":{}}}],["feedcomponent",{"_index":361,"title":{"components/FeedComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{},"coverage.html":{},"overview.html":{}}}],["feedinitialstate",{"_index":944,"title":{},"body":{"interfaces/CardFeedState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["feedmodule",{"_index":1230,"title":{"modules/FeedModule.html":{}},"body":{"modules/FeedModule.html":{},"modules.html":{},"overview.html":{}}}],["feedroutingmodule",{"_index":1235,"title":{"modules/FeedRoutingModule.html":{}},"body":{"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["feedselectors",{"_index":1222,"title":{},"body":{"components/FeedComponent.html":{}}}],["fetchcardoperation",{"_index":978,"title":{},"body":{"injectables/CardService.html":{}}}],["fetchcardoperation(eventsource",{"_index":982,"title":{},"body":{"injectables/CardService.html":{}}}],["fetchhbstemplate",{"_index":1818,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["fetchhbstemplate(publisher",{"_index":1743,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["fetchi18njson",{"_index":1819,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["fetchi18njson(publisher",{"_index":1748,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["few",{"_index":2117,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"index.html":{}}}],["fill",{"_index":1525,"title":{},"body":{"components/IconComponent.html":{}}}],["filter",{"_index":516,"title":{"classes/Filter.html":{}},"body":{"classes/ApplyFilter.html":{},"interfaces/CardFeedState.html":{},"injectables/CustomRouterEffects.html":{},"classes/Filter.html":{},"classes/InitFilter.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["filter((action",{"_index":1065,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["filter((t:third)=>!(!t.menuentries",{"_index":1766,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["filter.model",{"_index":518,"title":{},"body":{"classes/ApplyFilter.html":{},"interfaces/CardFeedState.html":{},"classes/InitFilter.html":{}}}],["filter.model.ts",{"_index":1255,"title":{},"body":{"classes/Filter.html":{},"coverage.html":{}}}],["filter.model.ts:24",{"_index":1279,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:28",{"_index":1280,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:29",{"_index":1281,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:33",{"_index":1295,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:44",{"_index":1283,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:57",{"_index":1286,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:68",{"_index":1292,"title":{},"body":{"classes/Filter.html":{}}}],["filtered",{"_index":1291,"title":{},"body":{"classes/Filter.html":{}}}],["filtering",{"_index":30,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/Filter.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["filters",{"_index":931,"title":{},"body":{"interfaces/CardFeedState.html":{},"classes/Filter.html":{},"miscellaneous/variables.html":{}}}],["filters.values",{"_index":2232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finalresult",{"_index":649,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["first",{"_index":80,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"components/DetailsComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["flow",{"_index":2172,"title":{},"body":{"index.html":{}}}],["folder",{"_index":2070,"title":{},"body":{"index.html":{}}}],["following",{"_index":16,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"index.html":{}}}],["font",{"_index":863,"title":{},"body":{"components/CardComponent.html":{},"dependencies.html":{}}}],["for(let",{"_index":2231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forcepositiveandoneminimum",{"_index":1968,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["forcepositiveandoneminimum(min",{"_index":2045,"title":{},"body":{"miscellaneous/functions.html":{}}}],["form",{"_index":102,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["formatter",{"_index":1454,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["formatter.format(value",{"_index":1457,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["formcontrol",{"_index":1573,"title":{},"body":{"components/LoginComponent.html":{}}}],["formdata",{"_index":587,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["formgroup",{"_index":1572,"title":{},"body":{"components/LoginComponent.html":{}}}],["forms",{"_index":1105,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["formsmodule",{"_index":405,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{}}}],["forroot",{"_index":1040,"title":{},"body":{"modules/CardsModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["france.com",{"_index":327,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["freeze",{"_index":476,"title":{},"body":{"interfaces/AppState.html":{}}}],["from(_.difference(work",{"_index":1793,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["from(cards).pipe(map(card",{"_index":1776,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["from(menus).pipe(map(menu",{"_index":1781,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["fromauthentication.getexpirationtime",{"_index":2246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fromrouter",{"_index":467,"title":{},"body":{"interfaces/AppState.html":{}}}],["fromrouter.routerreducer",{"_index":505,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["full",{"_index":1251,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["function",{"_index":24,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"interfaces/CardFeedState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{},"injectables/HandlebarsService.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{}}}],["function(a,b",{"_index":1465,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["function(lvalue",{"_index":1430,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["functions",{"_index":2033,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funktion",{"_index":1261,"title":{},"body":{"classes/Filter.html":{}}}],["futur",{"_index":702,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/functions.html":{}}}],["future",{"_index":708,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/functions.html":{}}}],["g",{"_index":1462,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["gateway",{"_index":2093,"title":{},"body":{"index.html":{}}}],["gateway/build/pidfile",{"_index":2100,"title":{},"body":{"index.html":{}}}],["gather",{"_index":1256,"title":{},"body":{"classes/Filter.html":{}}}],["generated",{"_index":2063,"title":{},"body":{"index.html":{}}}],["generaterandompositiveintegerwithinrangewithoneasminimum",{"_index":1969,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["generaterandompositiveintegerwithinrangewithoneasminimum(min",{"_index":2047,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generating",{"_index":595,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["gently",{"_index":449,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["getcardoperation",{"_index":979,"title":{},"body":{"injectables/CardService.html":{}}}],["getcardoperations",{"_index":955,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["getcurrentguid",{"_index":1308,"title":{},"body":{"classes/GuidService.html":{}}}],["getcurrentguidstring",{"_index":1309,"title":{},"body":{"classes/GuidService.html":{}}}],["getcurrentguidstring():string",{"_index":1317,"title":{},"body":{"classes/GuidService.html":{}}}],["getexpirationdate",{"_index":1928,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getexpirationdate(state",{"_index":2217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getexpirationtime",{"_index":1929,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getfixedlengthalphanumericvalue",{"_index":1970,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getfixedlengthalphanumericvalue(length",{"_index":2048,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gethtmlcontent",{"_index":1137,"title":{},"body":{"components/DetailComponent.html":{}}}],["geti18nprefix",{"_index":843,"title":{},"body":{"components/CardComponent.html":{},"components/DetailsComponent.html":{}}}],["getidentifier",{"_index":1930,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getitem",{"_index":673,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["getonerandomaddcardoperation",{"_index":1971,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getonerandomcard",{"_index":1972,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getonerandomcard(card",{"_index":2049,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getonerandomligthcard",{"_index":1973,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getonerandomligthcard(card",{"_index":2050,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getpositiverandomnumberwithinrange",{"_index":1974,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getpositiverandomnumberwithinrange(min",{"_index":2051,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getrandomalphanumericvalue",{"_index":1975,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getrandomalphanumericvalue(min",{"_index":2052,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getrandomi18ndata",{"_index":1976,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getrandommenu",{"_index":1977,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getrandomthird",{"_index":1978,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getroutepe",{"_index":263,"title":{},"body":{"components/AppComponent.html":{}}}],["getsecurityheader",{"_index":690,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["getselectedid",{"_index":1934,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getseveralrandomlightcards",{"_index":1979,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getseveralrandomlightcards(numberofcards",{"_index":2053,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getthirdmenus",{"_index":1620,"title":{},"body":{"components/NavbarComponent.html":{}}}],["getting",{"_index":2059,"title":{"index.html":{}},"body":{}}],["gettoken",{"_index":1931,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gettoken(state",{"_index":2218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gettranslation",{"_index":1724,"title":{},"body":{"classes/ThirdsI18nLoader.html":{}}}],["gettranslation(lang",{"_index":1727,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["given",{"_index":593,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"miscellaneous/functions.html":{}}}],["gives",{"_index":576,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["goes",{"_index":1861,"title":{},"body":{"components/TimeLineComponent.html":{}}}],["graph",{"_index":2186,"title":{},"body":{"modules.html":{}}}],["guard.service",{"_index":1671,"title":{},"body":{"modules/ServicesModule.html":{}}}],["guid",{"_index":53,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"dependencies.html":{}}}],["guid.create",{"_index":1316,"title":{},"body":{"classes/GuidService.html":{}}}],["guid.parse(localstorage.getitem(localstorageauthcontent.clientid",{"_index":672,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["guidservice",{"_index":556,"title":{"classes/GuidService.html":{}},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"classes/GuidService.html":{},"modules/ServicesModule.html":{},"coverage.html":{}}}],["handle",{"_index":227,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"miscellaneous/enumerations.html":{}}}],["handlebars",{"_index":1122,"title":{},"body":{"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{},"dependencies.html":{}}}],["handlebars.registerhelper(\"math",{"_index":1429,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper(\"preservespace",{"_index":1460,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('action",{"_index":1446,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('arrayatindex",{"_index":1435,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('arrayatindexlength",{"_index":1424,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('bool",{"_index":1418,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('dateformat",{"_index":1447,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('now",{"_index":1458,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('numberformat",{"_index":1453,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('slice",{"_index":1437,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('sort",{"_index":1442,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('split",{"_index":1426,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars/dist/handlebars.js",{"_index":1384,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebarsservice",{"_index":1038,"title":{"injectables/HandlebarsService.html":{}},"body":{"modules/CardsModule.html":{},"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{},"coverage.html":{},"overview.html":{}}}],["handleerror",{"_index":808,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["handleerror(error",{"_index":629,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["handleheaders",{"_index":980,"title":{},"body":{"injectables/CardService.html":{}}}],["handleloginattempt",{"_index":22,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["handleloginattempt(payload",{"_index":726,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["handlemaxagainstmin",{"_index":1980,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["handlemaxagainstmin(min",{"_index":2055,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handlerejectedlogin",{"_index":116,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["handlerejectedlogin(errormsg",{"_index":728,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["handleunexpectederror",{"_index":226,"title":{"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{}},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["handleunexpectederror({error",{"_index":971,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["handling",{"_index":1173,"title":{},"body":{"components/DetailComponent.html":{}}}],["hashlocationstrategy",{"_index":402,"title":{},"body":{"modules/AppModule.html":{}}}],["header",{"_index":689,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["headers",{"_index":607,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["headers}).pipe",{"_index":616,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["heartbeattimeout",{"_index":988,"title":{},"body":{"injectables/CardService.html":{}}}],["helper",{"_index":676,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/functions.html":{}}}],["helpers",{"_index":2143,"title":{},"body":{"index.html":{}}}],["here",{"_index":1862,"title":{},"body":{"components/TimeLineComponent.html":{}}}],["hidden",{"_index":143,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["hide",{"_index":1564,"title":{},"body":{"components/LoginComponent.html":{}}}],["html",{"_index":344,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["htmlbuttonelement",{"_index":1129,"title":{},"body":{"components/DetailComponent.html":{}}}],["htmlcontent",{"_index":1119,"title":{},"body":{"components/DetailComponent.html":{}}}],["http",{"_index":688,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/functions.html":{}}}],["http://localhost:2002/auth",{"_index":2213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:2002/cards",{"_index":2214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:2002/thirds",{"_index":2215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:2002/ui",{"_index":2127,"title":{},"body":{"index.html":{}}}],["http://localhost:2002/ui/feed",{"_index":2141,"title":{},"body":{"index.html":{}}}],["http://localhost:4200",{"_index":2177,"title":{},"body":{"index.html":{}}}],["http://localhost:4200/#/feed",{"_index":2179,"title":{},"body":{"index.html":{}}}],["http://mozilla.org/mpl/2.0",{"_index":339,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["http://www.rte",{"_index":326,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["http_interceptors",{"_index":1669,"title":{},"body":{"modules/ServicesModule.html":{}}}],["httpcall",{"_index":1750,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["httpclient",{"_index":552,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["httpclient,private",{"_index":572,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["httpclient:httpclient",{"_index":997,"title":{},"body":{"injectables/CardService.html":{}}}],["httpclientmodule",{"_index":399,"title":{},"body":{"modules/AppModule.html":{}}}],["httpevent",{"_index":1881,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["httphandler",{"_index":1879,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["httpheaders",{"_index":553,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["httpheaders({'content",{"_index":608,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["httpinterceptor",{"_index":1882,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["httploaderfactory",{"_index":1958,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["httploaderfactory(http",{"_index":2056,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httpparams",{"_index":1731,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["httprequest",{"_index":1876,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["https://github.com/briebug/ngrx",{"_index":1104,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["i18n",{"_index":142,"title":{"classes/I18n.html":{}},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Filter.html":{},"classes/I18n.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["i18nlabelkey",{"_index":1705,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["i18npath",{"_index":1959,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["i18nprefix",{"_index":833,"title":{},"body":{"components/CardComponent.html":{},"components/DetailsComponent.html":{}}}],["i18nprefix+detailc.detail.title.key",{"_index":1214,"title":{},"body":{"components/DetailsComponent.html":{}}}],["i18nprefix+lightcard.summary.key",{"_index":856,"title":{},"body":{"components/CardComponent.html":{}}}],["i18nprefix+lightcard.title.key",{"_index":853,"title":{},"body":{"components/CardComponent.html":{}}}],["icon",{"_index":1475,"title":{},"body":{"components/IconComponent.html":{}}}],["icon'},{'name",{"_index":364,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["icon.component.html",{"_index":1477,"title":{},"body":{"components/IconComponent.html":{}}}],["icon.component.scss",{"_index":1476,"title":{},"body":{"components/IconComponent.html":{}}}],["icon:string",{"_index":1495,"title":{},"body":{"components/IconComponent.html":{}}}],["iconcomponent",{"_index":363,"title":{"components/IconComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{},"coverage.html":{},"overview.html":{}}}],["iconpath",{"_index":1478,"title":{},"body":{"components/IconComponent.html":{}}}],["iconpath:string",{"_index":1503,"title":{},"body":{"components/IconComponent.html":{}}}],["id",{"_index":163,"title":{},"body":{"classes/Action.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"interfaces/CardFeedState.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"components/DetailComponent.html":{},"classes/HandleUnexpectedError.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/ParameterListItem.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["id'].nodevalue",{"_index":1156,"title":{},"body":{"components/DetailComponent.html":{}}}],["id.split",{"_index":1797,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["id:string",{"_index":1717,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["identication",{"_index":2182,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":74,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["identify",{"_index":620,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["ids",{"_index":1787,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["ids.push(id",{"_index":1786,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["if(a[key]b[key",{"_index":1470,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["if(button.attributes['action",{"_index":1154,"title":{},"body":{"components/DetailComponent.html":{}}}],["if(changes['card'].currentvalue",{"_index":1212,"title":{},"body":{"components/DetailsComponent.html":{}}}],["if(template",{"_index":1413,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["if(this.active",{"_index":1303,"title":{},"body":{"classes/Filter.html":{}}}],["if(this.applyfilter(card",{"_index":1305,"title":{},"body":{"classes/Filter.html":{}}}],["if(this.dark||this.light",{"_index":1520,"title":{},"body":{"components/IconComponent.html":{}}}],["if(this.expandedmenu[index",{"_index":1635,"title":{},"body":{"components/NavbarComponent.html":{}}}],["if(typeof",{"_index":1466,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["if(url",{"_index":851,"title":{},"body":{"components/CardComponent.html":{},"components/NavbarComponent.html":{}}}],["if(v.active",{"_index":2233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ignore",{"_index":88,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["implementation",{"_index":1269,"title":{},"body":{"classes/Filter.html":{}}}],["implemented",{"_index":1174,"title":{},"body":{"components/DetailComponent.html":{}}}],["implementing",{"_index":720,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["implements",{"_index":33,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeLineComponent.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["import",{"_index":51,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["imports",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["include",{"_index":1699,"title":{},"body":{"modules/StateModule.html":{}}}],["index",{"_index":34,"title":{"index.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":1582,"title":{},"body":{"classes/Map.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["information",{"_index":13,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["informatios",{"_index":657,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["inheritance",{"_index":1271,"title":{},"body":{"classes/Filter.html":{}}}],["init",{"_index":272,"title":{},"body":{"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"classes/InitFilter.html":{},"miscellaneous/enumerations.html":{}}}],["initfilter",{"_index":521,"title":{"classes/InitFilter.html":{}},"body":{"classes/ApplyFilter.html":{},"classes/InitFilter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["initialstate",{"_index":509,"title":{},"body":{"interfaces/AppState.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["initiated",{"_index":1740,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["inject",{"_index":1313,"title":{},"body":{"classes/GuidService.html":{}}}],["injectable",{"_index":551,"title":{"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"injectables/CustomRouterEffects.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"injectables/ThirdsService.html":{},"injectables/TimeService.html":{}},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"coverage.html":{}}}],["injectables",{"_index":714,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"injectables/CustomRouterEffects.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"injectables/ThirdsService.html":{},"injectables/TimeService.html":{},"overview.html":{}}}],["injector",{"_index":1730,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["input",{"_index":148,"title":{"classes/Input.html":{}},"body":{"classes/Action.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/IconComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{}}}],["input[1",{"_index":1799,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["inputs",{"_index":147,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/IconComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["inputtype",{"_index":190,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["instance",{"_index":677,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["instanciation",{"_index":1270,"title":{},"body":{"classes/Filter.html":{}}}],["intercept",{"_index":1872,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["intercept(request",{"_index":1878,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["intercepted",{"_index":1027,"title":{},"body":{"injectables/CardService.html":{}}}],["interceptor",{"_index":1868,"title":{"interceptors/TokenInjector.html":{}},"body":{"coverage.html":{}}}],["interceptors",{"_index":1869,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["interceptors.service",{"_index":1670,"title":{},"body":{"modules/ServicesModule.html":{}}}],["interface",{"_index":457,"title":{"interfaces/AppState.html":{},"interfaces/AuthState.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"interfaces/MenuState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/AuthState.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"interfaces/MenuState.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":458,"title":{},"body":{"interfaces/AppState.html":{},"interfaces/AuthState.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"interfaces/MenuState.html":{},"overview.html":{}}}],["intl.numberformat(this.translate.getbrowserlang",{"_index":1455,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["invalid",{"_index":578,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["isauth",{"_index":318,"title":{},"body":{"components/AppComponent.html":{}}}],["isauthenticated",{"_index":264,"title":{},"body":{"components/AppComponent.html":{}}}],["isexpirationdateover",{"_index":651,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["isinthefuture",{"_index":300,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isinthefuture(expirationdate",{"_index":648,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["isinthefuture(time",{"_index":709,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/functions.html":{}}}],["isnan(expirationdate",{"_index":646,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["isnotanumber",{"_index":645,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["issue",{"_index":231,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"miscellaneous/enumerations.html":{}}}],["istanbul",{"_index":87,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["isused",{"_index":674,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["it's",{"_index":762,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["items",{"_index":1101,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["jasmine",{"_index":2155,"title":{},"body":{"index.html":{}}}],["jnlp",{"_index":187,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["js",{"_index":1995,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":562,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["karma",{"_index":2156,"title":{},"body":{"index.html":{}}}],["key",{"_index":1410,"title":{},"body":{"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"classes/Map.html":{},"miscellaneous/functions.html":{}}}],["kind",{"_index":2089,"title":{},"body":{"index.html":{}}}],["known",{"_index":2180,"title":{},"body":{"index.html":{}}}],["label",{"_index":141,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["label1",{"_index":1844,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["label2",{"_index":1847,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["label3",{"_index":1852,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["lang",{"_index":1729,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["language",{"_index":309,"title":{},"body":{"components/AppComponent.html":{}}}],["large",{"_index":1695,"title":{},"body":{"modules/StateModule.html":{}}}],["larger",{"_index":868,"title":{},"body":{"components/CardComponent.html":{}}}],["last",{"_index":921,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["lastcards",{"_index":920,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["launch",{"_index":2162,"title":{},"body":{"index.html":{}}}],["launching",{"_index":2082,"title":{},"body":{"index.html":{}}}],["lcard",{"_index":214,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"miscellaneous/enumerations.html":{}}}],["leads",{"_index":2178,"title":{},"body":{"index.html":{}}}],["leaving",{"_index":2121,"title":{},"body":{"index.html":{}}}],["legend",{"_index":343,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"components/TimeLineComponent.html":{},"overview.html":{}}}],["length",{"_index":2044,"title":{},"body":{"miscellaneous/functions.html":{}}}],["license",{"_index":332,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["light",{"_index":225,"title":{},"body":{"classes/AddLightCardFailure.html":{},"components/CardComponent.html":{},"components/DetailComponent.html":{},"classes/HandleUnexpectedError-1.html":{},"components/IconComponent.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["light:boolean",{"_index":1500,"title":{},"body":{"components/IconComponent.html":{}}}],["lightcard",{"_index":211,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"components/CardComponent.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/InitFilter.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/functions.html":{}}}],["lightcard):boolean",{"_index":1302,"title":{},"body":{"classes/Filter.html":{}}}],["lightcard,any",{"_index":1296,"title":{},"body":{"classes/Filter.html":{}}}],["lightcard.enddate|date:'short",{"_index":855,"title":{},"body":{"components/CardComponent.html":{}}}],["lightcard.enddate|date:\\'short",{"_index":876,"title":{},"body":{"components/CardComponent.html":{}}}],["lightcard.startdate|date:'short",{"_index":854,"title":{},"body":{"components/CardComponent.html":{}}}],["lightcard.startdate|date:\\'short",{"_index":875,"title":{},"body":{"components/CardComponent.html":{}}}],["lightcardactions",{"_index":243,"title":{},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"miscellaneous/typealiases.html":{}}}],["lightcardactiontypes",{"_index":212,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"injectables/LightCardEffects.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"miscellaneous/enumerations.html":{}}}],["lightcardactiontypes.addlightcardfailure",{"_index":210,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{}}}],["lightcardactiontypes.handleunexpectederror",{"_index":242,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{}}}],["lightcardactiontypes.loadlightcards",{"_index":235,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{}}}],["lightcardactiontypes.loadlightcardsextendeddata",{"_index":238,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{}}}],["lightcardactiontypes.loadlightcardsfailure",{"_index":239,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{}}}],["lightcardactiontypes.loadlightcardssuccess",{"_index":236,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{}}}],["lightcardactiontypes.selectlightcard",{"_index":240,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{}}}],["lightcardadapter",{"_index":942,"title":{},"body":{"interfaces/CardFeedState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lightcardadapter.getinitialstate",{"_index":945,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["lightcardadapter.getselectors(selectlightcardsstate",{"_index":2229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lightcardeffects",{"_index":500,"title":{"injectables/LightCardEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/LightCardEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lightcardreducer",{"_index":485,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["lightcards",{"_index":237,"title":{},"body":{"classes/AddLightCardFailure.html":{},"components/CardListComponent.html":{},"components/FeedComponent.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{}}}],["line",{"_index":371,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{},"index.html":{}}}],["line.component",{"_index":1244,"title":{},"body":{"modules/FeedModule.html":{}}}],["line.component.html",{"_index":1858,"title":{},"body":{"components/TimeLineComponent.html":{}}}],["line.component.ts",{"_index":1857,"title":{},"body":{"components/TimeLineComponent.html":{},"coverage.html":{}}}],["line.component.ts:14",{"_index":1859,"title":{},"body":{"components/TimeLineComponent.html":{}}}],["line.component.ts:18",{"_index":1860,"title":{},"body":{"components/TimeLineComponent.html":{}}}],["line/time",{"_index":1243,"title":{},"body":{"modules/FeedModule.html":{},"components/TimeLineComponent.html":{},"coverage.html":{}}}],["link/button",{"_index":797,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["link1",{"_index":1845,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["link2",{"_index":1848,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["link3",{"_index":1853,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["linux",{"_index":2081,"title":{},"body":{"index.html":{}}}],["list",{"_index":192,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"components/CardListComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["list'},{'name",{"_index":357,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["list.component",{"_index":1237,"title":{},"body":{"modules/FeedModule.html":{}}}],["list.component.html",{"_index":949,"title":{},"body":{"components/CardListComponent.html":{}}}],["list.component.ts",{"_index":948,"title":{},"body":{"components/CardListComponent.html":{},"coverage.html":{}}}],["list.component.ts:17",{"_index":952,"title":{},"body":{"components/CardListComponent.html":{}}}],["list.component.ts:18",{"_index":951,"title":{},"body":{"components/CardListComponent.html":{}}}],["list/card",{"_index":947,"title":{},"body":{"components/CardListComponent.html":{},"modules/FeedModule.html":{},"coverage.html":{}}}],["list_radio",{"_index":193,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["listen",{"_index":789,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["listens",{"_index":738,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["literal",{"_index":207,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/InitFilter.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{}}}],["load",{"_index":215,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"classes/SelectLightCard.html":{},"miscellaneous/enumerations.html":{}}}],["loadbyid",{"_index":896,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/LightCardEffects.html":{}}}],["loadcard",{"_index":908,"title":{"classes/LoadCard.html":{}},"body":{"injectables/CardEffects.html":{},"injectables/CardService.html":{},"injectables/CustomRouterEffects.html":{},"classes/HandleUnexpectedError.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"injectables/MenuEffects.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadcard(id",{"_index":989,"title":{},"body":{"injectables/CardService.html":{}}}],["loadcard({id",{"_index":1070,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["loadcardfailure",{"_index":909,"title":{"classes/LoadCardFailure.html":{}},"body":{"injectables/CardEffects.html":{},"classes/HandleUnexpectedError.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadcardfailure(err",{"_index":904,"title":{},"body":{"injectables/CardEffects.html":{}}}],["loadcardsuccess",{"_index":910,"title":{"classes/LoadCardSuccess.html":{}},"body":{"injectables/CardEffects.html":{},"classes/HandleUnexpectedError.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadcardsuccess({card",{"_index":903,"title":{},"body":{"injectables/CardEffects.html":{}}}],["loadchildren",{"_index":439,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["loaded",{"_index":1677,"title":{},"body":{"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["loader",{"_index":1052,"title":{},"body":{"modules/CardsModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["loadi18nforlightcards",{"_index":1820,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["loadi18nforlightcards(cards",{"_index":1827,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["loadi18nforlightcards(cards:lightcard",{"_index":1775,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["loadi18nformenuentries",{"_index":1821,"title":{},"body":{"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{}}}],["loadi18nformenuentries(){return",{"_index":1854,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["loadi18nformenuentries(menus",{"_index":1829,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["loadi18nformenuentries(menus:thirdmenu",{"_index":1780,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["loading",{"_index":925,"title":{},"body":{"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["loadlightcard",{"_index":244,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{}}}],["loadlightcardfailure",{"_index":246,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{}}}],["loadlightcards",{"_index":213,"title":{"classes/LoadLightCards.html":{}},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadlightcardsextendeddata",{"_index":217,"title":{"classes/LoadLightCardsExtendedData.html":{}},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"injectables/LightCardEffects.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["loadlightcardsfailure",{"_index":219,"title":{"classes/LoadLightCardsFailure.html":{}},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadlightcardssuccess",{"_index":216,"title":{"classes/LoadLightCardsSuccess.html":{}},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/HandleUnexpectedError-1.html":{},"injectables/LightCardEffects.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadlightcardssuccess({lightcards",{"_index":966,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["loadlightcardsuccess",{"_index":245,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{}}}],["loadmenu",{"_index":1337,"title":{"classes/LoadMenu.html":{}},"body":{"classes/HandleUnexpectedError-2.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/NavbarComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadmenufailure",{"_index":1339,"title":{"classes/LoadMenuFailure.html":{}},"body":{"classes/HandleUnexpectedError-2.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadmenufailure(err",{"_index":1596,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["loadmenusuccess",{"_index":1338,"title":{"classes/LoadMenuSuccess.html":{}},"body":{"classes/HandleUnexpectedError-2.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadmenusuccess({menu",{"_index":1593,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["loads",{"_index":957,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["local",{"_index":2124,"title":{},"body":{"index.html":{}}}],["locale",{"_index":1408,"title":{},"body":{"injectables/HandlebarsService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["locales",{"_index":1708,"title":{},"body":{"classes/Third.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["locales?:string",{"_index":1715,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["localestorage",{"_index":639,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage",{"_index":633,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.clear",{"_index":655,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.getitem(localstorageauthcontent.expirationdate",{"_index":644,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.getitem(localstorageauthcontent.identifier",{"_index":671,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.getitem(localstorageauthcontent.token",{"_index":635,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.setitem(localstorageauthcontent.clientid",{"_index":666,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.setitem(localstorageauthcontent.expirationdate",{"_index":664,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.setitem(localstorageauthcontent.identifier",{"_index":660,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.setitem(localstorageauthcontent.token",{"_index":662,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorageauthcontent",{"_index":558,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/enumerations.html":{}}}],["locationstrategy",{"_index":403,"title":{},"body":{"modules/AppModule.html":{}}}],["lockaction",{"_index":149,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["lockcard",{"_index":150,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["lodash",{"_index":1625,"title":{},"body":{"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"dependencies.html":{}}}],["log",{"_index":63,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["logged",{"_index":2137,"title":{},"body":{"index.html":{}}}],["login",{"_index":99,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"modules/AppRoutingModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"index.html":{}}}],["login'},{'name",{"_index":365,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["login.component.html",{"_index":1563,"title":{},"body":{"components/LoginComponent.html":{}}}],["login/password",{"_index":92,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["logincomponent",{"_index":95,"title":{"components/LoginComponent.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"classes/CheckAuthenticationStatus.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"components/TimeLineComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"overview.html":{}}}],["logout",{"_index":106,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"index.html":{}}}],["longtext",{"_index":195,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["lttd",{"_index":172,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["lvalue",{"_index":1433,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["m",{"_index":1448,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["m.format(options.hash.format",{"_index":1452,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["m.locale(this.translate.getbrowserlang",{"_index":1451,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["machine",{"_index":2125,"title":{},"body":{"index.html":{}}}],["mainrecipient",{"_index":170,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["manage",{"_index":446,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["management",{"_index":716,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["manager",{"_index":719,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["mandatory",{"_index":197,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["map",{"_index":159,"title":{"classes/Map.html":{}},"body":{"classes/Action.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"classes/ParameterListItem.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["map((action",{"_index":733,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["map((card",{"_index":902,"title":{},"body":{"injectables/CardEffects.html":{}}}],["map((payload",{"_index":750,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["map(action",{"_index":772,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["map(array",{"_index":1592,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["map(authenticationinfo",{"_index":780,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["map(authobjt",{"_index":625,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["map(check",{"_index":591,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["map(data",{"_index":617,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["map(isinthefuture",{"_index":315,"title":{},"body":{"components/AppComponent.html":{}}}],["map(operation",{"_index":961,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["map(r",{"_index":1752,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["map(s=>handlebars.compile(s",{"_index":1416,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["map(t",{"_index":1767,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["map(t=>t(card",{"_index":1404,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["margin",{"_index":340,"title":{},"body":{"components/AppComponent.html":{},"components/CardComponent.html":{},"components/LoginComponent.html":{}}}],["matching",{"_index":134,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":858,"title":{},"body":{"components/CardComponent.html":{},"miscellaneous/functions.html":{}}}],["maxlength",{"_index":198,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["medium",{"_index":1481,"title":{},"body":{"components/IconComponent.html":{}}}],["medium:boolean",{"_index":1497,"title":{},"body":{"components/IconComponent.html":{}}}],["member",{"_index":128,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["members",{"_index":18,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["menu",{"_index":460,"title":{},"body":{"interfaces/AppState.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["menu.'+link.path",{"_index":1637,"title":{},"body":{"components/NavbarComponent.html":{}}}],["menu.\\'+link.path",{"_index":1643,"title":{},"body":{"components/NavbarComponent.html":{}}}],["menu.id",{"_index":1782,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["menu.logout",{"_index":1642,"title":{},"body":{"components/NavbarComponent.html":{}}}],["menu.version",{"_index":1783,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["menuactions",{"_index":1343,"title":{},"body":{"classes/HandleUnexpectedError-2.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"miscellaneous/typealiases.html":{}}}],["menuactiontypes",{"_index":1336,"title":{},"body":{"classes/HandleUnexpectedError-2.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"miscellaneous/enumerations.html":{}}}],["menuactiontypes.handleunexpectederror",{"_index":1333,"title":{},"body":{"classes/HandleUnexpectedError-2.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{}}}],["menuactiontypes.loadmenu",{"_index":1340,"title":{},"body":{"classes/HandleUnexpectedError-2.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{}}}],["menuactiontypes.loadmenufailure",{"_index":1341,"title":{},"body":{"classes/HandleUnexpectedError-2.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{}}}],["menuactiontypes.loadmenusuccess",{"_index":1342,"title":{},"body":{"classes/HandleUnexpectedError-2.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{}}}],["menueffects",{"_index":498,"title":{"injectables/MenuEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/MenuEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["menuentries",{"_index":1709,"title":{},"body":{"classes/Third.html":{}}}],["menuentries?:thirdmenuentry",{"_index":1716,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["menuinitialstate",{"_index":1602,"title":{},"body":{"interfaces/MenuState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["menureducer",{"_index":490,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["menus",{"_index":1774,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["menus.push(menu",{"_index":1773,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["menustate",{"_index":465,"title":{"interfaces/MenuState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/MenuState.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["menustate.menu",{"_index":2260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menustate:menustate",{"_index":2259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["merge",{"_index":1734,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["merge(previous",{"_index":1758,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["message",{"_index":119,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"index.html":{}}}],["metadata",{"_index":255,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["metareducer",{"_index":474,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["metareducers",{"_index":508,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":23,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/functions.html":{}}}],["methods",{"_index":265,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{}}}],["micro",{"_index":2165,"title":{},"body":{"index.html":{}}}],["min",{"_index":2046,"title":{},"body":{"miscellaneous/functions.html":{}}}],["miscellaneous",{"_index":2013,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model/light",{"_index":1738,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["model/map",{"_index":1735,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["modification",{"_index":928,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["module",{"_index":374,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"overview.html":{}}}],["modules",{"_index":376,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/archives/archives.module#archivesmodule",{"_index":443,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["modules/feed/feed.module#feedmodule",{"_index":440,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["modulewithproviders",{"_index":1042,"title":{},"body":{"modules/CardsModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["moment",{"_index":705,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"classes/CheckTokenResponse.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["moment(new",{"_index":1449,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["moments",{"_index":2118,"title":{},"body":{"index.html":{}}}],["mongodb",{"_index":2161,"title":{},"body":{"index.html":{}}}],["mono.svg",{"_index":1522,"title":{},"body":{"components/IconComponent.html":{}}}],["more",{"_index":448,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["mozilla",{"_index":331,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["mpl",{"_index":336,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["multi",{"_index":1673,"title":{},"body":{"modules/ServicesModule.html":{}}}],["name",{"_index":46,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeLineComponent.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"miscellaneous/functions.html":{}}}],["name:string",{"_index":1712,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["navbar",{"_index":109,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"modules/AppRoutingModule.html":{},"classes/CheckAuthenticationStatus.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["navbar'},{'name",{"_index":366,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["navbar.component.html",{"_index":1605,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbarcollapsed",{"_index":1608,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbarcomponent",{"_index":107,"title":{"components/NavbarComponent.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"classes/CheckAuthenticationStatus.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"components/TimeLineComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"overview.html":{}}}],["navigate",{"_index":740,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["navigatetocard",{"_index":1062,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["navigationactiontiming",{"_index":1686,"title":{},"body":{"modules/StateModule.html":{}}}],["navigationactiontiming.postactivation",{"_index":1690,"title":{},"body":{"modules/StateModule.html":{}}}],["navigationid",{"_index":1089,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"miscellaneous/variables.html":{}}}],["navigationroutes",{"_index":450,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/NavbarComponent.html":{}}}],["navigator",{"_index":308,"title":{},"body":{"components/AppComponent.html":{}}}],["navigator.language",{"_index":310,"title":{},"body":{"components/AppComponent.html":{}}}],["need",{"_index":1099,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"index.html":{}}}],["needed",{"_index":232,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"index.html":{}}}],["needsconfirm",{"_index":153,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["new",{"_index":28,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":89,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["next.handle(this.addauthheadersifnecessary(request",{"_index":1883,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["next[0].chainfilter(card,next.slice(1",{"_index":1306,"title":{},"body":{"classes/Filter.html":{}}}],["ng",{"_index":410,"title":{},"body":{"modules/AppModule.html":{},"injectables/CardService.html":{},"dependencies.html":{},"index.html":{}}}],["ngafterviewinit",{"_index":1178,"title":{},"body":{"components/DetailsComponent.html":{},"components/FeedComponent.html":{}}}],["ngbcollapse]=\"!expandedmenu[index",{"_index":1640,"title":{},"body":{"components/NavbarComponent.html":{}}}],["ngbmodule",{"_index":409,"title":{},"body":{"modules/AppModule.html":{}}}],["ngmodule",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["ngonchanges",{"_index":1179,"title":{},"body":{"components/DetailsComponent.html":{}}}],["ngonchanges(changes",{"_index":1185,"title":{},"body":{"components/DetailsComponent.html":{}}}],["ngoninit",{"_index":266,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/DetailComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["ngrx",{"_index":233,"title":{},"body":{"classes/AddLightCardFailure.html":{},"interfaces/AppState.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"dependencies.html":{}}}],["ngrx/effects",{"_index":800,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"modules/StateModule.html":{},"dependencies.html":{}}}],["ngrx/entity",{"_index":937,"title":{},"body":{"interfaces/CardFeedState.html":{},"dependencies.html":{}}}],["ngrx/router",{"_index":468,"title":{},"body":{"interfaces/AppState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{},"dependencies.html":{}}}],["ngrx/store",{"_index":52,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/InitFilter.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"dependencies.html":{}}}],["ngx",{"_index":298,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"injectables/HandlebarsService.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"dependencies.html":{}}}],["none",{"_index":182,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["noselectioncomponent",{"_index":367,"title":{"components/NoSelectionComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{},"coverage.html":{},"overview.html":{}}}],["notchecktokenrequest",{"_index":1885,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["note",{"_index":2066,"title":{},"body":{"index.html":{}}}],["notification",{"_index":2031,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notify",{"_index":111,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["now",{"_index":1005,"title":{},"body":{"injectables/CardService.html":{}}}],["null",{"_index":712,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":167,"title":{},"body":{"classes/Action.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/HandlebarsService.html":{},"classes/Input.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"injectables/TimeService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["numberofcards",{"_index":2054,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":1753,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["object[locale",{"_index":1754,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["object[locale][publisher",{"_index":1755,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["object[locale][publisher][version",{"_index":1756,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["observable",{"_index":17,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["observable.create(observer",{"_index":1011,"title":{},"body":{"injectables/CardService.html":{}}}],["observer.error(error",{"_index":1021,"title":{},"body":{"injectables/CardService.html":{}}}],["observer.error(message",{"_index":1013,"title":{},"body":{"injectables/CardService.html":{}}}],["observer.next(json.parse(message.data",{"_index":1014,"title":{},"body":{"injectables/CardService.html":{}}}],["obtain",{"_index":338,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["occured",{"_index":1017,"title":{},"body":{"injectables/CardService.html":{}}}],["of([new",{"_index":1840,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["of(false",{"_index":1540,"title":{},"body":{"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["of(new",{"_index":785,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["of(template",{"_index":1414,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["of(true",{"_index":1855,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["ofactions/authentication.actions",{"_index":290,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckTokenResponse.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{}}}],["ofactions/card.actions",{"_index":911,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["ofactions/light",{"_index":973,"title":{},"body":{"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/LightCardEffects.html":{}}}],["ofactions/menu.actions",{"_index":1599,"title":{},"body":{"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{}}}],["ofeffects/authentication.effects",{"_index":482,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/card",{"_index":480,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/card.effects",{"_index":478,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/custom",{"_index":495,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/light",{"_index":501,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/menu.effects",{"_index":499,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofmodel/card",{"_index":993,"title":{},"body":{"injectables/CardService.html":{}}}],["ofmodel/card.model",{"_index":886,"title":{},"body":{"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/HandleUnexpectedError.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{}}}],["ofmodel/feed",{"_index":517,"title":{},"body":{"classes/ApplyFilter.html":{},"interfaces/CardFeedState.html":{},"classes/InitFilter.html":{}}}],["ofmodel/i18n.model",{"_index":158,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Filter.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["ofmodel/light",{"_index":156,"title":{},"body":{"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/ParameterListItem.html":{},"classes/SelectLightCard.html":{}}}],["ofmodel/map",{"_index":160,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Filter.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["ofmodel/thirds.model",{"_index":1335,"title":{},"body":{"classes/HandleUnexpectedError-2.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{}}}],["ofselectors/authentication.selectors",{"_index":297,"title":{},"body":{"components/AppComponent.html":{}}}],["ofselectors/feed.selectors",{"_index":1223,"title":{},"body":{"components/FeedComponent.html":{}}}],["ofselectors/menu.selectors",{"_index":1623,"title":{},"body":{"components/NavbarComponent.html":{}}}],["ofselectors/router.selectors",{"_index":295,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["ofservices/authentication.service",{"_index":301,"title":{},"body":{"components/AppComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["ofservices/card.service",{"_index":906,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/LightCardEffects.html":{}}}],["ofservices/guard.service",{"_index":433,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["ofservices/guid.service",{"_index":557,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"modules/ServicesModule.html":{}}}],["ofservices/services.module",{"_index":412,"title":{},"body":{"modules/AppModule.html":{}}}],["ofservices/thirds.service",{"_index":1542,"title":{},"body":{"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"modules/ServicesModule.html":{}}}],["ofservices/time.service",{"_index":1385,"title":{},"body":{"injectables/HandlebarsService.html":{},"modules/ServicesModule.html":{}}}],["ofstates/authentication.state",{"_index":492,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstates/card.state",{"_index":493,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstates/feed.state",{"_index":484,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstates/menu.state",{"_index":497,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/index",{"_index":292,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{}}}],["ofstore/reducers/authentication.reducer",{"_index":472,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/reducers/card.reducer",{"_index":489,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/reducers/light",{"_index":486,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/reducers/menu.reducer",{"_index":491,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/selectors/card.selectors",{"_index":888,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["ofstore/selectors/router.selectors",{"_index":845,"title":{},"body":{"components/CardComponent.html":{}}}],["ofstore/state.module",{"_index":408,"title":{},"body":{"modules/AppModule.html":{}}}],["ofstore/states/router.state",{"_index":470,"title":{},"body":{"interfaces/AppState.html":{},"modules/StateModule.html":{}}}],["oftype",{"_index":799,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["oftype(authenticationactiontypes.acceptlogin",{"_index":959,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["oftype(authenticationactiontypes.acceptlogout",{"_index":732,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["oftype(authenticationactiontypes.checkauthenticationstatus",{"_index":747,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["oftype(authenticationactiontypes.trytologin",{"_index":775,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["oftype(authenticationactiontypes.trytologout",{"_index":795,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["oftype(cardactiontypes.loadcard",{"_index":899,"title":{},"body":{"injectables/CardEffects.html":{}}}],["oftype(lightcardactiontypes.loadlightcardssuccess",{"_index":1533,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["oftype(menuactiontypes.loadmenu",{"_index":1587,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["oftype(router_navigation",{"_index":1064,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["ok",{"_index":763,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardOperationEffects.html":{}}}],["once",{"_index":277,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["onchanges",{"_index":1177,"title":{},"body":{"components/DetailsComponent.html":{}}}],["one",{"_index":223,"title":{},"body":{"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"classes/CheckTokenResponse.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/HandleUnexpectedError-1.html":{},"components/IconComponent.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"miscellaneous/enumerations.html":{}}}],["one_second",{"_index":559,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ones",{"_index":2135,"title":{},"body":{"index.html":{}}}],["ongoing",{"_index":927,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["oninit",{"_index":254,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/DetailComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["onsubmit",{"_index":96,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["opcards",{"_index":964,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["open",{"_index":831,"title":{},"body":{"components/CardComponent.html":{}}}],["operating",{"_index":2079,"title":{},"body":{"index.html":{}}}],["operation",{"_index":2171,"title":{},"body":{"index.html":{}}}],["operation.cards",{"_index":965,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operation.effects",{"_index":481,"title":{},"body":{"interfaces/AppState.html":{}}}],["operation.effects.ts",{"_index":954,"title":{},"body":{"injectables/CardOperationEffects.html":{},"coverage.html":{}}}],["operation.effects.ts:24",{"_index":956,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operation.effects.ts:33",{"_index":972,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operation.model",{"_index":994,"title":{},"body":{"injectables/CardService.html":{}}}],["operation.model.ts",{"_index":2020,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["operation.type",{"_index":962,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operation.type.tostring",{"_index":963,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operations",{"_index":958,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operator",{"_index":1420,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["operator_fabric_core_home",{"_index":2069,"title":{},"body":{"index.html":{}}}],["operator_fabric_core_home/services/web/web",{"_index":2145,"title":{},"body":{"index.html":{}}}],["operator_fabric_home/bin/run_all.sh",{"_index":2085,"title":{},"body":{"index.html":{}}}],["operator_fabric_home/services/infra/auth/src/main/java/org/lfenergy/operatorfabric/auth/config/websecurityconfiguration.java",{"_index":2129,"title":{},"body":{"index.html":{}}}],["operatorfabric",{"_index":285,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["opertaor",{"_index":2071,"title":{},"body":{"index.html":{}}}],["opertaor_fabric_home/bin/load_environment_light.sh",{"_index":2164,"title":{},"body":{"index.html":{}}}],["opertaor_fabric_home/bin/run_all.sh",{"_index":2169,"title":{},"body":{"index.html":{}}}],["opertaor_fabric_home/service/core/cards",{"_index":2173,"title":{},"body":{"index.html":{}}}],["opertaor_fabric_home/services/core/cards",{"_index":2111,"title":{},"body":{"index.html":{}}}],["opertaor_fabric_home/services/core/time/build/pidfile",{"_index":2107,"title":{},"body":{"index.html":{}}}],["opertaor_fabric_home/services/core/users/build/pidfile",{"_index":2104,"title":{},"body":{"index.html":{}}}],["opertaor_fabric_home/services/infra/client",{"_index":2099,"title":{},"body":{"index.html":{}}}],["opertaor_fabric_home/ui/main",{"_index":2149,"title":{},"body":{"index.html":{}}}],["optional",{"_index":47,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1422,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["options.hash",{"_index":1456,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["os",{"_index":2078,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":584,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":69,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"modules/FeedModule.html":{},"classes/Filter.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["over",{"_index":650,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["overview",{"_index":2187,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1983,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":101,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"index.html":{}}}],["pair",{"_index":93,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"index.html":{}}}],["paload",{"_index":792,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["pan",{"_index":2007,"title":{},"body":{"dependencies.html":{}}}],["param",{"_index":568,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{}}}],["parameterlistitem",{"_index":201,"title":{"classes/ParameterListItem.html":{}},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"coverage.html":{}}}],["parameters",{"_index":44,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"miscellaneous/functions.html":{}}}],["parametrization",{"_index":1259,"title":{},"body":{"classes/Filter.html":{}}}],["params",{"_index":598,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["params.append('client_id",{"_index":605,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["params.append('grant_type",{"_index":602,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["params.append('password",{"_index":601,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["params.append('username",{"_index":600,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["params.tostring",{"_index":615,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["parentmodule",{"_index":1674,"title":{},"body":{"modules/ServicesModule.html":{}}}],["parse",{"_index":1698,"title":{},"body":{"modules/StateModule.html":{}}}],["partially",{"_index":2062,"title":{},"body":{"index.html":{}}}],["pass",{"_index":1273,"title":{},"body":{"classes/Filter.html":{}}}],["passes",{"_index":1284,"title":{},"body":{"classes/Filter.html":{}}}],["password",{"_index":105,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["past",{"_index":2221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":437,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["pathmatch",{"_index":1250,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["payload",{"_index":37,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/InitFilter.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["payload.access_token",{"_index":683,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.clientid",{"_index":682,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.clientid.tostring",{"_index":667,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.expirationdate.gettime().tostring",{"_index":665,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.expires_in",{"_index":680,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.identifier",{"_index":661,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.password).pipe",{"_index":779,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["payload.token",{"_index":663,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["payload:{name",{"_index":522,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilter.html":{}}}],["payloadforsuccessfulauthentication",{"_index":41,"title":{"classes/PayloadForSuccessfulAuthentication.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{}}}],["payloadforsuccessfulauthentication(payload.identifier",{"_index":681,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["pertinent",{"_index":1092,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["pid",{"_index":2098,"title":{},"body":{"index.html":{}}}],["pieces",{"_index":1701,"title":{},"body":{"modules/StateModule.html":{}}}],["pipe",{"_index":746,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["pipe(map(trans",{"_index":1801,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["pipe(tap(menus",{"_index":1628,"title":{},"body":{"components/NavbarComponent.html":{}}}],["platformlocation",{"_index":1483,"title":{},"body":{"components/IconComponent.html":{}}}],["platformlocation.getbasehreffromdom",{"_index":1506,"title":{},"body":{"components/IconComponent.html":{}}}],["plustwentyfourhour",{"_index":1006,"title":{},"body":{"injectables/CardService.html":{}}}],["point",{"_index":1094,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["port",{"_index":2096,"title":{},"body":{"index.html":{}}}],["possible",{"_index":113,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["postdata",{"_index":586,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["postdata).pipe",{"_index":590,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["postdata.append('token",{"_index":588,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["preloadallmodules",{"_index":428,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["preloadingstrategy",{"_index":456,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["present",{"_index":704,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/functions.html":{}}}],["previous",{"_index":1749,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["previous.pipe",{"_index":1759,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["primary",{"_index":1562,"title":{},"body":{"components/LoginComponent.html":{}}}],["private",{"_index":303,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/RouterStateUrl.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["processid",{"_index":171,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["processing",{"_index":930,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["prodi18npath",{"_index":1960,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":2210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["project",{"_index":2061,"title":{},"body":{"index.html":{}}}],["properties",{"_index":35,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"injectables/ThirdsService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["property",{"_index":1260,"title":{},"body":{"classes/Filter.html":{}}}],["provide",{"_index":424,"title":{},"body":{"modules/AppModule.html":{},"modules/CardsModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":1694,"title":{},"body":{"modules/StateModule.html":{},"index.html":{}}}],["providedin",{"_index":1314,"title":{},"body":{"classes/GuidService.html":{}}}],["providers",{"_index":380,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"overview.html":{}}}],["public",{"_index":36,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardListComponent.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"injectables/TimeService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["publication",{"_index":2114,"title":{},"body":{"index.html":{}}}],["publication/build/pidfilewait",{"_index":2116,"title":{},"body":{"index.html":{}}}],["publication/src/main/bin/push_cards_loop.sh",{"_index":2174,"title":{},"body":{"index.html":{}}}],["publication/src/main/bin/push_cards_loop.shonce",{"_index":2136,"title":{},"body":{"index.html":{}}}],["publishdate",{"_index":166,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["publisher",{"_index":164,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"injectables/HandlebarsService.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"injectables/ThirdsService.html":{}}}],["publishers",{"_index":1539,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["publisherversion",{"_index":165,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["publisher}.${version}.${name}.${locale",{"_index":1411,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["push",{"_index":91,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["put",{"_index":685,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["query",{"_index":1100,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["querylist",{"_index":1192,"title":{},"body":{"components/DetailsComponent.html":{}}}],["queryparams",{"_index":1088,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"miscellaneous/variables.html":{}}}],["querytemplate",{"_index":1347,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["querytemplate(publisher",{"_index":1367,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["querytemplate(publisher:string",{"_index":1405,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["question",{"_index":2032,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["r",{"_index":1757,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["rabittmq",{"_index":2160,"title":{},"body":{"index.html":{}}}],["reactiveformsmodule",{"_index":406,"title":{},"body":{"modules/AppModule.html":{}}}],["readonly",{"_index":38,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/I18n.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["ready",{"_index":2088,"title":{},"body":{"index.html":{}}}],["reason",{"_index":1272,"title":{},"body":{"classes/Filter.html":{}}}],["received",{"_index":1803,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["reception",{"_index":2132,"title":{},"body":{"index.html":{}}}],["recursion",{"_index":1289,"title":{},"body":{"classes/Filter.html":{}}}],["recursively",{"_index":1288,"title":{},"body":{"classes/Filter.html":{}}}],["redirect",{"_index":723,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["redirectto",{"_index":444,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["reduce",{"_index":1736,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["reduce((acc",{"_index":1760,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["reduce((ids",{"_index":1785,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["reduce((menus:thirdmenu[],menu:thirdmenu",{"_index":1772,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["reducer",{"_index":25,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"interfaces/AppState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["reducer(state",{"_index":2057,"title":{},"body":{"miscellaneous/functions.html":{}}}],["regarding",{"_index":703,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/functions.html":{}}}],["registerarrayatindex",{"_index":1348,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registerarrayatindexlength",{"_index":1349,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registerbool",{"_index":1350,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registercardaction",{"_index":1351,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registerdateformat",{"_index":1352,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registered",{"_index":596,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["registeri18n",{"_index":1353,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registermath",{"_index":1354,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registernow",{"_index":1355,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registernumberformat",{"_index":1356,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registerpreservespace",{"_index":1357,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registerslice",{"_index":1358,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registersort",{"_index":1359,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registersplit",{"_index":1360,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registersvg",{"_index":1361,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["reinsertscripts",{"_index":1118,"title":{},"body":{"components/DetailComponent.html":{}}}],["reject",{"_index":66,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["rejectedlogin",{"_index":766,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["rejection",{"_index":120,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["rejectlogin",{"_index":65,"title":{"classes/RejectLogIn.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["rejectlogin({denialreason",{"_index":758,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["rejectloginattempt",{"_index":126,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["related",{"_index":230,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"miscellaneous/enumerations.html":{}}}],["relevant",{"_index":668,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["remove",{"_index":130,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["removes",{"_index":123,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["rendered",{"_index":933,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["rendering",{"_index":1145,"title":{},"body":{"components/DetailComponent.html":{}}}],["replication",{"_index":1266,"title":{},"body":{"classes/Filter.html":{}}}],["request",{"_index":1026,"title":{},"body":{"injectables/CardService.html":{},"interceptors/TokenInjector.html":{}}}],["request.clone(update",{"_index":1889,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["request.url",{"_index":1884,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["require",{"_index":1965,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":2208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":390,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"components/LoginComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"overview.html":{}}}],["resetform",{"_index":1566,"title":{},"body":{"components/LoginComponent.html":{}}}],["response",{"_index":695,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["responsetype",{"_index":1747,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["result",{"_index":133,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.id",{"_index":1813,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["result.push(v",{"_index":2234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result.translation[lang",{"_index":1811,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["result:any",{"_index":1809,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["results",{"_index":135,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":579,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/RouterStateUrl.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1102,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["returns",{"_index":281,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/RouterStateUrl.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":341,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"components/LoginComponent.html":{}}}],["root",{"_index":257,"title":{},"body":{"components/AppComponent.html":{},"classes/GuidService.html":{},"index.html":{}}}],["root'},{'name",{"_index":349,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["route",{"_index":1103,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["router",{"_index":461,"title":{},"body":{"interfaces/AppState.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["router.effects",{"_index":496,"title":{},"body":{"interfaces/AppState.html":{}}}],["router.effects.ts",{"_index":1061,"title":{},"body":{"injectables/CustomRouterEffects.html":{},"coverage.html":{}}}],["router.effects.ts:20",{"_index":1063,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["router.effects.ts:28",{"_index":1073,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["router.state",{"_index":2254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["router.state.url",{"_index":2255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["router_navigation",{"_index":1074,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["routereffects",{"_index":483,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["routerinitialstate",{"_index":510,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["routermodule",{"_index":429,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["routermodule.forchild(routes",{"_index":540,"title":{},"body":{"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":453,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routernavigationaction",{"_index":1066,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["routerreducerstate",{"_index":466,"title":{},"body":{"interfaces/AppState.html":{}}}],["routerstate",{"_index":1086,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["routerstate.params['cid",{"_index":1071,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["routerstate.root.queryparams",{"_index":1107,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["routerstate:any",{"_index":1068,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["routerstateserializer",{"_index":1077,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{}}}],["routerstatesnapshot",{"_index":1084,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{}}}],["routerstateurl",{"_index":469,"title":{"classes/RouterStateUrl.html":{}},"body":{"interfaces/AppState.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"coverage.html":{}}}],["routerstateurl(url",{"_index":1108,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["routes",{"_index":430,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{},"overview.html":{},"routes.html":{}}}],["routes.slice(0",{"_index":451,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routing.module",{"_index":413,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/FeedModule.html":{},"components/NavbarComponent.html":{}}}],["routing.module.ts",{"_index":427,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["rows",{"_index":199,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["rte",{"_index":325,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["rules",{"_index":722,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["run",{"_index":2080,"title":{},"body":{"index.html":{}}}],["running",{"_index":641,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"index.html":{}}}],["rvalue",{"_index":1431,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["rxjs",{"_index":288,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"interceptors/TokenInjector.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":289,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["safehtml",{"_index":1135,"title":{},"body":{"components/DetailComponent.html":{}}}],["same",{"_index":2167,"title":{},"body":{"index.html":{}}}],["sanitizer",{"_index":1123,"title":{},"body":{"components/DetailComponent.html":{}}}],["save",{"_index":656,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["saveauthenticationinformation",{"_index":809,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["saveauthenticationinformation(payload",{"_index":659,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["scope",{"_index":1268,"title":{},"body":{"classes/Filter.html":{}}}],["script",{"_index":2133,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":1148,"title":{},"body":{"components/DetailComponent.html":{}}}],["scripts.length",{"_index":1151,"title":{},"body":{"components/DetailComponent.html":{}}}],["scriptsinitiallength",{"_index":1150,"title":{},"body":{"components/DetailComponent.html":{}}}],["see",{"_index":2139,"title":{},"body":{"index.html":{}}}],["select",{"_index":222,"title":{},"body":{"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"components/CardComponent.html":{},"components/FeedComponent.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"miscellaneous/enumerations.html":{}}}],["select(feedselectors.selectfeed",{"_index":1226,"title":{},"body":{"components/FeedComponent.html":{}}}],["selectactivefiltersarray",{"_index":1945,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectauthenticationstate",{"_index":1939,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectcardstate",{"_index":1941,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectcardstateselection",{"_index":1942,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectcardstateselectiondetails",{"_index":1943,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectcurrenturl",{"_index":293,"title":{},"body":{"components/AppComponent.html":{},"components/CardComponent.html":{},"components/NavbarComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectdetail",{"_index":1180,"title":{},"body":{"components/DetailsComponent.html":{}}}],["selectdetail(detail",{"_index":1189,"title":{},"body":{"components/DetailsComponent.html":{}}}],["selected",{"_index":919,"title":{},"body":{"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"miscellaneous/variables.html":{}}}],["selectedcardid",{"_index":918,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["selectedcardid:string",{"_index":241,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{}}}],["selectedvalues",{"_index":202,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["selectexpirationtime",{"_index":296,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectfilter",{"_index":1946,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectfilteredfeed",{"_index":1947,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selection",{"_index":950,"title":{},"body":{"components/CardListComponent.html":{},"components/FeedComponent.html":{},"components/NoSelectionComponent.html":{}}}],["selection'},{'name",{"_index":368,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["selection.component",{"_index":1241,"title":{},"body":{"modules/FeedModule.html":{}}}],["selection.component.html",{"_index":1646,"title":{},"body":{"components/NoSelectionComponent.html":{}}}],["selection.component.ts",{"_index":1645,"title":{},"body":{"components/NoSelectionComponent.html":{},"coverage.html":{}}}],["selection.component.ts:14",{"_index":1647,"title":{},"body":{"components/NoSelectionComponent.html":{}}}],["selection.component.ts:18",{"_index":1648,"title":{},"body":{"components/NoSelectionComponent.html":{}}}],["selection/no",{"_index":1240,"title":{},"body":{"modules/FeedModule.html":{},"components/NoSelectionComponent.html":{},"coverage.html":{}}}],["selectlastcards",{"_index":1948,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectlightcard",{"_index":221,"title":{"classes/SelectLightCard.html":{}},"body":{"classes/AddLightCardFailure.html":{},"injectables/CustomRouterEffects.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["selectlightcard({selectedcardid",{"_index":1072,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["selectlightcardselection",{"_index":1949,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectlightcardsstate",{"_index":1950,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectmenustate",{"_index":1952,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectmenustatemenu",{"_index":1622,"title":{},"body":{"components/NavbarComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selector",{"_index":256,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["selectrouterstate",{"_index":294,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["send",{"_index":280,"title":{},"body":{"components/AppComponent.html":{}}}],["sequentially",{"_index":1293,"title":{},"body":{"classes/Filter.html":{}}}],["serialize",{"_index":1079,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{}}}],["serialize(routerstate",{"_index":1083,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["serializer",{"_index":1691,"title":{},"body":{"modules/StateModule.html":{}}}],["serve",{"_index":2176,"title":{},"body":{"index.html":{}}}],["server",{"_index":2175,"title":{},"body":{"index.html":{}}}],["service",{"_index":94,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"injectables/MenuEffects.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"index.html":{}}}],["services",{"_index":2166,"title":{},"body":{"index.html":{}}}],["services/authentication.service",{"_index":801,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["services/handlebars.service",{"_index":1050,"title":{},"body":{"modules/CardsModule.html":{},"components/DetailComponent.html":{}}}],["services/thirds.service",{"_index":846,"title":{},"body":{"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{}}}],["servicesmodule",{"_index":387,"title":{"modules/ServicesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"modules.html":{},"overview.html":{}}}],["servicesmodule.forroot",{"_index":422,"title":{},"body":{"modules/AppModule.html":{}}}],["session",{"_index":622,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["set",{"_index":1204,"title":{},"body":{"components/DetailsComponent.html":{},"index.html":{}}}],["set(\"locale",{"_index":1744,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["set(\"version",{"_index":1745,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["setheaders",{"_index":1888,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["settimeout",{"_index":1143,"title":{},"body":{"components/DetailComponent.html":{},"components/DetailsComponent.html":{}}}],["settimeout(()=>this.expandedmenu[index]=false,5000",{"_index":1636,"title":{},"body":{"components/NavbarComponent.html":{}}}],["severity",{"_index":155,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Filter.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["simplechanges",{"_index":1186,"title":{},"body":{"components/DetailsComponent.html":{}}}],["single",{"_index":2077,"title":{},"body":{"index.html":{}}}],["size",{"_index":867,"title":{},"body":{"components/CardComponent.html":{},"components/IconComponent.html":{}}}],["size:string",{"_index":1501,"title":{},"body":{"components/IconComponent.html":{}}}],["skipself",{"_index":1668,"title":{},"body":{"modules/ServicesModule.html":{}}}],["small",{"_index":865,"title":{},"body":{"components/CardComponent.html":{},"components/IconComponent.html":{}}}],["small:boolean",{"_index":1496,"title":{},"body":{"components/IconComponent.html":{}}}],["snapshot",{"_index":1093,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{}}}],["sortbystartdate",{"_index":1956,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sortbystartdate(card1",{"_index":938,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/functions.html":{}}}],["sortcomparer:sortbystartdate",{"_index":943,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["sortonkey",{"_index":1910,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sortonkey(key",{"_index":1464,"title":{},"body":{"injectables/HandlebarsService.html":{},"miscellaneous/functions.html":{}}}],["sound",{"_index":2026,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"dependencies.html":{}}}],["spa",{"_index":2076,"title":{},"body":{"index.html":{}}}],["spec\\.ts",{"_index":2209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["splitvalue",{"_index":1427,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["sprites",{"_index":1479,"title":{},"body":{"components/IconComponent.html":{}}}],["sprites:string",{"_index":1502,"title":{},"body":{"components/IconComponent.html":{}}}],["src/.../authentication.actions.ts",{"_index":2016,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../authentication.reducer.ts",{"_index":2036,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../authentication.selectors.ts",{"_index":2204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication.service.ts",{"_index":2023,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../authentication.state.ts",{"_index":2196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../card",{"_index":2019,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../card.actions.ts",{"_index":2017,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../card.model.ts",{"_index":2015,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../card.reducer.ts",{"_index":2037,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../card.selectors.ts",{"_index":2205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../card.state.ts",{"_index":2197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":2199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":2200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../feed.actions.ts",{"_index":2021,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../feed.selectors.ts",{"_index":2203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../feed.state.ts",{"_index":2039,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../handlebars.service.ts",{"_index":2040,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../helpers.ts",{"_index":2034,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":2195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../light",{"_index":2022,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../menu.actions.ts",{"_index":2024,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../menu.reducer.ts",{"_index":2038,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../menu.selectors.ts",{"_index":2207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../menu.state.ts",{"_index":2202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../router.selectors.ts",{"_index":2206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../router.state.ts",{"_index":2201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test.ts",{"_index":2198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../thirds.service.ts",{"_index":2041,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../translate.config.ts",{"_index":2035,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":426,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":253,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:25",{"_index":286,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:26",{"_index":284,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:27",{"_index":283,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:28",{"_index":270,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:43",{"_index":271,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/components/icon/icon.component.ts",{"_index":1474,"title":{},"body":{"components/IconComponent.html":{},"coverage.html":{}}}],["src/app/components/icon/icon.component.ts:19",{"_index":1487,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:20",{"_index":1490,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:21",{"_index":1489,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:22",{"_index":1485,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:23",{"_index":1486,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:24",{"_index":1488,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:25",{"_index":1492,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:26",{"_index":1493,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:27",{"_index":1484,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:33",{"_index":1491,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/login/login.component.ts",{"_index":1560,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["src/app/components/login/login.component.ts:21",{"_index":1571,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login/login.component.ts:22",{"_index":1567,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login/login.component.ts:26",{"_index":1568,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login/login.component.ts:35",{"_index":1569,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login/login.component.ts:43",{"_index":1570,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts",{"_index":1604,"title":{},"body":{"components/NavbarComponent.html":{},"coverage.html":{}}}],["src/app/components/navbar/navbar.component.ts:28",{"_index":1618,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:29",{"_index":1619,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:30",{"_index":1617,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:31",{"_index":1616,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:32",{"_index":1611,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:37",{"_index":1613,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:51",{"_index":1612,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:55",{"_index":1621,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:59",{"_index":1615,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/model/card",{"_index":2027,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/model/card.model.ts",{"_index":138,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/app/model/card.model.ts:101",{"_index":1650,"title":{},"body":{"classes/ParameterListItem.html":{}}}],["src/app/model/card.model.ts:12",{"_index":825,"title":{},"body":{"classes/Card.html":{}}}],["src/app/model/card.model.ts:40",{"_index":878,"title":{},"body":{"classes/CardDetail.html":{}}}],["src/app/model/card.model.ts:57",{"_index":154,"title":{},"body":{"classes/Action.html":{}}}],["src/app/model/card.model.ts:85",{"_index":1528,"title":{},"body":{"classes/Input.html":{}}}],["src/app/model/feed",{"_index":1254,"title":{},"body":{"classes/Filter.html":{},"coverage.html":{}}}],["src/app/model/i18n.model.ts",{"_index":1471,"title":{},"body":{"classes/I18n.html":{},"coverage.html":{}}}],["src/app/model/i18n.model.ts:10",{"_index":1473,"title":{},"body":{"classes/I18n.html":{}}}],["src/app/model/light",{"_index":2029,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/model/map.ts",{"_index":1581,"title":{},"body":{"classes/Map.html":{},"coverage.html":{}}}],["src/app/model/map.ts:8",{"_index":1584,"title":{},"body":{"classes/Map.html":{}}}],["src/app/model/thirds.model.ts",{"_index":1703,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"coverage.html":{}}}],["src/app/model/thirds.model.ts:1",{"_index":1711,"title":{},"body":{"classes/Third.html":{}}}],["src/app/model/thirds.model.ts:13",{"_index":1721,"title":{},"body":{"classes/ThirdMenuEntry.html":{}}}],["src/app/model/thirds.model.ts:21",{"_index":1720,"title":{},"body":{"classes/ThirdMenu.html":{}}}],["src/app/modules/archives/archives",{"_index":539,"title":{},"body":{"modules/ArchivesRoutingModule.html":{}}}],["src/app/modules/archives/archives.component.ts",{"_index":526,"title":{},"body":{"components/ArchivesComponent.html":{},"coverage.html":{}}}],["src/app/modules/archives/archives.component.ts:15",{"_index":529,"title":{},"body":{"components/ArchivesComponent.html":{}}}],["src/app/modules/archives/archives.component.ts:19",{"_index":530,"title":{},"body":{"components/ArchivesComponent.html":{}}}],["src/app/modules/archives/archives.module.ts",{"_index":537,"title":{},"body":{"modules/ArchivesModule.html":{}}}],["src/app/modules/cards/cards.module.ts",{"_index":1039,"title":{},"body":{"modules/CardsModule.html":{}}}],["src/app/modules/cards/cards.module.ts:35",{"_index":1041,"title":{},"body":{"modules/CardsModule.html":{}}}],["src/app/modules/cards/components/card",{"_index":879,"title":{},"body":{"components/CardDetailsComponent.html":{},"coverage.html":{}}}],["src/app/modules/cards/components/card/card.component.ts",{"_index":827,"title":{},"body":{"components/CardComponent.html":{},"coverage.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:24",{"_index":839,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:25",{"_index":838,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:26",{"_index":842,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:27",{"_index":837,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:34",{"_index":841,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:38",{"_index":840,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:46",{"_index":844,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts",{"_index":1113,"title":{},"body":{"components/DetailComponent.html":{},"coverage.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:19",{"_index":1136,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:20",{"_index":1127,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:21",{"_index":1126,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:22",{"_index":1125,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:30",{"_index":1133,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:42",{"_index":1138,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:46",{"_index":1134,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:61",{"_index":1132,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:75",{"_index":1131,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts",{"_index":1175,"title":{},"body":{"components/DetailsComponent.html":{},"coverage.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:26",{"_index":1194,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:27",{"_index":1183,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:28",{"_index":1182,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:33",{"_index":1184,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:42",{"_index":1191,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:52",{"_index":1190,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:61",{"_index":1195,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:65",{"_index":1187,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts",{"_index":1344,"title":{},"body":{"injectables/HandlebarsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:103",{"_index":1376,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:117",{"_index":1370,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:123",{"_index":1380,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:140",{"_index":1381,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:182",{"_index":1375,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:208",{"_index":1383,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:226",{"_index":1373,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:23",{"_index":1364,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:240",{"_index":1374,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:248",{"_index":1378,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:255",{"_index":1377,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:262",{"_index":1379,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:44",{"_index":1366,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:49",{"_index":1369,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:62",{"_index":1372,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:91",{"_index":1371,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:97",{"_index":1382,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/feed/components/card",{"_index":946,"title":{},"body":{"components/CardListComponent.html":{},"coverage.html":{}}}],["src/app/modules/feed/components/no",{"_index":1644,"title":{},"body":{"components/NoSelectionComponent.html":{},"coverage.html":{}}}],["src/app/modules/feed/components/time",{"_index":1856,"title":{},"body":{"components/TimeLineComponent.html":{},"coverage.html":{}}}],["src/app/modules/feed/feed",{"_index":1246,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["src/app/modules/feed/feed.component.ts",{"_index":1215,"title":{},"body":{"components/FeedComponent.html":{},"coverage.html":{}}}],["src/app/modules/feed/feed.component.ts:23",{"_index":1221,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/modules/feed/feed.component.ts:24",{"_index":1218,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/modules/feed/feed.component.ts:29",{"_index":1220,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/modules/feed/feed.component.ts:38",{"_index":1219,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/modules/feed/feed.module.ts",{"_index":1236,"title":{},"body":{"modules/FeedModule.html":{}}}],["src/app/services/authentication.service.ts",{"_index":542,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/services/authentication.service.ts:104",{"_index":817,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:111",{"_index":822,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:123",{"_index":820,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:129",{"_index":814,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:138",{"_index":821,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:150",{"_index":816,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:164",{"_index":815,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:176",{"_index":818,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:185",{"_index":550,"title":{},"body":{"classes/AuthObject.html":{}}}],["src/app/services/authentication.service.ts:186",{"_index":547,"title":{},"body":{"classes/AuthObject.html":{}}}],["src/app/services/authentication.service.ts:187",{"_index":549,"title":{},"body":{"classes/AuthObject.html":{}}}],["src/app/services/authentication.service.ts:188",{"_index":548,"title":{},"body":{"classes/AuthObject.html":{}}}],["src/app/services/authentication.service.ts:195",{"_index":1059,"title":{},"body":{"classes/CheckTokenResponse.html":{}}}],["src/app/services/authentication.service.ts:196",{"_index":1058,"title":{},"body":{"classes/CheckTokenResponse.html":{}}}],["src/app/services/authentication.service.ts:197",{"_index":1057,"title":{},"body":{"classes/CheckTokenResponse.html":{}}}],["src/app/services/authentication.service.ts:30",{"_index":823,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:32",{"_index":811,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:50",{"_index":813,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:65",{"_index":812,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/authentication.service.ts:96",{"_index":819,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/services/card.service.ts",{"_index":975,"title":{},"body":{"injectables/CardService.html":{},"coverage.html":{}}}],["src/app/services/card.service.ts:20",{"_index":991,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:21",{"_index":981,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:29",{"_index":990,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:33",{"_index":986,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:41",{"_index":984,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:66",{"_index":987,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/guid.service.ts",{"_index":1307,"title":{},"body":{"classes/GuidService.html":{},"coverage.html":{}}}],["src/app/services/guid.service.ts:16",{"_index":1310,"title":{},"body":{"classes/GuidService.html":{}}}],["src/app/services/guid.service.ts:22",{"_index":1311,"title":{},"body":{"classes/GuidService.html":{}}}],["src/app/services/guid.service.ts:26",{"_index":1312,"title":{},"body":{"classes/GuidService.html":{}}}],["src/app/services/interceptors.service.ts",{"_index":1870,"title":{},"body":{"interceptors/TokenInjector.html":{},"coverage.html":{}}}],["src/app/services/interceptors.service.ts:14",{"_index":1874,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["src/app/services/interceptors.service.ts:20",{"_index":1880,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["src/app/services/interceptors.service.ts:25",{"_index":1877,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["src/app/services/services.module.ts",{"_index":1666,"title":{},"body":{"modules/ServicesModule.html":{}}}],["src/app/services/services.module.ts:38",{"_index":1667,"title":{},"body":{"modules/ServicesModule.html":{}}}],["src/app/services/thirds.service.ts",{"_index":1723,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/services/thirds.service.ts:102",{"_index":1830,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:107",{"_index":1831,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:155",{"_index":1832,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:160",{"_index":1726,"title":{},"body":{"classes/ThirdsI18nLoader.html":{}}}],["src/app/services/thirds.service.ts:164",{"_index":1728,"title":{},"body":{"classes/ThirdsI18nLoader.html":{}}}],["src/app/services/thirds.service.ts:24",{"_index":1835,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:25",{"_index":1833,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:26",{"_index":1834,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:27",{"_index":1823,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:36",{"_index":1825,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:47",{"_index":1826,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:81",{"_index":1824,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:97",{"_index":1828,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/time.service.ts",{"_index":1863,"title":{},"body":{"injectables/TimeService.html":{},"coverage.html":{}}}],["src/app/services/time.service.ts:11",{"_index":1865,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/services/time.service.ts:15",{"_index":1866,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/store/actions/authentication.actions.ts",{"_index":6,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/authentication.actions.ts:110",{"_index":136,"title":{},"body":{"classes/AcceptLogOut.html":{}}}],["src/app/store/actions/authentication.actions.ts:125",{"_index":137,"title":{},"body":{"classes/AcceptLogOutSuccess.html":{}}}],["src/app/store/actions/authentication.actions.ts:21",{"_index":1652,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["src/app/store/actions/authentication.actions.ts:22",{"_index":1655,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["src/app/store/actions/authentication.actions.ts:23",{"_index":1653,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["src/app/store/actions/authentication.actions.ts:24",{"_index":1656,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["src/app/store/actions/authentication.actions.ts:25",{"_index":1654,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["src/app/store/actions/authentication.actions.ts:35",{"_index":1056,"title":{},"body":{"classes/CheckAuthenticationStatus.html":{}}}],["src/app/store/actions/authentication.actions.ts:50",{"_index":43,"title":{},"body":{"classes/AcceptLogIn.html":{}}}],["src/app/store/actions/authentication.actions.ts:52",{"_index":48,"title":{},"body":{"classes/AcceptLogIn.html":{}}}],["src/app/store/actions/authentication.actions.ts:63",{"_index":1890,"title":{},"body":{"classes/TryToLogIn.html":{}}}],["src/app/store/actions/authentication.actions.ts:65",{"_index":1891,"title":{},"body":{"classes/TryToLogIn.html":{}}}],["src/app/store/actions/authentication.actions.ts:76",{"_index":1892,"title":{},"body":{"classes/TryToLogOut.html":{}}}],["src/app/store/actions/authentication.actions.ts:93",{"_index":1657,"title":{},"body":{"classes/RejectLogIn.html":{}}}],["src/app/store/actions/authentication.actions.ts:95",{"_index":1658,"title":{},"body":{"classes/RejectLogIn.html":{}}}],["src/app/store/actions/card.actions.ts",{"_index":1319,"title":{},"body":{"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/card.actions.ts:19",{"_index":1543,"title":{},"body":{"classes/LoadCard.html":{}}}],["src/app/store/actions/card.actions.ts:21",{"_index":1544,"title":{},"body":{"classes/LoadCard.html":{}}}],["src/app/store/actions/card.actions.ts:25",{"_index":1545,"title":{},"body":{"classes/LoadCardFailure.html":{}}}],["src/app/store/actions/card.actions.ts:27",{"_index":1546,"title":{},"body":{"classes/LoadCardFailure.html":{}}}],["src/app/store/actions/card.actions.ts:32",{"_index":1547,"title":{},"body":{"classes/LoadCardSuccess.html":{}}}],["src/app/store/actions/card.actions.ts:34",{"_index":1548,"title":{},"body":{"classes/LoadCardSuccess.html":{}}}],["src/app/store/actions/card.actions.ts:40",{"_index":1320,"title":{},"body":{"classes/HandleUnexpectedError.html":{}}}],["src/app/store/actions/card.actions.ts:42",{"_index":1321,"title":{},"body":{"classes/HandleUnexpectedError.html":{}}}],["src/app/store/actions/feed.actions.ts",{"_index":512,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/feed.actions.ts:18",{"_index":513,"title":{},"body":{"classes/ApplyFilter.html":{}}}],["src/app/store/actions/feed.actions.ts:19",{"_index":514,"title":{},"body":{"classes/ApplyFilter.html":{}}}],["src/app/store/actions/feed.actions.ts:23",{"_index":1526,"title":{},"body":{"classes/InitFilter.html":{}}}],["src/app/store/actions/feed.actions.ts:24",{"_index":1527,"title":{},"body":{"classes/InitFilter.html":{}}}],["src/app/store/actions/light",{"_index":205,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/menu.actions.ts",{"_index":1330,"title":{},"body":{"classes/HandleUnexpectedError-2.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/menu.actions.ts:19",{"_index":1555,"title":{},"body":{"classes/LoadMenu.html":{}}}],["src/app/store/actions/menu.actions.ts:25",{"_index":1556,"title":{},"body":{"classes/LoadMenuFailure.html":{}}}],["src/app/store/actions/menu.actions.ts:27",{"_index":1557,"title":{},"body":{"classes/LoadMenuFailure.html":{}}}],["src/app/store/actions/menu.actions.ts:32",{"_index":1558,"title":{},"body":{"classes/LoadMenuSuccess.html":{}}}],["src/app/store/actions/menu.actions.ts:34",{"_index":1559,"title":{},"body":{"classes/LoadMenuSuccess.html":{}}}],["src/app/store/actions/menu.actions.ts:39",{"_index":1331,"title":{},"body":{"classes/HandleUnexpectedError-2.html":{}}}],["src/app/store/actions/menu.actions.ts:41",{"_index":1332,"title":{},"body":{"classes/HandleUnexpectedError-2.html":{}}}],["src/app/store/effects/authentication.effects.ts",{"_index":715,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/authentication.effects.ts:109",{"_index":737,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:128",{"_index":773,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:152",{"_index":760,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:173",{"_index":729,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:179",{"_index":727,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:29",{"_index":718,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:60",{"_index":788,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:88",{"_index":796,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/card",{"_index":953,"title":{},"body":{"injectables/CardOperationEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/card.effects.ts",{"_index":895,"title":{},"body":{"injectables/CardEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/card.effects.ts:20",{"_index":898,"title":{},"body":{"injectables/CardEffects.html":{}}}],["src/app/store/effects/card.effects.ts:30",{"_index":905,"title":{},"body":{"injectables/CardEffects.html":{}}}],["src/app/store/effects/custom",{"_index":1060,"title":{},"body":{"injectables/CustomRouterEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/light",{"_index":1529,"title":{},"body":{"injectables/LightCardEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/menu.effects.ts",{"_index":1585,"title":{},"body":{"injectables/MenuEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/menu.effects.ts:20",{"_index":1586,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["src/app/store/effects/menu.effects.ts:30",{"_index":1597,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["src/app/store/index.ts",{"_index":459,"title":{},"body":{"interfaces/AppState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/reducers/authentication.reducer.ts",{"_index":1927,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/reducers/card.reducer.ts",{"_index":1933,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/reducers/light",{"_index":1935,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/store/reducers/menu.reducer.ts",{"_index":1937,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/authentication.selectors.ts",{"_index":1938,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/card.selectors.ts",{"_index":1940,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/feed.selectors.ts",{"_index":1944,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/menu.selectors.ts",{"_index":1951,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/router.selectors.ts",{"_index":1953,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/state.module.ts",{"_index":1680,"title":{},"body":{"modules/StateModule.html":{}}}],["src/app/store/state.module.ts:32",{"_index":1681,"title":{},"body":{"modules/StateModule.html":{}}}],["src/app/store/states/authentication.state.ts",{"_index":710,"title":{},"body":{"interfaces/AuthState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/card.state.ts",{"_index":1031,"title":{},"body":{"interfaces/CardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/feed.state.ts",{"_index":915,"title":{},"body":{"interfaces/CardFeedState.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/menu.state.ts",{"_index":1600,"title":{},"body":{"interfaces/MenuState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/router.state.ts",{"_index":1076,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/router.state.ts:37",{"_index":1660,"title":{},"body":{"classes/RouterStateUrl.html":{}}}],["src/app/store/states/router.state.ts:48",{"_index":1085,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{}}}],["src/app/store/states/router.state.ts:55",{"_index":1082,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{}}}],["src/app/translate.config.ts",{"_index":1957,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.prod.ts",{"_index":1961,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":1962,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test.ts",{"_index":1963,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/tests/helpers.ts",{"_index":1966,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/tests/mocks/thirds.service.mock.ts",{"_index":1837,"title":{},"body":{"classes/ThirdsServiceMock.html":{},"coverage.html":{}}}],["src/tests/mocks/thirds.service.mock.ts:14",{"_index":1839,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["src/tests/mocks/thirds.service.mock.ts:5",{"_index":1838,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["sse",{"_index":1025,"title":{},"body":{"injectables/CardService.html":{}}}],["stand",{"_index":2074,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":2147,"title":{},"body":{"index.html":{}}}],["start",{"_index":2086,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":168,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["started",{"_index":2060,"title":{"index.html":{}},"body":{"index.html":{}}}],["starting",{"_index":2091,"title":{},"body":{"index.html":{}}}],["state",{"_index":11,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"interfaces/CardFeedState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["state.card",{"_index":2247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.children",{"_index":1111,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["state.expirationdate",{"_index":2216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.feed",{"_index":2243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.filters",{"_index":2236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.identifier",{"_index":2222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.lastcards",{"_index":2240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.menu",{"_index":2257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.params",{"_index":1109,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["state.selectedcardid",{"_index":2224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.token",{"_index":2223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state:appstate",{"_index":2242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":1895,"title":{},"body":{"coverage.html":{}}}],["statemodule",{"_index":388,"title":{"modules/StateModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StateModule.html":{},"modules.html":{},"overview.html":{}}}],["statemodule.forroot",{"_index":421,"title":{},"body":{"modules/AppModule.html":{}}}],["static",{"_index":196,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"modules/CardsModule.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/RouterStateUrl.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"miscellaneous/enumerations.html":{}}}],["status",{"_index":60,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/Filter.html":{},"classes/InitFilter.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["still",{"_index":640,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["stillvalid",{"_index":647,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["stops",{"_index":1290,"title":{},"body":{"classes/Filter.html":{}}}],["store",{"_index":112,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"dependencies.html":{}}}],["store/index",{"_index":1737,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["storeconfig",{"_index":507,"title":{},"body":{"interfaces/AppState.html":{},"modules/StateModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stored",{"_index":638,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["storedevtoolsmodule",{"_index":1684,"title":{},"body":{"modules/StateModule.html":{}}}],["storedevtoolsmodule.instrument",{"_index":1693,"title":{},"body":{"modules/StateModule.html":{}}}],["storefreeze",{"_index":475,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["storemodule",{"_index":1682,"title":{},"body":{"modules/StateModule.html":{}}}],["storemodule.forroot(appreducer",{"_index":1688,"title":{},"body":{"modules/StateModule.html":{}}}],["storerouterconnectingmodule",{"_index":1687,"title":{},"body":{"modules/StateModule.html":{}}}],["storerouterconnectingmodule.forroot",{"_index":1689,"title":{},"body":{"modules/StateModule.html":{}}}],["string",{"_index":75,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/Map.html":{},"interfaces/MenuState.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["string):observable",{"_index":1407,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["structure",{"_index":1696,"title":{},"body":{"modules/StateModule.html":{}}}],["styles",{"_index":185,"title":{},"body":{"classes/Action.html":{},"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"classes/Input.html":{},"components/LoginComponent.html":{},"classes/ParameterListItem.html":{}}}],["styleurls",{"_index":258,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{}}}],["sub",{"_index":698,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["subject",{"_index":329,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["submitted",{"_index":793,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["subscribe(card=>this.card",{"_index":892,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["subscribe(details=>this.details",{"_index":894,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["subscribe(isauth",{"_index":316,"title":{},"body":{"components/AppComponent.html":{}}}],["subscribetoloadi18n",{"_index":1822,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["subscribetoloadi18n(observable",{"_index":1784,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["subscription",{"_index":278,"title":{},"body":{"components/AppComponent.html":{}}}],["subtitle",{"_index":869,"title":{},"body":{"components/CardComponent.html":{}}}],["success",{"_index":72,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["successfulauth",{"_index":626,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["such",{"_index":658,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["summary",{"_index":174,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["support",{"_index":2184,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":2006,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["svgpanzoom(document.getelementbyid('${svguid",{"_index":1445,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["switch",{"_index":1423,"title":{},"body":{"injectables/HandlebarsService.html":{},"components/IconComponent.html":{}}}],["switch(operator",{"_index":1432,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["switch_list",{"_index":194,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["switchmap",{"_index":748,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["switchmap((action",{"_index":776,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["switchmap((action:loadlightcardssuccess",{"_index":1534,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["switchmap((id",{"_index":1795,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["switchmap((ids:string",{"_index":1788,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["switchmap(action",{"_index":900,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/MenuEffects.html":{}}}],["switchmap(menu=>zip(of(menu),this.service.loadi18nformenuentries(menu",{"_index":1590,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["switchmap(ts=>from(ts",{"_index":1765,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["system",{"_index":124,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"index.html":{}}}],["t",{"_index":1583,"title":{},"body":{"classes/Map.html":{}}}],["t.i18nlabelkey",{"_index":1770,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["t.menuentries",{"_index":1771,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["t.version",{"_index":1769,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["tab",{"_index":1203,"title":{},"body":{"components/DetailsComponent.html":{}}}],["tab.active",{"_index":1202,"title":{},"body":{"components/DetailsComponent.html":{}}}],["table",{"_index":1982,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1981,"title":{},"body":{"coverage.html":{}}}],["tabs",{"_index":1209,"title":{},"body":{"components/DetailsComponent.html":{}}}],["take",{"_index":274,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"classes/Filter.html":{}}}],["takes",{"_index":1091,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/RouterStateUrl.html":{}}}],["tap",{"_index":770,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"components/CardDetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["tap(menus=>this.service.loadi18nformenuentries(menus",{"_index":1589,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["tap(t=>this.templatecache[key]=t",{"_index":1417,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["tells",{"_index":739,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["template",{"_index":250,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["templatecache",{"_index":1345,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["templatecache:map",{"_index":1386,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["templatename",{"_index":184,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"injectables/HandlebarsService.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["templates",{"_index":1706,"title":{},"body":{"classes/Third.html":{}}}],["templates?:string",{"_index":1713,"title":{},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["templateurl",{"_index":260,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["templateurl:'icon.component.html",{"_index":1494,"title":{},"body":{"components/IconComponent.html":{}}}],["terminal",{"_index":2090,"title":{},"body":{"index.html":{}}}],["terms",{"_index":330,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["test",{"_index":707,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["tests",{"_index":2148,"title":{},"body":{"index.html":{}}}],["text",{"_index":191,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/enumerations.html":{}}}],["that.time.currenttime",{"_index":1459,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["third",{"_index":1702,"title":{"classes/Third.html":{}},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["thirdmenu",{"_index":1334,"title":{"classes/ThirdMenu.html":{}},"body":{"classes/HandleUnexpectedError-2.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["thirdmenu('t1",{"_index":1841,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["thirdmenu('t2",{"_index":1849,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["thirdmenu(t.name",{"_index":1768,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["thirdmenuentry",{"_index":1710,"title":{"classes/ThirdMenuEntry.html":{}},"body":{"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsServiceMock.html":{},"coverage.html":{}}}],["thirdmenuentry('id1",{"_index":1843,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["thirdmenuentry('id2",{"_index":1846,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["thirdmenuentry('id3",{"_index":1851,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["thirdmenus",{"_index":1610,"title":{},"body":{"components/NavbarComponent.html":{}}}],["thirds",{"_index":835,"title":{},"body":{"components/CardComponent.html":{},"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{},"miscellaneous/variables.html":{}}}],["thirdservice",{"_index":1531,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["thirdsi18nloader",{"_index":1722,"title":{"classes/ThirdsI18nLoader.html":{}},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{}}}],["thirdsi18nloader(thirdsservice",{"_index":1817,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["thirdsi18nloaderfactory",{"_index":1049,"title":{},"body":{"modules/CardsModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["thirdsi18nloaderfactory(thirdsservice",{"_index":1816,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/functions.html":{}}}],["thirdsservice",{"_index":836,"title":{"injectables/ThirdsService.html":{}},"body":{"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["thirdsservicemock",{"_index":1836,"title":{"classes/ThirdsServiceMock.html":{}},"body":{"classes/ThirdsServiceMock.html":{},"coverage.html":{}}}],["thirdsurl",{"_index":1739,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.$injector.get(translateservice",{"_index":1815,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this._htmlcontent",{"_index":1141,"title":{},"body":{"components/DetailComponent.html":{}}}],["this._i18nprefix",{"_index":848,"title":{},"body":{"components/CardComponent.html":{},"components/DetailsComponent.html":{}}}],["this._thirdmenus",{"_index":1632,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this._thirdmenus=this.store.select(selectmenustatemenu",{"_index":1627,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.actions",{"_index":745,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["this.actions$.pipe",{"_index":731,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CustomRouterEffects.html":{}}}],["this.actions$.pipe(oftype(authenticationactiontypes.rejectlogin",{"_index":769,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.active",{"_index":1300,"title":{},"body":{"classes/Filter.html":{}}}],["this.attachaction(button",{"_index":1157,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.authenticationservice.getsecurityheader",{"_index":1029,"title":{},"body":{"injectables/CardService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{}}}],["this.authservice.asktoken(payload.username",{"_index":778,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.authservice.checkauthentication(this.authservice.extracttoken",{"_index":749,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.authservice.clearauthenticationinformation",{"_index":771,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.authservice.extractidentificationinformation",{"_index":804,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.authservice.isexpirationdateover",{"_index":751,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.big",{"_index":1509,"title":{},"body":{"components/IconComponent.html":{}}}],["this.big?'big':this.medium?'medium':'small",{"_index":1515,"title":{},"body":{"components/IconComponent.html":{}}}],["this.bindactions",{"_index":1147,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.card).subscribe",{"_index":1140,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.card.actions[actionid],actionid",{"_index":1158,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.cardoperationsurl",{"_index":1000,"title":{},"body":{"injectables/CardService.html":{}}}],["this.cardoperationsurl}&rangestart=${now.valueof()}&rangeend=${plustwentyfourhour.valueof",{"_index":1009,"title":{},"body":{"injectables/CardService.html":{}}}],["this.cardsurl",{"_index":1002,"title":{},"body":{"injectables/CardService.html":{}}}],["this.convert(authobjt",{"_index":627,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["this.currentpath",{"_index":313,"title":{},"body":{"components/AppComponent.html":{},"components/CardComponent.html":{},"components/NavbarComponent.html":{}}}],["this.dark",{"_index":1513,"title":{},"body":{"components/IconComponent.html":{}}}],["this.details.changes.subscribe",{"_index":1199,"title":{},"body":{"components/DetailsComponent.html":{}}}],["this.details.filter((tab",{"_index":1201,"title":{},"body":{"components/DetailsComponent.html":{}}}],["this.details.toarray().foreach(detail",{"_index":1210,"title":{},"body":{"components/DetailsComponent.html":{}}}],["this.element.nativeelement.getelementsbytagname('button",{"_index":1152,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.element.nativeelement.getelementsbytagname('script",{"_index":1149,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.expandedmenu=new",{"_index":1629,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.expandedmenu[index]=!this.expandedmenu[index",{"_index":1634,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.extractparams(child",{"_index":1112,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["this.extractparams(routerstate.root",{"_index":1106,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["this.extracttoken",{"_index":693,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["this.fetchcardoperation(new",{"_index":1008,"title":{},"body":{"injectables/CardService.html":{}}}],["this.fetchi18njson(input[0",{"_index":1798,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.funktion",{"_index":1299,"title":{},"body":{"classes/Filter.html":{}}}],["this.funktion(card,this.status",{"_index":1304,"title":{},"body":{"classes/Filter.html":{}}}],["this.getcurrentguid().tostring",{"_index":1318,"title":{},"body":{"classes/GuidService.html":{}}}],["this.getroutepe",{"_index":304,"title":{},"body":{"components/AppComponent.html":{}}}],["this.guid",{"_index":1315,"title":{},"body":{"classes/GuidService.html":{}}}],["this.guidservice.getcurrentguid",{"_index":624,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["this.guidservice.getcurrentguidstring",{"_index":999,"title":{},"body":{"injectables/CardService.html":{}}}],["this.handlebars.executetemplate(this.detail.templatename",{"_index":1139,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.handleheaders",{"_index":1010,"title":{},"body":{"injectables/CardService.html":{}}}],["this.handleloginattempt(payload",{"_index":754,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.handlerejectedlogin('expiration",{"_index":752,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.handlerejectedlogin('invalid",{"_index":806,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.hide",{"_index":1574,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.httpclient.get(`${this.cardsurl}/${id",{"_index":1004,"title":{},"body":{"injectables/CardService.html":{}}}],["this.httpclient.get(`${this.thirdsurl",{"_index":1764,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.httpclient.get(`${this.thirdsurl}/${publisher}/i18n",{"_index":1751,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.httpclient.get(`${this.thirdsurl}/${publisher}/templates/${name",{"_index":1746,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.httpclient.post(this.asktokenurl",{"_index":614,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["this.httpclient.post(this.checktokenurl",{"_index":589,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["this.iconpath",{"_index":1507,"title":{},"body":{"components/IconComponent.html":{}}}],["this.isauthenticated",{"_index":317,"title":{},"body":{"components/AppComponent.html":{}}}],["this.light",{"_index":1514,"title":{},"body":{"components/IconComponent.html":{}}}],["this.lightcard.publisher+'.'+this.lightcard.publisherversion",{"_index":849,"title":{},"body":{"components/CardComponent.html":{}}}],["this.lightcards",{"_index":1224,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.loaded",{"_index":1794,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.loaded.push(result.id",{"_index":1814,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.loading",{"_index":1792,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.loading.push(id",{"_index":1796,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.medium",{"_index":1511,"title":{},"body":{"components/IconComponent.html":{}}}],["this.querytemplate(card.publisher,card.publisherversion,templatename).pipe",{"_index":1403,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerarrayatindex",{"_index":1396,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerarrayatindexlength",{"_index":1399,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerbool",{"_index":1400,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registercardaction",{"_index":1391,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerdateformat",{"_index":1390,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registeri18n",{"_index":1393,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registermath",{"_index":1397,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registernow",{"_index":1401,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registernumberformat",{"_index":1389,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerpreservespace",{"_index":1388,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerslice",{"_index":1395,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registersort",{"_index":1394,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registersplit",{"_index":1398,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registersvg",{"_index":1392,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.reinsertscripts",{"_index":1146,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.router.navigate(['/'+this.currentpath,'cards',this.lightcard.id",{"_index":847,"title":{},"body":{"components/CardComponent.html":{}}}],["this.router.navigate(['/login",{"_index":734,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.sanitizer.bypasssecuritytrusthtml(html",{"_index":1142,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.saveauthenticationinformation(successfulauth",{"_index":628,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["this.selectdetail(this.details.first",{"_index":1207,"title":{},"body":{"components/DetailsComponent.html":{}}}],["this.selection",{"_index":1228,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.service.computethirdsmenu",{"_index":1588,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["this.service.getcardoperation",{"_index":960,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["this.service.loadcard(action.payload.id",{"_index":901,"title":{},"body":{"injectables/CardEffects.html":{}}}],["this.size",{"_index":1516,"title":{},"body":{"components/IconComponent.html":{}}}],["this.small",{"_index":1512,"title":{},"body":{"components/IconComponent.html":{}}}],["this.sprites='sprites",{"_index":1521,"title":{},"body":{"components/IconComponent.html":{}}}],["this.sprites='sprites.svg",{"_index":1523,"title":{},"body":{"components/IconComponent.html":{}}}],["this.status",{"_index":1301,"title":{},"body":{"classes/Filter.html":{}}}],["this.store.dispatch(new",{"_index":321,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{}}}],["this.store.pipe",{"_index":1225,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.store.pipe(select(selectcurrenturl)).subscribe(url",{"_index":312,"title":{},"body":{"components/AppComponent.html":{}}}],["this.store.pipe(select(selectexpirationtime",{"_index":314,"title":{},"body":{"components/AppComponent.html":{}}}],["this.store.pipe(select(selectrouterstate",{"_index":305,"title":{},"body":{"components/AppComponent.html":{}}}],["this.store.select(cardselectors.selectcardstateselection",{"_index":891,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["this.store.select(cardselectors.selectcardstateselectiondetails",{"_index":893,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["this.store.select(feedselectors.selectlightcardselection",{"_index":1229,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.store.select(selectcurrenturl).subscribe(url",{"_index":850,"title":{},"body":{"components/CardComponent.html":{},"components/NavbarComponent.html":{}}}],["this.subscribetoloadi18n(observable",{"_index":1779,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.templatecache[key",{"_index":1412,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.thirds.fetchhbstemplate(publisher,version,name,locale).pipe",{"_index":1415,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.thirdservice.loadi18nforlightcards(action.payload.lightcards",{"_index":1535,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["this.thirdsurl",{"_index":1741,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.translate().getlangs",{"_index":1800,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.translate().settranslation(lang",{"_index":1812,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.translate.getbrowserlang",{"_index":1409,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.translate.setdefaultlang('en",{"_index":306,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.use('fr",{"_index":311,"title":{},"body":{"components/AppComponent.html":{}}}],["this.updateasync",{"_index":1198,"title":{},"body":{"components/DetailsComponent.html":{}}}],["this.userform",{"_index":1575,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userform.get('identifier').value",{"_index":1577,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userform.get('password').value",{"_index":1578,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userform.reset",{"_index":1580,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userform.valid",{"_index":1576,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.verifyexpirationdate",{"_index":652,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["those",{"_index":912,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/LightCardEffects.html":{}}}],["throw",{"_index":1675,"title":{},"body":{"modules/ServicesModule.html":{}}}],["throwerror",{"_index":554,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["throwerror(err",{"_index":1808,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["throwerror(error",{"_index":631,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["thrown",{"_index":583,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["thus",{"_index":125,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["time",{"_index":370,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/RouterStateUrl.html":{},"components/TimeLineComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["time:timeservice",{"_index":1387,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["timelinecomponent",{"_index":369,"title":{"components/TimeLineComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{},"coverage.html":{},"overview.html":{}}}],["timeservice",{"_index":1363,"title":{"injectables/TimeService.html":{}},"body":{"injectables/HandlebarsService.html":{},"modules/ServicesModule.html":{},"injectables/TimeService.html":{},"coverage.html":{},"overview.html":{}}}],["title",{"_index":173,"title":{},"body":{"classes/Action.html":{},"components/AppComponent.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["titleposition",{"_index":179,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["titlestyle",{"_index":183,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["tlabel1",{"_index":1842,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["tlabel2",{"_index":1850,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["tmenu.entries[0].label",{"_index":1639,"title":{},"body":{"components/NavbarComponent.html":{}}}],["tmenu.id}}.{{tmenu.version}}.{{entry.label",{"_index":1641,"title":{},"body":{"components/NavbarComponent.html":{}}}],["tmenu.id}}.{{tmenu.version}}.{{tmenu.label",{"_index":1638,"title":{},"body":{"components/NavbarComponent.html":{}}}],["todo",{"_index":445,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["togglemenu",{"_index":1609,"title":{},"body":{"components/NavbarComponent.html":{}}}],["togglemenu(index",{"_index":1614,"title":{},"body":{"components/NavbarComponent.html":{}}}],["togglemenu(index:number",{"_index":1633,"title":{},"body":{"components/NavbarComponent.html":{}}}],["token",{"_index":77,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tokeninjector",{"_index":1665,"title":{"interceptors/TokenInjector.html":{}},"body":{"modules/ServicesModule.html":{},"interceptors/TokenInjector.html":{},"coverage.html":{},"overview.html":{}}}],["trace",{"_index":275,"title":{},"body":{"components/AppComponent.html":{}}}],["trackism",{"_index":618,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["trackism.clientid",{"_index":623,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["trackism.identifier",{"_index":619,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["trans",{"_index":1805,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["translate",{"_index":268,"title":{},"body":{"components/AppComponent.html":{},"injectables/HandlebarsService.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["translate.config",{"_index":420,"title":{},"body":{"modules/AppModule.html":{}}}],["translate/core",{"_index":299,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"injectables/HandlebarsService.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"dependencies.html":{}}}],["translate/http",{"_index":1992,"title":{},"body":{"dependencies.html":{}}}],["translateconfig",{"_index":419,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["translateloader",{"_index":1048,"title":{},"body":{"modules/CardsModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["translatemodule",{"_index":418,"title":{},"body":{"modules/AppModule.html":{},"modules/CardsModule.html":{}}}],["translatemodule.forchild",{"_index":1051,"title":{},"body":{"modules/CardsModule.html":{}}}],["translatemodule.forroot(translateconfig",{"_index":423,"title":{},"body":{"modules/AppModule.html":{}}}],["translatemoduleconfig",{"_index":2227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["translateservice",{"_index":269,"title":{},"body":{"components/AppComponent.html":{},"components/CardComponent.html":{},"injectables/HandlebarsService.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["translation",{"_index":1804,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["tree",{"_index":252,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["triggered.\\naction",{"_index":1172,"title":{},"body":{"components/DetailComponent.html":{}}}],["true",{"_index":636,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"components/DetailsComponent.html":{},"classes/Filter.html":{},"injectables/HandlebarsService.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":67,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["trying",{"_index":784,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"index.html":{}}}],["trylogout",{"_index":744,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["trytologin",{"_index":19,"title":{"classes/TryToLogIn.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["trytologin({username",{"_index":1579,"title":{},"body":{"components/LoginComponent.html":{}}}],["trytologout",{"_index":68,"title":{"classes/TryToLogOut.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["tslib",{"_index":2009,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":1262,"title":{},"body":{"classes/Filter.html":{}}}],["type",{"_index":32,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2193,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedef",{"_index":802,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["typeof",{"_index":1468,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["typescript",{"_index":54,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"dependencies.html":{}}}],["u00a0",{"_index":1463,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["ui",{"_index":2158,"title":{},"body":{"index.html":{}}}],["ui/assets/i18n",{"_index":2226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ui/build/src/generated/resources/statictest",{"_index":2146,"title":{},"body":{"index.html":{}}}],["uid",{"_index":162,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["unable",{"_index":786,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["undefined",{"_index":1510,"title":{},"body":{"components/IconComponent.html":{}}}],["undefined,undefined",{"_index":1278,"title":{},"body":{"classes/Filter.html":{}}}],["unequivocally",{"_index":621,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["unexpected",{"_index":228,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"miscellaneous/enumerations.html":{}}}],["unique",{"_index":571,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["unit",{"_index":2153,"title":{},"body":{"index.html":{}}}],["unselectedvalues",{"_index":203,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["unsuscribe",{"_index":2183,"title":{},"body":{"index.html":{}}}],["unused",{"_index":914,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/LightCardEffects.html":{}}}],["up",{"_index":180,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["update",{"_index":10,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["updateasync",{"_index":1181,"title":{},"body":{"components/DetailsComponent.html":{}}}],["updated",{"_index":924,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["updatestate",{"_index":151,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["updatestatebeforeaction",{"_index":152,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["upon",{"_index":1274,"title":{},"body":{"classes/Filter.html":{}}}],["uri",{"_index":188,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"miscellaneous/enumerations.html":{}}}],["url",{"_index":276,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"interceptors/TokenInjector.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["url.endswith('/auth/check_token",{"_index":1886,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["url.endswith('/auth/token",{"_index":1887,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["url.split('/')[1",{"_index":852,"title":{},"body":{"components/CardComponent.html":{},"components/NavbarComponent.html":{}}}],["urlencoded",{"_index":611,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["urls",{"_index":2211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urlsearchparams",{"_index":599,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["usable",{"_index":687,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["use",{"_index":1265,"title":{},"body":{"classes/Filter.html":{},"index.html":{}}}],["useclass",{"_index":425,"title":{},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["used",{"_index":9,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"modules/StateModule.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["usedefaultlang",{"_index":1055,"title":{},"body":{"modules/CardsModule.html":{}}}],["usefactory",{"_index":1053,"title":{},"body":{"modules/CardsModule.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":62,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"components/DetailsComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["userform",{"_index":1565,"title":{},"body":{"components/LoginComponent.html":{}}}],["username",{"_index":104,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["users",{"_index":2102,"title":{},"body":{"index.html":{}}}],["uses",{"_index":790,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["using",{"_index":543,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"index.html":{}}}],["utc",{"_index":706,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["utc_beginning_time",{"_index":1932,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["v",{"_index":333,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"miscellaneous/variables.html":{}}}],["v1",{"_index":1419,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["v2",{"_index":1421,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["val",{"_index":1761,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["valid",{"_index":575,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{},"index.html":{}}}],["validate",{"_index":84,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["validity",{"_index":761,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["value",{"_index":50,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"injectables/AuthenticationService.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/CardDetail.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"classes/InitFilter.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"injectables/ThirdsService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.replace",{"_index":1461,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["value.slice(from",{"_index":1441,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["value.split(splitvalue)[index",{"_index":1428,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["value[index",{"_index":1436,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["value[index].length",{"_index":1425,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["values",{"_index":200,"title":{},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/CardDetail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{}}}],["var",{"_index":347,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["variable",{"_index":1921,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["variables",{"_index":2163,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["variant",{"_index":864,"title":{},"body":{"components/CardComponent.html":{}}}],["variation",{"_index":725,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["verifyexpirationdate",{"_index":642,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["version",{"_index":1368,"title":{},"body":{"injectables/HandlebarsService.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"index.html":{}}}],["version:string",{"_index":1406,"title":{},"body":{"injectables/HandlebarsService.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["via",{"_index":21,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["visible",{"_index":447,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["void",{"_index":282,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"classes/CheckTokenResponse.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeLineComponent.html":{}}}],["wait",{"_index":1144,"title":{},"body":{"components/DetailComponent.html":{}}}],["warning','text",{"_index":1168,"title":{},"body":{"components/DetailComponent.html":{}}}],["watch=false",{"_index":2151,"title":{},"body":{"index.html":{}}}],["weather",{"_index":926,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["web",{"_index":544,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["whole",{"_index":2087,"title":{},"body":{"index.html":{}}}],["width",{"_index":859,"title":{},"body":{"components/CardComponent.html":{}}}],["win",{"_index":108,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["window.location.pathname",{"_index":1087,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"miscellaneous/variables.html":{}}}],["windows",{"_index":2142,"title":{},"body":{"index.html":{}}}],["without",{"_index":118,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["work",{"_index":1789,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["works",{"_index":531,"title":{},"body":{"components/ArchivesComponent.html":{},"components/NoSelectionComponent.html":{}}}],["wrong",{"_index":774,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"index.html":{}}}],["www",{"_index":610,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationService.html":{},"classes/CheckTokenResponse.html":{}}}],["yes",{"_index":826,"title":{},"body":{"classes/Card.html":{},"classes/Third.html":{},"miscellaneous/functions.html":{}}}],["zip",{"_index":1598,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["zone.js",{"_index":2011,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"dependencies.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AcceptLogIn.html":{"url":"classes/AcceptLogIn.html","title":"class - AcceptLogIn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AcceptLogIn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used to update the state with the authentication information\nEmitted by {AuthenticationEffects} in the following {Observable} @members:\n\nTryToLogIn\nCheckAuthentication via handleLogInAttempt @method\n\nUsed in the {function} reducer of the {authentication.reducer.ts} file to create a new state\ncontaining the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: PayloadForSuccessfulAuthentication)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/authentication.actions.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    PayloadForSuccessfulAuthentication\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     PayloadForSuccessfulAuthentication\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.AcceptLogIn\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:50\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\n\nexport enum AuthenticationActionTypes {\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n/**\n * First action dispatch by the application.\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    constructor(public payload: PayloadForSuccessfulAuthentication) {\n    }\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    constructor(public payload: { denialReason: string }) {\n    }\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n     AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AcceptLogOut.html":{"url":"classes/AcceptLogOut.html","title":"class - AcceptLogOut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AcceptLogOut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used to removes authentication information of the system and thus logOut the user.\nEmitted by {AuthenticationEffect} in the following {Observable} @members:\n\nTryToLogOut\nRejectLogInAttempt\nConsume by {AuthenticationEffect} in the AcceptLogOut {Observable} @member\n\n\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/authentication.actions.ts:110\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.AcceptLogOut\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:110\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\n\nexport enum AuthenticationActionTypes {\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n/**\n * First action dispatch by the application.\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    constructor(public payload: PayloadForSuccessfulAuthentication) {\n    }\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    constructor(public payload: { denialReason: string }) {\n    }\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n     AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AcceptLogOutSuccess.html":{"url":"classes/AcceptLogOutSuccess.html","title":"class - AcceptLogOutSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AcceptLogOutSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used to notify the store to remove authentication information\nEmitted by {AuthenticationEffect} in AcceptLogOut {Observable} @member.\nUsed in the {function} reducer of the {authentication.reducer.ts} file to create a new state\nwithout any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.AcceptLogOutSuccess\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:125\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\n\nexport enum AuthenticationActionTypes {\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n/**\n * First action dispatch by the application.\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    constructor(public payload: PayloadForSuccessfulAuthentication) {\n    }\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    constructor(public payload: { denialReason: string }) {\n    }\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n     AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Action.html":{"url":"classes/Action.html","title":"class - Action","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Action\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/card.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: ActionType, label: I18n, hidden: boolean, buttonStyle: string, contentStyle: string, inputs: Input[], lockAction: boolean, lockCard: boolean, updateState: boolean, updateStateBeforeAction: boolean, called: boolean, needsConfirm: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/card.model.ts:57\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                    ActionType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hidden\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        buttonStyle\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        contentStyle\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        inputs\n                                                  \n                                                        \n                                                                    Input[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        lockAction\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        lockCard\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateState\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateStateBeforeAction\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        called\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        needsConfirm\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Severity} from \"@ofModel/light-card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map} from \"@ofModel/map\";\n\nexport class Card {\n\n    constructor(\n        readonly uid: string,\n        readonly id: string,\n        readonly publisher: string,\n        readonly publisherVersion: string,\n        readonly publishDate: number,\n        readonly startDate: number,\n        readonly endDate: number,\n        readonly severity: Severity,\n        readonly mainRecipient: string,\n        readonly processId?: string,\n        readonly lttd?: number,\n        readonly title?: I18n,\n        readonly summary?: I18n,\n        readonly  data?: any,\n        readonly  details?: CardDetail[],\n        readonly  actions?: Map\n    ) {\n    }\n}\n\nexport enum TitlePosition {\n    UP, DOWN, NONE\n\n}\n\nexport class CardDetail {\n    constructor(\n        readonly titlePosition: TitlePosition,\n        readonly title: I18n,\n        readonly titleStyle: string,\n        readonly templateName: string,\n        readonly styles: string[]) {\n    }\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddLightCardFailure.html":{"url":"classes/AddLightCardFailure.html","title":"class - AddLightCardFailure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddLightCardFailure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:56\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.AddLightCardFailure\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:56\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    // | LoadLightCard\n    // | LoadLightCardSuccess\n    // | LoadLightCardFailure\n    | AddLightCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-root\n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentPath\n                            \n                            \n                                getRoutePE\n                            \n                            \n                                isAuthenticated$\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, translate: TranslateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/app.component.ts:43\n                            \n                        \n\n\n                \n                    \n                            On Init the app take trace of the current url and of the authentication status\nOnce the subscription done, send an Action to Check the current authentication status.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getRoutePE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAuthenticated$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'OperatorFabric'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\nimport {select, Store} from '@ngrx/store';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {CheckAuthenticationStatus} from '@ofActions/authentication.actions';\nimport {AppState} from '@ofStore/index';\nimport {selectCurrentUrl, selectRouterState} from '@ofSelectors/router.selectors';\nimport {selectExpirationTime} from '@ofSelectors/authentication.selectors';\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {isInTheFuture} from \"@ofServices/authentication.service\";\n\n@Component({\n    selector: 'of-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n    title = 'OperatorFabric';\n    getRoutePE: Observable;\n    currentPath: any;\n    isAuthenticated$: boolean;\n\n    constructor(private store: Store,\n                private translate: TranslateService) {\n\n        this.getRoutePE = this.store.pipe(select(selectRouterState));\n        this.translate.setDefaultLang('en');\n        console.debug(`current navigator language: ${navigator.language}`);\n        this.translate.use('fr');\n    }\n\n    /**\n     * On Init the app take trace of the current url and of the authentication status\n     * Once the subscription done, send an Action to Check the current authentication status.\n     */\n    ngOnInit() {\n        this.store.pipe(select(selectCurrentUrl)).subscribe(url => this.currentPath = url);\n        this.store.pipe(select(selectExpirationTime),\n            map(isInTheFuture)\n                        ).subscribe(isAUth => this.isAuthenticated$ = isAUth);\n        // First Action send by the application, is the user currently authenticated ?\n        this.store.dispatch(new CheckAuthenticationStatus());\n    }\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n\n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n.button {margin-right: 8px;}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nIconComponent\n\nIconComponent\n\nAppModule -->\n\nIconComponent->AppModule\n\n\n\n\n\nLoginComponent\n\nLoginComponent\n\nAppModule -->\n\nLoginComponent->AppModule\n\n\n\n\n\nNavbarComponent\n\nNavbarComponent\n\nAppModule -->\n\nNavbarComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nServicesModule\n\nServicesModule\n\nAppModule -->\n\nServicesModule->AppModule\n\n\n\n\n\nStateModule\n\nStateModule\n\nAppModule -->\n\nStateModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            IconComponent\n                        \n                        \n                            LoginComponent\n                        \n                        \n                            NavbarComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            ServicesModule\n                        \n                        \n                            StateModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {HttpClientModule} from '@angular/common/http';\nimport {CommonModule, HashLocationStrategy, LocationStrategy} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {StateModule} from '@ofStore/state.module';\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\nimport {ServicesModule} from '@ofServices/services.module';\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {NavbarComponent} from './components/navbar/navbar.component';\nimport {LoginComponent} from \"./components/login/login.component\";\nimport {IconComponent} from './components/icon/icon.component';\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {translateConfig} from \"./translate.config\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        BrowserModule,\n        FormsModule,\n        ReactiveFormsModule,\n        BrowserAnimationsModule,\n        AppRoutingModule,\n        HttpClientModule,\n        StateModule.forRoot(),\n        ServicesModule.forRoot(),\n        NgbModule,\n        TranslateModule.forRoot(translateConfig)\n    ],\n    declarations: [AppComponent, NavbarComponent, LoginComponent, IconComponent],\n    providers: [ { provide: LocationStrategy, useClass: HashLocationStrategy }],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {NgModule} from '@angular/core';\nimport {PreloadAllModules, RouterModule, Routes} from '@angular/router';\n// import {AuthenticationGuard} from '@ofServices/guard.service';\nimport {LoginComponent} from './components/login/login.component';\nimport {environment} from \"@env/environment\";\n\nconst routes: Routes = [\n    // {\n    //     path: 'login',\n    //     component: LoginComponent\n    // },\n    {\n        path: 'feed',\n        loadChildren: './modules/feed/feed.module#FeedModule',\n        // canActivate: [AuthenticationGuard]\n    },\n    {\n        path: 'archives',\n        loadChildren: './modules/archives/archives.module#ArchivesModule',\n        // canActivate: [AuthenticationGuard]\n    },\n    {\n        path: 'navbar',\n        component: LoginComponent\n    },\n    {path: '**', redirectTo: '/feed'}\n];\n// TODO manage visible path more gently\nexport const navigationRoutes: Routes = routes.slice(0, 2);\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes,{ enableTracing: !environment.production, preloadingStrategy: PreloadAllModules })],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AppState.html":{"url":"interfaces/AppState.html","title":"interface - AppState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AppState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/index.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        authentication\n                                \n                                \n                                        card\n                                \n                                \n                                        feed\n                                \n                                \n                                        menu\n                                \n                                \n                                        router\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authentication\n                                    \n                                \n                                \n                                    \n                                        authentication:     AuthState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AuthState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        card\n                                    \n                                \n                                \n                                    \n                                        card:     CardState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CardState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        feed\n                                    \n                                \n                                \n                                    \n                                        feed:     CardFeedState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CardFeedState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        menu\n                                    \n                                \n                                \n                                    \n                                        menu:     MenuState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MenuState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        router\n                                    \n                                \n                                \n                                    \n                                        router:     RouterReducerState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     RouterReducerState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as fromRouter from '@ngrx/router-store';\nimport {RouterReducerState} from '@ngrx/router-store';\nimport {RouterStateUrl} from '@ofStore/states/router.state';\nimport {reducer as authenticationReducer} from '@ofStore/reducers/authentication.reducer';\nimport {ActionReducerMap, MetaReducer} from '@ngrx/store';\nimport {environment} from '@env/environment';\nimport {storeFreeze} from 'ngrx-store-freeze';\nimport {CardEffects} from '@ofEffects/card.effects';\nimport {CardOperationEffects} from '@ofEffects/card-operation.effects';\nimport {AuthenticationEffects} from '@ofEffects/authentication.effects';\nimport {RouterEffects} from 'ngrx-router';\nimport {CardFeedState} from '@ofStates/feed.state';\nimport {reducer as lightCardReducer} from '@ofStore/reducers/light-card.reducer';\nimport {reducer as cardReducer} from '@ofStore/reducers/card.reducer';\nimport {reducer as menuReducer} from '@ofStore/reducers/menu.reducer';\nimport {AuthState} from '@ofStates/authentication.state';\nimport {CardState} from \"@ofStates/card.state\";\nimport {CustomRouterEffects} from \"@ofEffects/custom-router.effects\";\nimport {MenuState} from \"@ofStates/menu.state\";\nimport {MenuEffects} from \"@ofEffects/menu.effects\";\nimport {LightCardEffects} from \"@ofEffects/light-card.effects\";\n\nexport interface AppState {\n    router: RouterReducerState;\n    feed: CardFeedState;\n    authentication: AuthState;\n    card: CardState;\n    menu: MenuState;\n}\n\nexport const appEffects = [\n    CardEffects,\n    CardOperationEffects,\n    RouterEffects,\n    CustomRouterEffects,\n    AuthenticationEffects,\n    MenuEffects,\n    LightCardEffects];\n\nexport const appReducer: ActionReducerMap = {\n    router: fromRouter.routerReducer,\n    feed: lightCardReducer,\n    authentication: authenticationReducer,\n    card: cardReducer,\n    menu: menuReducer\n};\n\nexport const appMetaReducers: MetaReducer[] = !environment.production\n    ? [storeFreeze]\n    : [];\n\nexport const storeConfig = {\n    metaReducers: appMetaReducers,\n    // initialState: {\n    //     router: routerInitialState,\n    // }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApplyFilter.html":{"url":"classes/ApplyFilter.html","title":"class - ApplyFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApplyFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/feed.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/feed.actions.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/feed.actions.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : FeedActionTypes.ApplyFilter\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/feed.actions.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\nimport {Filter} from \"@ofModel/feed-filter.model\";\n\nexport enum FeedActionTypes {\n    ApplyFilter = '[Feed] Change filter Status',\n    InitFilter = '[Feed] Init filter',\n}\n\nexport class ApplyFilter implements Action {\n    readonly type = FeedActionTypes.ApplyFilter\n    constructor(public payload:{name: String, active: boolean, status: any}){}\n}\n\nexport class InitFilter implements Action {\n    readonly type = FeedActionTypes.InitFilter\n    constructor(public payload:{name: String, filter: Filter}){}\n}\n\nexport type FeedActions =\n    InitFilter\n    | ApplyFilter;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ArchivesComponent.html":{"url":"components/ArchivesComponent.html","title":"component - ArchivesComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ArchivesComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/archives/archives.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-archives\n            \n\n            \n                styleUrls\n                ./archives.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./archives.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/archives/archives.component.ts:15\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/archives/archives.component.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'of-archives',\n  templateUrl: './archives.component.html',\n  styleUrls: ['./archives.component.scss']\n})\nexport class ArchivesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  archives works!\n\n\n    \n\n    \n                \n                    ./archives.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  archives works!'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ArchivesComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArchivesModule.html":{"url":"modules/ArchivesModule.html","title":"module - ArchivesModule","body":"\n                   \n\n\n\n\n    Modules\n    ArchivesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ArchivesModule\n\n\n\ncluster_ArchivesModule_declarations\n\n\n\ncluster_ArchivesModule_imports\n\n\n\n\nArchivesComponent\n\nArchivesComponent\n\n\n\nArchivesModule\n\nArchivesModule\n\nArchivesModule -->\n\nArchivesComponent->ArchivesModule\n\n\n\n\n\nArchivesRoutingModule\n\nArchivesRoutingModule\n\nArchivesModule -->\n\nArchivesRoutingModule->ArchivesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/archives/archives.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ArchivesComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ArchivesRoutingModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ArchivesRoutingModule } from './archives-routing.module';\nimport {ArchivesComponent} from \"./archives.component\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ArchivesRoutingModule\n  ],\n  declarations: [ArchivesComponent]\n})\nexport class ArchivesModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArchivesRoutingModule.html":{"url":"modules/ArchivesRoutingModule.html","title":"module - ArchivesRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    ArchivesRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/archives/archives-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n// import {AuthenticationGuard} from \"@ofServices/guard.service\";\nimport {ArchivesComponent} from \"./archives.component\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: ArchivesComponent,\n        // canActivate: [AuthenticationGuard]\n    },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ArchivesRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthObject.html":{"url":"classes/AuthObject.html","title":"class - AuthObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/authentication.service.ts\n        \n\n            \n                Description\n            \n            \n                class used to try to login using the authentication web service.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                clientId\n                            \n                            \n                                expires_in\n                            \n                            \n                                    Optional\n                                identifier\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            access_token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:186\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clientId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Guid\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:188\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expires_in\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:187\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            identifier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:185\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError, map} from 'rxjs/operators';\nimport {Guid} from 'guid-typescript';\nimport {PayloadForSuccessfulAuthentication} from '@ofActions/authentication.actions';\nimport {environment} from \"@env/environment\";\nimport {GuidService} from \"@ofServices/guid.service\";\n\nexport enum LocalStorageAuthContent {\n    token = 'token',\n    expirationDate = 'expirationDate',\n    identifier = 'identifier',\n    clientId = 'clientId'\n}\n\nexport const ONE_SECOND = 1000;\n\n@Injectable()\nexport class AuthenticationService {\n\n    /** url to check authentication token (jwt) */\n    private checkTokenUrl = `${environment.urls.auth}/check_token`;\n    /** url to ask for an authentication token (jwt) */\n    private askTokenUrl = `${environment.urls.auth}/token`;\n\n    /**\n     * @constructor\n     * @param httpClient - Angular build-in\n     * @param guidService - create and store the unique id for this application and user\n     */\n    constructor(private httpClient: HttpClient,private guidService: GuidService) {\n    }\n\n    /**\n     * Call the web service which checks the authentication token. A valid token gives back the authentication information\n     * and an invalid one an error.\n     *\n     * @param token - jwt token\n     * @return an {Observable} which contains the deserializable content of the token\n     * an error is thrown otherwise\n     */\n    checkAuthentication(token: string): Observable {\n        const postData = new FormData();\n        postData.append('token', token);\n        return this.httpClient.post(this.checkTokenUrl, postData).pipe(\n            map(check => check),\n            catchError(this.handleError)\n        );\n    }\n\n    /**\n     * Given a pair of connection, ask the web service generating jwt authentication token a token if the pair is\n     * a registered one.\n     * @param login \n     * @param password\n     */\n    askToken(login: string, password: string): Observable {\n        const params = new URLSearchParams();\n        params.append('username', login);\n        params.append('password', password);\n        params.append('grant_type', 'password');\n        // beware clientId for token defines a type of authentication\n        params.append('client_id', 'clientIdPassword');\n\n        const headers = new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'});\n        return this.httpClient.post(this.askTokenUrl\n            , params.toString()\n            , {headers: headers}).pipe(\n            map(data => {\n                const trackism = {...data};\n\n                trackism.identifier = login;\n                // this clientId is used to identify unequivocally the session\n                trackism.clientId = this.guidService.getCurrentGuid();\n                return trackism;\n            }),\n            map(authObjt => {\n                    let successfulAuth = this.convert(authObjt);\n                    this.saveAuthenticationInformation(successfulAuth)\n                    return successfulAuth;\n                }\n            ),\n            catchError(this.handleError)\n        );\n\n    }\n\n    private handleError(error: any) {\n        console.error(error);\n        return throwError(error);\n    }\n\n    /**\n     * extract the jwt authentication token from the localstorage\n     */\n    public extractToken(): string {\n        return localStorage.getItem(LocalStorageAuthContent.token);\n    }\n\n    /**\n     * @return true if the expiration date stored in the `localestorage` is still running, false otherwise.\n     */\n    public verifyExpirationDate(): boolean {\n        // + to convert the stored number as a string back to number\n        const expirationDate = +localStorage.getItem(LocalStorageAuthContent.expirationDate);\n        const isNotANumber = isNaN(expirationDate);\n        const stillValid = isInTheFuture(expirationDate);\n        const finalResult = !isNotANumber && stillValid;\n        return finalResult;\n    }\n\n    /**\n     * @return true if the expiration date stored in the `localstorage` is over, false otherwise\n     */\n    public isExpirationDateOver(): boolean {\n        return !this.verifyExpirationDate();\n    }\n    /**\n     * clear the `localstorage` from all its content.\n     */\n    public clearAuthenticationInformation(): void {\n        localStorage.clear();\n    }\n\n    /**\n     * save the authentication informatios such as identifier, jwt token, expiration date and clientId in the\n     * `localstorage`.\n     * @param payload\n     */\n    public saveAuthenticationInformation(payload: PayloadForSuccessfulAuthentication) {\n        localStorage.setItem(LocalStorageAuthContent.identifier, payload.identifier);\n        localStorage.setItem(LocalStorageAuthContent.token, payload.token);\n        localStorage.setItem(LocalStorageAuthContent.expirationDate, payload.expirationDate.getTime().toString());\n        localStorage.setItem(LocalStorageAuthContent.clientId, payload.clientId.toString());\n    }\n\n    /**\n     * extract from the `localstorage` the authentication relevant information such as dentifier, jwt token,\n     * expiration date and clientId\n     * @return {PayloadForSuccessfulAuthentication}\n     */\n    public extractIdentificationInformation(): PayloadForSuccessfulAuthentication {\n        return new PayloadForSuccessfulAuthentication(\n            localStorage.getItem(LocalStorageAuthContent.identifier),\n            Guid.parse(localStorage.getItem(LocalStorageAuthContent.clientId)),\n            localStorage.getItem(LocalStorageAuthContent.token),\n            // as getItem return a string, `+` isUsed\n            new Date(+localStorage.getItem(LocalStorageAuthContent.expirationDate)),\n        );\n    }\n\n    /**\n     * helper method to convert an {AuthObject} instance into a {PayloadForSuccessfulAuthentication} instance.\n     * @param payload\n     */\n    public convert(payload: AuthObject): PayloadForSuccessfulAuthentication {\n        const expirationDate = Date.now() + ONE_SECOND * payload.expires_in;\n        return new PayloadForSuccessfulAuthentication(payload.identifier,\n            payload.clientId,\n            payload.access_token,\n            new Date(expirationDate)\n        );\n    }\n\n    /**\n     * helper method to put the jwt token into an appropriate string usable as an http header\n     */\n    public getSecurityHeader() {\n        return {'Authorization': `Bearer ${this.extractToken()}`};\n    }\n}\n\n/**\n * class used to try to login using the authentication web service.\n */\nexport class AuthObject {\n    identifier?: string;\n    access_token: string;\n    expires_in: number;\n    clientId: Guid;\n}\n\n/**\n * class corresponding to the response of the web service checking jwt token when this token is a valid one.\n */\nexport class CheckTokenResponse {\n    sub: string;\n    exp: number;\n    client_id: string;\n}\n\n/**\n * helper @method to confirm or not if the number corresponding to a given time is in the futur regarding the present\n * moment.\n * @param time - a number corresponding to an UTC time to test\n * @return  true if time is in the future regarding the present moment, false otherwise\n */\nexport function isInTheFuture(time: number): boolean {\n    return time > Date.now();\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthState.html":{"url":"interfaces/AuthState.html","title":"interface - AuthState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/authentication.state.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientId\n                                \n                                \n                                        denialReason\n                                \n                                \n                                        expirationDate\n                                \n                                \n                                        identifier\n                                \n                                \n                                        token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientId\n                                    \n                                \n                                \n                                    \n                                        clientId:     Guid\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Guid\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        denialReason\n                                    \n                                \n                                \n                                    \n                                        denialReason:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expirationDate\n                                    \n                                \n                                \n                                    \n                                        expirationDate:     Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        identifier\n                                    \n                                \n                                \n                                    \n                                        identifier:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                    \n                                \n                                \n                                    \n                                        token:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Guid} from 'guid-typescript';\n\nexport interface AuthState {\n    identifier: string;\n    clientId: Guid;\n    token: string;\n    expirationDate: Date;\n    denialReason: string;\n}\n\nexport const authInitialState: AuthState = {\n    identifier: null,\n    clientId: null,\n    token: null,\n    expirationDate: new Date(0),\n    denialReason: null\n};\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationEffects.html":{"url":"injectables/AuthenticationEffects.html","title":"injectable - AuthenticationEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/authentication.effects.ts\n        \n\n            \n                Description\n            \n            \n                Management of the authentication of the current user\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                AcceptLogOut\n                            \n                            \n                                CheckAuthentication\n                            \n                            \n                                RejectLogInAttempt\n                            \n                            \n                                TryToLogIn\n                            \n                            \n                                TryToLogOut\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleLogInAttempt\n                            \n                            \n                                handleRejectedLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, authService: AuthenticationService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/authentication.effects.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n{Store} state manager\n\n\n                                                        \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                    AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nservice implementing the authentication business rules\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nrouter service to redirect user accordingly to the user authentication status or variation of it.\n\nistanbul ignore next \n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            handleLogInAttempt\n                            \n                            \n                        \n                    \n                \n                \n                    \nhandleLogInAttempt(payload: CheckTokenResponse)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:179\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                        \n                                                                    CheckTokenResponse\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     AuthenticationActions\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            handleRejectedLogin\n                            \n                            \n                        \n                    \n                \n                \n                    \nhandleRejectedLogin(errorMsg: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:173\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errorMsg\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     AuthenticationActions\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AcceptLogOut\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$.pipe(\n            ofType(AuthenticationActionTypes.AcceptLogOut),\n            map((action: AcceptLogOut) => {\n                this.router.navigate(['/login'])\n                return new  AcceptLogOutSuccess();\n            })\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:109\n                            \n                        \n\n                \n                    \n                        This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.AcceptLogOut} type.\nIt tells the {Router} service to navigate to the Login page. and emit an {AcceptLogOutSucess} Action.\nThis {Effect} should be called as a consequence of a {TryLogOut} action\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CheckAuthentication\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n            .pipe(\n                ofType(AuthenticationActionTypes.CheckAuthenticationStatus),\n                switchMap(() => {\n                    return this.authService.checkAuthentication(this.authService.extractToken());\n                }),\n                map((payload: CheckTokenResponse) => {\n                    if (this.authService.isExpirationDateOver()) {\n                        return this.handleRejectedLogin('expiration date exceeded');\n                    }\n\n                    return this.handleLogInAttempt(payload);\n                }),\n                catchError((err, caught) => {\n                    console.error(err);\n                    this.store.dispatch(new RejectLogIn({denialReason: err}));\n                    return caught;\n                })\n            )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:152\n                            \n                        \n\n                \n                    \n                        This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.CheckAuthenticationStatus} type.\nIt extract the current authentication information if any and checks its validity, the expiration date.\n  If it's OK then an {AcceptLogIn} Action with check result as payload is emittedby calling\n  the {handleLogInAttempt} @method,\n  otherwise a {RejectedLogIn} Action is emitted by calling the {handleRejectedLogin} @method.\nThis {Effect} should be the first effect apply by the application to display the right page accordingly with the\ncurrent authentication state.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RejectLogInAttempt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$.pipe(ofType(AuthenticationActionTypes.RejectLogIn),\n            tap(() => {\n                this.authService.clearAuthenticationInformation();\n            }),\n            map(action => new AcceptLogOut()))\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:128\n                            \n                        \n\n                \n                    \n                        This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.RejectLogIn} type.\nIt tells the {AuthenticationService} to clear authentication information from the system\nThis {Effect} should be called after a wrong login attempt.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TryToLogIn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n            .pipe(\n                ofType(AuthenticationActionTypes.TryToLogIn),\n                switchMap((action: TryToLogIn) => {\n                    const payload = action.payload;\n                    return this.authService.askToken(payload.username, payload.password).pipe(\n                        map(authenticationInfo => new AcceptLogIn(authenticationInfo)),\n                        catchError(error => {\n                                console.error('error while trying log in', error);\n                                return of(new RejectLogIn({denialReason: 'unable to authenticate the user'}));\n                            }\n                        ));\n                })\n            )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:60\n                            \n                        \n\n                \n                    \n                        This {Observable} of {AuthenticationActions} listen {AuthenticationActionTypes.TryToLogIn} type and uses\nthe login payload to get an authentication token from the authentication service if the authentication is\nvalid and emit an {AcceptLogin} action with it.\nFor invalid authentication it emits a {RejectLogIn} Action with the message \"unable to authenticate the user\"\nas paload\nThis effect should take action after the user has submitted login information in the login page by clicking\non the login button.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TryToLogOut\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$.pipe(\n            ofType(AuthenticationActionTypes.TryToLogOut),\n            map((action: TryToLogOut) => {\n                this.authService.clearAuthenticationInformation();\n                return new AcceptLogOut();\n            })\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:88\n                            \n                        \n\n                \n                    \n                        This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.TryToLogOut} type.\nIt tells the {AuthenticationService} to clear the authentication information from the system and emit\nan {AcceptLogOut} Action.\nThis effect should take action after the Logout link/button has been clicked by the user.\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Observable, of} from 'rxjs';\nimport {Action, Store} from '@ngrx/store';\nimport {\n    AcceptLogIn,\n    AcceptLogOut, AcceptLogOutSuccess,\n    AuthenticationActions,\n    AuthenticationActionTypes, RejectLogIn,\n    TryToLogIn,\n    TryToLogOut\n} from '@ofActions/authentication.actions';\nimport {AuthenticationService, CheckTokenResponse} from '../../services/authentication.service';\nimport {catchError, map, switchMap, tap} from 'rxjs/operators';\nimport {AppState} from \"@ofStore/index\";\nimport {Router} from \"@angular/router\";\n\n/**\n * Management of the authentication of the current user\n */\n@Injectable()\nexport class AuthenticationEffects {\n\n    /**\n     * @constructor\n     * @param store - {Store} state manager\n     * @param action$ - {Action} {Observable} of Action of the Application\n     * @param authService - service implementing the authentication business rules\n     * @param router - router service to redirect user accordingly to the user authentication status or variation of it.\n     *\n     * istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private authService: AuthenticationService,\n                private router: Router) {\n    }\n\n    /**\n     * This {Observable} of {AuthenticationActions} listen {AuthenticationActionTypes.TryToLogIn} type and uses\n     * the login payload to get an authentication token from the authentication service if the authentication is\n     * valid and emit an {AcceptLogin} action with it.\n     * For invalid authentication it emits a {RejectLogIn} Action with the message \"unable to authenticate the user\"\n     * as paload\n     *\n     * This effect should take action after the user has submitted login information in the login page by clicking\n     * on the login button.\n     *\n     * @member\n     * @name TryToLogin\n     * @typedef {Observable}\n     */\n    @Effect()\n    TryToLogIn: Observable =\n        this.actions$\n            .pipe(\n                ofType(AuthenticationActionTypes.TryToLogIn),\n                switchMap((action: TryToLogIn) => {\n                    const payload = action.payload;\n                    return this.authService.askToken(payload.username, payload.password).pipe(\n                        map(authenticationInfo => new AcceptLogIn(authenticationInfo)),\n                        catchError(error => {\n                                console.error('error while trying log in', error);\n                                return of(new RejectLogIn({denialReason: 'unable to authenticate the user'}));\n                            }\n                        ));\n                })\n            );\n\n    /**\n     * This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.TryToLogOut} type.\n     * It tells the {AuthenticationService} to clear the authentication information from the system and emit\n     * an {AcceptLogOut} Action.\n     *\n     * This effect should take action after the Logout link/button has been clicked by the user.\n     *\n     * @member\n     * @name TryToLogOut\n     * @typedef {Observable}\n     */\n    @Effect()\n    TryToLogOut: Observable =\n        this.actions$.pipe(\n            ofType(AuthenticationActionTypes.TryToLogOut),\n            map((action: TryToLogOut) => {\n                this.authService.clearAuthenticationInformation();\n                return new AcceptLogOut();\n            })\n        );\n\n    /**\n     * This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.AcceptLogOut} type.\n     * It tells the {Router} service to navigate to the Login page. and emit an {AcceptLogOutSucess} Action.\n     *\n     * This {Effect} should be called as a consequence of a {TryLogOut} action\n     *\n     * @member\n     * @name AcceptLogOut\n     * @typedef {Observable}\n     *\n     */\n    @Effect()\n    AcceptLogOut: Observable =\n        this.actions$.pipe(\n            ofType(AuthenticationActionTypes.AcceptLogOut),\n            map((action: AcceptLogOut) => {\n                this.router.navigate(['/login'])\n                return new  AcceptLogOutSuccess();\n            })\n        );\n    /**\n     * This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.RejectLogIn} type.\n     * It tells the {AuthenticationService} to clear authentication information from the system\n     *\n     * This {Effect} should be called after a wrong login attempt.\n\n     * @member\n     * @name RejectLogInAttempt\n     * @typedef {Observable}\n     */\n    @Effect()\n    RejectLogInAttempt: Observable =\n        this.actions$.pipe(ofType(AuthenticationActionTypes.RejectLogIn),\n            tap(() => {\n                this.authService.clearAuthenticationInformation();\n            }),\n            map(action => new AcceptLogOut()));\n\n    /**\n     * This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.CheckAuthenticationStatus} type.\n     *It extract the current authentication information if any and checks its validity, the expiration date.\n     *  If it's OK then an {AcceptLogIn} Action with check result as payload is emittedby calling\n     *  the {handleLogInAttempt} @method,\n     *\n     *  otherwise a {RejectedLogIn} Action is emitted by calling the {handleRejectedLogin} @method.\n     *\n     * This {Effect} should be the first effect apply by the application to display the right page accordingly with the\n     * current authentication state.\n     *\n     * @member\n     * @name CheckAuthentication\n     * @typedef {Observable}\n     *\n     */\n    @Effect()\n    CheckAuthentication: Observable =\n        this.actions$\n            .pipe(\n                ofType(AuthenticationActionTypes.CheckAuthenticationStatus),\n                switchMap(() => {\n                    return this.authService.checkAuthentication(this.authService.extractToken());\n                }),\n                map((payload: CheckTokenResponse) => {\n                    if (this.authService.isExpirationDateOver()) {\n                        return this.handleRejectedLogin('expiration date exceeded');\n                    }\n\n                    return this.handleLogInAttempt(payload);\n                }),\n                catchError((err, caught) => {\n                    console.error(err);\n                    this.store.dispatch(new RejectLogIn({denialReason: err}));\n                    return caught;\n                })\n            );\n\n    handleRejectedLogin(errorMsg: string): AuthenticationActions {\n        this.authService.clearAuthenticationInformation();\n        return new RejectLogIn({denialReason: errorMsg});\n\n    }\n\n    handleLogInAttempt(payload: CheckTokenResponse): AuthenticationActions {\n        if (payload) {\n            const authInfo = this.authService.extractIdentificationInformation();\n            return new AcceptLogIn(authInfo);\n\n        }\n        return this.handleRejectedLogin('invalid token');\n    }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/authentication.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                askTokenUrl\n                            \n                            \n                                    Private\n                                checkTokenUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                askToken\n                            \n                            \n                                checkAuthentication\n                            \n                            \n                                    Public\n                                clearAuthenticationInformation\n                            \n                            \n                                    Public\n                                convert\n                            \n                            \n                                    Public\n                                extractIdentificationInformation\n                            \n                            \n                                    Public\n                                extractToken\n                            \n                            \n                                    Public\n                                getSecurityHeader\n                            \n                            \n                                    Private\n                                handleError\n                            \n                            \n                                    Public\n                                isExpirationDateOver\n                            \n                            \n                                    Public\n                                saveAuthenticationInformation\n                            \n                            \n                                    Public\n                                verifyExpirationDate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient, guidService: GuidService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/authentication.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular build-in\n\n\n                                                        \n                                                \n                                                \n                                                        guidService\n                                                  \n                                                        \n                                                                    GuidService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ncreate and store the unique id for this application and user\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            askToken\n                            \n                            \n                        \n                    \n                \n                \n                    \naskToken(login: string, password: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:65\n                            \n                        \n\n\n                \n                    \n                            Given a pair of connection, ask the web service generating jwt authentication token a token if the pair is\na registered one.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        login\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        password\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            checkAuthentication\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheckAuthentication(token: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:50\n                            \n                        \n\n\n                \n                    \n                            Call the web service which checks the authentication token. A valid token gives back the authentication information\nand an invalid one an error.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        token\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \njwt token\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    an {Observable} which contains the deserializable content of the token\nan error is thrown otherwise\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            clearAuthenticationInformation\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        clearAuthenticationInformation()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:129\n                            \n                        \n\n\n                \n                    \n                            clear the localstorage from all its content.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            convert\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        convert(payload: AuthObject)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:164\n                            \n                        \n\n\n                \n                    \n                            helper method to convert an {AuthObject} instance into a {PayloadForSuccessfulAuthentication} instance.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                        \n                                                                    AuthObject\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     PayloadForSuccessfulAuthentication\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            extractIdentificationInformation\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        extractIdentificationInformation()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:150\n                            \n                        \n\n\n                \n                    \n                            extract from the localstorage the authentication relevant information such as dentifier, jwt token,\nexpiration date and clientId\n\n\n                            \n                            \n                            \n                                Returns :     PayloadForSuccessfulAuthentication\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            extractToken\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        extractToken()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:104\n                            \n                        \n\n\n                \n                    \n                            extract the jwt authentication token from the localstorage\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getSecurityHeader\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getSecurityHeader()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:176\n                            \n                        \n\n\n                \n                    \n                            helper method to put the jwt token into an appropriate string usable as an http header\n\n\n                            \n                                Returns :     { 'Authorization': string; }\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            handleError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        handleError(error: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:96\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isExpirationDateOver\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isExpirationDateOver()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:123\n                            \n                        \n\n\n                \n                    \n\n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    true if the expiration date stored in the localstorage is over, false otherwise\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            saveAuthenticationInformation\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        saveAuthenticationInformation(payload: PayloadForSuccessfulAuthentication)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:138\n                            \n                        \n\n\n                \n                    \n                            save the authentication informatios such as identifier, jwt token, expiration date and clientId in the\nlocalstorage.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                        \n                                                                    PayloadForSuccessfulAuthentication\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            verifyExpirationDate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        verifyExpirationDate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:111\n                            \n                        \n\n\n                \n                    \n\n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    true if the expiration date stored in the localestorage is still running, false otherwise.\n\n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            askTokenUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${environment.urls.auth}/token`\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:32\n                            \n                        \n\n                \n                    \n                        url to ask for an authentication token (jwt) \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            checkTokenUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${environment.urls.auth}/check_token`\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:30\n                            \n                        \n\n                \n                    \n                        url to check authentication token (jwt) \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError, map} from 'rxjs/operators';\nimport {Guid} from 'guid-typescript';\nimport {PayloadForSuccessfulAuthentication} from '@ofActions/authentication.actions';\nimport {environment} from \"@env/environment\";\nimport {GuidService} from \"@ofServices/guid.service\";\n\nexport enum LocalStorageAuthContent {\n    token = 'token',\n    expirationDate = 'expirationDate',\n    identifier = 'identifier',\n    clientId = 'clientId'\n}\n\nexport const ONE_SECOND = 1000;\n\n@Injectable()\nexport class AuthenticationService {\n\n    /** url to check authentication token (jwt) */\n    private checkTokenUrl = `${environment.urls.auth}/check_token`;\n    /** url to ask for an authentication token (jwt) */\n    private askTokenUrl = `${environment.urls.auth}/token`;\n\n    /**\n     * @constructor\n     * @param httpClient - Angular build-in\n     * @param guidService - create and store the unique id for this application and user\n     */\n    constructor(private httpClient: HttpClient,private guidService: GuidService) {\n    }\n\n    /**\n     * Call the web service which checks the authentication token. A valid token gives back the authentication information\n     * and an invalid one an error.\n     *\n     * @param token - jwt token\n     * @return an {Observable} which contains the deserializable content of the token\n     * an error is thrown otherwise\n     */\n    checkAuthentication(token: string): Observable {\n        const postData = new FormData();\n        postData.append('token', token);\n        return this.httpClient.post(this.checkTokenUrl, postData).pipe(\n            map(check => check),\n            catchError(this.handleError)\n        );\n    }\n\n    /**\n     * Given a pair of connection, ask the web service generating jwt authentication token a token if the pair is\n     * a registered one.\n     * @param login \n     * @param password\n     */\n    askToken(login: string, password: string): Observable {\n        const params = new URLSearchParams();\n        params.append('username', login);\n        params.append('password', password);\n        params.append('grant_type', 'password');\n        // beware clientId for token defines a type of authentication\n        params.append('client_id', 'clientIdPassword');\n\n        const headers = new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'});\n        return this.httpClient.post(this.askTokenUrl\n            , params.toString()\n            , {headers: headers}).pipe(\n            map(data => {\n                const trackism = {...data};\n\n                trackism.identifier = login;\n                // this clientId is used to identify unequivocally the session\n                trackism.clientId = this.guidService.getCurrentGuid();\n                return trackism;\n            }),\n            map(authObjt => {\n                    let successfulAuth = this.convert(authObjt);\n                    this.saveAuthenticationInformation(successfulAuth)\n                    return successfulAuth;\n                }\n            ),\n            catchError(this.handleError)\n        );\n\n    }\n\n    private handleError(error: any) {\n        console.error(error);\n        return throwError(error);\n    }\n\n    /**\n     * extract the jwt authentication token from the localstorage\n     */\n    public extractToken(): string {\n        return localStorage.getItem(LocalStorageAuthContent.token);\n    }\n\n    /**\n     * @return true if the expiration date stored in the `localestorage` is still running, false otherwise.\n     */\n    public verifyExpirationDate(): boolean {\n        // + to convert the stored number as a string back to number\n        const expirationDate = +localStorage.getItem(LocalStorageAuthContent.expirationDate);\n        const isNotANumber = isNaN(expirationDate);\n        const stillValid = isInTheFuture(expirationDate);\n        const finalResult = !isNotANumber && stillValid;\n        return finalResult;\n    }\n\n    /**\n     * @return true if the expiration date stored in the `localstorage` is over, false otherwise\n     */\n    public isExpirationDateOver(): boolean {\n        return !this.verifyExpirationDate();\n    }\n    /**\n     * clear the `localstorage` from all its content.\n     */\n    public clearAuthenticationInformation(): void {\n        localStorage.clear();\n    }\n\n    /**\n     * save the authentication informatios such as identifier, jwt token, expiration date and clientId in the\n     * `localstorage`.\n     * @param payload\n     */\n    public saveAuthenticationInformation(payload: PayloadForSuccessfulAuthentication) {\n        localStorage.setItem(LocalStorageAuthContent.identifier, payload.identifier);\n        localStorage.setItem(LocalStorageAuthContent.token, payload.token);\n        localStorage.setItem(LocalStorageAuthContent.expirationDate, payload.expirationDate.getTime().toString());\n        localStorage.setItem(LocalStorageAuthContent.clientId, payload.clientId.toString());\n    }\n\n    /**\n     * extract from the `localstorage` the authentication relevant information such as dentifier, jwt token,\n     * expiration date and clientId\n     * @return {PayloadForSuccessfulAuthentication}\n     */\n    public extractIdentificationInformation(): PayloadForSuccessfulAuthentication {\n        return new PayloadForSuccessfulAuthentication(\n            localStorage.getItem(LocalStorageAuthContent.identifier),\n            Guid.parse(localStorage.getItem(LocalStorageAuthContent.clientId)),\n            localStorage.getItem(LocalStorageAuthContent.token),\n            // as getItem return a string, `+` isUsed\n            new Date(+localStorage.getItem(LocalStorageAuthContent.expirationDate)),\n        );\n    }\n\n    /**\n     * helper method to convert an {AuthObject} instance into a {PayloadForSuccessfulAuthentication} instance.\n     * @param payload\n     */\n    public convert(payload: AuthObject): PayloadForSuccessfulAuthentication {\n        const expirationDate = Date.now() + ONE_SECOND * payload.expires_in;\n        return new PayloadForSuccessfulAuthentication(payload.identifier,\n            payload.clientId,\n            payload.access_token,\n            new Date(expirationDate)\n        );\n    }\n\n    /**\n     * helper method to put the jwt token into an appropriate string usable as an http header\n     */\n    public getSecurityHeader() {\n        return {'Authorization': `Bearer ${this.extractToken()}`};\n    }\n}\n\n/**\n * class used to try to login using the authentication web service.\n */\nexport class AuthObject {\n    identifier?: string;\n    access_token: string;\n    expires_in: number;\n    clientId: Guid;\n}\n\n/**\n * class corresponding to the response of the web service checking jwt token when this token is a valid one.\n */\nexport class CheckTokenResponse {\n    sub: string;\n    exp: number;\n    client_id: string;\n}\n\n/**\n * helper @method to confirm or not if the number corresponding to a given time is in the futur regarding the present\n * moment.\n * @param time - a number corresponding to an UTC time to test\n * @return  true if time is in the future regarding the present moment, false otherwise\n */\nexport function isInTheFuture(time: number): boolean {\n    return time > Date.now();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Card.html":{"url":"classes/Card.html","title":"class - Card","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Card\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/card.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uid: string, id: string, publisher: string, publisherVersion: string, publishDate: number, startDate: number, endDate: number, severity: Severity, mainRecipient: string, processId?: string, lttd?: number, title?: I18n, summary?: I18n, data?: any, details?: CardDetail[], actions?: Map)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/card.model.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uid\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publisher\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publisherVersion\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publishDate\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        startDate\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        endDate\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        severity\n                                                  \n                                                        \n                                                                    Severity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mainRecipient\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        processId\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        lttd\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        title\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        summary\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        details\n                                                  \n                                                        \n                                                                    CardDetail[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions\n                                                  \n                                                        \n                                                                    Map\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Severity} from \"@ofModel/light-card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map} from \"@ofModel/map\";\n\nexport class Card {\n\n    constructor(\n        readonly uid: string,\n        readonly id: string,\n        readonly publisher: string,\n        readonly publisherVersion: string,\n        readonly publishDate: number,\n        readonly startDate: number,\n        readonly endDate: number,\n        readonly severity: Severity,\n        readonly mainRecipient: string,\n        readonly processId?: string,\n        readonly lttd?: number,\n        readonly title?: I18n,\n        readonly summary?: I18n,\n        readonly  data?: any,\n        readonly  details?: CardDetail[],\n        readonly  actions?: Map\n    ) {\n    }\n}\n\nexport enum TitlePosition {\n    UP, DOWN, NONE\n\n}\n\nexport class CardDetail {\n    constructor(\n        readonly titlePosition: TitlePosition,\n        readonly title: I18n,\n        readonly titleStyle: string,\n        readonly templateName: string,\n        readonly styles: string[]) {\n    }\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CardComponent.html":{"url":"components/CardComponent.html","title":"component - CardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/cards/components/card/card.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-card\n            \n\n            \n                styleUrls\n                ./card.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./card.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _i18nPrefix\n                            \n                            \n                                currentPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                    Public\n                                select\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                lightCard\n                            \n                            \n                                open\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    i18nPrefix\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, store: Store, thirds: ThirdsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/cards/components/card/card.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        thirds\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        lightCard\n                    \n                \n                \n                    \n                        Type :     LightCard\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        open\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:24\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:38\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        select()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:34\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _i18nPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:26\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        i18nPrefix\n                    \n                \n\n                \n                    \n                        geti18nPrefix()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:46\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, Input, OnInit} from '@angular/core';\nimport {LightCard} from '@ofModel/light-card.model';\nimport {Router} from '@angular/router';\nimport {selectCurrentUrl} from '@ofStore/selectors/router.selectors';\nimport {Store} from '@ngrx/store';\nimport {AppState} from '@ofStore/index';\nimport {ThirdsService} from \"../../../../services/thirds.service\";\nimport {TranslateService} from \"@ngx-translate/core\";\n\n@Component({\n    selector: 'of-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.scss']\n})\nexport class CardComponent implements OnInit{\n\n    @Input() public open: boolean = false;\n    @Input() public lightCard: LightCard;\n    currentPath: any;\n    private _i18nPrefix: string;\n\n    constructor(private router: Router,\n                private store: Store,\n                private thirds: ThirdsService) {\n    }\n\n    public select() {\n        this.router.navigate(['/'+this.currentPath,'cards',this.lightCard.id]);\n    }\n\n    ngOnInit() {\n        this._i18nPrefix = this.lightCard.publisher+'.'+this.lightCard.publisherVersion+'.'\n        this.store.select(selectCurrentUrl).subscribe(url=>{\n            if(url)\n                this.currentPath = url.split('/')[1];\n        })\n    }\n\n    get i18nPrefix(): string {\n        return this._i18nPrefix;\n    }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n    \n        \n        \n        \n            {{i18nPrefix+lightCard.title.key}}\n            ({{lightCard.startDate|date:'short'}} - {{lightCard.endDate|date:'short'}})\n        \n    \n    \n        \n        \n            {{i18nPrefix+lightCard.summary.key}}\n        \n    \n\n\n    \n\n    \n                \n                    ./card.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n.light-card-detail {\n  max-width: 400px;\n}\n\n.card {\n  margin-bottom: 5px;\n}\n\n.card-title {\n  font-variant: small-caps;\n  font-size: larger;\n}\n\n.card-subtitle {\n  font-size: small;\n}\n\n.card-text {\n  font-size: small;\n}\n\n.badge-border {\n  width: 30px;\n  text-align: center;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                        {{i18nPrefix+lightCard.title.key}}            ({{lightCard.startDate|date:\\'short\\'}} - {{lightCard.endDate|date:\\'short\\'}})                                            {{i18nPrefix+lightCard.summary.key}}            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CardDetail.html":{"url":"classes/CardDetail.html","title":"class - CardDetail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CardDetail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/card.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(titlePosition: TitlePosition, title: I18n, titleStyle: string, templateName: string, styles: string[])\n                    \n                \n                        \n                            \n                                Defined in src/app/model/card.model.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        titlePosition\n                                                  \n                                                        \n                                                                    TitlePosition\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        title\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        titleStyle\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateName\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        styles\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Severity} from \"@ofModel/light-card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map} from \"@ofModel/map\";\n\nexport class Card {\n\n    constructor(\n        readonly uid: string,\n        readonly id: string,\n        readonly publisher: string,\n        readonly publisherVersion: string,\n        readonly publishDate: number,\n        readonly startDate: number,\n        readonly endDate: number,\n        readonly severity: Severity,\n        readonly mainRecipient: string,\n        readonly processId?: string,\n        readonly lttd?: number,\n        readonly title?: I18n,\n        readonly summary?: I18n,\n        readonly  data?: any,\n        readonly  details?: CardDetail[],\n        readonly  actions?: Map\n    ) {\n    }\n}\n\nexport enum TitlePosition {\n    UP, DOWN, NONE\n\n}\n\nexport class CardDetail {\n    constructor(\n        readonly titlePosition: TitlePosition,\n        readonly title: I18n,\n        readonly titleStyle: string,\n        readonly templateName: string,\n        readonly styles: string[]) {\n    }\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CardDetailsComponent.html":{"url":"components/CardDetailsComponent.html","title":"component - CardDetailsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CardDetailsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/cards/components/card-details/card-details.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-card-details\n            \n\n\n\n\n            \n                templateUrl\n                ./card-details.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                card\n                            \n                            \n                                details\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/cards/components/card-details/card-details.component.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/card-details/card-details.component.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            card\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Card\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card-details/card-details.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            details\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CardDetail[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card-details/card-details.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\nimport {Card, CardDetail} from '@ofModel/card.model';\nimport {Store} from '@ngrx/store';\nimport {AppState} from '@ofStore/index';\nimport * as cardSelectors from '@ofStore/selectors/card.selectors';\nimport {tap} from 'rxjs/operators';\n\n@Component({\n  selector: 'of-card-details',\n  templateUrl: './card-details.component.html',\n})\nexport class CardDetailsComponent implements OnInit {\n\n  card:Card;\n  details:CardDetail[];\n\n  constructor(private store: Store) {\n\n  }\n\n  ngOnInit() {\n      this.store.select(cardSelectors.selectCardStateSelection)\n          .subscribe(card=>this.card = card);\n      this.store.select(cardSelectors.selectCardStateSelectionDetails)\n          .subscribe(details=>this.details = details);\n  }\n\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CardDetailsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CardEffects.html":{"url":"injectables/CardEffects.html","title":"injectable - CardEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CardEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/card.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loadById\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, service: CardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/card.effects.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    CardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadById\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            ofType(CardActionTypes.LoadCard),\n            switchMap(action => this.service.loadCard(action.payload.id)),\n            map((card: Card) => {\n                return new LoadCardSuccess({card: card});\n            }),\n            catchError((err, caught) => {\n                this.store.dispatch(new LoadCardFailure(err));\n                return caught;\n            })\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/card.effects.ts:30\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {Observable} from 'rxjs';\nimport {catchError, map, switchMap} from 'rxjs/operators';\nimport {CardService} from '@ofServices/card.service';\nimport {AppState} from \"@ofStore/index\";\nimport {CardActionTypes, LoadCard, LoadCardFailure, LoadCardSuccess} from \"@ofActions/card.actions\";\nimport {Card} from \"@ofModel/card.model\";\n\n// those effects are unused for the moment\n@Injectable()\nexport class CardEffects {\n\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private service: CardService\n    ) {\n    }\n\n    @Effect()\n    loadById: Observable = this.actions$\n        .pipe(\n            ofType(CardActionTypes.LoadCard),\n            switchMap(action => this.service.loadCard(action.payload.id)),\n            map((card: Card) => {\n                return new LoadCardSuccess({card: card});\n            }),\n            catchError((err, caught) => {\n                this.store.dispatch(new LoadCardFailure(err));\n                return caught;\n            })\n        );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CardFeedState.html":{"url":"interfaces/CardFeedState.html","title":"interface - CardFeedState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CardFeedState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/feed.state.ts\n        \n\n            \n                Description\n            \n            \n                The Feed State consist of:\n\nEntityState of LightCard\nselectedCardId: the currently selected card id\nlastCards the last cards added / updated to the feed\nloading: weather there is an ongoing state modification\nerror: last error during state processing\nfilters: a collection of filter to apply to the rendered feed\n\n\n            \n\n            \n                Extends\n            \n            \n                    EntityState\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        filters\n                                \n                                \n                                        lastCards\n                                \n                                \n                                        loading\n                                \n                                \n                                        selectedCardId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filters\n                                    \n                                \n                                \n                                    \n                                        filters:     Map\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Map\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastCards\n                                    \n                                \n                                \n                                    \n                                        lastCards:     LightCard[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LightCard[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                    \n                                \n                                \n                                    \n                                        loading:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectedCardId\n                                    \n                                \n                                \n                                    \n                                        selectedCardId:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createEntityAdapter, EntityAdapter, EntityState} from '@ngrx/entity';\nimport {LightCard} from '@ofModel/light-card.model';\nimport {Filter} from \"@ofModel/feed-filter.model\";\n\n/**\n * The Feed State consist of:\n *  * EntityState of LightCard\n *  * selectedCardId: the currently selected card id\n *  * lastCards the last cards added / updated to the feed\n *  * loading: weather there is an ongoing state modification\n *  * error: last error during state processing\n *  * filters: a collection of filter to apply to the rendered feed\n */\nexport interface CardFeedState extends EntityState {\n    selectedCardId: string;\n    lastCards: LightCard[];\n    loading: boolean;\n    error: string;\n    filters: Map;\n}\n\nexport function sortByStartDate(card1: LightCard, card2: LightCard){\n    return card1.startDate - card2.startDate\n}\n\nexport const LightCardAdapter: EntityAdapter = createEntityAdapter({\n    sortComparer:sortByStartDate\n});\n\nexport const feedInitialState: CardFeedState = LightCardAdapter.getInitialState(\n    {\n        selectedCardId: null,\n        lastCards: [],\n        loading: false,\n        error: '',\n        filters: new Map()\n    });\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CardListComponent.html":{"url":"components/CardListComponent.html","title":"component - CardListComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CardListComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/components/card-list/card-list.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-card-list\n            \n\n\n\n\n            \n                templateUrl\n                ./card-list.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                lightCards\n                            \n                            \n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/components/card-list/card-list.component.ts:18\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        lightCards\n                    \n                \n                \n                    \n                        Type :     LightCard[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/card-list.component.ts:17\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        selection\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/card-list.component.ts:18\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import {Component, Input} from '@angular/core';\nimport {LightCard} from '@ofModel/light-card.model';\n\n@Component({\n  selector: 'of-card-list',\n  templateUrl: './card-list.component.html',\n})\nexport class CardListComponent  {\n\n  @Input() public lightCards: LightCard[];\n  @Input() public selection: string;\n\n  constructor() { }\n\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CardListComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CardOperationEffects.html":{"url":"injectables/CardOperationEffects.html","title":"injectable - CardOperationEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CardOperationEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/card-operation.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                getCardOperations\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, service: CardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/card-operation.effects.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    CardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCardOperations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            // loads card operations only after authentication of a default user ok.\n            ofType(AuthenticationActionTypes.AcceptLogIn),\n            switchMap(() => this.service.getCardOperation()\n                .pipe(\n                    map(operation => {\n                        if (operation.type && operation.type.toString() === 'ADD') {\n                            const opCards = operation.cards;\n                            return new LoadLightCardsSuccess({lightCards: opCards});\n                        }\n                        return new AddLightCardFailure(\n                            {\n                                error:\n                                    new Error(`unhandled action type '${operation.type}'`)\n                            });\n                    }),\n                    catchError((error, caught) => {\n                        this.store.dispatch(new AddLightCardFailure({error: error}));\n                        return caught;\n                    })\n                )\n            ),\n\n            catchError((error,caught )=> {\n                this.store.dispatch(new HandleUnexpectedError({error: error}))\n                return caught;\n            }))\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/card-operation.effects.ts:33\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {CardService} from '@ofServices/card.service';\nimport {Observable} from 'rxjs';\nimport {catchError, map, switchMap} from 'rxjs/operators';\nimport {\n    AddLightCardFailure,\n    HandleUnexpectedError,\n    LightCardActions,\n    LoadLightCardsSuccess\n} from '@ofActions/light-card.actions';\nimport {AuthenticationActionTypes} from '@ofActions/authentication.actions';\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"@ofStore/index\";\n\n@Injectable()\nexport class CardOperationEffects {\n\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private service: CardService) {\n    }\n\n    @Effect()\n    getCardOperations: Observable = this.actions$\n        .pipe(\n            // loads card operations only after authentication of a default user ok.\n            ofType(AuthenticationActionTypes.AcceptLogIn),\n            switchMap(() => this.service.getCardOperation()\n                .pipe(\n                    map(operation => {\n                        if (operation.type && operation.type.toString() === 'ADD') {\n                            const opCards = operation.cards;\n                            return new LoadLightCardsSuccess({lightCards: opCards});\n                        }\n                        return new AddLightCardFailure(\n                            {\n                                error:\n                                    new Error(`unhandled action type '${operation.type}'`)\n                            });\n                    }),\n                    catchError((error, caught) => {\n                        this.store.dispatch(new AddLightCardFailure({error: error}));\n                        return caught;\n                    })\n                )\n            ),\n\n            catchError((error,caught )=> {\n                this.store.dispatch(new HandleUnexpectedError({error: error}))\n                return caught;\n            }));\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CardService.html":{"url":"injectables/CardService.html","title":"injectable - CardService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/card.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                cardOperationsUrl\n                            \n                            \n                                    Readonly\n                                cardsUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fetchCardOperation\n                            \n                            \n                                getCardOperation\n                            \n                            \n                                    Private\n                                handleHeaders\n                            \n                            \n                                loadCard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient, authenticationService: AuthenticationService, guidService: GuidService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/card.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                    AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guidService\n                                                  \n                                                        \n                                                                    GuidService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchCardOperation\n                            \n                            \n                        \n                    \n                \n                \n                    \nfetchCardOperation(eventSource: EventSourcePolyfill)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/card.service.ts:41\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventSource\n                                                        \n                                                                    EventSourcePolyfill\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCardOperation\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCardOperation()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/card.service.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            handleHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        handleHeaders()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/card.service.ts:66\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     { headers: any; heartbeatTimeout: number; }\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadCard\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadCard(id: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/card.service.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            cardOperationsUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/card.service.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            cardsUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/card.service.ts:21\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {CardOperation} from '@ofModel/card-operation.model';\nimport {EventSourcePolyfill} from 'ng-event-source';\nimport {AuthenticationService} from './authentication.service';\nimport {Card} from \"@ofModel/card.model\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {environment} from \"@env/environment\";\nimport {GuidService} from \"@ofServices/guid.service\";\n\n@Injectable()\nexport class CardService {\n    readonly cardOperationsUrl: string;\n    readonly cardsUrl: string;\n\n    constructor(private httpClient:HttpClient, private authenticationService: AuthenticationService,private guidService: GuidService) {\n        const clientId = this.guidService.getCurrentGuidString();\n        this.cardOperationsUrl = `${environment.urls.cards}/cardOperations?clientId=${clientId}&notification=true`;\n        this.cardsUrl = `${environment.urls.cards}/cards`;\n    }\n\n    loadCard(id: string): Observable {\n        return this.httpClient.get(`${this.cardsUrl}/${id}`);\n    }\n\n    getCardOperation(): Observable {\n        let now = new Date()\n        let plusTwentyFourHour = new Date(now.valueOf()+24*60*60*1000);\n        return this.fetchCardOperation(new EventSourcePolyfill(\n            `${this.cardOperationsUrl}&rangeStart=${now.valueOf()}&rangeEnd=${plusTwentyFourHour.valueOf()}`\n            , this.handleHeaders()));\n    }\n\n    fetchCardOperation(eventSource: EventSourcePolyfill): Observable {\n        return Observable.create(observer => {\n            try {\n                eventSource.onmessage = message => {\n                    if (!message) {\n                        return observer.error(message);\n                    }\n                    return observer.next(JSON.parse(message.data));\n                };\n                eventSource.onerror = error => {\n                    console.error(`error occured from ES: ${error.toString()}`)\n                }\n\n            } catch (error) {\n                return observer.error(error);\n            }\n            return () => {\n                if (eventSource && eventSource.readyState !== eventSource.CLOSED) {\n                    eventSource.close();\n                }\n            };\n        })\n    }\n\n// sse request not intercepted by core/services/interceptors.services/TokenInjector\n    private handleHeaders() {\n        return {headers: this.authenticationService.getSecurityHeader(),\n            heartbeatTimeout: 30000}\n            ;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CardState.html":{"url":"interfaces/CardState.html","title":"interface - CardState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CardState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/card.state.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        loading\n                                \n                                \n                                        selected\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                    \n                                \n                                \n                                    \n                                        loading:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                    \n                                \n                                \n                                    \n                                        selected:     Card\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Card\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Card} from \"@ofModel/card.model\";\n\nexport interface CardState{\n    selected: Card,\n    loading: boolean,\n    error: string\n}\n\nexport const cardInitialState: CardState = {\n    selected: null,\n    loading: false,\n    error: null\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CardsModule.html":{"url":"modules/CardsModule.html","title":"module - CardsModule","body":"\n                   \n\n\n\n\n    Modules\n    CardsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CardsModule\n\n\n\ncluster_CardsModule_declarations\n\n\n\ncluster_CardsModule_exports\n\n\n\ncluster_CardsModule_providers\n\n\n\n\nCardComponent\n\nCardComponent\n\n\n\nCardsModule\n\nCardsModule\n\nCardsModule -->\n\nCardComponent->CardsModule\n\n\n\n\n\nCardDetailsComponent\n\nCardDetailsComponent\n\nCardsModule -->\n\nCardDetailsComponent->CardsModule\n\n\n\n\n\nDetailComponent\n\nDetailComponent\n\nCardsModule -->\n\nDetailComponent->CardsModule\n\n\n\n\n\nDetailsComponent\n\nDetailsComponent\n\nCardsModule -->\n\nDetailsComponent->CardsModule\n\n\n\n\n\nCardComponent \n\nCardComponent \n\nCardComponent  -->\n\nCardsModule->CardComponent \n\n\n\n\n\nCardDetailsComponent \n\nCardDetailsComponent \n\nCardDetailsComponent  -->\n\nCardsModule->CardDetailsComponent \n\n\n\n\n\nDetailComponent \n\nDetailComponent \n\nDetailComponent  -->\n\nCardsModule->DetailComponent \n\n\n\n\n\nDetailsComponent \n\nDetailsComponent \n\nDetailsComponent  -->\n\nCardsModule->DetailsComponent \n\n\n\n\n\nHandlebarsService\n\nHandlebarsService\n\nCardsModule -->\n\nHandlebarsService->CardsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/cards/cards.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            CardComponent\n                        \n                        \n                            CardDetailsComponent\n                        \n                        \n                            DetailComponent\n                        \n                        \n                            DetailsComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            HandlebarsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CardComponent\n                        \n                        \n                            CardDetailsComponent\n                        \n                        \n                            DetailComponent\n                        \n                        \n                            DetailsComponent\n                        \n                    \n                \n            \n        \n\n        \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            forRoot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        forRoot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/cards.module.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     ModuleWithProviders\n\n                            \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CardComponent} from \"./components/card/card.component\";\nimport {CardDetailsComponent} from \"./components/card-details/card-details.component\";\nimport {DetailsComponent} from \"./components/details/details.component\";\nimport {DetailComponent} from \"./components/detail/detail.component\";\nimport {TranslateLoader, TranslateModule} from \"@ngx-translate/core\";\nimport {ThirdsI18nLoaderFactory, ThirdsService} from \"../../services/thirds.service\";\nimport {HandlebarsService} from \"./services/handlebars.service\";\n\n@NgModule({\n  declarations: [CardComponent, CardDetailsComponent, DetailsComponent, DetailComponent],\n  imports: [\n    CommonModule,\n      TranslateModule\n      // TranslateModule.forChild({\n      //     loader: {\n      //         provide: TranslateLoader,\n      //         useFactory: ThirdsI18nLoaderFactory,\n      //         deps:[ThirdsService]},\n      //     useDefaultLang: false\n      // })\n  ],\n    exports: [CardComponent, CardDetailsComponent, DetailsComponent, DetailComponent],\n    providers: [HandlebarsService]\n})\nexport class CardsModule {\n    static forRoot(): ModuleWithProviders{\n        return {\n            ngModule: CardsModule,\n            providers: [ThirdsService]\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckAuthenticationStatus.html":{"url":"classes/CheckAuthenticationStatus.html","title":"class - CheckAuthenticationStatus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckAuthenticationStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                First action dispatch by the application.\nIt aims to validate the current authentication if exists.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.CheckAuthenticationStatus\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\n\nexport enum AuthenticationActionTypes {\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n/**\n * First action dispatch by the application.\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    constructor(public payload: PayloadForSuccessfulAuthentication) {\n    }\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    constructor(public payload: { denialReason: string }) {\n    }\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n     AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckTokenResponse.html":{"url":"classes/CheckTokenResponse.html","title":"class - CheckTokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckTokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/authentication.service.ts\n        \n\n            \n                Description\n            \n            \n                class corresponding to the response of the web service checking jwt token when this token is a valid one.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                client_id\n                            \n                            \n                                exp\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            client_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:197\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:196\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sub\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:195\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError, map} from 'rxjs/operators';\nimport {Guid} from 'guid-typescript';\nimport {PayloadForSuccessfulAuthentication} from '@ofActions/authentication.actions';\nimport {environment} from \"@env/environment\";\nimport {GuidService} from \"@ofServices/guid.service\";\n\nexport enum LocalStorageAuthContent {\n    token = 'token',\n    expirationDate = 'expirationDate',\n    identifier = 'identifier',\n    clientId = 'clientId'\n}\n\nexport const ONE_SECOND = 1000;\n\n@Injectable()\nexport class AuthenticationService {\n\n    /** url to check authentication token (jwt) */\n    private checkTokenUrl = `${environment.urls.auth}/check_token`;\n    /** url to ask for an authentication token (jwt) */\n    private askTokenUrl = `${environment.urls.auth}/token`;\n\n    /**\n     * @constructor\n     * @param httpClient - Angular build-in\n     * @param guidService - create and store the unique id for this application and user\n     */\n    constructor(private httpClient: HttpClient,private guidService: GuidService) {\n    }\n\n    /**\n     * Call the web service which checks the authentication token. A valid token gives back the authentication information\n     * and an invalid one an error.\n     *\n     * @param token - jwt token\n     * @return an {Observable} which contains the deserializable content of the token\n     * an error is thrown otherwise\n     */\n    checkAuthentication(token: string): Observable {\n        const postData = new FormData();\n        postData.append('token', token);\n        return this.httpClient.post(this.checkTokenUrl, postData).pipe(\n            map(check => check),\n            catchError(this.handleError)\n        );\n    }\n\n    /**\n     * Given a pair of connection, ask the web service generating jwt authentication token a token if the pair is\n     * a registered one.\n     * @param login \n     * @param password\n     */\n    askToken(login: string, password: string): Observable {\n        const params = new URLSearchParams();\n        params.append('username', login);\n        params.append('password', password);\n        params.append('grant_type', 'password');\n        // beware clientId for token defines a type of authentication\n        params.append('client_id', 'clientIdPassword');\n\n        const headers = new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'});\n        return this.httpClient.post(this.askTokenUrl\n            , params.toString()\n            , {headers: headers}).pipe(\n            map(data => {\n                const trackism = {...data};\n\n                trackism.identifier = login;\n                // this clientId is used to identify unequivocally the session\n                trackism.clientId = this.guidService.getCurrentGuid();\n                return trackism;\n            }),\n            map(authObjt => {\n                    let successfulAuth = this.convert(authObjt);\n                    this.saveAuthenticationInformation(successfulAuth)\n                    return successfulAuth;\n                }\n            ),\n            catchError(this.handleError)\n        );\n\n    }\n\n    private handleError(error: any) {\n        console.error(error);\n        return throwError(error);\n    }\n\n    /**\n     * extract the jwt authentication token from the localstorage\n     */\n    public extractToken(): string {\n        return localStorage.getItem(LocalStorageAuthContent.token);\n    }\n\n    /**\n     * @return true if the expiration date stored in the `localestorage` is still running, false otherwise.\n     */\n    public verifyExpirationDate(): boolean {\n        // + to convert the stored number as a string back to number\n        const expirationDate = +localStorage.getItem(LocalStorageAuthContent.expirationDate);\n        const isNotANumber = isNaN(expirationDate);\n        const stillValid = isInTheFuture(expirationDate);\n        const finalResult = !isNotANumber && stillValid;\n        return finalResult;\n    }\n\n    /**\n     * @return true if the expiration date stored in the `localstorage` is over, false otherwise\n     */\n    public isExpirationDateOver(): boolean {\n        return !this.verifyExpirationDate();\n    }\n    /**\n     * clear the `localstorage` from all its content.\n     */\n    public clearAuthenticationInformation(): void {\n        localStorage.clear();\n    }\n\n    /**\n     * save the authentication informatios such as identifier, jwt token, expiration date and clientId in the\n     * `localstorage`.\n     * @param payload\n     */\n    public saveAuthenticationInformation(payload: PayloadForSuccessfulAuthentication) {\n        localStorage.setItem(LocalStorageAuthContent.identifier, payload.identifier);\n        localStorage.setItem(LocalStorageAuthContent.token, payload.token);\n        localStorage.setItem(LocalStorageAuthContent.expirationDate, payload.expirationDate.getTime().toString());\n        localStorage.setItem(LocalStorageAuthContent.clientId, payload.clientId.toString());\n    }\n\n    /**\n     * extract from the `localstorage` the authentication relevant information such as dentifier, jwt token,\n     * expiration date and clientId\n     * @return {PayloadForSuccessfulAuthentication}\n     */\n    public extractIdentificationInformation(): PayloadForSuccessfulAuthentication {\n        return new PayloadForSuccessfulAuthentication(\n            localStorage.getItem(LocalStorageAuthContent.identifier),\n            Guid.parse(localStorage.getItem(LocalStorageAuthContent.clientId)),\n            localStorage.getItem(LocalStorageAuthContent.token),\n            // as getItem return a string, `+` isUsed\n            new Date(+localStorage.getItem(LocalStorageAuthContent.expirationDate)),\n        );\n    }\n\n    /**\n     * helper method to convert an {AuthObject} instance into a {PayloadForSuccessfulAuthentication} instance.\n     * @param payload\n     */\n    public convert(payload: AuthObject): PayloadForSuccessfulAuthentication {\n        const expirationDate = Date.now() + ONE_SECOND * payload.expires_in;\n        return new PayloadForSuccessfulAuthentication(payload.identifier,\n            payload.clientId,\n            payload.access_token,\n            new Date(expirationDate)\n        );\n    }\n\n    /**\n     * helper method to put the jwt token into an appropriate string usable as an http header\n     */\n    public getSecurityHeader() {\n        return {'Authorization': `Bearer ${this.extractToken()}`};\n    }\n}\n\n/**\n * class used to try to login using the authentication web service.\n */\nexport class AuthObject {\n    identifier?: string;\n    access_token: string;\n    expires_in: number;\n    clientId: Guid;\n}\n\n/**\n * class corresponding to the response of the web service checking jwt token when this token is a valid one.\n */\nexport class CheckTokenResponse {\n    sub: string;\n    exp: number;\n    client_id: string;\n}\n\n/**\n * helper @method to confirm or not if the number corresponding to a given time is in the futur regarding the present\n * moment.\n * @param time - a number corresponding to an UTC time to test\n * @return  true if time is in the future regarding the present moment, false otherwise\n */\nexport function isInTheFuture(time: number): boolean {\n    return time > Date.now();\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomRouterEffects.html":{"url":"injectables/CustomRouterEffects.html","title":"injectable - CustomRouterEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CustomRouterEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/custom-router.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                navigateToCard\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, service: CardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/custom-router.effects.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    CardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            navigateToCard\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$.pipe(\n        ofType(ROUTER_NAVIGATION),\n        filter((action: RouterNavigationAction, index)=> {\n            return action.payload.event.url.indexOf(\"/feed/cards/\")>=0;\n        }),\n        switchMap(action=>{\n            const routerState:any = action.payload.routerState;\n            return [\n                new LoadCard({id: routerState.params['cid']}),\n                new SelectLightCard({selectedCardId: routerState.params['cid']})\n            ];\n        })\n    )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/custom-router.effects.ts:28\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from \"@angular/core\";\nimport {Action, Store} from \"@ngrx/store\";\nimport {AppState} from \"@ofStore/index\";\nimport {Actions, Effect, ofType} from \"@ngrx/effects\";\nimport {CardService} from \"@ofServices/card.service\";\nimport {Observable} from \"rxjs\";\nimport {ROUTER_NAVIGATION, RouterNavigationAction} from \"@ngrx/router-store\";\nimport {filter, switchMap} from \"rxjs/operators\";\nimport {LoadCard} from \"@ofActions/card.actions\";\nimport {SelectLightCard} from \"@ofActions/light-card.actions\";\n\n@Injectable()\nexport class CustomRouterEffects {\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private service: CardService\n    ) {}\n\n    @Effect()\n    navigateToCard: Observable = this.actions$.pipe(\n        ofType(ROUTER_NAVIGATION),\n        filter((action: RouterNavigationAction, index)=> {\n            return action.payload.event.url.indexOf(\"/feed/cards/\")>=0;\n        }),\n        switchMap(action=>{\n            const routerState:any = action.payload.routerState;\n            return [\n                new LoadCard({id: routerState.params['cid']}),\n                new SelectLightCard({selectedCardId: routerState.params['cid']})\n            ];\n        })\n    );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomRouterStateSerializer.html":{"url":"classes/CustomRouterStateSerializer.html","title":"class - CustomRouterStateSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomRouterStateSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/router.state.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        RouterStateSerializer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                extractParams\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            extractParams\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        extractParams(state: ActivatedRouteSnapshot)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/store/states/router.state.ts:55\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                        \n                                                                    ActivatedRouteSnapshot\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Params\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            serialize\n                            \n                            \n                        \n                    \n                \n                \n                    \nserialize(routerState: RouterStateSnapshot)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/store/states/router.state.ts:48\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        routerState\n                                                        \n                                                                    RouterStateSnapshot\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RouterStateUrl\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {RouterStateSerializer} from \"@ngrx/router-store\";\nimport {ActivatedRouteSnapshot, Params, RouterStateSnapshot} from \"@angular/router\";\n\nexport const initialState = {\n    state: {\n        url: window.location.pathname,\n        params: {},\n        queryParams: {}\n    },\n    navigationId: 0\n}\n\n/**\n * The RouterStateSerializer takes the current RouterStateSnapshot\n * and returns any pertinent information needed. The snapshot contains\n * all information about the state of the router at the given point in time.\n * The entire snapshot is complex and not always needed. In this case, you only\n * need the URL and query parameters from the snapshot in the store. Other items could be\n * returned such as route parameters and static route data.\n *\n * source: https://github.com/briebug/ngrx-complex-forms\n *\n */\n\nexport class RouterStateUrl {\n    /* istanbul ignore next */\n    constructor(\n        readonly url: string,\n        readonly params: Params,\n        readonly queryParams: Params) {\n    }\n}\n\nexport class CustomRouterStateSerializer\n    implements RouterStateSerializer {\n    serialize(routerState: RouterStateSnapshot): RouterStateUrl {\n        const {url} = routerState;\n        const params = this.extractParams(routerState.root);\n        const queryParams = routerState.root.queryParams;\n        return new RouterStateUrl(url, params, queryParams);\n    }\n\n    private extractParams(state: ActivatedRouteSnapshot): Params {\n        let params: Params = {...state.params};\n        for (let child of state.children) {\n            params = {...params, ...this.extractParams(child)}\n        }\n        return params;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DetailComponent.html":{"url":"components/DetailComponent.html","title":"component - DetailComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DetailComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/cards/components/detail/detail.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-detail\n            \n\n\n\n\n            \n                templateUrl\n                ./detail.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _htmlContent\n                            \n                            \n                                    Public\n                                active\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attachAction\n                            \n                            \n                                bindActions\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                reinsertScripts\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                card\n                            \n                            \n                                detail\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    htmlContent\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(element: ElementRef, thirds: ThirdsService, handlebars: HandlebarsService, sanitizer: DomSanitizer)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/cards/components/detail/detail.component.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        thirds\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        handlebars\n                                                  \n                                                        \n                                                                    HandlebarsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sanitizer\n                                                  \n                                                        \n                                                                    DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        card\n                    \n                \n                \n                    \n                        Type :     Card\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        detail\n                    \n                \n                \n                    \n                        Type :     CardDetail\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:20\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attachAction\n                            \n                            \n                        \n                    \n                \n                \n                    \nattachAction(button: HTMLButtonElement, action: Action, actionId: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:75\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        button\n                                                        \n                                                                    HTMLButtonElement\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        action\n                                                        \n                                                                    Action\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        actionId\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bindActions\n                            \n                            \n                        \n                    \n                \n                \n                    \nbindActions()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:61\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:30\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reinsertScripts\n                            \n                            \n                        \n                    \n                \n                \n                    \nreinsertScripts()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:46\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _htmlContent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     SafeHtml\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            active\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:19\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        htmlContent\n                    \n                \n\n                \n                    \n                        gethtmlContent()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:42\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, ElementRef, Input, OnInit} from '@angular/core';\nimport {Action, Card, CardDetail} from '@ofModel/card.model';\nimport {ThirdsService} from \"../../../../services/thirds.service\";\nimport {HandlebarsService} from \"../../services/handlebars.service\";\nimport {DomSanitizer, SafeHtml} from \"@angular/platform-browser\";\n\n@Component({\n    selector: 'of-detail',\n    templateUrl: './detail.component.html',\n})\nexport class DetailComponent implements OnInit {\n    public active = false;\n    @Input() detail: CardDetail;\n    @Input() card: Card;\n    private _htmlContent: SafeHtml;\n\n    constructor(private element: ElementRef,\n                private thirds: ThirdsService,\n                private handlebars: HandlebarsService,\n                private sanitizer: DomSanitizer) {\n    }\n\n    ngOnInit() {\n        this.handlebars.executeTemplate(this.detail.templateName, this.card).subscribe(\n            html => {\n                this._htmlContent = this.sanitizer.bypassSecurityTrustHtml(html);\n                setTimeout(() => { // wait for DOM rendering\n                    this.reinsertScripts();\n                    this.bindActions()\n                });\n            }\n        )\n    }\n\n    get htmlContent() {\n        return this._htmlContent;\n    }\n\n    reinsertScripts(): void {\n        const scripts = this.element.nativeElement.getElementsByTagName('script');\n        const scriptsInitialLength = scripts.length;\n        for (let i = 0; i this.element.nativeElement.getElementsByTagName('button');\n\n        for (let button of buttons) {\n            if(button.attributes['action-id']) {\n                const actionId = button.attributes['action-id'].nodeValue;\n                if (actionId) {\n                    this.attachAction(button, this.card.actions[actionId],actionId);\n                }\n            }\n        }\n    }\n\n    attachAction(button: HTMLButtonElement, action: Action, actionId: string) {\n        button.classList.add('btn');\n        if (action.buttonStyle) {\n            for (let c of action.buttonStyle.split(' ')) {\n                button.classList.add(c);\n            }\n        }else{\n            button.classList.add('btn-light');\n        }\n        if (action.contentStyle) {\n            for (let c of action.contentStyle.split(' ')) {\n                button.children[0].classList.add(c);\n            }\n        }else{\n            button.children[0].classList.add('fa', 'fa-warning','text-dark');\n        }\n        button.addEventListener('click',(event: Event) =>{\n            alert(`${actionId} was triggered.\\nAction handling is not yet implemented`);\n        });\n    }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DetailComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DetailsComponent.html":{"url":"components/DetailsComponent.html","title":"component - DetailsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DetailsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/cards/components/details/details.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-details\n            \n\n\n\n\n            \n                templateUrl\n                ./details.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _i18nPrefix\n                            \n                            \n                                details\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                selectDetail\n                            \n                            \n                                    Private\n                                updateAsync\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                card\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    i18nPrefix\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/cards/components/details/details.component.ts:28\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        card\n                    \n                \n                \n                    \n                        Type :     Card\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:27\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngAfterViewInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngAfterViewInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnChanges\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnChanges(changes: SimpleChanges)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:65\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changes\n                                                        \n                                                                    SimpleChanges\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectDetail\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectDetail(detail: DetailComponent)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:52\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        detail\n                                                        \n                                                                    DetailComponent\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            updateAsync\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        updateAsync()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:42\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _i18nPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            details\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QueryList\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ContentChildren(DetailComponent)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:26\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        i18nPrefix\n                    \n                \n\n                \n                    \n                        geti18nPrefix()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:61\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    Input,\n    OnChanges,\n    QueryList,\n    SimpleChanges\n} from '@angular/core';\nimport {DetailComponent} from \"../detail/detail.component\";\nimport {Card} from \"@ofModel/card.model\";\n\n@Component({\n    selector: 'of-details',\n    templateUrl: './details.component.html',\n})\nexport class DetailsComponent implements AfterViewInit, OnChanges {\n\n    @ContentChildren(DetailComponent) details: QueryList;\n    @Input() card: Card;\n    private _i18nPrefix: string;\n\n    constructor() {\n    }\n\n    ngAfterViewInit(): void {\n        this.updateAsync();\n        this.details.changes.subscribe(\n            () => {\n                this.updateAsync();\n            }\n        );\n    }\n\n    private updateAsync() {\n        setTimeout(() => {\n            let activeDetail = this.details.filter((tab) => tab.active)\n            // if there is no active tab set, activate the first\n            if (activeDetail.length === 0) {\n                this.selectDetail(this.details.first);\n            }\n        });\n    }\n\n    selectDetail(detail: DetailComponent) {\n        // deactivate all tabs\n        this.details.toArray().forEach(detail => detail.active = false);\n\n        // activate the tab the user has clicked on.\n        if (detail)\n            detail.active = true;\n    }\n\n    public get i18nPrefix(){\n        return this._i18nPrefix;\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if(changes['card'].currentValue)\n            this._i18nPrefix = changes['card'].currentValue.publisher+'.'+changes['card'].currentValue.publisherVersion+'.';\n    }\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  \n    {{i18nPrefix+detailC.detail.title.key}}\n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{i18nPrefix+detailC.detail.title.key}}  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DetailsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FeedComponent.html":{"url":"components/FeedComponent.html","title":"component - FeedComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FeedComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/feed.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-cards\n            \n\n            \n                styleUrls\n                ./feed.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./feed.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lightCards$\n                            \n                            \n                                selection$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/feed.component.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngAfterViewInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngAfterViewInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/feed.component.ts:38\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/feed.component.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lightCards$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/feed.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selection$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/feed.component.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {AfterViewInit, Component, OnInit} from '@angular/core';\nimport {select, Store} from '@ngrx/store';\nimport {AppState} from '@ofStore/index';\nimport {Observable, of} from 'rxjs';\nimport {LightCard} from '@ofModel/light-card.model';\nimport * as feedSelectors from '@ofSelectors/feed.selectors';\nimport {catchError, tap} from \"rxjs/operators\";\n\n@Component({\n    selector: 'of-cards',\n    templateUrl: './feed.component.html',\n    styleUrls: ['./feed.component.scss']\n})\nexport class FeedComponent implements OnInit, AfterViewInit {\n\n    lightCards$: Observable;\n    selection$: Observable;\n\n    constructor(private store: Store) {\n    }\n\n    ngOnInit() {\n        this.lightCards$ = this.store.pipe(\n            select(feedSelectors.selectFeed),\n            catchError(err => of([]))\n        );\n        this.selection$ = this.store.select(feedSelectors.selectLightCardSelection);\n    }\n\n\n    ngAfterViewInit() {\n    }\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n    \n        \n            \n        \n    \n    \n        \n            \n        \n        \n            \n        \n    \n\n\n\n    \n\n    \n                \n                    ./feed.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FeedComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FeedModule.html":{"url":"modules/FeedModule.html","title":"module - FeedModule","body":"\n                   \n\n\n\n\n    Modules\n    FeedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FeedModule\n\n\n\ncluster_FeedModule_declarations\n\n\n\ncluster_FeedModule_imports\n\n\n\ncluster_FeedModule_exports\n\n\n\n\nCardListComponent\n\nCardListComponent\n\n\n\nFeedModule\n\nFeedModule\n\nFeedModule -->\n\nCardListComponent->FeedModule\n\n\n\n\n\nFeedComponent\n\nFeedComponent\n\nFeedModule -->\n\nFeedComponent->FeedModule\n\n\n\n\n\nNoSelectionComponent\n\nNoSelectionComponent\n\nFeedModule -->\n\nNoSelectionComponent->FeedModule\n\n\n\n\n\nTimeLineComponent\n\nTimeLineComponent\n\nFeedModule -->\n\nTimeLineComponent->FeedModule\n\n\n\n\n\nFeedComponent \n\nFeedComponent \n\nFeedComponent  -->\n\nFeedModule->FeedComponent \n\n\n\n\n\nCardsModule\n\nCardsModule\n\nFeedModule -->\n\nCardsModule->FeedModule\n\n\n\n\n\nFeedRoutingModule\n\nFeedRoutingModule\n\nFeedModule -->\n\nFeedRoutingModule->FeedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/feed/feed.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            CardListComponent\n                        \n                        \n                            FeedComponent\n                        \n                        \n                            NoSelectionComponent\n                        \n                        \n                            TimeLineComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CardsModule\n                        \n                        \n                            FeedRoutingModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FeedComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CardListComponent} from './components/card-list/card-list.component';\nimport {FeedComponent} from './feed.component';\nimport {FormsModule} from '@angular/forms';\nimport {FeedRoutingModule} from \"./feed-routing.module\";\nimport {NoSelectionComponent} from './components/no-selection/no-selection.component';\nimport {TimeLineComponent} from './components/time-line/time-line.component';\nimport {CardsModule} from \"../cards/cards.module\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    CardsModule,\n    FeedRoutingModule,\n  ],\n  declarations: [CardListComponent, FeedComponent, NoSelectionComponent, TimeLineComponent],\n  exports: [FeedComponent]\n})\nexport class FeedModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FeedRoutingModule.html":{"url":"modules/FeedRoutingModule.html","title":"module - FeedRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    FeedRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/feed/feed-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {NgModule} from '@angular/core';\nimport {FeedComponent} from \"./feed.component\";\n// import {AuthenticationGuard} from \"@ofServices/guard.service\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {DetailComponent} from \"../cards/components/detail/detail.component\";\nimport {CardDetailsComponent} from \"../cards/components/card-details/card-details.component\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: FeedComponent,\n        // canActivate: [AuthenticationGuard],\n        children: [\n            // {\n            //     path: '',\n            //     pathMatch: 'full',\n            //     redirectTo: 'cards'\n            // },\n            {\n                path: 'cards',\n                children : [\n                    {\n                        path: '',\n                        component: CardDetailsComponent,\n                    },\n                    {\n                        path: ':cid',\n                        component: CardDetailsComponent,\n                        children: [\n                            {\n                                path: 'details/:did',\n                                component: DetailComponent\n                            }\n                        ]\n                    }]\n            },\n            ]\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class FeedRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Filter.html":{"url":"classes/Filter.html","title":"class - Filter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Filter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/feed-filter.model.ts\n        \n\n            \n                Description\n            \n            \n                A Filter gather both the feed filtering behaviour and the filter status for\nfiltering parametrization and component state\nThe function property funktion takes two arguments :\n\ncard: the card for which to evaluate filter\nstatus: the status of the current filter\n\nBeware: we use a copy constructor for replication of filters as a store state so take care of funktion scope\nin Filter implementation (Instanciation and Inheritance). This is the reason why we pass the filter status upon\nfunktion\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyFilter\n                            \n                            \n                                chainFilter\n                            \n                            \n                                    Static\n                                chainFilter\n                            \n                            \n                                clone\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(funktion: (undefined,undefined) => void, active: boolean, status: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/feed-filter.model.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        funktion\n                                                  \n                                                        \n                                                                    function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        active\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            active\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:29\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            applyFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \napplyFilter(card: LightCard)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:44\n                            \n                        \n\n\n                \n                    \n                            apply the filter to the card, returns true if the card passes the filter, false otherwise\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        card\n                                                        \n                                                                    LightCard\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chainFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \nchainFilter(card: LightCard, next: Filter[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:57\n                            \n                        \n\n\n                \n                    \n                            Apply this filter to a card, then a chain of filter recursively.\nThe recursion stops when the card is filtered out\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        card\n                                                        \n                                                                    LightCard\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        next\n                                                        \n                                                                    Filter[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            chainFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        chainFilter(card: LightCard, next: Filter[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:68\n                            \n                        \n\n\n                \n                    \n                            Sequentially applies a chain of filters to a card\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        card\n                                                        \n                                                                    LightCard\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        next\n                                                        \n                                                                    Filter[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clone\n                            \n                            \n                        \n                    \n                \n                \n                    \nclone()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Filter\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {LightCard, Severity} from \"@ofModel/light-card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map} from \"@ofModel/map\";\n\n/**\n * A Filter gather both the feed filtering behaviour and the filter status for\n * filtering parametrization and component state\n *\n * The function property funktion takes two arguments :\n *  * card: the card for which to evaluate filter\n *  * status: the status of the current filter\n *\n * Beware: we use a copy constructor for replication of filters as a store state so take care of funktion scope\n * in Filter implementation (Instanciation and Inheritance). This is the reason why we pass the filter status upon\n * funktion\n */\nexport class Filter {\n\n    constructor(\n        readonly funktion: (LightCard,any) => boolean,\n        public active:boolean,\n        public status: any\n    ) {\n    }\n\n    clone():Filter {\n        return new Filter(\n            this.funktion,\n            this.active,\n            this.status);\n    }\n\n    /**\n     * apply the filter to the card, returns true if the card passes the filter, false otherwise\n     * @param card\n     */\n    applyFilter(card: LightCard):boolean{\n        if(this.active){\n            return this.funktion(card,this.status);\n        }\n        return true;\n    }\n\n    /**\n     * Apply this filter to a card, then a chain of filter recursively.\n     * The recursion stops when the card is filtered out\n     * @param card\n     * @param next\n     */\n    chainFilter(card: LightCard, next: Filter[]){\n        if(this.applyFilter(card))\n            return !next || next[0].chainFilter(card,next.slice(1));\n        return false\n    }\n\n    /**\n     * Sequentially applies a chain of filters to a card\n     * @param card\n     * @param next\n     */\n    static chainFilter(card: LightCard, next: Filter[]){\n        return !next || next[0].chainFilter(card,next.slice(1));\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuidService.html":{"url":"classes/GuidService.html","title":"class - GuidService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuidService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/guid.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                guid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentGuid\n                            \n                            \n                                getCurrentGuidString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/guid.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            guid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Guid\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/guid.service.ts:16\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCurrentGuid\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCurrentGuid()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/guid.service.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Guid\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCurrentGuidString\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCurrentGuidString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/guid.service.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Inject} from \"@angular/core\";\nimport {Guid} from \"guid-typescript\";\n\n@Inject({\n    providedIn: 'root'\n})\nexport class GuidService {\n\n    private readonly guid: Guid;\n\n    constructor() {\n        this.guid = Guid.create();\n    }\n\n    getCurrentGuid(): Guid {\n        return this.guid;\n    }\n\n    getCurrentGuidString():string{\n        return this.getCurrentGuid().toString();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HandleUnexpectedError.html":{"url":"classes/HandleUnexpectedError.html","title":"class - HandleUnexpectedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HandleUnexpectedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/card.actions.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CardActionTypes.HandleUnexpectedError\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:40\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Card} from '@ofModel/card.model';\n\nexport enum CardActionTypes {\n    LoadCard = '[Card] Load Card',\n    LoadCardSuccess = '[Card] Load Card Success',\n    LoadCardFailure = '[Card] Load Card Fail',\n    HandleUnexpectedError = '[Card] Handle unexpected error related to authentication issue'\n}\n// needed by NGRX entities\nexport class LoadCard implements Action {\n    readonly type = CardActionTypes.LoadCard;\n\n    constructor(public payload: { id: string }) {\n    }\n}\nexport class LoadCardFailure implements Action {\n    readonly type = CardActionTypes.LoadCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadCardSuccess implements Action {\n    readonly type = CardActionTypes.LoadCardSuccess;\n\n    constructor(public payload: { card: Card }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = CardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type CardActions =\n    LoadCard\n    | LoadCardSuccess\n    | LoadCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HandleUnexpectedError-1.html":{"url":"classes/HandleUnexpectedError-1.html","title":"class - HandleUnexpectedError-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HandleUnexpectedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:64\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:66\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.HandleUnexpectedError\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:64\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    // | LoadLightCard\n    // | LoadLightCardSuccess\n    // | LoadLightCardFailure\n    | AddLightCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HandleUnexpectedError-2.html":{"url":"classes/HandleUnexpectedError-2.html","title":"class - HandleUnexpectedError-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HandleUnexpectedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/menu.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/menu.actions.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : MenuActionTypes.HandleUnexpectedError\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:39\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\n\nexport enum MenuActionTypes {\n    LoadMenu = '[Menu] Load Menu',\n    LoadMenuSuccess = '[Menu] Load Menu Success',\n    LoadMenuFailure = '[Menu] Load Menu Fail',\n    HandleUnexpectedError = '[Menu] Handle unexpected error'\n}\n// needed by NGRX entities\nexport class LoadMenu implements Action {\n    readonly type = MenuActionTypes.LoadMenu;\n\n    constructor() {\n    }\n}\nexport class LoadMenuFailure implements Action {\n    readonly type = MenuActionTypes.LoadMenuFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadMenuSuccess implements Action {\n    readonly type = MenuActionTypes.LoadMenuSuccess;\n\n    constructor(public payload: { menu: ThirdMenu[] }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    readonly type = MenuActionTypes.HandleUnexpectedError;\n\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type MenuActions =\n    LoadMenu\n    | LoadMenuSuccess\n    | LoadMenuFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HandlebarsService.html":{"url":"injectables/HandlebarsService.html","title":"injectable - HandlebarsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  HandlebarsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/modules/cards/services/handlebars.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                templateCache\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                executeTemplate\n                            \n                            \n                                    Private\n                                queryTemplate\n                            \n                            \n                                    Private\n                                registerArrayAtIndex\n                            \n                            \n                                    Private\n                                registerArrayAtIndexLength\n                            \n                            \n                                    Private\n                                registerBool\n                            \n                            \n                                    Private\n                                registerCardAction\n                            \n                            \n                                    Private\n                                registerDateFormat\n                            \n                            \n                                    Private\n                                registerI18n\n                            \n                            \n                                    Private\n                                registerMath\n                            \n                            \n                                    Private\n                                registerNow\n                            \n                            \n                                    Private\n                                registerNumberFormat\n                            \n                            \n                                    Private\n                                registerPreserveSpace\n                            \n                            \n                                    Private\n                                registerSlice\n                            \n                            \n                                    Private\n                                registerSort\n                            \n                            \n                                    Private\n                                registerSplit\n                            \n                            \n                                    Private\n                                registerSvg\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(time: TimeService, translate: TranslateService, thirds: ThirdsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/cards/services/handlebars.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        time\n                                                  \n                                                        \n                                                                    TimeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        thirds\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            executeTemplate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        executeTemplate(templateName: string, card: Card)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        templateName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        card\n                                                        \n                                                                    Card\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            queryTemplate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        queryTemplate(publisher: string, version: string, name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:49\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publisher\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        version\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerArrayAtIndex\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerArrayAtIndex()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:117\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerArrayAtIndexLength\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerArrayAtIndexLength()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:91\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerBool\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerBool()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:62\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerCardAction\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerCardAction()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:226\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerDateFormat\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerDateFormat()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:240\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerI18n\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerI18n()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:182\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerMath\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerMath()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:103\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerNow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerNow()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:255\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerNumberFormat\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerNumberFormat()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:248\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerPreserveSpace\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerPreserveSpace()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:262\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerSlice\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerSlice()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:123\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerSort\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerSort()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:140\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerSplit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerSplit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:97\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerSvg\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerSvg()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:208\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            templateCache\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:23\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from \"@angular/core\";\nimport {Card} from \"@ofModel/card.model\";\nimport * as Handlebars from \"handlebars/dist/handlebars.js\"\nimport {TimeService} from \"@ofServices/time.service\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport * as moment from 'moment';\nimport {Map} from \"@ofModel/map\";\nimport {Observable, of} from \"rxjs\";\nimport {map, tap} from \"rxjs/operators\";\nimport {ThirdsService} from \"../../../services/thirds.service\";\nimport {Guid} from \"guid-typescript\";\n\n@Injectable()\nexport class HandlebarsService {\n\n    private templateCache:Map = new Map();\n\n    constructor(private time:TimeService,\n                private translate: TranslateService,\n                private thirds: ThirdsService){\n        this.registerPreserveSpace();\n        this.registerNumberFormat();\n        this.registerDateFormat();\n        this.registerCardAction();\n        this.registerSvg();\n        this.registerI18n();\n        this.registerSort();\n        this.registerSlice();\n        this.registerArrayAtIndex();\n        this.registerMath();\n        this.registerSplit();\n        this.registerArrayAtIndexLength();\n        this.registerBool();\n        this.registerNow();\n    }\n\n    public executeTemplate(templateName: string, card: Card):Observable {\n        return this.queryTemplate(card.publisher,card.publisherVersion,templateName).pipe(\n            map(t=>t(card)));\n    }\n\n    private queryTemplate(publisher:string, version:string, name: string):Observable {\n        const locale = this.translate.getBrowserLang();\n        const key = `${publisher}.${version}.${name}.${locale}`;\n        let template = this.templateCache[key];\n        if(template){\n           return of(template);\n        }\n        return this.thirds.fetchHbsTemplate(publisher,version,name,locale).pipe(\n            map(s=>Handlebars.compile(s)),\n            tap(t=>this.templateCache[key]=t)\n        );\n    }\n\n    private registerBool() {\n        Handlebars.registerHelper('bool', function (v1, operator, v2, options) {\n            switch (operator) {\n                case '==':\n                    return (v1 == v2);\n                case '===':\n                    return (v1 === v2);\n                case '!=':\n                    return (v1 != v2);\n                case '!==':\n                    return (v1 !== v2);\n                case '':\n                    return (v1 > v2);\n                case '>=':\n                    return (v1 >= v2);\n                case '&&':\n                    return (v1 && v2);\n                case '||':\n                    return (v1 || v2);\n                default:\n                    return true;\n            }\n        });\n    }\n\n    private registerArrayAtIndexLength() {\n        Handlebars.registerHelper('arrayAtIndexLength', function (value, index, options) {\n            return value[index].length;\n        });\n    }\n\n    private registerSplit() {\n        Handlebars.registerHelper('split', function (value, splitValue, index, options) {\n            return value.split(splitValue)[index];\n        });\n    }\n\n    private registerMath(){\n        Handlebars.registerHelper(\"math\", function(lvalue, operator, rvalue, options) {\n            let result;\n            switch(operator) {\n                case \"+\": result = lvalue + rvalue; break;\n                case \"-\": result = lvalue - rvalue; break;\n                case \"*\": result = lvalue * rvalue; break;\n                case \"/\": result = lvalue / rvalue; break;\n                case \"%\": result = lvalue % rvalue; break;\n            }\n            return result;\n        });\n    }\n\n    private registerArrayAtIndex() {\n        Handlebars.registerHelper('arrayAtIndex', function (value, index, options) {\n            return value[index];\n        });\n    }\n\n    private registerSlice() {\n        Handlebars.registerHelper('slice', function () {\n            let args = [];\n            for (let index = 0; index =3) {\n                to = args[2];\n                return value.slice(from, to);\n            }\n            return value.slice(from);\n        });\n    }\n\n    private registerSort() {\n        Handlebars.registerHelper('sort', function () {\n            let args = [];\n            for (let index = 0; index  {\n            let args = [],\n                options = fctArgs[fctArgs.length - 1];\n            for (let i = 0; i \n                    document.getElementById('${svgUid}').addEventListener('load', function(){\n                            svgPanZoom(document.getElementById('${svgUid}'));});\n                    `\n        });\n    }\n\n    private registerCardAction() {\n        Handlebars.registerHelper('action', function () {\n            let args = [];\n            for (let i = 0; i `\n        });\n    }\n\n    private registerDateFormat() {\n        Handlebars.registerHelper('dateFormat', (value, options) => {\n            const m = moment(new Date(value));\n            m.locale(this.translate.getBrowserLang());\n            return m.format(options.hash.format);\n        });\n    }\n\n    private registerNumberFormat() {\n        Handlebars.registerHelper('numberFormat', (value, options) => {\n            const formatter = new Intl.NumberFormat(this.translate.getBrowserLang(), options.hash);\n            return formatter.format(value);\n        });\n    }\n\n    private registerNow() {\n        const that = this;\n        Handlebars.registerHelper('now', function (options) {\n            return that.time.currentTime();\n        })\n    }\n\n    private registerPreserveSpace() {\n        Handlebars.registerHelper(\"preserveSpace\", function (value, options) {\n            return value.replace(/ /g, '\\u00A0')\n        });\n    }\n}\n\nfunction sortOnKey(key){\n    return function(a,b){\n        if(typeof  a[key] == 'string' && typeof b[key] == 'string'){\n            if(a[key]b[key])\n                return 1\n            return 0;\n        }else if(typeof  a[key] == 'number' && typeof b[key] == 'number'){\n            return a[key]-b[key];\n        }\n        return 0;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/I18n.html":{"url":"classes/I18n.html","title":"class - I18n","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  I18n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/i18n.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(key: string, parameters: Map)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/i18n.model.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                    Map\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Map} from \"@ofModel/map\";\n\nexport class I18n {\n    constructor(\n        readonly key: string,\n        readonly parameters: Map) {\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/IconComponent.html":{"url":"components/IconComponent.html","title":"component - IconComponent","body":"\n                   \n\n\n\n\n\n  Components\n  IconComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/icon/icon.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-icon\n            \n\n            \n                styleUrls\n                icon.component.scss\n            \n\n\n\n            \n                templateUrl\n                icon.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                iconPath\n                            \n                            \n                                size\n                            \n                            \n                                sprites\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                big\n                            \n                            \n                                dark\n                            \n                            \n                                icon\n                            \n                            \n                                light\n                            \n                            \n                                medium\n                            \n                            \n                                small\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(platformLocation: PlatformLocation)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/icon/icon.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        platformLocation\n                                                  \n                                                        \n                                                                    PlatformLocation\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        big\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:22\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dark\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        icon\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:19\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        light\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        medium\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        small\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:20\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            iconPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sprites\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, Input, OnInit} from '@angular/core';\nimport {environment} from \"@env/environment\";\nimport {PlatformLocation} from \"@angular/common\";\n\n@Component({\n  selector: 'of-icon',\n  templateUrl:'icon.component.html',\n  styleUrls: ['icon.component.scss']\n})\nexport class IconComponent implements OnInit {\n\n  @Input() icon:string;\n  @Input() small:boolean;\n  @Input() medium:boolean;\n  @Input() big:boolean;\n  @Input() dark:boolean;\n  @Input() light:boolean;\n  size:string;\n  sprites:string;\n  iconPath:string;\n  constructor(platformLocation:PlatformLocation) {\n      let baseHref = platformLocation.getBaseHrefFromDOM();\n      this.iconPath = (baseHref?baseHref:'/')+'assets/images/icons/'\n  }\n\n  ngOnInit() {\n    this.big = this.big != undefined;\n    this.medium = this.medium != undefined && !this.big;\n    this.small = this.small != undefined && !this.medium;\n    this.dark = this.dark != undefined;\n    this.light = this.light != undefined && ! this.dark;\n    let size = this.big?'big':this.medium?'medium':'small'\n    switch (size) {\n        case 'big':\n          this.size = '64px';\n          break;\n        case 'medium':\n          this.size = '32px';\n          break;\n         default:\n          this.size = '16px';\n    }\n    if(this.dark||this.light){\n      this.sprites='sprites-mono.svg'\n    }else{\n      this.sprites='sprites.svg'\n    }\n  }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  \n\n\n    \n\n    \n                \n                    icon.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n@import \"~assets/styles/_variables.scss\";\n\n.dark{\n  fill: $dark;\n}\n.light{\n  fill: $light;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'IconComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InitFilter.html":{"url":"classes/InitFilter.html","title":"class - InitFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InitFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/feed.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/feed.actions.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/feed.actions.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : FeedActionTypes.InitFilter\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/feed.actions.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\nimport {Filter} from \"@ofModel/feed-filter.model\";\n\nexport enum FeedActionTypes {\n    ApplyFilter = '[Feed] Change filter Status',\n    InitFilter = '[Feed] Init filter',\n}\n\nexport class ApplyFilter implements Action {\n    readonly type = FeedActionTypes.ApplyFilter\n    constructor(public payload:{name: String, active: boolean, status: any}){}\n}\n\nexport class InitFilter implements Action {\n    readonly type = FeedActionTypes.InitFilter\n    constructor(public payload:{name: String, filter: Filter}){}\n}\n\nexport type FeedActions =\n    InitFilter\n    | ApplyFilter;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Input.html":{"url":"classes/Input.html","title":"class - Input","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Input\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/card.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: InputType, name: string, label: I18n, value: string, mandatory: boolean, maxLength: number, rows: number, values: ParameterListItem[], selectedValues: string[], unSelectedValues: string[])\n                    \n                \n                        \n                            \n                                Defined in src/app/model/card.model.ts:85\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                    InputType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mandatory\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rows\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    ParameterListItem[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        selectedValues\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        unSelectedValues\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Severity} from \"@ofModel/light-card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map} from \"@ofModel/map\";\n\nexport class Card {\n\n    constructor(\n        readonly uid: string,\n        readonly id: string,\n        readonly publisher: string,\n        readonly publisherVersion: string,\n        readonly publishDate: number,\n        readonly startDate: number,\n        readonly endDate: number,\n        readonly severity: Severity,\n        readonly mainRecipient: string,\n        readonly processId?: string,\n        readonly lttd?: number,\n        readonly title?: I18n,\n        readonly summary?: I18n,\n        readonly  data?: any,\n        readonly  details?: CardDetail[],\n        readonly  actions?: Map\n    ) {\n    }\n}\n\nexport enum TitlePosition {\n    UP, DOWN, NONE\n\n}\n\nexport class CardDetail {\n    constructor(\n        readonly titlePosition: TitlePosition,\n        readonly title: I18n,\n        readonly titleStyle: string,\n        readonly templateName: string,\n        readonly styles: string[]) {\n    }\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LightCardEffects.html":{"url":"injectables/LightCardEffects.html","title":"injectable - LightCardEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LightCardEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/light-card.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loadById\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, thirdService: ThirdsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/light-card.effects.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        thirdService\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadById\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            ofType(LightCardActionTypes.LoadLightCardsSuccess),\n            switchMap((action:LoadLightCardsSuccess)=>\n                    this.thirdService.loadI18nForLightCards(action.payload.lightCards)\n                        .pipe(\n                            catchError((err,caught)=>{\n                                console.error(`i18 loading failed for card publishers`);\n                                console.error(err);\n                                return of(false);\n                            })\n                        )),\n            map(\n                ()=>{\n                    return new LoadLightCardsExtendedData();\n                }\n            )\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/light-card.effects.ts:32\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {Observable, of} from 'rxjs';\nimport {catchError, map, switchMap, tap} from 'rxjs/operators';\nimport {CardService} from '@ofServices/card.service';\nimport {AppState} from \"@ofStore/index\";\nimport {CardActionTypes, LoadCard, LoadCardFailure, LoadCardSuccess} from \"@ofActions/card.actions\";\nimport {Card} from \"@ofModel/card.model\";\nimport {LightCardActionTypes, LoadLightCardsExtendedData, LoadLightCardsSuccess} from \"@ofActions/light-card.actions\";\nimport {ThirdsService} from \"@ofServices/thirds.service\";\n\n// those effects are unused for the moment\n@Injectable()\nexport class LightCardEffects {\n\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private thirdService: ThirdsService\n    ) {\n    }\n\n    @Effect()\n    loadById: Observable = this.actions$\n        .pipe(\n            ofType(LightCardActionTypes.LoadLightCardsSuccess),\n            switchMap((action:LoadLightCardsSuccess)=>\n                    this.thirdService.loadI18nForLightCards(action.payload.lightCards)\n                        .pipe(\n                            catchError((err,caught)=>{\n                                console.error(`i18 loading failed for card publishers`);\n                                console.error(err);\n                                return of(false);\n                            })\n                        )),\n            map(\n                ()=>{\n                    return new LoadLightCardsExtendedData();\n                }\n            )\n        );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadCard.html":{"url":"classes/LoadCard.html","title":"class - LoadCard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/card.actions.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CardActionTypes.LoadCard\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Card} from '@ofModel/card.model';\n\nexport enum CardActionTypes {\n    LoadCard = '[Card] Load Card',\n    LoadCardSuccess = '[Card] Load Card Success',\n    LoadCardFailure = '[Card] Load Card Fail',\n    HandleUnexpectedError = '[Card] Handle unexpected error related to authentication issue'\n}\n// needed by NGRX entities\nexport class LoadCard implements Action {\n    readonly type = CardActionTypes.LoadCard;\n\n    constructor(public payload: { id: string }) {\n    }\n}\nexport class LoadCardFailure implements Action {\n    readonly type = CardActionTypes.LoadCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadCardSuccess implements Action {\n    readonly type = CardActionTypes.LoadCardSuccess;\n\n    constructor(public payload: { card: Card }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = CardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type CardActions =\n    LoadCard\n    | LoadCardSuccess\n    | LoadCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadCardFailure.html":{"url":"classes/LoadCardFailure.html","title":"class - LoadCardFailure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadCardFailure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/card.actions.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CardActionTypes.LoadCardFailure\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Card} from '@ofModel/card.model';\n\nexport enum CardActionTypes {\n    LoadCard = '[Card] Load Card',\n    LoadCardSuccess = '[Card] Load Card Success',\n    LoadCardFailure = '[Card] Load Card Fail',\n    HandleUnexpectedError = '[Card] Handle unexpected error related to authentication issue'\n}\n// needed by NGRX entities\nexport class LoadCard implements Action {\n    readonly type = CardActionTypes.LoadCard;\n\n    constructor(public payload: { id: string }) {\n    }\n}\nexport class LoadCardFailure implements Action {\n    readonly type = CardActionTypes.LoadCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadCardSuccess implements Action {\n    readonly type = CardActionTypes.LoadCardSuccess;\n\n    constructor(public payload: { card: Card }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = CardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type CardActions =\n    LoadCard\n    | LoadCardSuccess\n    | LoadCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadCardSuccess.html":{"url":"classes/LoadCardSuccess.html","title":"class - LoadCardSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadCardSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/card.actions.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CardActionTypes.LoadCardSuccess\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Card} from '@ofModel/card.model';\n\nexport enum CardActionTypes {\n    LoadCard = '[Card] Load Card',\n    LoadCardSuccess = '[Card] Load Card Success',\n    LoadCardFailure = '[Card] Load Card Fail',\n    HandleUnexpectedError = '[Card] Handle unexpected error related to authentication issue'\n}\n// needed by NGRX entities\nexport class LoadCard implements Action {\n    readonly type = CardActionTypes.LoadCard;\n\n    constructor(public payload: { id: string }) {\n    }\n}\nexport class LoadCardFailure implements Action {\n    readonly type = CardActionTypes.LoadCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadCardSuccess implements Action {\n    readonly type = CardActionTypes.LoadCardSuccess;\n\n    constructor(public payload: { card: Card }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = CardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type CardActions =\n    LoadCard\n    | LoadCardSuccess\n    | LoadCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadLightCards.html":{"url":"classes/LoadLightCards.html","title":"class - LoadLightCards","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadLightCards\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.LoadLightCards\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    // | LoadLightCard\n    // | LoadLightCardSuccess\n    // | LoadLightCardFailure\n    | AddLightCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadLightCardsExtendedData.html":{"url":"classes/LoadLightCardsExtendedData.html","title":"class - LoadLightCardsExtendedData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadLightCardsExtendedData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:34\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.LoadLightCardsExtendedData\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    // | LoadLightCard\n    // | LoadLightCardSuccess\n    // | LoadLightCardFailure\n    | AddLightCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadLightCardsFailure.html":{"url":"classes/LoadLightCardsFailure.html","title":"class - LoadLightCardsFailure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadLightCardsFailure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.LoadLightCardsFailure\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:41\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    // | LoadLightCard\n    // | LoadLightCardSuccess\n    // | LoadLightCardFailure\n    | AddLightCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadLightCardsSuccess.html":{"url":"classes/LoadLightCardsSuccess.html","title":"class - LoadLightCardsSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadLightCardsSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.LoadLightCardsSuccess\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    // | LoadLightCard\n    // | LoadLightCardSuccess\n    // | LoadLightCardFailure\n    | AddLightCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMenu.html":{"url":"classes/LoadMenu.html","title":"class - LoadMenu","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMenu\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/menu.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/menu.actions.ts:19\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : MenuActionTypes.LoadMenu\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\n\nexport enum MenuActionTypes {\n    LoadMenu = '[Menu] Load Menu',\n    LoadMenuSuccess = '[Menu] Load Menu Success',\n    LoadMenuFailure = '[Menu] Load Menu Fail',\n    HandleUnexpectedError = '[Menu] Handle unexpected error'\n}\n// needed by NGRX entities\nexport class LoadMenu implements Action {\n    readonly type = MenuActionTypes.LoadMenu;\n\n    constructor() {\n    }\n}\nexport class LoadMenuFailure implements Action {\n    readonly type = MenuActionTypes.LoadMenuFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadMenuSuccess implements Action {\n    readonly type = MenuActionTypes.LoadMenuSuccess;\n\n    constructor(public payload: { menu: ThirdMenu[] }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    readonly type = MenuActionTypes.HandleUnexpectedError;\n\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type MenuActions =\n    LoadMenu\n    | LoadMenuSuccess\n    | LoadMenuFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMenuFailure.html":{"url":"classes/LoadMenuFailure.html","title":"class - LoadMenuFailure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMenuFailure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/menu.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/menu.actions.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : MenuActionTypes.LoadMenuFailure\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\n\nexport enum MenuActionTypes {\n    LoadMenu = '[Menu] Load Menu',\n    LoadMenuSuccess = '[Menu] Load Menu Success',\n    LoadMenuFailure = '[Menu] Load Menu Fail',\n    HandleUnexpectedError = '[Menu] Handle unexpected error'\n}\n// needed by NGRX entities\nexport class LoadMenu implements Action {\n    readonly type = MenuActionTypes.LoadMenu;\n\n    constructor() {\n    }\n}\nexport class LoadMenuFailure implements Action {\n    readonly type = MenuActionTypes.LoadMenuFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadMenuSuccess implements Action {\n    readonly type = MenuActionTypes.LoadMenuSuccess;\n\n    constructor(public payload: { menu: ThirdMenu[] }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    readonly type = MenuActionTypes.HandleUnexpectedError;\n\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type MenuActions =\n    LoadMenu\n    | LoadMenuSuccess\n    | LoadMenuFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMenuSuccess.html":{"url":"classes/LoadMenuSuccess.html","title":"class - LoadMenuSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMenuSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/menu.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/menu.actions.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : MenuActionTypes.LoadMenuSuccess\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\n\nexport enum MenuActionTypes {\n    LoadMenu = '[Menu] Load Menu',\n    LoadMenuSuccess = '[Menu] Load Menu Success',\n    LoadMenuFailure = '[Menu] Load Menu Fail',\n    HandleUnexpectedError = '[Menu] Handle unexpected error'\n}\n// needed by NGRX entities\nexport class LoadMenu implements Action {\n    readonly type = MenuActionTypes.LoadMenu;\n\n    constructor() {\n    }\n}\nexport class LoadMenuFailure implements Action {\n    readonly type = MenuActionTypes.LoadMenuFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadMenuSuccess implements Action {\n    readonly type = MenuActionTypes.LoadMenuSuccess;\n\n    constructor(public payload: { menu: ThirdMenu[] }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    readonly type = MenuActionTypes.HandleUnexpectedError;\n\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type MenuActions =\n    LoadMenu\n    | LoadMenuSuccess\n    | LoadMenuFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/login/login.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-login\n            \n\n\n            \n                styles\n                .btn-primary {margin-right: 8px;}\n            \n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hide\n                            \n                            \n                                userForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onSubmit\n                            \n                            \n                                resetForm\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/login/login.component.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onSubmit\n                            \n                            \n                        \n                    \n                \n                \n                    \nonSubmit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            resetForm\n                            \n                            \n                        \n                    \n                \n                \n                    \nresetForm()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:43\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hide\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {Store} from '@ngrx/store';\nimport {TryToLogIn} from '@ofActions/authentication.actions';\nimport {AppState} from '@ofStore/index';\n\n@Component({\n    selector: 'of-login',\n    templateUrl: './login.component.html',\n    styles: ['.btn-primary {margin-right: 8px;}']\n})\nexport class LoginComponent implements OnInit {\n\n    hide: boolean;\n    userForm: FormGroup;\n    /* istanbul ignore next */\n    constructor( private store: Store) {}\n\n    ngOnInit() {\n        this.hide = true;\n        this.userForm = new FormGroup({\n                identifier: new FormControl(''),\n                password: new FormControl('')\n            }\n        );\n    }\n\n    onSubmit(): void {\n        if (this.userForm.valid) {\n            const username = this.userForm.get('identifier').value;\n            const password = this.userForm.get('password').value;\n            this.store.dispatch(new TryToLogIn({username: username, password: password}));\n        }\n    }\n\n    resetForm(): void {\n        this.userForm.reset();\n    }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n    \n        \n            \n                \n                    Identifier\n                    \n                    \n                        Password\n                        \n                    \n                    \n                        Login\n                        \n                        Reset\n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n    \n            .btn-primary {margin-right: 8px;}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                            Identifier                                                                Password                                                                                        Login                                                Reset                                                                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Map.html":{"url":"classes/Map.html","title":"class - Map","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Map\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/map.ts\n        \n\n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    T\n\n                    \n                \n                        \n                            \n                                Defined in src/app/model/map.ts:8\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        export class Map {\n    [key: string]: T;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MenuEffects.html":{"url":"injectables/MenuEffects.html","title":"injectable - MenuEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MenuEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/menu.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                load\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, service: ThirdsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/menu.effects.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            load\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            ofType(MenuActionTypes.LoadMenu),\n            switchMap(action => this.service.computeThirdsMenu()),\n            // tap(menus=>this.service.loadI18nForMenuEntries(menus)),\n            switchMap(menu=>zip(of(menu),this.service.loadI18nForMenuEntries(menu)\n                .pipe(\n                    catchError((err,caught)=>{\n                        console.error(`i18n loading failed for menu`);\n                        console.error(err);\n                        return of(false);\n                    })\n                ))),\n            map(array =>\n                new LoadMenuSuccess({menu: array[0]})\n            ),\n            catchError((err, caught) => {\n                console.error(`menu loading failed`);\n                console.error(err);\n                this.store.dispatch(new LoadMenuFailure(err));\n                return caught;\n            })\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/menu.effects.ts:30\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {Observable, of, zip} from 'rxjs';\nimport {catchError, map, switchMap, tap} from 'rxjs/operators';\nimport {AppState} from \"@ofStore/index\";\nimport {LoadCard} from \"@ofActions/card.actions\";\nimport {ThirdsService} from \"@ofServices/thirds.service\";\nimport {LoadMenuFailure, LoadMenuSuccess, MenuActionTypes} from \"@ofActions/menu.actions\";\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\n\n@Injectable()\nexport class MenuEffects {\n\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private service: ThirdsService\n    ) {\n    }\n\n    @Effect()\n    load: Observable = this.actions$\n        .pipe(\n            ofType(MenuActionTypes.LoadMenu),\n            switchMap(action => this.service.computeThirdsMenu()),\n            // tap(menus=>this.service.loadI18nForMenuEntries(menus)),\n            switchMap(menu=>zip(of(menu),this.service.loadI18nForMenuEntries(menu)\n                .pipe(\n                    catchError((err,caught)=>{\n                        console.error(`i18n loading failed for menu`);\n                        console.error(err);\n                        return of(false);\n                    })\n                ))),\n            map(array =>\n                new LoadMenuSuccess({menu: array[0]})\n            ),\n            catchError((err, caught) => {\n                console.error(`menu loading failed`);\n                console.error(err);\n                this.store.dispatch(new LoadMenuFailure(err));\n                return caught;\n            })\n        );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MenuState.html":{"url":"interfaces/MenuState.html","title":"interface - MenuState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MenuState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/menu.state.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        loading\n                                \n                                \n                                        menu\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                    \n                                \n                                \n                                    \n                                        loading:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        menu\n                                    \n                                \n                                \n                                    \n                                        menu:     ThirdMenu[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ThirdMenu[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {ThirdMenu} from \"@ofModel/thirds.model\";\n\nexport interface MenuState{\n    menu: ThirdMenu[],\n    loading: boolean,\n    error:string\n}\n\nexport const menuInitialState: MenuState = {\n    menu:[],\n    loading: false,\n    error:null\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavbarComponent.html":{"url":"components/NavbarComponent.html","title":"component - NavbarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NavbarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/navbar/navbar.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-navbar\n            \n\n\n\n\n            \n                templateUrl\n                ./navbar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _thirdMenus\n                            \n                            \n                                currentPath\n                            \n                            \n                                expandedMenu\n                            \n                            \n                                navbarCollapsed\n                            \n                            \n                                navigationRoutes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logOut\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                toggleMenu\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    thirdMenus\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/navbar/navbar.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logOut\n                            \n                            \n                        \n                    \n                \n                \n                    \nlogOut()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:51\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleMenu\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleMenu(index: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:59\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        index\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _thirdMenus\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expandedMenu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            navbarCollapsed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            navigationRoutes\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : navigationRoutes\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:29\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        thirdMenus\n                    \n                \n\n                \n                    \n                        getthirdMenus()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/navbar/navbar.component.ts:55\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\nimport {navigationRoutes} from '../../app-routing.module';\nimport {Store} from '@ngrx/store';\nimport {TryToLogOut} from '@ofActions/authentication.actions';\nimport {AppState} from '@ofStore/index';\nimport {selectCurrentUrl} from '@ofSelectors/router.selectors';\nimport {LoadMenu} from \"@ofActions/menu.actions\";\nimport {selectMenuStateMenu} from \"@ofSelectors/menu.selectors\";\nimport {Observable} from \"rxjs\";\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\nimport {tap} from \"rxjs/operators\";\nimport * as _ from 'lodash';\nimport {TranslateService} from \"@ngx-translate/core\";\n\n@Component({\n  selector: 'of-navbar',\n  templateUrl: './navbar.component.html',\n})\nexport class NavbarComponent implements OnInit {\n\n    navbarCollapsed = true;\n    navigationRoutes = navigationRoutes;\n    currentPath: any;\n    private _thirdMenus: Observable;\n    expandedMenu:boolean[]=[];\n\n    constructor(private store: Store) {\n    }\n\n    ngOnInit() {\n        this.store.select(selectCurrentUrl).subscribe(url=>{\n            if(url)\n                this.currentPath = url.split('/')[1];\n        });\n        this._thirdMenus=this.store.select(selectMenuStateMenu)\n            .pipe(tap(menus=>{\n                this.expandedMenu=new Array(menus.length);\n                _.fill(this.expandedMenu,false);\n            }));\n        this.store.dispatch(new LoadMenu());\n    }\n\n\n    logOut(){\n        this.store.dispatch(new TryToLogOut());\n    }\n\n    get thirdMenus(){\n        return this._thirdMenus;\n    }\n\n    toggleMenu(index:number){\n        this.expandedMenu[index]=!this.expandedMenu[index];\n        if(this.expandedMenu[index])\n            setTimeout(()=>this.expandedMenu[index]=false,5000);\n    }\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  \n    \n      \n    \n  \n  \n    \n  \n  \n    \n      \n        {{'menu.'+link.path}}\n      \n      1\">\n        1\"\n           translate\n        >{{tMenu.id}}.{{tMenu.version}}.{{tMenu.label}}\n        {{tMenu.entries[0].label}}\n        1\"\n             [ngbCollapse]=\"!expandedMenu[index]\">\n          {{tMenu.id}}.{{tMenu.version}}.{{entry.label}}\n        \n      \n      \n        \n          menu.logout\n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                              {{\\'menu.\\'+link.path}}            1\">        1\"           translate        >{{tMenu.id}}.{{tMenu.version}}.{{tMenu.label}}        {{tMenu.entries[0].label}}        1\"             [ngbCollapse]=\"!expandedMenu[index]\">          {{tMenu.id}}.{{tMenu.version}}.{{entry.label}}                                      menu.logout                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavbarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NoSelectionComponent.html":{"url":"components/NoSelectionComponent.html","title":"component - NoSelectionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NoSelectionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/components/no-selection/no-selection.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-no-selection\n            \n\n\n\n\n            \n                templateUrl\n                ./no-selection.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/components/no-selection/no-selection.component.ts:14\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/no-selection/no-selection.component.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'of-no-selection',\n  templateUrl: './no-selection.component.html',\n})\nexport class NoSelectionComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  no-selection works!\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  no-selection works!'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NoSelectionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParameterListItem.html":{"url":"classes/ParameterListItem.html","title":"class - ParameterListItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParameterListItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/card.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(label: I18n, value: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/card.model.ts:101\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Severity} from \"@ofModel/light-card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map} from \"@ofModel/map\";\n\nexport class Card {\n\n    constructor(\n        readonly uid: string,\n        readonly id: string,\n        readonly publisher: string,\n        readonly publisherVersion: string,\n        readonly publishDate: number,\n        readonly startDate: number,\n        readonly endDate: number,\n        readonly severity: Severity,\n        readonly mainRecipient: string,\n        readonly processId?: string,\n        readonly lttd?: number,\n        readonly title?: I18n,\n        readonly summary?: I18n,\n        readonly  data?: any,\n        readonly  details?: CardDetail[],\n        readonly  actions?: Map\n    ) {\n    }\n}\n\nexport enum TitlePosition {\n    UP, DOWN, NONE\n\n}\n\nexport class CardDetail {\n    constructor(\n        readonly titlePosition: TitlePosition,\n        readonly title: I18n,\n        readonly titleStyle: string,\n        readonly templateName: string,\n        readonly styles: string[]) {\n    }\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PayloadForSuccessfulAuthentication.html":{"url":"classes/PayloadForSuccessfulAuthentication.html","title":"class - PayloadForSuccessfulAuthentication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PayloadForSuccessfulAuthentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clientId\n                            \n                            \n                                    Public\n                                expirationDate\n                            \n                            \n                                    Public\n                                identifier\n                            \n                            \n                                    Public\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(identifier: string, clientId: Guid, token: string, expirationDate: Date)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/authentication.actions.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        identifier\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clientId\n                                                  \n                                                        \n                                                                    Guid\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        token\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        expirationDate\n                                                  \n                                                        \n                                                                    Date\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            clientId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Guid\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            expirationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            identifier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\n\nexport enum AuthenticationActionTypes {\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n/**\n * First action dispatch by the application.\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    constructor(public payload: PayloadForSuccessfulAuthentication) {\n    }\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    constructor(public payload: { denialReason: string }) {\n    }\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n     AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RejectLogIn.html":{"url":"classes/RejectLogIn.html","title":"class - RejectLogIn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RejectLogIn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used to notify the store that the authentication is not possible.\nEmmited by {AuthenticationEffect} in the following {Observable} @members:\n\nTryToLogin;\nCheckAuthentication\nand in the handleRejectedLogin @method called by the ChecAuthentication {Observable}\n\nUsed in the {function} reducer of the {authentication.reducer.ts} file to create a new state\nwithout any authentication information and containing a message about login rejection\nby filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/authentication.actions.ts:93\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:95\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.RejectLogIn\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:93\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\n\nexport enum AuthenticationActionTypes {\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n/**\n * First action dispatch by the application.\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    constructor(public payload: PayloadForSuccessfulAuthentication) {\n    }\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    constructor(public payload: { denialReason: string }) {\n    }\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n     AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RouterStateUrl.html":{"url":"classes/RouterStateUrl.html","title":"class - RouterStateUrl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RouterStateUrl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/router.state.ts\n        \n\n            \n                Description\n            \n            \n                The RouterStateSerializer takes the current RouterStateSnapshot\nand returns any pertinent information needed. The snapshot contains\nall information about the state of the router at the given point in time.\nThe entire snapshot is complex and not always needed. In this case, you only\nneed the URL and query parameters from the snapshot in the store. Other items could be\nreturned such as route parameters and static route data.\nsource: https://github.com/briebug/ngrx-complex-forms\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string, params: Params, queryParams: Params)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/states/router.state.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                    Params\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryParams\n                                                  \n                                                        \n                                                                    Params\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {RouterStateSerializer} from \"@ngrx/router-store\";\nimport {ActivatedRouteSnapshot, Params, RouterStateSnapshot} from \"@angular/router\";\n\nexport const initialState = {\n    state: {\n        url: window.location.pathname,\n        params: {},\n        queryParams: {}\n    },\n    navigationId: 0\n}\n\n/**\n * The RouterStateSerializer takes the current RouterStateSnapshot\n * and returns any pertinent information needed. The snapshot contains\n * all information about the state of the router at the given point in time.\n * The entire snapshot is complex and not always needed. In this case, you only\n * need the URL and query parameters from the snapshot in the store. Other items could be\n * returned such as route parameters and static route data.\n *\n * source: https://github.com/briebug/ngrx-complex-forms\n *\n */\n\nexport class RouterStateUrl {\n    /* istanbul ignore next */\n    constructor(\n        readonly url: string,\n        readonly params: Params,\n        readonly queryParams: Params) {\n    }\n}\n\nexport class CustomRouterStateSerializer\n    implements RouterStateSerializer {\n    serialize(routerState: RouterStateSnapshot): RouterStateUrl {\n        const {url} = routerState;\n        const params = this.extractParams(routerState.root);\n        const queryParams = routerState.root.queryParams;\n        return new RouterStateUrl(url, params, queryParams);\n    }\n\n    private extractParams(state: ActivatedRouteSnapshot): Params {\n        let params: Params = {...state.params};\n        for (let child of state.children) {\n            params = {...params, ...this.extractParams(child)}\n        }\n        return params;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectLightCard.html":{"url":"classes/SelectLightCard.html","title":"class - SelectLightCard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectLightCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.SelectLightCard\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:49\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    // | LoadLightCard\n    // | LoadLightCardSuccess\n    // | LoadLightCardFailure\n    | AddLightCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ServicesModule.html":{"url":"modules/ServicesModule.html","title":"module - ServicesModule","body":"\n                   \n\n\n\n\n    Modules\n    ServicesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ServicesModule\n\n\n\ncluster_ServicesModule_providers\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\n\n\nServicesModule\n\nServicesModule\n\nServicesModule -->\n\nAuthenticationService->ServicesModule\n\n\n\n\n\nCardService\n\nCardService\n\nServicesModule -->\n\nCardService->ServicesModule\n\n\n\n\n\nThirdsService\n\nThirdsService\n\nServicesModule -->\n\nThirdsService->ServicesModule\n\n\n\n\n\nTimeService\n\nTimeService\n\nServicesModule -->\n\nTimeService->ServicesModule\n\n\n\n\n\nTokenInjector\n\nTokenInjector\n\nServicesModule -->\n\nTokenInjector->ServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/services/services.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            CardService\n                        \n                        \n                            ThirdsService\n                        \n                        \n                            TimeService\n                        \n                        \n                            TokenInjector\n                        \n                    \n                \n            \n        \n\n        \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            forRoot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        forRoot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/services.module.ts:38\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     ModuleWithProviders\n\n                            \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {ModuleWithProviders, NgModule, Optional, SkipSelf} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HTTP_INTERCEPTORS} from '@angular/common/http';\nimport {AuthenticationService} from './authentication.service';\nimport {TokenInjector} from './interceptors.service';\n// import {AuthenticationGuard} from './guard.service';\nimport {CardService} from './card.service';\nimport {GuidService} from \"@ofServices/guid.service\";\nimport {TimeService} from \"@ofServices/time.service\";\nimport {ThirdsService} from \"@ofServices/thirds.service\";\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    providers: [\n        CardService,\n        AuthenticationService,\n        TimeService,\n        ThirdsService,\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: TokenInjector,\n            multi: true\n        },\n        GuidService\n\n    ]\n})\nexport class ServicesModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ServicesModule\n        };\n    }\n\n    constructor(\n        @Optional()\n        @SkipSelf()\n            parentModule: ServicesModule\n    ) {\n        if (parentModule) {\n            throw new Error(\n                'ServicesModule is already loaded. Import it in the AppModule only'\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StateModule.html":{"url":"modules/StateModule.html","title":"module - StateModule","body":"\n                   \n\n\n\n\n    Modules\n    StateModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StateModule\n\n\n\ncluster_StateModule_imports\n\n\n\n\n!environment\n\n!environment\n\n\n\nStateModule\n\nStateModule\n\nStateModule -->\n\n!environment->StateModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/store/state.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            !environment\n                        \n                    \n                \n            \n        \n\n        \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            forRoot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        forRoot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/store/state.module.ts:32\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     ModuleWithProviders\n\n                            \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport {appEffects, appReducer, storeConfig} from './index';\nimport {environment} from '@env/environment';\nimport {StoreDevtoolsModule} from '@ngrx/store-devtools';\nimport {NavigationActionTiming, RouterStateSerializer, StoreRouterConnectingModule} from '@ngrx/router-store';\nimport {CustomRouterStateSerializer} from '@ofStore/states/router.state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StoreModule.forRoot(appReducer, storeConfig),\n    StoreRouterConnectingModule.forRoot({\n        navigationActionTiming: NavigationActionTiming.PostActivation,\n        serializer: CustomRouterStateSerializer\n    }),\n    EffectsModule.forRoot(appEffects),\n    !environment.production ? StoreDevtoolsModule.instrument() : [],\n  ],\n  declarations: []\n})\nexport class StateModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: StateModule\n      ,\n      providers: [\n        /**\n         * The `RouterStateSnapshot` provided by the `Router` is a large complex structure.\n         * A custom RouterStateSerializer is used to parse the `RouterStateSnapshot` provided\n         * by `@ngrx/router-store` to include only the desired pieces of the snapshot.\n         */\n        {provide: RouterStateSerializer, useClass: CustomRouterStateSerializer}\n      ]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Third.html":{"url":"classes/Third.html","title":"class - Third","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Third\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/thirds.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, version: string, i18nLabelKey: string, templates?: string[], csses?: string[], locales?: string[], menuEntries?: ThirdMenuEntry[])\n                    \n                \n                        \n                            \n                                Defined in src/app/model/thirds.model.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        version\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18nLabelKey\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templates\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        csses\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        locales\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        menuEntries\n                                                  \n                                                        \n                                                                    ThirdMenuEntry[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Third{\n    constructor(\n        readonly name:string,\n        readonly version:string,\n        readonly i18nLabelKey: string,\n        readonly templates?:string[],\n        readonly csses?:string[],\n        readonly locales?:string[],\n        readonly menuEntries?:ThirdMenuEntry[]\n    ){}\n}\n\nexport class ThirdMenuEntry{\n    constructor(\n        readonly id:string,\n        readonly label: string,\n        readonly url: string\n    ){}\n}\n\nexport class ThirdMenu{\n    constructor(\n        readonly id: string,\n        readonly version: string,\n        readonly label: string,\n        readonly entries: ThirdMenuEntry[]){}\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThirdMenu.html":{"url":"classes/ThirdMenu.html","title":"class - ThirdMenu","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThirdMenu\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/thirds.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, version: string, label: string, entries: ThirdMenuEntry[])\n                    \n                \n                        \n                            \n                                Defined in src/app/model/thirds.model.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        version\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    ThirdMenuEntry[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Third{\n    constructor(\n        readonly name:string,\n        readonly version:string,\n        readonly i18nLabelKey: string,\n        readonly templates?:string[],\n        readonly csses?:string[],\n        readonly locales?:string[],\n        readonly menuEntries?:ThirdMenuEntry[]\n    ){}\n}\n\nexport class ThirdMenuEntry{\n    constructor(\n        readonly id:string,\n        readonly label: string,\n        readonly url: string\n    ){}\n}\n\nexport class ThirdMenu{\n    constructor(\n        readonly id: string,\n        readonly version: string,\n        readonly label: string,\n        readonly entries: ThirdMenuEntry[]){}\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThirdMenuEntry.html":{"url":"classes/ThirdMenuEntry.html","title":"class - ThirdMenuEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThirdMenuEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/thirds.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, label: string, url: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/thirds.model.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Third{\n    constructor(\n        readonly name:string,\n        readonly version:string,\n        readonly i18nLabelKey: string,\n        readonly templates?:string[],\n        readonly csses?:string[],\n        readonly locales?:string[],\n        readonly menuEntries?:ThirdMenuEntry[]\n    ){}\n}\n\nexport class ThirdMenuEntry{\n    constructor(\n        readonly id:string,\n        readonly label: string,\n        readonly url: string\n    ){}\n}\n\nexport class ThirdMenu{\n    constructor(\n        readonly id: string,\n        readonly version: string,\n        readonly label: string,\n        readonly entries: ThirdMenuEntry[]){}\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThirdsI18nLoader.html":{"url":"classes/ThirdsI18nLoader.html","title":"class - ThirdsI18nLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThirdsI18nLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/thirds.service.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        TranslateLoader\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTranslation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(thirdsService: ThirdsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/thirds.service.ts:160\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        thirdsService\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTranslation\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTranslation(lang: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:164\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lang\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable, Injector} from '@angular/core';\nimport {HttpClient, HttpParams} from \"@angular/common/http\";\nimport {environment} from \"../../environments/environment\";\nimport {AuthenticationService} from \"@ofServices/authentication.service\";\nimport {empty, from, merge, Observable, of, throwError} from \"rxjs\";\nimport {TranslateLoader, TranslateService} from \"@ngx-translate/core\";\nimport {Map} from \"../model/map\";\nimport {catchError, filter, map, reduce, switchMap, tap} from \"rxjs/operators\";\nimport * as _ from 'lodash';\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"../store/index\";\nimport {LightCard} from \"../model/light-card.model\";\nimport {Third, ThirdMenu} from \"@ofModel/thirds.model\";\n\n@Injectable()\nexport class ThirdsService {\n    private thirdsUrl: string;\n    private loaded: string[] = [];\n    private loading: string[] = [];\n    private initiated = false;\n\n    constructor(private httpClient: HttpClient,\n                private authenticationService: AuthenticationService,\n                private store: Store,\n                private $injector: Injector) {\n        this.thirdsUrl = `${environment.urls.thirds}`;\n    }\n\n    fetchHbsTemplate(publisher: string, version: string, name: string, locale: string): Observable {\n        const params = new HttpParams()\n                .set(\"locale\", locale)\n                .set(\"version\", version);\n        return this.httpClient.get(`${this.thirdsUrl}/${publisher}/templates/${name}`,{\n            params,\n            headers: this.authenticationService.getSecurityHeader(),\n            responseType: 'text'\n        })\n    }\n\n    fetchI18nJson(publisher: string, version: string, locales: string[]): Observable> {\n        let previous: Observable;\n        for (let locale of locales) {\n            const params = new HttpParams()\n                .set(\"locale\", locale)\n                .set(\"version\", version);\n            const httpCall = this.httpClient.get(`${this.thirdsUrl}/${publisher}/i18n`, {\n                params,\n                headers: this.authenticationService.getSecurityHeader()\n            }).pipe(\n                map(r => {\n                        const object = {};\n                        object[locale] = {};\n                        object[locale][publisher] = {};\n                        object[locale][publisher][version] = r;\n                        return object;\n                    }\n                ));\n            if (previous) {\n                previous = merge(previous, httpCall);\n            } else {\n                previous = httpCall;\n            }\n        }\n        if (previous == null) {\n            return empty();\n        }\n        const result = previous.pipe(\n            reduce((acc, val) => _.merge(acc,val))\n        );\n\n        return result;\n    }\n\n    computeThirdsMenu(): Observable{\n        return this.httpClient.get(`${this.thirdsUrl}/`, {\n            headers: this.authenticationService.getSecurityHeader()\n        }).pipe(\n            switchMap(ts=>from(ts)),\n            filter((t:Third)=>!(!t.menuEntries)),\n            map(t=>\n                new ThirdMenu(t.name, t.version, t.i18nLabelKey, t.menuEntries)\n            ),\n            reduce((menus:ThirdMenu[],menu:ThirdMenu)=>{\n                menus.push(menu);\n                return menus;\n            },[])\n        );\n    }\n\n    loadI18nForLightCards(cards:LightCard[]){\n        let observable = from(cards).pipe(map(card=> card.publisher + '###' + card.publisherVersion));\n        return this.subscribeToLoadI18n(observable);\n    }\n\n    loadI18nForMenuEntries(menus:ThirdMenu[]){\n        const observable = from(menus).pipe(map(menu=> menu.id + '###' + menu.version));\n        return this.subscribeToLoadI18n(observable);\n    }\n\n    private subscribeToLoadI18n(observable) {\n        return observable\n            .pipe(\n                reduce((ids: string[], id: string) => {\n                    ids.push(id);\n                    return ids;\n                }, []),\n                switchMap((ids:string[]) => {\n                    let work = _.uniq(ids);\n                    work = _.difference(work, this.loading)\n                    return from(_.difference(work, this.loaded))\n                }),\n                switchMap((id: string) => {\n                    this.loading.push(id);\n                    const input = id.split('###');\n                    return this.fetchI18nJson(input[0], input[1], this.translate().getLangs())\n                        .pipe(map(trans => {\n                            console.debug(`translation received for ${id}`);\n                                return {id: id, translation: trans};\n                            }),\n                            catchError(err => {\n                                console.error(`translation error for ${id}`);\n                                _.remove(this.loading, id);\n                                return throwError(err);\n                            })\n                        );\n                }),\n                catchError(error =>{\n                    console.error(error);\n                    return throwError(error);\n                }),\n                reduce((acc, val) => _.merge(acc,val)),\n                map(\n                    (result:any) => {\n                        console.debug(`receiving i18n data`)\n                        for (let lang of this.translate().getLangs()) {\n                            if (result.translation[lang]) {\n                                this.translate().setTranslation(lang, result.translation[lang], true);\n                            }\n                        }\n                        _.remove(this.loading, result.id);\n                        this.loaded.push(result.id);\n                        return true;\n                    }\n                )\n            )\n    }\n\n    private translate(): TranslateService {\n        return this.$injector.get(TranslateService);\n    }\n}\n\nexport class ThirdsI18nLoader implements TranslateLoader {\n\n    constructor(thirdsService: ThirdsService) {}\n\n    getTranslation(lang: string): Observable {\n        return of({});\n    }\n\n}\n\nexport function ThirdsI18nLoaderFactory(thirdsService: ThirdsService): TranslateLoader {\n    return new ThirdsI18nLoader(thirdsService);\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThirdsService.html":{"url":"injectables/ThirdsService.html","title":"injectable - ThirdsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ThirdsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/thirds.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                initiated\n                            \n                            \n                                    Private\n                                loaded\n                            \n                            \n                                    Private\n                                loading\n                            \n                            \n                                    Private\n                                thirdsUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                computeThirdsMenu\n                            \n                            \n                                fetchHbsTemplate\n                            \n                            \n                                fetchI18nJson\n                            \n                            \n                                loadI18nForLightCards\n                            \n                            \n                                loadI18nForMenuEntries\n                            \n                            \n                                    Private\n                                subscribeToLoadI18n\n                            \n                            \n                                    Private\n                                translate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient, authenticationService: AuthenticationService, store: Store, $injector: Injector)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/thirds.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                    AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        $injector\n                                                  \n                                                        \n                                                                    Injector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            computeThirdsMenu\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomputeThirdsMenu()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:81\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchHbsTemplate\n                            \n                            \n                        \n                    \n                \n                \n                    \nfetchHbsTemplate(publisher: string, version: string, name: string, locale: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:36\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publisher\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        version\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        locale\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchI18nJson\n                            \n                            \n                        \n                    \n                \n                \n                    \nfetchI18nJson(publisher: string, version: string, locales: string[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:47\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publisher\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        version\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        locales\n                                                        \n                                                                    string[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadI18nForLightCards\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadI18nForLightCards(cards: LightCard[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:97\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cards\n                                                        \n                                                                    LightCard[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadI18nForMenuEntries\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadI18nForMenuEntries(menus: ThirdMenu[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:102\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        menus\n                                                        \n                                                                    ThirdMenu[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscribeToLoadI18n\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        subscribeToLoadI18n(observable)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:107\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        observable\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            translate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        translate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:155\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     TranslateService\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initiated\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loaded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loading\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            thirdsUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:24\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable, Injector} from '@angular/core';\nimport {HttpClient, HttpParams} from \"@angular/common/http\";\nimport {environment} from \"../../environments/environment\";\nimport {AuthenticationService} from \"@ofServices/authentication.service\";\nimport {empty, from, merge, Observable, of, throwError} from \"rxjs\";\nimport {TranslateLoader, TranslateService} from \"@ngx-translate/core\";\nimport {Map} from \"../model/map\";\nimport {catchError, filter, map, reduce, switchMap, tap} from \"rxjs/operators\";\nimport * as _ from 'lodash';\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"../store/index\";\nimport {LightCard} from \"../model/light-card.model\";\nimport {Third, ThirdMenu} from \"@ofModel/thirds.model\";\n\n@Injectable()\nexport class ThirdsService {\n    private thirdsUrl: string;\n    private loaded: string[] = [];\n    private loading: string[] = [];\n    private initiated = false;\n\n    constructor(private httpClient: HttpClient,\n                private authenticationService: AuthenticationService,\n                private store: Store,\n                private $injector: Injector) {\n        this.thirdsUrl = `${environment.urls.thirds}`;\n    }\n\n    fetchHbsTemplate(publisher: string, version: string, name: string, locale: string): Observable {\n        const params = new HttpParams()\n                .set(\"locale\", locale)\n                .set(\"version\", version);\n        return this.httpClient.get(`${this.thirdsUrl}/${publisher}/templates/${name}`,{\n            params,\n            headers: this.authenticationService.getSecurityHeader(),\n            responseType: 'text'\n        })\n    }\n\n    fetchI18nJson(publisher: string, version: string, locales: string[]): Observable> {\n        let previous: Observable;\n        for (let locale of locales) {\n            const params = new HttpParams()\n                .set(\"locale\", locale)\n                .set(\"version\", version);\n            const httpCall = this.httpClient.get(`${this.thirdsUrl}/${publisher}/i18n`, {\n                params,\n                headers: this.authenticationService.getSecurityHeader()\n            }).pipe(\n                map(r => {\n                        const object = {};\n                        object[locale] = {};\n                        object[locale][publisher] = {};\n                        object[locale][publisher][version] = r;\n                        return object;\n                    }\n                ));\n            if (previous) {\n                previous = merge(previous, httpCall);\n            } else {\n                previous = httpCall;\n            }\n        }\n        if (previous == null) {\n            return empty();\n        }\n        const result = previous.pipe(\n            reduce((acc, val) => _.merge(acc,val))\n        );\n\n        return result;\n    }\n\n    computeThirdsMenu(): Observable{\n        return this.httpClient.get(`${this.thirdsUrl}/`, {\n            headers: this.authenticationService.getSecurityHeader()\n        }).pipe(\n            switchMap(ts=>from(ts)),\n            filter((t:Third)=>!(!t.menuEntries)),\n            map(t=>\n                new ThirdMenu(t.name, t.version, t.i18nLabelKey, t.menuEntries)\n            ),\n            reduce((menus:ThirdMenu[],menu:ThirdMenu)=>{\n                menus.push(menu);\n                return menus;\n            },[])\n        );\n    }\n\n    loadI18nForLightCards(cards:LightCard[]){\n        let observable = from(cards).pipe(map(card=> card.publisher + '###' + card.publisherVersion));\n        return this.subscribeToLoadI18n(observable);\n    }\n\n    loadI18nForMenuEntries(menus:ThirdMenu[]){\n        const observable = from(menus).pipe(map(menu=> menu.id + '###' + menu.version));\n        return this.subscribeToLoadI18n(observable);\n    }\n\n    private subscribeToLoadI18n(observable) {\n        return observable\n            .pipe(\n                reduce((ids: string[], id: string) => {\n                    ids.push(id);\n                    return ids;\n                }, []),\n                switchMap((ids:string[]) => {\n                    let work = _.uniq(ids);\n                    work = _.difference(work, this.loading)\n                    return from(_.difference(work, this.loaded))\n                }),\n                switchMap((id: string) => {\n                    this.loading.push(id);\n                    const input = id.split('###');\n                    return this.fetchI18nJson(input[0], input[1], this.translate().getLangs())\n                        .pipe(map(trans => {\n                            console.debug(`translation received for ${id}`);\n                                return {id: id, translation: trans};\n                            }),\n                            catchError(err => {\n                                console.error(`translation error for ${id}`);\n                                _.remove(this.loading, id);\n                                return throwError(err);\n                            })\n                        );\n                }),\n                catchError(error =>{\n                    console.error(error);\n                    return throwError(error);\n                }),\n                reduce((acc, val) => _.merge(acc,val)),\n                map(\n                    (result:any) => {\n                        console.debug(`receiving i18n data`)\n                        for (let lang of this.translate().getLangs()) {\n                            if (result.translation[lang]) {\n                                this.translate().setTranslation(lang, result.translation[lang], true);\n                            }\n                        }\n                        _.remove(this.loading, result.id);\n                        this.loaded.push(result.id);\n                        return true;\n                    }\n                )\n            )\n    }\n\n    private translate(): TranslateService {\n        return this.$injector.get(TranslateService);\n    }\n}\n\nexport class ThirdsI18nLoader implements TranslateLoader {\n\n    constructor(thirdsService: ThirdsService) {}\n\n    getTranslation(lang: string): Observable {\n        return of({});\n    }\n\n}\n\nexport function ThirdsI18nLoaderFactory(thirdsService: ThirdsService): TranslateLoader {\n    return new ThirdsI18nLoader(thirdsService);\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThirdsServiceMock.html":{"url":"classes/ThirdsServiceMock.html","title":"class - ThirdsServiceMock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThirdsServiceMock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tests/mocks/thirds.service.mock.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                computeThirdsMenu\n                            \n                            \n                                loadI18nForMenuEntries\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            computeThirdsMenu\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomputeThirdsMenu()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/tests/mocks/thirds.service.mock.ts:5\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadI18nForMenuEntries\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadI18nForMenuEntries()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/tests/mocks/thirds.service.mock.ts:14\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Observable, of} from \"rxjs\";\nimport {ThirdMenu, ThirdMenuEntry} from \"@ofModel/thirds.model\";\n\nexport class ThirdsServiceMock {\n    computeThirdsMenu(): Observable{\n        return of([new ThirdMenu('t1', '1', 'tLabel1', [\n            new ThirdMenuEntry('id1', 'label1', 'link1'),\n            new ThirdMenuEntry('id2', 'label2', 'link2'),\n        ]),\n            new ThirdMenu('t2', '1', 'tLabel2', [\n                new ThirdMenuEntry('id3', 'label3', 'link3'),\n            ])])\n    }\n    loadI18nForMenuEntries(){return of(true)}\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimeLineComponent.html":{"url":"components/TimeLineComponent.html","title":"component - TimeLineComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TimeLineComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/components/time-line/time-line.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-time-line\n            \n\n\n\n\n            \n                templateUrl\n                ./time-line.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/components/time-line/time-line.component.ts:14\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/time-line/time-line.component.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'of-time-line',\n  templateUrl: './time-line.component.html',\n})\nexport class TimeLineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  Time Line goes here\n  \n  \n  \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Time Line goes here        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimeLineComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeService.html":{"url":"injectables/TimeService.html","title":"injectable - TimeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/time.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                currentTime\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/time.service.ts:11\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            currentTime\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        currentTime()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/time.service.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TimeService {\n\n  constructor() { }\n\n  public currentTime():number{\n    return Date.now();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/TokenInjector.html":{"url":"interceptors/TokenInjector.html","title":"interceptor - TokenInjector","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  TokenInjector\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/interceptors.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addAuthHeadersIfNecessary\n                            \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/interceptors.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                    AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            addAuthHeadersIfNecessary\n                            \n                            \n                        \n                    \n                \n                \n                    \naddAuthHeadersIfNecessary(request: HttpRequest)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/interceptors.service.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                        \n                                                                    HttpRequest\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     HttpRequest\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intercept\n                            \n                            \n                        \n                    \n                \n                \n                    \nintercept(request: HttpRequest, next: HttpHandler)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/interceptors.service.ts:20\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                        \n                                                                    HttpRequest\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        next\n                                                        \n                                                                    HttpHandler\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {AuthenticationService} from './authentication.service';\n\n@Injectable()\nexport class TokenInjector implements HttpInterceptor {\n    /* istanbul ignore next */\n    constructor(private authenticationService: AuthenticationService) {\n    }\n\n    /* istanbul ignore next */\n    intercept(request: HttpRequest, next: HttpHandler): Observable> {\n        return next.handle(this.addAuthHeadersIfNecessary(request));\n    }\n\n\n    addAuthHeadersIfNecessary(request: HttpRequest): HttpRequest {\n        const url = request.url;\n\n        const notCheckTokenRequest = !(url.endsWith('/auth/check_token') || url.endsWith('/auth/token'));\n        if (notCheckTokenRequest) {\n            const update = {setHeaders: this.authenticationService.getSecurityHeader()};\n            request = request.clone(update);\n        }\n        return request;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TryToLogIn.html":{"url":"classes/TryToLogIn.html","title":"class - TryToLogIn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TryToLogIn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used to push login/password pair to the authentication service\nEmitted by {LoginComponent} in the onSubmit @method which is called\nwhen the user click on the Login button of the login page form.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/authentication.actions.ts:63\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.TryToLogIn\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:63\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\n\nexport enum AuthenticationActionTypes {\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n/**\n * First action dispatch by the application.\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    constructor(public payload: PayloadForSuccessfulAuthentication) {\n    }\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    constructor(public payload: { denialReason: string }) {\n    }\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n     AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TryToLogOut.html":{"url":"classes/TryToLogOut.html","title":"class - TryToLogOut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TryToLogOut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used when the user logout\nEmitted by {NavbarComponent} win the logOut @method which is called\nwhen the user click on the logOut button of the navbar\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.TryToLogOut\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:76\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\n\nexport enum AuthenticationActionTypes {\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n/**\n * First action dispatch by the application.\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    constructor(public payload: PayloadForSuccessfulAuthentication) {\n    }\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    constructor(public payload: { denialReason: string }) {\n    }\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n     AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/components/icon/icon.component.ts\n            \n            component\n            IconComponent\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/app/components/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/components/navbar/navbar.component.ts\n            \n            component\n            NavbarComponent\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/model/card.model.ts\n            \n            class\n            Action\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/card.model.ts\n            \n            class\n            Card\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/card.model.ts\n            \n            class\n            CardDetail\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/card.model.ts\n            \n            class\n            Input\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/card.model.ts\n            \n            class\n            ParameterListItem\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/feed-filter.model.ts\n            \n            class\n            Filter\n            \n                50 %\n                (4/8)\n            \n        \n        \n            \n                \n                src/app/model/i18n.model.ts\n            \n            class\n            I18n\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/map.ts\n            \n            class\n            Map\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/model/thirds.model.ts\n            \n            class\n            Third\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/thirds.model.ts\n            \n            class\n            ThirdMenu\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/thirds.model.ts\n            \n            class\n            ThirdMenuEntry\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/modules/archives/archives.component.ts\n            \n            component\n            ArchivesComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/modules/cards/components/card-details/card-details.component.ts\n            \n            component\n            CardDetailsComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/modules/cards/components/card/card.component.ts\n            \n            component\n            CardComponent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/modules/cards/components/detail/detail.component.ts\n            \n            component\n            DetailComponent\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/modules/cards/components/details/details.component.ts\n            \n            component\n            DetailsComponent\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/modules/cards/services/handlebars.service.ts\n            \n            injectable\n            HandlebarsService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/app/modules/cards/services/handlebars.service.ts\n            \n            function\n            sortOnKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/modules/feed/components/card-list/card-list.component.ts\n            \n            component\n            CardListComponent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/modules/feed/components/no-selection/no-selection.component.ts\n            \n            component\n            NoSelectionComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/modules/feed/components/time-line/time-line.component.ts\n            \n            component\n            TimeLineComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/modules/feed/feed.component.ts\n            \n            component\n            FeedComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/services/authentication.service.ts\n            \n            class\n            AuthObject\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/services/authentication.service.ts\n            \n            class\n            CheckTokenResponse\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/services/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                src/app/services/authentication.service.ts\n            \n            function\n            isInTheFuture\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/services/authentication.service.ts\n            \n            variable\n            ONE_SECOND\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/services/card.service.ts\n            \n            injectable\n            CardService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/services/guid.service.ts\n            \n            class\n            GuidService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/services/interceptors.service.ts\n            \n            interceptor\n            TokenInjector\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/services/thirds.service.ts\n            \n            class\n            ThirdsI18nLoader\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/services/thirds.service.ts\n            \n            injectable\n            ThirdsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/app/services/thirds.service.ts\n            \n            function\n            ThirdsI18nLoaderFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/services/time.service.ts\n            \n            injectable\n            TimeService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            AcceptLogIn\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            AcceptLogOut\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            AcceptLogOutSuccess\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            CheckAuthenticationStatus\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            PayloadForSuccessfulAuthentication\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            RejectLogIn\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            TryToLogIn\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            TryToLogOut\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/store/actions/card.actions.ts\n            \n            class\n            HandleUnexpectedError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/card.actions.ts\n            \n            class\n            LoadCard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/card.actions.ts\n            \n            class\n            LoadCardFailure\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/card.actions.ts\n            \n            class\n            LoadCardSuccess\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/feed.actions.ts\n            \n            class\n            ApplyFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/feed.actions.ts\n            \n            class\n            InitFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            AddLightCardFailure\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            HandleUnexpectedError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            LoadLightCards\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            LoadLightCardsExtendedData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            LoadLightCardsFailure\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            LoadLightCardsSuccess\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            SelectLightCard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/menu.actions.ts\n            \n            class\n            HandleUnexpectedError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/menu.actions.ts\n            \n            class\n            LoadMenu\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/actions/menu.actions.ts\n            \n            class\n            LoadMenuFailure\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/menu.actions.ts\n            \n            class\n            LoadMenuSuccess\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/effects/authentication.effects.ts\n            \n            injectable\n            AuthenticationEffects\n            \n                66 %\n                (6/9)\n            \n        \n        \n            \n                \n                src/app/store/effects/card-operation.effects.ts\n            \n            injectable\n            CardOperationEffects\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/effects/card.effects.ts\n            \n            injectable\n            CardEffects\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/effects/custom-router.effects.ts\n            \n            injectable\n            CustomRouterEffects\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/effects/light-card.effects.ts\n            \n            injectable\n            LightCardEffects\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/effects/menu.effects.ts\n            \n            injectable\n            MenuEffects\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/index.ts\n            \n            interface\n            AppState\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/store/index.ts\n            \n            variable\n            appEffects\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/index.ts\n            \n            variable\n            appMetaReducers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/index.ts\n            \n            variable\n            appReducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/index.ts\n            \n            variable\n            storeConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            variable\n            getExpirationDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            variable\n            getExpirationTime\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            variable\n            getIdentifier\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            variable\n            getToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            variable\n            UTC_beginning_time\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/card.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/card.reducer.ts\n            \n            variable\n            getSelectedId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/light-card.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/menu.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/menu.reducer.ts\n            \n            variable\n            getSelectedId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/authentication.selectors.ts\n            \n            variable\n            selectAuthenticationState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/authentication.selectors.ts\n            \n            variable\n            selectExpirationTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/card.selectors.ts\n            \n            variable\n            selectCardState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/card.selectors.ts\n            \n            variable\n            selectCardStateSelection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/card.selectors.ts\n            \n            variable\n            selectCardStateSelectionDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectActiveFiltersArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectFilter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectFilteredFeed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectLastCards\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectLightCardSelection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectLightCardsState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/menu.selectors.ts\n            \n            variable\n            selectMenuState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/menu.selectors.ts\n            \n            variable\n            selectMenuStateMenu\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/router.selectors.ts\n            \n            variable\n            selectCurrentUrl\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/router.selectors.ts\n            \n            variable\n            selectRouterState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/authentication.state.ts\n            \n            interface\n            AuthState\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/store/states/authentication.state.ts\n            \n            variable\n            authInitialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/card.state.ts\n            \n            interface\n            CardState\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/states/card.state.ts\n            \n            variable\n            cardInitialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/feed.state.ts\n            \n            interface\n            CardFeedState\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/store/states/feed.state.ts\n            \n            function\n            sortByStartDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/feed.state.ts\n            \n            variable\n            feedInitialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/feed.state.ts\n            \n            variable\n            LightCardAdapter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/menu.state.ts\n            \n            interface\n            MenuState\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/states/menu.state.ts\n            \n            variable\n            menuInitialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/router.state.ts\n            \n            class\n            CustomRouterStateSerializer\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/states/router.state.ts\n            \n            class\n            RouterStateUrl\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/store/states/router.state.ts\n            \n            variable\n            initialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/translate.config.ts\n            \n            function\n            HttpLoaderFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/translate.config.ts\n            \n            variable\n            i18nPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/translate.config.ts\n            \n            variable\n            prodI18nPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/translate.config.ts\n            \n            variable\n            translateConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            context\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            require\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            appendFixedLengthAlphanumericValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            forcePositiveAndOneMinimum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            generateRandomPositiveIntegerWithinRangeWithOneAsMinimum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getFixedLengthAlphanumericValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getOneRandomAddCardOperation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getOneRandomCard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getOneRandomLigthCard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getPositiveRandomNumberWithinRange\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getRandomAlphanumericValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getRandomI18nData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getRandomMenu\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getRandomThird\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getSeveralRandomLightCards\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            handleMaxAgainstMin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/mocks/thirds.service.mock.ts\n            \n            class\n            ThirdsServiceMock\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^7.2.2\n        \n            @angular/common : ^7.2.2\n        \n            @angular/compiler : ^7.2.2\n        \n            @angular/core : ^7.2.2\n        \n            @angular/forms : ^7.2.2\n        \n            @angular/http : ^7.2.2\n        \n            @angular/platform-browser : ^7.2.2\n        \n            @angular/platform-browser-dynamic : ^7.2.2\n        \n            @angular/router : ^7.2.2\n        \n            @ng-bootstrap/ng-bootstrap : ^4.0.0\n        \n            @ngrx/effects : ^7.1.0\n        \n            @ngrx/entity : ^7.1.0\n        \n            @ngrx/router-store : ^7.1.0\n        \n            @ngrx/store : ^7.1.0\n        \n            @ngrx/store-devtools : ^7.1.0\n        \n            @ngx-translate/core : ^11.0.1\n        \n            @ngx-translate/http-loader : ^4.0.0\n        \n            bootstrap : ^4.2.1\n        \n            core-js : ^2.6.3\n        \n            font-awesome : ^4.7.0\n        \n            guid-typescript : ^1.0.9\n        \n            handlebars : ^4.0.12\n        \n            lodash : ^4.17.11\n        \n            moment : ^2.24.0\n        \n            ng-event-source : ^1.0.14\n        \n            ngrx-router : ^2.0.1\n        \n            rxjs : ^6.3.3\n        \n            svg-pan-zoom : ^3.6.0\n        \n            tslib : ^1.9.3\n        \n            zone.js : ^0.8.29\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActionType   (src/.../card.model.ts)\n                        \n                        \n                            AuthenticationActionTypes   (src/.../authentication.actions.ts)\n                        \n                        \n                            CardActionTypes   (src/.../card.actions.ts)\n                        \n                        \n                            CardOperationType   (src/.../card-operation.model.ts)\n                        \n                        \n                            FeedActionTypes   (src/.../feed.actions.ts)\n                        \n                        \n                            InputType   (src/.../card.model.ts)\n                        \n                        \n                            LightCardActionTypes   (src/.../light-card.actions.ts)\n                        \n                        \n                            LocalStorageAuthContent   (src/.../authentication.service.ts)\n                        \n                        \n                            MenuActionTypes   (src/.../menu.actions.ts)\n                        \n                        \n                            Severity   (src/.../light-card.model.ts)\n                        \n                        \n                            Sound   (src/.../light-card.model.ts)\n                        \n                        \n                            TitlePosition   (src/.../card.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/model/card.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ActionType\n                    \n                \n                        \n                            \n                                 EXTERNAL\n                            \n                        \n                        \n                            \n                                 JNLP\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        InputType\n                    \n                \n                        \n                            \n                                 TEXT\n                            \n                        \n                        \n                            \n                                 LIST\n                            \n                        \n                        \n                            \n                                 LIST_RADIO\n                            \n                        \n                        \n                            \n                                 SWITCH_LIST\n                            \n                        \n                        \n                            \n                                 LONGTEXT\n                            \n                        \n                        \n                            \n                                 BOOLEAN\n                            \n                        \n                        \n                            \n                                 STATIC\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TitlePosition\n                    \n                \n                        \n                            \n                                 UP\n                            \n                        \n                        \n                            \n                                 DOWN\n                            \n                        \n                        \n                            \n                                 NONE\n                            \n                        \n            \n        \n\n    src/app/store/actions/authentication.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthenticationActionTypes\n                    \n                \n                        \n                            \n                                 CheckAuthenticationStatus\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Check Authentication Status\n                            \n                        \n                        \n                            \n                                 AcceptLogIn\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Accept the user log in attempt\n                            \n                        \n                        \n                            \n                                 RejectLogIn\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Reject the user log in attempt\n                            \n                        \n                        \n                            \n                                 TryToLogIn\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Try to log the user in\n                            \n                        \n                        \n                            \n                                 TryToLogOut\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Try to log the user out\n                            \n                        \n                        \n                            \n                                 AcceptLogOut\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Accept the user log out attempt\n                            \n                        \n                        \n                            \n                                 AcceptLogOutSuccess\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Success Accept the user log out attempt\n                            \n                        \n            \n        \n\n    src/app/store/actions/card.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        CardActionTypes\n                    \n                \n                        \n                            \n                                 LoadCard\n                            \n                        \n                        \n                            \n                                Value : [Card] Load Card\n                            \n                        \n                        \n                            \n                                 LoadCardSuccess\n                            \n                        \n                        \n                            \n                                Value : [Card] Load Card Success\n                            \n                        \n                        \n                            \n                                 LoadCardFailure\n                            \n                        \n                        \n                            \n                                Value : [Card] Load Card Fail\n                            \n                        \n                        \n                            \n                                 HandleUnexpectedError\n                            \n                        \n                        \n                            \n                                Value : [Card] Handle unexpected error related to authentication issue\n                            \n                        \n            \n        \n\n    src/app/model/card-operation.model.ts\n    \n        \n            \n                \n                    \n                        \n                        CardOperationType\n                    \n                \n                        \n                            \n                                 ADD\n                            \n                        \n                        \n                            \n                                Value : ADD\n                            \n                        \n                        \n                            \n                                 UPDATE\n                            \n                        \n                        \n                            \n                                Value : UPDATE\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n            \n        \n\n    src/app/store/actions/feed.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        FeedActionTypes\n                    \n                \n                        \n                            \n                                 ApplyFilter\n                            \n                        \n                        \n                            \n                                Value : [Feed] Change filter Status\n                            \n                        \n                        \n                            \n                                 InitFilter\n                            \n                        \n                        \n                            \n                                Value : [Feed] Init filter\n                            \n                        \n            \n        \n\n    src/app/store/actions/light-card.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        LightCardActionTypes\n                    \n                \n                        \n                            \n                                 LoadLightCards\n                            \n                        \n                        \n                            \n                                Value : [LCard] Load\n                            \n                        \n                        \n                            \n                                 LoadLightCardsSuccess\n                            \n                        \n                        \n                            \n                                Value : [LCard] Load Success\n                            \n                        \n                        \n                            \n                                 LoadLightCardsExtendedData\n                            \n                        \n                        \n                            \n                                Value : [LCard] Load Extended Data\n                            \n                        \n                        \n                            \n                                 LoadLightCardsFailure\n                            \n                        \n                        \n                            \n                                Value : [LCard] Load Fail\n                            \n                        \n                        \n                            \n                                 SelectLightCard\n                            \n                        \n                        \n                            \n                                Value : [LCard] Select One\n                            \n                        \n                        \n                            \n                                 AddLightCardFailure\n                            \n                        \n                        \n                            \n                                Value : [LCard] Add Light Card Fail\n                            \n                        \n                        \n                            \n                                 HandleUnexpectedError\n                            \n                        \n                        \n                            \n                                Value : [LCard] Handle unexpected error related to authentication issue\n                            \n                        \n            \n        \n\n    src/app/services/authentication.service.ts\n    \n        \n            \n                \n                    \n                        \n                        LocalStorageAuthContent\n                    \n                \n                        \n                            \n                                 token\n                            \n                        \n                        \n                            \n                                Value : token\n                            \n                        \n                        \n                            \n                                 expirationDate\n                            \n                        \n                        \n                            \n                                Value : expirationDate\n                            \n                        \n                        \n                            \n                                 identifier\n                            \n                        \n                        \n                            \n                                Value : identifier\n                            \n                        \n                        \n                            \n                                 clientId\n                            \n                        \n                        \n                            \n                                Value : clientId\n                            \n                        \n            \n        \n\n    src/app/store/actions/menu.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        MenuActionTypes\n                    \n                \n                        \n                            \n                                 LoadMenu\n                            \n                        \n                        \n                            \n                                Value : [Menu] Load Menu\n                            \n                        \n                        \n                            \n                                 LoadMenuSuccess\n                            \n                        \n                        \n                            \n                                Value : [Menu] Load Menu Success\n                            \n                        \n                        \n                            \n                                 LoadMenuFailure\n                            \n                        \n                        \n                            \n                                Value : [Menu] Load Menu Fail\n                            \n                        \n                        \n                            \n                                 HandleUnexpectedError\n                            \n                        \n                        \n                            \n                                Value : [Menu] Handle unexpected error\n                            \n                        \n            \n        \n\n    src/app/model/light-card.model.ts\n    \n        \n            \n                \n                    \n                        \n                        Severity\n                    \n                \n                        \n                            \n                                 ALARM\n                            \n                        \n                        \n                            \n                                 ACTION\n                            \n                        \n                        \n                            \n                                 NOTIFICATION\n                            \n                        \n                        \n                            \n                                 QUESTION\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Sound\n                    \n                \n                        \n                            \n                                 NOTIFICATION\n                            \n                        \n                        \n                            \n                                 QUESTION\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appendFixedLengthAlphanumericValue   (src/.../helpers.ts)\n                        \n                        \n                            forcePositiveAndOneMinimum   (src/.../helpers.ts)\n                        \n                        \n                            generateRandomPositiveIntegerWithinRangeWithOneAsMinimum   (src/.../helpers.ts)\n                        \n                        \n                            getFixedLengthAlphanumericValue   (src/.../helpers.ts)\n                        \n                        \n                            getOneRandomAddCardOperation   (src/.../helpers.ts)\n                        \n                        \n                            getOneRandomCard   (src/.../helpers.ts)\n                        \n                        \n                            getOneRandomLigthCard   (src/.../helpers.ts)\n                        \n                        \n                            getPositiveRandomNumberWithinRange   (src/.../helpers.ts)\n                        \n                        \n                            getRandomAlphanumericValue   (src/.../helpers.ts)\n                        \n                        \n                            getRandomI18nData   (src/.../helpers.ts)\n                        \n                        \n                            getRandomMenu   (src/.../helpers.ts)\n                        \n                        \n                            getRandomThird   (src/.../helpers.ts)\n                        \n                        \n                            getSeveralRandomLightCards   (src/.../helpers.ts)\n                        \n                        \n                            handleMaxAgainstMin   (src/.../helpers.ts)\n                        \n                        \n                            HttpLoaderFactory   (src/.../translate.config.ts)\n                        \n                        \n                            isInTheFuture   (src/.../authentication.service.ts)\n                        \n                        \n                            reducer   (src/.../authentication.reducer.ts)\n                        \n                        \n                            reducer   (src/.../card.reducer.ts)\n                        \n                        \n                            reducer   (src/.../light-card.reducer.ts)\n                        \n                        \n                            reducer   (src/.../menu.reducer.ts)\n                        \n                        \n                            sortByStartDate   (src/.../feed.state.ts)\n                        \n                        \n                            sortOnKey   (src/.../handlebars.service.ts)\n                        \n                        \n                            ThirdsI18nLoaderFactory   (src/.../thirds.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/tests/helpers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            appendFixedLengthAlphanumericValue\n                            \n                            \n                        \n                    \n                \n                \n                    \nappendFixedLengthAlphanumericValue(length: number, base: string)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        length\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        base\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            forcePositiveAndOneMinimum\n                            \n                            \n                        \n                    \n                \n                \n                    \nforcePositiveAndOneMinimum(min)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        min\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            generateRandomPositiveIntegerWithinRangeWithOneAsMinimum\n                            \n                            \n                        \n                    \n                \n                \n                    \ngenerateRandomPositiveIntegerWithinRangeWithOneAsMinimum(min: number, max: number)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        min\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        max\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getFixedLengthAlphanumericValue\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetFixedLengthAlphanumericValue(length: number)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        length\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getOneRandomAddCardOperation\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetOneRandomAddCardOperation()\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                Returns :     CardOperation\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getOneRandomCard\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetOneRandomCard(card?: any)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        card\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Card\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getOneRandomLigthCard\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetOneRandomLigthCard(card?: any)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        card\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     LightCard\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getPositiveRandomNumberWithinRange\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetPositiveRandomNumberWithinRange(min: number, max?)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        min\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        max\n                                                        \n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getRandomAlphanumericValue\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetRandomAlphanumericValue(min: number, max?)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        min\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        max\n                                                        \n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getRandomI18nData\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetRandomI18nData()\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                Returns :     I18n\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getRandomMenu\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetRandomMenu()\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                Returns :     ThirdMenu[]\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getRandomThird\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetRandomThird()\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                Returns :     Third[]\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getSeveralRandomLightCards\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetSeveralRandomLightCards(numberOfCards: number)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        numberOfCards\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     LightCard[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            handleMaxAgainstMin\n                            \n                            \n                        \n                    \n                \n                \n                    \nhandleMaxAgainstMin(min, max)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        min\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        max\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    src/app/translate.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            HttpLoaderFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nHttpLoaderFactory(http)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    src/app/services/authentication.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            isInTheFuture\n                            \n                            \n                        \n                    \n                \n                \n                    \nisInTheFuture(time)\n                    \n                \n\n\n\n\n                \n                    \n                            helper @method to confirm or not if the number corresponding to a given time is in the futur regarding the present\nmoment.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        time\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \na number corresponding to an UTC time to test\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    true if time is in the future regarding the present moment, false otherwise\n\n                                \n                    \n                \n            \n        \n\n    src/app/store/reducers/authentication.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            reducer\n                            \n                            \n                        \n                    \n                \n                \n                    \nreducer(state, action)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        action\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     AuthState\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n    src/app/store/reducers/card.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            reducer\n                            \n                            \n                        \n                    \n                \n                \n                    \nreducer(state, action)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        action\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     CardState\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n    src/app/store/reducers/light-card.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            reducer\n                            \n                            \n                        \n                    \n                \n                \n                    \nreducer(state, action)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        action\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     CardFeedState\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n    src/app/store/reducers/menu.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            reducer\n                            \n                            \n                        \n                    \n                \n                \n                    \nreducer(state, action)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        action\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     MenuState\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n    src/app/store/states/feed.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            sortByStartDate\n                            \n                            \n                        \n                    \n                \n                \n                    \nsortByStartDate(card1, card2)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        card1\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        card2\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    src/app/modules/cards/services/handlebars.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            sortOnKey\n                            \n                            \n                        \n                    \n                \n                \n                    \nsortOnKey(key)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        key\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    src/app/services/thirds.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ThirdsI18nLoaderFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nThirdsI18nLoaderFactory(thirdsService)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        thirdsService\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TranslateLoader\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nOperatorFabric Core User Interface\nThis project was partially generated with Angular CLI version 6.0.8. \nnote :\n\nIn the following document the variable declared as OPERATOR_FABRIC_CORE_HOME is the root folder of the opertaor fabric core project.\nThe CLI acronym stand for Command Line Interface.\nThe SPA acronym stand for Single Page Application.\nThe OS acronym stand for Operating System.\n\nRun\nLinux\nAfter launching docker containers, use the following command line $OPERATOR_FABRIC_HOME/bin/run_all.sh start to run the application. Once the whole application is ready, you have at least the following kind of message in your terminal :\n##########################################################\nStarting client-gateway-cloud-service, debug port: 5008\n##########################################################\npid file: $OPERTAOR_FABRIC_HOME/services/infra/client-gateway/build/PIDFILE\nStarted with pid: 7479\n\n##########################################################\nStarting users-business-service, debug port: 5009\n##########################################################\npid file: $OPERTAOR_FABRIC_HOME/services/core/users/build/PIDFILE\nStarted with pid: 7483\n\n##########################################################\nStarting time-business-service, debug port: 5010\n##########################################################\npid file: $OPERTAOR_FABRIC_HOME/services/core/time/build/PIDFILE\nStarted with pid: 7488\n\n##########################################################\nStarting cards-consultation-business-service, debug port: 5011\n##########################################################\npid file: $OPERTAOR_FABRIC_HOME/services/core/cards-consultation/build/PIDFILE\nStarted with pid: 7493\n\n##########################################################\nStarting cards-publication-business-service, debug port: 5012\n##########################################################\npid file: $OPERTAOR_FABRIC_HOME/services/core/cards-publication/build/PIDFILEWait a few moments before trying to connect to the SPA, leaving time for the client-gateway to boot up completely. \nThe SPA, on a local machine, is available at the following Url: http://localhost:2002/ui/.\nTo log in you need to use a valid user. Currently you need to use a connection pair define in $OPERATOR_FABRIC_HOME/services/infra/auth/src/main/java/org/lfenergy/operatorfabric/auth/config/WebSecurityConfiguration.java. It could be admin with test, for example.\nTo test the reception of cards, you can use the following script to create fake ones:\n$OPERTAOR_FABRIC_HOME/services/core/cards-publication/src/main/bin/push_cards_loop.shOnce, logged in, with that script running in background, you should be able to see some cards displayed in http://localhost:2002/ui/feed.\nWindows\nNo script helpers provided for this OS. \nBuild\nRun ng build to build the project. The build artifacts will be stored in :\n$OPERATOR_FABRIC_CORE_HOME/services/web/web-ui/build/src/generated/resources/staticTest\nStandalone tests\nRun in the $OPERTAOR_FABRIC_HOME/ui/main directory the command ng test --watch=false to execute the unit tests based on Jasmine using Karma to drive the browser.\nTest during UI development\n\nif the RabittMQ and MongoDB docker containers are not not running, launch them;\nset your environment variables with . $OPERTAOR_FABRIC_HOME/bin/load_environment_light.sh;\nrun the micro services using the same command as earlier: $OPERTAOR_FABRIC_HOME/bin/run_all.sh start;\nif needed, enable a card-operation test flow using the script $OPERTAOR_FABRIC_HOME/service/core/cards-publication/src/main/bin/push_cards_loop.sh;\nlaunch an angular server with the command: ng serve;\ntest your changes in your browser using this url: http://localhost:4200 which leads to http://localhost:4200/#/feed.\n\nKnown Bugs\nLogin Page\n\nno error message displayed on wrong identication;\n\nLight Card flow\n\nnot unsuscribe on logout;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArchivesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArchivesRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CardsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FeedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FeedRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ServicesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StateModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_ArchivesModule\n\n\n\ncluster_ArchivesModule_declarations\n\n\n\ncluster_ArchivesModule_imports\n\n\n\ncluster_CardsModule\n\n\n\ncluster_CardsModule_declarations\n\n\n\ncluster_CardsModule_exports\n\n\n\ncluster_CardsModule_providers\n\n\n\ncluster_FeedModule\n\n\n\ncluster_FeedModule_declarations\n\n\n\ncluster_FeedModule_imports\n\n\n\ncluster_FeedModule_exports\n\n\n\ncluster_ServicesModule\n\n\n\ncluster_ServicesModule_providers\n\n\n\ncluster_StateModule\n\n\n\ncluster_StateModule_imports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nIconComponent\n\nIconComponent\n\nAppModule -->\n\nIconComponent->AppModule\n\n\n\n\n\nLoginComponent\n\nLoginComponent\n\nAppModule -->\n\nLoginComponent->AppModule\n\n\n\n\n\nNavbarComponent\n\nNavbarComponent\n\nAppModule -->\n\nNavbarComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nServicesModule\n\nServicesModule\n\nAppModule -->\n\nServicesModule->AppModule\n\n\n\n\n\nStateModule\n\nStateModule\n\nAppModule -->\n\nStateModule->AppModule\n\n\n\n\n\nArchivesComponent\n\nArchivesComponent\n\n\n\nArchivesModule\n\nArchivesModule\n\nArchivesModule -->\n\nArchivesComponent->ArchivesModule\n\n\n\n\n\nArchivesRoutingModule\n\nArchivesRoutingModule\n\nArchivesModule -->\n\nArchivesRoutingModule->ArchivesModule\n\n\n\n\n\nCardComponent\n\nCardComponent\n\n\n\nCardsModule\n\nCardsModule\n\nCardsModule -->\n\nCardComponent->CardsModule\n\n\n\n\n\nCardDetailsComponent\n\nCardDetailsComponent\n\nCardsModule -->\n\nCardDetailsComponent->CardsModule\n\n\n\n\n\nDetailComponent\n\nDetailComponent\n\nCardsModule -->\n\nDetailComponent->CardsModule\n\n\n\n\n\nDetailsComponent\n\nDetailsComponent\n\nCardsModule -->\n\nDetailsComponent->CardsModule\n\n\n\n\n\nCardComponent \n\nCardComponent \n\nCardComponent  -->\n\nCardsModule->CardComponent \n\n\n\n\n\nCardDetailsComponent \n\nCardDetailsComponent \n\nCardDetailsComponent  -->\n\nCardsModule->CardDetailsComponent \n\n\n\n\n\nDetailComponent \n\nDetailComponent \n\nDetailComponent  -->\n\nCardsModule->DetailComponent \n\n\n\n\n\nDetailsComponent \n\nDetailsComponent \n\nDetailsComponent  -->\n\nCardsModule->DetailsComponent \n\n\n\n\n\nFeedModule\n\nFeedModule\n\nFeedModule -->\n\nCardsModule->FeedModule\n\n\n\n\n\nHandlebarsService\n\nHandlebarsService\n\nCardsModule -->\n\nHandlebarsService->CardsModule\n\n\n\n\n\nCardListComponent\n\nCardListComponent\n\nFeedModule -->\n\nCardListComponent->FeedModule\n\n\n\n\n\nFeedComponent\n\nFeedComponent\n\nFeedModule -->\n\nFeedComponent->FeedModule\n\n\n\n\n\nNoSelectionComponent\n\nNoSelectionComponent\n\nFeedModule -->\n\nNoSelectionComponent->FeedModule\n\n\n\n\n\nTimeLineComponent\n\nTimeLineComponent\n\nFeedModule -->\n\nTimeLineComponent->FeedModule\n\n\n\n\n\nFeedComponent \n\nFeedComponent \n\nFeedComponent  -->\n\nFeedModule->FeedComponent \n\n\n\n\n\nFeedRoutingModule\n\nFeedRoutingModule\n\nFeedModule -->\n\nFeedRoutingModule->FeedModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nServicesModule -->\n\nAuthenticationService->ServicesModule\n\n\n\n\n\nCardService\n\nCardService\n\nServicesModule -->\n\nCardService->ServicesModule\n\n\n\n\n\nThirdsService\n\nThirdsService\n\nServicesModule -->\n\nThirdsService->ServicesModule\n\n\n\n\n\nTimeService\n\nTimeService\n\nServicesModule -->\n\nTimeService->ServicesModule\n\n\n\n\n\nTokenInjector\n\nTokenInjector\n\nServicesModule -->\n\nTokenInjector->ServicesModule\n\n\n\n\n\n!environment\n\n!environment\n\nStateModule -->\n\n!environment->StateModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    13 Components\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    43 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        16 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthenticationActions   (src/.../authentication.actions.ts)\n                        \n                        \n                            CardActions   (src/.../card.actions.ts)\n                        \n                        \n                            FeedActions   (src/.../feed.actions.ts)\n                        \n                        \n                            LightCardActions   (src/.../light-card.actions.ts)\n                        \n                        \n                            MenuActions   (src/.../menu.actions.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/store/actions/authentication.actions.ts\n    \n    \n        \n            \n                \n                    \n                    AuthenticationActions\n                \n            \n            \n                \n                        AcceptLogIn | RejectLogIn | TryToLogIn | TryToLogOut | CheckAuthenticationStatus | AcceptLogOut | AcceptLogOutSuccess\n\n                \n            \n        \n    \n    src/app/store/actions/card.actions.ts\n    \n    \n        \n            \n                \n                    \n                    CardActions\n                \n            \n            \n                \n                        LoadCard | LoadCardSuccess | LoadCardFailure | HandleUnexpectedError\n\n                \n            \n        \n    \n    src/app/store/actions/feed.actions.ts\n    \n    \n        \n            \n                \n                    \n                    FeedActions\n                \n            \n            \n                \n                        InitFilter | ApplyFilter\n\n                \n            \n        \n    \n    src/app/store/actions/light-card.actions.ts\n    \n    \n        \n            \n                \n                    \n                    LightCardActions\n                \n            \n            \n                \n                        LoadLightCards | LoadLightCardsSuccess | LoadLightCardsFailure | SelectLightCard | AddLightCardFailure | HandleUnexpectedError\n\n                \n            \n        \n    \n    src/app/store/actions/menu.actions.ts\n    \n    \n        \n            \n                \n                    \n                    MenuActions\n                \n            \n            \n                \n                        LoadMenu | LoadMenuSuccess | LoadMenuFailure | HandleUnexpectedError\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appEffects   (src/.../index.ts)\n                        \n                        \n                            appMetaReducers   (src/.../index.ts)\n                        \n                        \n                            appReducer   (src/.../index.ts)\n                        \n                        \n                            authInitialState   (src/.../authentication.state.ts)\n                        \n                        \n                            cardInitialState   (src/.../card.state.ts)\n                        \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            feedInitialState   (src/.../feed.state.ts)\n                        \n                        \n                            getExpirationDate   (src/.../authentication.reducer.ts)\n                        \n                        \n                            getExpirationTime   (src/.../authentication.reducer.ts)\n                        \n                        \n                            getIdentifier   (src/.../authentication.reducer.ts)\n                        \n                        \n                            getSelectedId   (src/.../menu.reducer.ts)\n                        \n                        \n                            getSelectedId   (src/.../card.reducer.ts)\n                        \n                        \n                            getToken   (src/.../authentication.reducer.ts)\n                        \n                        \n                            i18nPath   (src/.../translate.config.ts)\n                        \n                        \n                            initialState   (src/.../router.state.ts)\n                        \n                        \n                            LightCardAdapter   (src/.../feed.state.ts)\n                        \n                        \n                            menuInitialState   (src/.../menu.state.ts)\n                        \n                        \n                            ONE_SECOND   (src/.../authentication.service.ts)\n                        \n                        \n                            prodI18nPath   (src/.../translate.config.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                        \n                               (src/.../feed.selectors.ts)\n                        \n                        \n                            selectActiveFiltersArray   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectAuthenticationState   (src/.../authentication.selectors.ts)\n                        \n                        \n                            selectCardState   (src/.../card.selectors.ts)\n                        \n                        \n                            selectCardStateSelection   (src/.../card.selectors.ts)\n                        \n                        \n                            selectCardStateSelectionDetails   (src/.../card.selectors.ts)\n                        \n                        \n                            selectCurrentUrl   (src/.../router.selectors.ts)\n                        \n                        \n                            selectExpirationTime   (src/.../authentication.selectors.ts)\n                        \n                        \n                            selectFilter   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectFilteredFeed   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectLastCards   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectLightCardSelection   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectLightCardsState   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectMenuState   (src/.../menu.selectors.ts)\n                        \n                        \n                            selectMenuStateMenu   (src/.../menu.selectors.ts)\n                        \n                        \n                            selectRouterState   (src/.../router.selectors.ts)\n                        \n                        \n                            storeConfig   (src/.../index.ts)\n                        \n                        \n                            translateConfig   (src/.../translate.config.ts)\n                        \n                        \n                            UTC_beginning_time   (src/.../authentication.reducer.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/store/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            appEffects\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    CardEffects,\n    CardOperationEffects,\n    RouterEffects,\n    CustomRouterEffects,\n    AuthenticationEffects,\n    MenuEffects,\n    LightCardEffects]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            appMetaReducers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MetaReducer[]\n\n                        \n                    \n                    \n                        \n                            Default value : !environment.production\n    ? [storeFreeze]\n    : []\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            appReducer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ActionReducerMap\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    router: fromRouter.routerReducer,\n    feed: lightCardReducer,\n    authentication: authenticationReducer,\n    card: cardReducer,\n    menu: menuReducer\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            storeConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    metaReducers: appMetaReducers,\n    // initialState: {\n    //     router: routerInitialState,\n    // }\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/authentication.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            authInitialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     AuthState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    identifier: null,\n    clientId: null,\n    token: null,\n    expirationDate: new Date(0),\n    denialReason: null\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/card.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cardInitialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CardState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    selected: null,\n    loading: false,\n    error: null\n}\n                        \n                    \n\n\n            \n        \n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true,\n    urls: {\n        authentication: '',\n        auth: '/auth',\n        cards: '/cards',\n        archives : '',\n        thirds: '/thirds'\n    }\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false,\n    urls: {\n      authentication: '',\n        auth: 'http://localhost:2002/auth',\n        cards: 'http://localhost:2002/cards',\n        archives : '',\n        thirds: 'http://localhost:2002/thirds'\n    }\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/feed.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            feedInitialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CardFeedState\n\n                        \n                    \n                    \n                        \n                            Default value : LightCardAdapter.getInitialState(\n    {\n        selectedCardId: null,\n        lastCards: [],\n        loading: false,\n        error: '',\n        filters: new Map()\n    })\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LightCardAdapter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EntityAdapter\n\n                        \n                    \n                    \n                        \n                            Default value : createEntityAdapter({\n    sortComparer:sortByStartDate\n})\n                        \n                    \n\n\n            \n        \n\n    src/app/store/reducers/authentication.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getExpirationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: AuthState) => state.expirationDate\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getExpirationTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: AuthState) => {\n    const expirationDate = getExpirationDate(state);\n    const token = getToken(state);\n    if (token && expirationDate) {\n        return expirationDate.getTime();\n    } else {\n        return UTC_beginning_time;\n    }\n}\n                        \n                    \n\n                \n                    \n                        return the stored expiration time otherwise the beginning\nof the UTC time which should be always in the past.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getIdentifier\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: AuthState) => state.identifier\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: AuthState) => state.token\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            UTC_beginning_time\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n\n\n            \n        \n\n    src/app/store/reducers/menu.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getSelectedId\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: CardFeedState) => state.selectedCardId\n                        \n                    \n\n\n            \n        \n\n    src/app/store/reducers/card.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getSelectedId\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: CardFeedState) => state.selectedCardId\n                        \n                    \n\n\n            \n        \n\n    src/app/translate.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            i18nPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"/assets/i18n/\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            prodI18nPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"/ui/assets/i18n/\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            translateConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TranslateModuleConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n    }\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/router.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            initialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    state: {\n        url: window.location.pathname,\n        params: {},\n        queryParams: {}\n    },\n    navigationId: 0\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/menu.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            menuInitialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MenuState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    menu:[],\n    loading: false,\n    error:null\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/services/authentication.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ONE_SECOND\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1000\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/feed.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardAdapter.getSelectors(selectLightCardsState)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectActiveFiltersArray\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectFilter,\n    (filters) =>{\n      let result = [];\n      for(let v of filters.values()) {\n        if(v.active)\n          result.push(v);\n      }\n      return result;\n    })\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectFilter\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectLightCardsState,\n    state => state.filters)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectFilteredFeed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectFeed,selectActiveFiltersArray,\n    (feed:LightCard[],filters:Filter[])=>{\n      return feed.filter(card=>Filter.chainFilter(card,filters));\n    })\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectLastCards\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectLightCardsState,\n    state => state.lastCards)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectLightCardSelection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(\n    selectLightCardsState,\n    state => state.selectedCardId)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectLightCardsState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state:AppState) => state.feed\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/authentication.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            selectAuthenticationState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createFeatureSelector('authentication')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectExpirationTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectAuthenticationState, fromAuthentication.getExpirationTime)\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/card.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            selectCardState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state:AppState) => state.card\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectCardStateSelection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectCardState, (cardState:CardState)=> cardState.selected)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectCardStateSelectionDetails\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectCardStateSelection, (card:Card)=> {\n    return card==null?null:card.details;\n})\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/router.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            selectCurrentUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectRouterState,\n    (router) => {\n        if (router)\n            return router.state && router.state.url\n        return null;\n    })\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectRouterState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createFeatureSelector('router')\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/menu.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            selectMenuState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state:AppState) => state.menu\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectMenuStateMenu\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectMenuState, (menuState:MenuState)=> menuState.menu)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
