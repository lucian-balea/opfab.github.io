var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/AcceptLogIn.html",[0,0.241,1,2.079]],["body/classes/AcceptLogIn.html",[0,0.427,1,2.999,2,0.504,3,0.05,4,0.05,5,0.108,6,1.602,7,1.4,8,1.363,9,3.466,10,2.104,11,1.952,12,2.52,13,3.605,14,3.759,15,2.245,16,3.617,17,2.075,18,3.617,19,3.268,20,3.121,21,2.707,22,2.598,23,3.448,24,2.643,25,3.338,26,3.617,27,3.338,28,1.611,29,3.253,30,3.471,31,3.617,32,0.372,33,1.277,34,0.203,35,0.531,36,0.927,37,1.882,38,1.334,39,0.318,40,1.174,41,3.327,42,0.292,43,4.725,44,0.375,45,0.01,46,0.323,47,0.364,48,3.144,49,0.544,50,0.419,51,0.115,52,0.467,53,2.61,54,1.445,55,2.18,56,1.602,57,0.145,58,0.615,59,1.546,60,2.697,61,1.494,62,1.979,63,2.697,64,1.494,65,3.121,66,3.413,67,3.909,68,3.338,69,2.697,70,1.728,71,2.323,72,2.902,73,2.308,74,3.215,75,2.697,76,1.329,77,1.858,78,1.4,79,1.058,80,1.445,81,1.445,82,1.494,83,1.546,84,2.707,85,2.707,86,2.245,87,2.598,88,1.801,89,1.097,90,1.097,91,1.04,92,1.801,93,1.728,94,1.801,95,1.801,96,1.662,97,1.278,98,0.929,99,1.728,100,2.377,101,2.707,102,2.697,103,2.407,104,1.728,105,0.977,106,1.728,107,1.728,108,1.602,109,3.338,110,0.953,111,1.801,112,1.662,113,1.728,114,2.707,115,1.206,116,1.801,117,1.801,118,3.617,119,1.728,120,1.801,121,2.707,122,1.801,123,2.598,124,0.662,125,1.801,126,1.728,127,1.801,128,1.728,129,1.801,130,2.598,131,2.598,132,1.801,133,1.801,134,1.662,135,0.003,136,0.005,137,0.003]],["title/classes/AcceptLogOut.html",[0,0.241,74,2.079]],["body/classes/AcceptLogOut.html",[0,0.43,1,2.74,2,0.518,3,0.051,4,0.051,5,0.102,6,1.645,7,1.437,8,1.368,9,3.435,10,1.437,11,1.756,12,2.519,13,3.535,14,3.796,15,1.534,16,3.665,17,2.152,18,3.665,19,3.146,20,2.65,21,1.85,22,1.775,23,3.259,24,2.415,25,3.05,26,3.305,27,3.05,28,1.472,29,2.761,30,3.171,31,2.761,32,0.366,33,1.286,34,0.208,35,0.542,36,0.79,37,1.633,38,1.343,39,0.388,41,2.37,42,0.248,45,0.01,49,0.559,50,0.431,51,0.117,52,0.479,53,2.651,54,1.484,55,2.215,56,1.645,57,0.146,58,0.632,59,1.587,60,2.74,61,1.534,62,2.018,63,2.74,64,1.534,65,3.171,66,3.487,67,3.947,68,3.382,69,2.74,70,1.775,71,2.37,72,3.146,73,2.345,74,3.535,75,2.74,76,1.356,77,1.879,78,1.437,79,1.07,80,1.484,81,1.484,82,1.534,83,1.587,84,2.761,85,2.761,86,2.29,87,2.65,88,1.85,89,1.106,90,1.106,91,1.048,92,1.85,93,1.775,94,1.85,95,1.85,96,1.707,97,1.312,98,0.954,99,1.775,100,2.415,101,2.761,102,2.74,103,2.455,104,1.775,105,1.003,106,1.775,107,1.775,108,1.645,109,3.619,110,0.978,111,1.85,112,1.707,113,1.775,114,2.761,115,1.23,116,1.85,117,1.85,118,4.114,119,1.775,120,1.85,121,2.761,122,1.85,123,2.65,124,0.679,125,2.761,126,2.65,127,2.761,128,2.65,129,2.761,130,3.171,131,3.171,132,1.85,133,1.85,134,1.707,135,0.003,136,0.005,137,0.003,138,4.82]],["title/classes/AcceptLogOutSuccess.html",[0,0.241,75,2.079]],["body/classes/AcceptLogOutSuccess.html",[0,0.43,1,2.739,2,0.517,3,0.051,4,0.051,5,0.109,6,1.643,7,1.436,8,1.368,9,3.486,10,1.436,11,1.878,12,2.527,13,3.632,14,3.795,15,1.532,16,3.303,17,2.092,18,3.303,19,3.145,20,2.648,21,1.848,22,1.773,23,3.257,24,2.677,25,3.381,26,3.663,27,3.381,28,1.632,29,2.759,30,3.515,31,2.759,32,0.369,33,1.286,34,0.208,35,0.542,36,0.79,37,1.632,38,1.343,39,0.217,41,2.368,42,0.166,45,0.01,49,0.558,50,0.43,51,0.117,52,0.479,53,2.65,54,1.482,55,2.213,56,1.643,57,0.146,58,0.631,59,1.585,60,2.739,61,1.532,62,2.017,63,2.739,64,1.532,65,3.169,66,3.434,67,3.946,68,3.381,69,2.739,70,1.773,71,2.368,72,2.939,73,2.343,74,3.41,75,3.038,76,1.355,77,1.878,78,1.436,79,1.07,80,1.482,81,1.482,82,1.532,83,1.585,84,2.759,85,2.759,86,2.288,87,2.648,88,1.848,89,1.105,90,1.105,91,1.048,92,1.848,93,1.773,94,1.848,95,1.848,96,1.705,97,1.311,98,0.953,99,1.773,100,2.414,101,2.759,102,2.739,103,2.454,104,1.773,105,1.002,106,1.773,107,1.773,108,1.643,109,3.381,110,0.977,111,1.848,112,1.705,113,1.773,114,3.303,115,1.471,116,1.848,117,1.848,118,3.92,119,1.773,120,1.848,121,3.303,122,1.848,123,2.648,124,0.679,125,1.848,126,1.773,127,1.848,128,1.773,129,1.848,130,3.169,131,3.169,132,2.759,133,2.759,134,1.705,135,0.003,136,0.005,137,0.003,139,3.225]],["title/classes/Action.html",[0,0.241,8,0.702]],["body/classes/Action.html",[0,0.447,2,0.644,3,0.064,4,0.064,5,0.064,8,0.906,11,1.103,32,0.311,36,0.55,38,1.554,39,0.555,42,0.206,44,0.479,45,0.01,46,0.58,47,0.465,50,0.753,51,0.133,57,0.151,58,1.105,79,1.376,89,1.174,90,1.174,91,1.113,100,2.735,135,0.004,136,0.006,137,0.004,140,2.208,141,3.542,142,4.06,143,4.762,144,3.559,145,3.91,146,3.261,147,3.91,148,3.91,149,3.211,150,3.058,151,3.91,152,3.91,153,3.91,154,3.91,155,3.91,156,4.016,157,0.628,158,1.788,159,1.542,160,2.046,161,1.076,162,2.404,163,1.974,164,1.908,165,2.404,166,2.301,167,2.404,168,2.404,169,2.404,170,2.404,171,2.404,172,2.404,173,2.404,174,2.404,175,3.381,176,1.05,177,2.877,178,2.404,179,3.381,180,1.247,181,1.586,182,2.877,183,2.404,184,1.633,185,1.542,186,1.421,187,2.046,188,2.404,189,2.404,190,2.404,191,2.404,192,2.301,193,2.301,194,2.301,195,3.054,196,3.235,197,1.974,198,2.208,199,2.301,200,2.301,201,2.301,202,1.733,203,2.404,204,2.404,205,2.296,206,2.404,207,2.404,208,3.105,209,2.404,210,2.404]],["title/classes/AddLightCardFailure.html",[0,0.241,211,2.079]],["body/classes/AddLightCardFailure.html",[0,0.457,2,0.66,3,0.065,4,0.065,5,0.065,8,1.363,12,1.187,32,0.387,33,1.383,34,0.266,35,0.646,36,0.787,37,2.085,38,1.434,39,0.445,40,1.537,42,0.34,44,0.491,45,0.01,46,0.423,47,0.477,49,0.712,50,0.549,51,0.117,52,0.611,57,0.154,58,0.806,76,1.158,77,2.068,89,1.228,90,1.228,91,1.164,124,1.686,135,0.004,136,0.006,137,0.004,157,0.644,211,3.403,212,3.649,213,2.097,214,2.541,215,5.746,216,4.117,217,3.292,218,2.48,219,1.777,220,1.674,221,2.177,222,3.254,223,4.563,224,2.404,225,3.144,226,2.097,227,3.042,228,2.825,229,2.263,230,1.833,231,3.254,232,2.032,233,3.144,234,2.024,235,1.187,236,2.097,237,1.956,238,3.144,239,2.177,240,1.956,241,1.418,242,1.418,243,1.674,244,1.674,245,1.279,246,1.346,247,1.496,248,2.359,249,2.359,250,2.359,251,2.177,252,2.359,253,2.359,254,2.359,255,2.359,256,2.359,257,2.359,258,2.177]],["title/components/AppComponent.html",[259,1.039,260,1.68]],["body/components/AppComponent.html",[0,0.198,3,0.057,4,0.083,5,0.083,8,0.986,12,1.945,17,1.73,32,0.346,33,0.86,34,0.233,35,0.588,36,0.494,39,0.242,42,0.413,44,0.43,45,0.01,46,0.632,47,0.417,49,1.167,50,0.9,51,0.17,52,0.535,57,0.065,60,1.712,61,2.483,62,2.824,64,2.483,66,1.555,79,0.563,86,3.205,98,1.065,103,1.836,105,1.12,110,1.092,115,1.906,135,0.004,136,0.005,137,0.004,146,2.714,157,0.817,161,0.966,176,0.942,184,2.5,195,2.868,234,1.772,235,1.039,259,1.46,260,2.59,261,2.189,262,1.509,263,1.981,264,1.555,265,1.555,266,3.178,267,2.827,268,1.555,269,3.778,270,4.202,271,3.281,272,6.15,273,2.256,274,5.227,275,6.15,276,4.944,277,6.15,278,6.15,279,2.394,280,6.15,281,4.587,282,1.47,283,6.746,284,3.101,285,1.604,286,4.301,287,5.031,288,5.227,289,3.604,290,1.435,291,1.952,292,3.604,293,4.202,294,4.202,295,5.227,296,5.227,297,5.227,298,5.227,299,6.15,300,3.604,301,3.604,302,3.604,303,3.604,304,5.227,305,3.604,306,0.705,307,1.209,308,1.384,309,2.158,310,1.241,311,1.423,312,2.521,313,2.898,314,3.178,315,2.898,316,2.898,317,2.158,318,2.158,319,3.178,320,2.521,321,2.874,322,2.898,323,2.898,324,2.898,325,2.521,326,1.241,327,3.604,328,3.604,329,3.604,330,3.604,331,3.604,332,3.178,333,3.604,334,3.604,335,3.604,336,3.604,337,3.604,338,2.381,339,3.281,340,3.604,341,2.898,342,3.604,343,2.898,344,3.604,345,3.604,346,3.604,347,3.604,348,3.604,349,5.227,350,3.604,351,3.604,352,3.604,353,2.688,354,3.604,355,3.604,356,2.521,357,5.341,358,2.898,359,3.604,360,3.281,361,4.609,362,5.227,363,5.227,364,5.227,365,5.227,366,1.509,367,1.465,368,1.509,369,1.509,370,1.509,371,1.509,372,1.275,373,1.423,374,1.509,375,1.509,376,1.509,377,1.465,378,1.509,379,1.465,380,1.509,381,1.509,382,1.509,383,1.509,384,2.898,385,2.688,386,3.178,387,1.241,388,2.256,389,2.256,390,1.555,391,2.911,392,1.555,393,1.555,394,1.346,395,1.555,396,1.384,397,1.555,398,1.346,399,2.256,400,1.384,401,1.555,402,1.346,403,1.555,404,1.384,405,1.346,406,1.555,407,1.384,408,1.555,409,1.384,410,1.555,411,1.346,412,1.555,413,1.555,414,1.555,415,1.384,416,1.555,417,1.384,418,1.899,419,1.555,420,1.384,421,1.555,422,1.384,423,1.092,424,1.555,425,1.555]],["title/modules/AppModule.html",[426,1.779,427,3.061]],["body/modules/AppModule.html",[0,0.261,3,0.075,4,0.1,5,0.1,36,0.649,45,0.009,51,0.183,57,0.086,73,1.924,98,2.406,105,1.471,110,2.467,135,0.005,136,0.006,137,0.005,235,1.365,260,3.367,293,3.806,306,0.926,317,2.834,318,2.834,366,1.982,367,1.924,368,1.982,369,1.982,370,1.982,371,1.982,372,1.674,373,1.87,374,1.982,375,1.982,376,1.982,377,1.924,378,1.982,379,1.924,380,1.982,381,1.982,382,1.982,383,1.982,387,1.631,409,3.125,426,1.924,427,6.315,428,2.249,429,2.602,430,4.26,431,4.35,432,3.784,433,2.411,434,4.174,435,4.174,436,4.174,437,4.174,438,5.693,439,5.534,440,5.534,441,3.621,442,2.834,443,4.734,444,3.342,445,6.321,446,4.714,447,3.311,448,3.342,449,6.321,450,4.734,451,6.321,452,2.712,453,3.967,454,6.321,455,6.321,456,2.712,457,5.574,458,5.574,459,3.128,460,4.734,461,5.574,462,3.53,463,3.806,464,4.734,465,3.311,466,4.734,467,4.734,468,4.174,469,4.734,470,3.806,471,3.806,472,4.734,473,5.574,474,3.806,475,3.806,476,4.174,477,3.806,478,4.714,479,3.806,480,4.734,481,3.806,482,3.806,483,3.806,484,4.734,485,4.734,486,4.734,487,4.734,488,3.53,489,3.806]],["title/modules/AppRoutingModule.html",[426,1.779,438,3.061]],["body/modules/AppRoutingModule.html",[0,0.302,3,0.087,4,0.11,5,0.11,36,0.751,45,0.01,51,0.168,57,0.126,98,2.257,102,2.604,105,1.703,112,2.898,135,0.006,136,0.007,137,0.006,176,1.818,235,1.58,259,1.651,306,1.073,366,2.295,367,2.228,368,2.295,369,2.295,370,2.295,371,2.295,372,1.939,373,2.165,374,2.295,375,2.295,376,2.295,377,2.228,378,2.295,379,2.228,380,2.295,381,2.295,382,2.295,383,2.295,428,2.604,433,2.792,438,4.863,444,2.898,448,3.676,468,4.833,490,5.481,491,4.087,492,6.953,493,5.186,494,5.041,495,3.14,496,5.991,497,4.406,498,2.792,499,3.44,500,6.418,501,3.984,502,7.637,503,5.481,504,6.14,505,4.087,506,5.481,507,4.833,508,5.481,509,4.833,510,3.44,511,4.406,512,5.481,513,5.481,514,5.481,515,4.833,516,5.481,517,4.833,518,5.481,519,5.481,520,4.087,521,5.481]],["title/interfaces/AppState.html",[310,1.507,522,2.151]],["body/interfaces/AppState.html",[3,0.076,4,0.076,5,0.076,12,2.291,15,3.027,25,4.2,32,0.358,34,0.309,35,0.717,45,0.009,51,0.186,52,0.711,57,0.144,115,1.827,135,0.005,136,0.007,137,0.005,157,1.242,176,1.995,246,2.084,310,2.195,498,2.441,499,3.007,501,4.551,520,3.574,522,2.356,523,3.007,524,3.852,525,4.551,526,4.367,527,4.99,528,5.337,529,5.337,530,5.337,531,5.337,532,5.337,533,7.631,534,4.792,535,4.21,536,3.351,537,4.225,538,5.619,539,4.792,540,5.619,541,5.619,542,5.619,543,4.792,544,4.457,545,4.792,546,4.457,547,4.792,548,4.792,549,4.792,550,5.619,551,4.792,552,5.619,553,4.792,554,4.792,555,5.619,556,4.792,557,5.619,558,4.792,559,5.619,560,4.792,561,4.792,562,4.792,563,4.457,564,4.792,565,4.792,566,4.792,567,4.457,568,4.792,569,4.457,570,4.792,571,4.792,572,4.457,573,4.792,574,4.792,575,4.225,576,4.457,577,4.792,578,3.574,579,3.574,580,4.225,581,5.123,582,3.574,583,4.225,584,3.351,585,4.225]],["title/classes/ApplyFilter.html",[0,0.241,586,2.406]],["body/classes/ApplyFilter.html",[0,0.391,2,0.908,3,0.09,4,0.09,5,0.09,8,1.303,32,0.39,33,1.275,34,0.365,35,0.798,36,0.972,37,1.978,38,1.371,39,0.381,40,2.113,42,0.398,44,0.675,45,0.009,46,0.581,47,0.655,49,0.979,50,0.755,51,0.157,52,0.84,57,0.147,58,1.108,61,2.689,62,2.971,77,1.948,89,1.026,90,1.026,91,0.972,135,0.006,136,0.007,137,0.006,146,2.056,161,1.516,214,2.976,423,2.349,501,4.065,586,4.468,587,3.958,588,7.095,589,5.659,590,6.257,591,3.739,592,3.739,593,4.248,594,3.388,595,4.221,596,3.958,597,4.55,598,4.99,599,3.552,600,4.453,601,4.99,602,4.99,603,4.221]],["title/components/ArchivesComponent.html",[259,1.039,394,1.634]],["body/components/ArchivesComponent.html",[0,0.284,3,0.082,4,0.106,5,0.106,32,0.226,33,1.1,34,0.333,36,0.706,39,0.499,42,0.343,45,0.009,46,0.687,51,0.105,57,0.093,98,1.524,105,1.602,110,1.562,135,0.005,136,0.007,137,0.005,157,1.045,235,1.486,259,1.762,260,1.979,261,2.799,262,2.159,263,2.834,264,2.225,265,2.225,267,3.41,268,2.225,269,3.929,271,4.196,273,2.885,282,1.881,284,3.609,290,1.415,291,1.925,306,1.009,366,2.159,367,2.096,368,2.159,369,2.159,370,2.159,371,2.159,372,1.823,373,2.036,374,2.159,375,2.159,376,2.159,377,2.096,378,2.159,379,2.096,380,2.159,381,2.159,382,2.159,383,2.159,387,1.776,388,2.885,389,2.885,390,2.225,391,3.388,392,2.225,393,2.225,394,2.932,395,2.225,396,1.979,397,2.225,398,1.925,399,2.885,400,1.979,401,2.225,402,1.925,403,2.225,404,1.979,405,1.925,406,2.225,407,1.979,408,2.225,409,1.979,410,2.225,411,1.925,412,2.225,413,2.225,414,2.225,415,1.979,416,2.225,417,1.979,418,2.429,419,2.225,420,1.979,421,2.225,422,1.979,423,1.562,424,2.225,425,2.225,505,5.855,604,4.546,605,7.42,606,6.686,607,5.155,608,5.155,609,5.895]],["title/modules/ArchivesModule.html",[426,1.779,610,3.264]],["body/modules/ArchivesModule.html",[0,0.326,3,0.094,4,0.116,5,0.116,36,0.812,45,0.009,51,0.168,57,0.107,73,2.41,105,1.842,135,0.006,136,0.007,137,0.006,235,1.709,306,1.16,366,2.482,367,2.41,368,2.482,369,2.482,370,2.482,371,2.482,372,2.097,373,2.341,374,2.482,375,2.482,376,2.482,377,2.41,378,2.482,379,2.41,380,2.482,381,2.482,382,2.482,383,2.482,387,2.042,394,3.226,426,2.41,428,2.816,429,3.259,430,4.738,431,3.396,432,3.548,433,3.02,441,4.184,442,3.548,444,3.861,448,3.861,453,4.583,456,3.396,465,4.145,505,4.421,610,6.593,611,5.227,612,5.227,613,5.227,614,6.042,615,5.927,616,5.227]],["title/modules/ArchivesRoutingModule.html",[426,1.779,614,3.061]],["body/modules/ArchivesRoutingModule.html",[0,0.338,3,0.098,4,0.119,5,0.119,36,0.841,45,0.009,51,0.17,57,0.111,105,1.907,135,0.006,136,0.008,137,0.006,176,1.605,235,1.769,259,1.457,306,1.201,366,2.57,367,2.495,368,2.57,369,2.57,370,2.57,371,2.57,372,2.171,373,2.424,374,2.57,375,2.57,376,2.57,377,2.495,378,2.57,379,2.495,380,2.57,381,2.57,382,2.57,383,2.57,394,2.785,428,2.915,433,3.126,444,3.245,448,3.944,491,4.577,493,5.563,494,5.044,495,3.516,496,5.563,497,4.934,500,4.577,504,4.934,614,5.217,616,5.411,617,6.137,618,4.934]],["title/classes/AuthObject.html",[0,0.241,619,3.264]],["body/classes/AuthObject.html",[0,0.345,2,0.373,3,0.037,4,0.037,5,0.037,7,1.034,9,1.612,12,2.298,13,1.774,17,1.855,23,2.385,24,0.973,27,1.229,28,1.894,32,0.318,34,0.15,35,0.42,36,1.102,37,0.953,39,0.361,41,3.242,42,0.302,44,0.277,45,0.01,46,0.239,47,0.542,51,0.156,52,0.345,53,2.884,54,1.068,55,1.434,57,0.114,58,0.455,64,1.774,66,1.003,71,2.302,78,3.053,79,1.31,80,3.58,81,3.853,82,3.133,83,2.636,96,2.835,97,2.877,102,2.548,105,1.455,108,2.732,115,1.601,124,0.489,135,0.002,136,0.004,137,0.002,146,1.701,161,0.623,176,2.036,180,1.877,181,1.849,184,1.518,186,1.321,195,1.798,202,3.134,205,2.952,230,1.034,235,1.546,246,0.76,279,2.257,291,0.868,306,0.455,307,0.78,308,0.892,309,1.391,310,0.8,311,0.918,325,1.625,326,0.8,357,1.733,372,1.897,418,2.135,452,1.331,498,1.184,499,1.458,619,4.382,620,1.625,621,3.293,622,5.533,623,4.729,624,5.181,625,2.324,626,2.324,627,1.391,628,2.324,629,2.324,630,2.324,631,2.324,632,1.051,633,3.366,634,2.049,635,1.733,636,1.229,637,1.391,638,3.366,639,1.733,640,1.733,641,2.049,642,6.078,643,1.868,644,1.458,645,1.391,646,1.868,647,2.785,648,1.868,649,1.184,650,2.049,651,2.049,652,4.129,653,2.049,654,2.049,655,2.049,656,2.049,657,2.049,658,5.417,659,2.049,660,2.049,661,2.049,662,2.049,663,2.049,664,2.049,665,2.049,666,5.533,667,4.729,668,3.293,669,5.181,670,2.049,671,3.293,672,2.049,673,3.293,674,3.293,675,3.293,676,2.049,677,3.293,678,2.049,679,1.868,680,3.003,681,2.049,682,3.293,683,1.868,684,1.733,685,2.049,686,3.293,687,2.049,688,3.366,689,2.049,690,3.293,691,2.049,692,4.129,693,2.049,694,5.513,695,4.129,696,4.129,697,4.129,698,4.129,699,4.129,700,4.129,701,2.049,702,2.049,703,2.049,704,2.049,705,3.293,706,1.868,707,3.492,708,3.293,709,3.293,710,3.293,711,2.049,712,2.049,713,2.049,714,4.129,715,4.129,716,3.293,717,2.236,718,2.049,719,3.293,720,2.049,721,3.003,722,3.293,723,3.293,724,2.049,725,2.049,726,3.293,727,3.293,728,2.049,729,2.049,730,2.049,731,2.049,732,2.049,733,2.049,734,2.049,735,2.049,736,2.049,737,2.049,738,2.049,739,2.049,740,2.049,741,2.049,742,3.003,743,5.181,744,2.049,745,3.293,746,2.385,747,4,748,3.492,749,2.049,750,2.049,751,2.049,752,2.049,753,3.293,754,2.049,755,3.293,756,2.049,757,3.293,758,2.049,759,2.049,760,2.049,761,2.049,762,1.331,763,2.049,764,2.049,765,2.049,766,2.049,767,2.785,768,2.049,769,2.049,770,2.049,771,2.049,772,2.049,773,2.049,774,2.049,775,2.049,776,2.049,777,2.049,778,2.049,779,2.049,780,2.049,781,2.049,782,2.049,783,2.049,784,2.049,785,4.129,786,3.293,787,2.049,788,2.049,789,3.293,790,3.293,791,2.049,792,1.104,793,2.049,794,2.049,795,2.049,796,2.049,797,2.049,798,2.049,799,2.049,800,2.049,801,1.733,802,2.049,803,2.049,804,2.049,805,2.049,806,2.049,807,2.049,808,2.049,809,2.049,810,2.049,811,2.049,812,2.049,813,2.049,814,2.049,815,2.049,816,2.049,817,2.049,818,2.049,819,1.868,820,4.129,821,2.049,822,2.049,823,1.625,824,2.049,825,2.049,826,3.293,827,3.293,828,2.236,829,1.868,830,2.049,831,2.049,832,2.049]],["title/interfaces/AuthState.html",[522,2.151,528,3.061]],["body/interfaces/AuthState.html",[3,0.094,4,0.094,5,0.094,28,1.51,32,0.378,34,0.382,35,0.82,45,0.009,51,0.148,53,3.897,54,2.719,55,3.42,56,3.014,57,0.132,78,3.775,79,1.392,80,3.897,81,3.897,82,4.028,83,3.888,135,0.006,136,0.007,137,0.006,176,1.547,181,3.349,372,2.999,522,2.908,523,3.713,528,5.531,833,4.756,834,4.756,835,5.217]],["title/injectables/AuthenticationEffects.html",[15,2.079,632,1.231]],["body/injectables/AuthenticationEffects.html",[0,0.108,1,2.555,3,0.031,4,0.031,5,0.031,7,1.45,8,1.298,11,1.332,12,2.377,13,3.052,14,1.722,15,1.547,17,2.362,19,2.822,20,2.667,22,1.79,23,2.471,28,2.104,32,0.347,34,0.127,35,0.366,37,1.701,39,0.219,42,0.353,44,0.732,45,0.01,46,0.66,47,0.483,49,1.062,50,0.773,51,0.158,52,0.292,55,2.638,56,1.001,57,0.036,59,0.966,62,1.363,63,1.981,64,2.305,66,3.168,68,1.722,69,1.981,72,2.822,74,3.487,75,1.981,79,0.509,81,3.24,83,1.601,86,2.754,89,0.471,90,0.471,91,0.446,93,1.79,97,2.709,100,2.031,102,3.422,103,1.659,104,3.187,106,1.79,109,1.722,113,1.79,115,1.701,119,2.667,123,1.79,124,0.413,126,2.667,128,2.667,130,2.957,131,1.79,134,3.945,135,0.004,136,0.003,137,0.002,144,0.903,160,1.001,161,1.645,163,0.966,176,1.605,180,1.83,225,0.933,242,0.677,279,1.908,282,0.916,285,0.875,290,1.145,291,0.734,294,3.9,306,0.384,307,0.659,308,0.754,309,1.176,310,0.677,311,0.776,316,1.579,322,1.579,326,0.677,356,2.277,357,4.011,358,1.579,372,1.716,385,2.429,495,1.126,527,4.312,632,0.916,636,1.039,637,2.497,649,3.273,658,3.618,679,2.618,680,2.618,683,4.661,688,2.044,706,2.618,717,1.949,742,2.618,747,2.429,748,4.324,762,2.779,792,0.933,823,1.374,836,0.903,837,1.732,838,3.256,839,4.17,840,3.256,841,4.851,842,3.518,843,4.851,844,3.518,845,1.965,846,3.256,847,3.256,848,3.256,849,3.256,850,3.256,851,4.851,852,3.256,853,1.965,854,3.256,855,1.965,856,3.256,857,3.256,858,1.965,859,3.256,860,1.965,861,4.278,862,3.256,863,2.871,864,3.256,865,3.322,866,4.934,867,1.965,868,6.425,869,5.798,870,3.256,871,5.112,872,3.256,873,3.256,874,3.256,875,3.639,876,2.85,877,3.256,878,2.389,879,3.256,880,3.256,881,3.256,882,3.256,883,3.256,884,4.851,885,4.851,886,4.851,887,3.256,888,5.798,889,4.851,890,6.14,891,3.256,892,3.256,893,4.17,894,3.256,895,5.378,896,4.17,897,3.256,898,3.256,899,2.429,900,2.044,901,2.618,902,3.256,903,3.256,904,3.256,905,3.256,906,1.965,907,3.256,908,3.256,909,2.618,910,3.256,911,4.851,912,3.256,913,2.277,914,2.618,915,3.256,916,1.965,917,3.256,918,3.256,919,3.256,920,4.851,921,3.256,922,1.965,923,2.618,924,3.256,925,4.851,926,3.256,927,3.256,928,3.256,929,3.256,930,1.965,931,3.256,932,3.256,933,3.256,934,4.17,935,4.17,936,3.256,937,3.256,938,3.256,939,3.256,940,3.256,941,3.256,942,2.293,943,1.965,944,3.256,945,2.871,946,1.176,947,1.08,948,1.965,949,1.579,950,1.233,951,1.579,952,1.465,953,1.465,954,1.465,955,1.465,956,1.465,957,5.378,958,1.965,959,1.965,960,3.205,961,1.579,962,1.965,963,2.917,964,1.965,965,1.965,966,2.618,967,1.965,968,1.965,969,1.965,970,1.965,971,1.965,972,1.965,973,1.965,974,3.256,975,1.965,976,1.965,977,1.965,978,1.965,979,1.965]],["title/classes/Card.html",[0,0.241,157,0.684]],["body/classes/Card.html",[0,0.358,2,0.794,3,0.079,4,0.079,5,0.079,11,1.997,32,0.217,38,1.54,39,0.489,42,0.254,44,0.59,45,0.009,46,0.508,47,0.573,51,0.148,57,0.132,58,0.969,79,1.437,89,0.941,90,0.941,91,0.892,135,0.005,136,0.007,137,0.005,144,3.919,157,1.018,158,3.441,160,2.522,161,1.326,163,2.434,177,3.706,186,2.574,205,3.59,219,2.137,220,2.013,230,3.239,263,2.722,281,5.765,627,5.105,980,3.693,981,4.951,982,4.807,983,5.85,984,6.416,985,6.416,986,6.416,987,6.267,988,6.416,989,6.416,990,6.416,991,6.416,992,5.089,993,4.951,994,5.742,995,5.85,996,3.981,997,3.981,998,3.981,999,4.366,1000,3.981]],["title/components/CardComponent.html",[259,1.039,396,1.68]],["body/components/CardComponent.html",[0,0.215,3,0.062,4,0.088,5,0.088,32,0.336,33,0.91,34,0.252,35,0.622,36,1.051,39,0.262,42,0.414,44,0.465,45,0.01,46,0.66,47,0.452,49,0.675,50,0.52,51,0.164,52,0.579,57,0.071,79,1.005,89,0.564,90,0.564,91,0.535,98,1.153,105,1.212,110,1.182,115,2.013,135,0.004,136,0.006,137,0.004,146,2.01,149,2.72,150,2.774,157,1.282,158,1.737,161,1.045,180,0.862,186,1.38,195,2.124,197,2.72,218,3.31,219,1.684,220,1.586,234,3.439,235,1.125,237,1.853,259,1.526,260,1.498,261,2.316,262,1.633,263,2.145,264,1.684,265,1.684,267,2.955,268,1.684,269,3.815,271,3.472,273,2.388,276,5.168,279,2.174,281,2.909,282,1.556,284,3.215,290,1.519,291,2.066,306,0.763,308,1.498,310,1.344,311,1.541,312,2.728,326,1.344,343,3.136,366,1.633,367,1.586,368,1.633,369,1.633,370,1.633,371,1.633,372,1.38,373,1.541,374,1.633,375,1.633,376,1.633,377,1.586,378,1.633,379,1.586,380,1.633,381,1.633,382,1.633,383,1.633,384,3.136,387,1.344,388,2.388,389,2.388,390,1.684,391,3.019,392,1.684,393,1.684,394,1.457,395,1.684,396,2.686,397,1.684,398,1.457,399,2.388,400,1.498,401,1.684,402,1.457,403,1.684,404,1.498,405,1.457,406,1.684,407,1.498,408,1.684,409,1.498,410,1.684,411,1.457,412,1.684,413,1.684,414,1.684,415,1.498,416,1.684,417,1.498,418,2.01,419,1.684,420,1.498,421,1.684,422,1.498,423,1.182,424,1.684,425,1.684,495,2.235,527,4.592,876,1.918,1001,3.44,1002,6.428,1003,5.532,1004,5.668,1005,6.995,1006,3.312,1007,5.668,1008,3.901,1009,5.532,1010,3.901,1011,3.901,1012,3.901,1013,3.901,1014,3.901,1015,3.44,1016,3.901,1017,3.901,1018,3.136,1019,3.901,1020,3.901,1021,3.901,1022,4.878,1023,3.901,1024,3.44,1025,3.44,1026,3.44,1027,3.901,1028,3.901,1029,3.901,1030,5.532,1031,3.901,1032,3.901,1033,5.532,1034,3.901,1035,4.878,1036,3.901,1037,3.901,1038,3.901,1039,6.995,1040,3.901,1041,5.668,1042,3.901,1043,5.668,1044,3.901,1045,3.901,1046,3.901,1047,3.44,1048,3.901,1049,3.901,1050,3.901,1051,3.901,1052,3.901]],["title/components/CardDetailsComponent.html",[259,1.039,398,1.634]],["body/components/CardDetailsComponent.html",[0,0.257,3,0.074,4,0.074,5,0.074,11,1.718,32,0.331,33,1.029,34,0.301,35,0.704,39,0.314,42,0.388,44,0.556,45,0.009,46,0.725,47,0.54,51,0.165,52,0.692,57,0.084,98,1.378,110,1.413,115,2.069,135,0.005,136,0.006,137,0.005,157,1.376,158,3.144,159,1.79,176,1.219,181,1.842,259,1.677,260,1.79,261,2.62,262,1.952,264,2.012,265,2.012,267,3.246,268,2.012,269,3.891,273,2.7,279,1.449,282,1.76,284,3.469,285,2.076,290,1.28,291,1.741,306,0.913,310,1.606,311,1.842,326,1.606,387,1.606,388,2.7,389,2.7,390,2.012,391,3.257,392,2.012,393,2.012,394,1.741,395,2.012,396,1.79,397,2.012,398,2.818,399,2.7,400,1.79,401,2.012,402,1.741,403,2.012,404,1.79,405,1.741,406,2.012,407,1.79,408,2.012,409,1.79,410,2.012,411,1.741,412,2.012,413,2.012,414,2.012,415,1.79,416,2.012,417,1.79,418,2.274,419,2.012,420,1.79,421,2.012,422,1.79,423,1.413,424,2.012,425,2.012,992,5.506,1053,6.942,1054,5.871,1055,4.112,1056,5.518,1057,4.218,1058,6.257,1059,4.663,1060,4.663,1061,4.663,1062,4.663,1063,3.478,1064,4.663,1065,4.663,1066,4.112,1067,4.663,1068,4.663,1069,6.257,1070,4.663,1071,4.663,1072,4.112,1073,4.663,1074,4.112,1075,4.663]],["title/injectables/CardEffects.html",[544,3.061,632,1.231]],["body/injectables/CardEffects.html",[0,0.291,3,0.084,4,0.084,5,0.084,8,0.846,17,2.111,28,1.732,32,0.297,34,0.341,35,0.763,39,0.355,42,0.349,44,0.629,45,0.01,46,0.542,47,0.611,49,0.913,50,0.704,51,0.177,52,0.783,57,0.095,89,0.763,90,0.763,91,0.723,97,3.05,115,2.141,135,0.005,136,0.007,137,0.005,157,1.281,159,2.026,161,1.414,180,1.749,279,2.109,285,2.349,306,1.033,307,1.771,308,2.026,310,1.818,311,2.084,326,1.818,339,4.26,544,4.747,632,1.909,636,2.79,828,3.159,836,2.426,842,4.888,844,4.538,865,3.023,866,4.492,875,4.26,876,3.337,878,3.023,899,5.062,900,4.971,946,3.159,947,2.901,953,3.936,956,3.936,1076,4.653,1077,6.032,1078,5.277,1079,6.787,1080,5.062,1081,6.787,1082,6.787,1083,6.787,1084,6.787,1085,5.277,1086,3.312,1087,2.594,1088,2.901,1089,2.901,1090,4.243,1091,4.243,1092,4.243]],["title/interfaces/CardFeedState.html",[522,2.151,531,3.061]],["body/interfaces/CardFeedState.html",[3,0.078,4,0.078,5,0.078,7,2.197,11,2.261,24,2.067,28,1.26,32,0.352,34,0.318,35,0.731,45,0.009,51,0.157,55,2.964,57,0.14,79,1.288,124,1.688,135,0.005,136,0.007,137,0.005,146,2.64,157,1.016,161,2.068,176,1.699,180,1.09,181,1.949,186,2.298,195,1.895,218,3.678,219,2.13,220,2.006,358,5.224,360,5.27,423,2.201,501,4.719,522,2.426,523,3.098,531,5.081,591,3.261,592,3.261,593,2.955,594,2.955,913,4.545,1093,3.968,1094,6.498,1095,8.022,1096,7.404,1097,3.723,1098,7.404,1099,7.72,1100,4.545,1101,6.498,1102,5.73,1103,6.498,1104,6.498,1105,6.498,1106,5.224,1107,6.498,1108,5.873,1109,6.498,1110,6.498,1111,6.498,1112,5.73,1113,5.73,1114,4.352,1115,4.936,1116,4.936,1117,4.936,1118,4.936,1119,3.968,1120,4.352,1121,3.968,1122,4.352]],["title/components/CardListComponent.html",[259,1.039,400,1.68]],["body/components/CardListComponent.html",[0,0.291,3,0.084,4,0.084,5,0.084,32,0.329,34,0.341,36,0.931,39,0.505,42,0.386,45,0.009,46,0.698,51,0.138,57,0.096,79,1.062,98,1.562,110,1.602,135,0.005,136,0.007,137,0.005,149,3.34,150,3.241,157,1.312,198,3.735,218,3.241,219,2.281,220,2.149,251,3.97,259,1.783,260,2.029,261,2.845,262,2.213,264,2.281,265,2.281,268,2.281,269,3.938,273,2.932,306,1.035,387,1.821,388,2.932,389,2.932,390,2.281,391,3.42,392,2.281,393,2.281,394,1.974,395,2.281,396,2.029,397,2.281,398,1.974,399,2.932,400,3.043,401,2.281,402,1.974,403,2.281,404,2.029,405,1.974,406,2.281,407,2.029,408,2.281,409,2.029,410,2.281,411,1.974,412,2.281,413,2.281,414,2.281,415,2.029,416,2.281,417,2.029,418,2.469,419,2.281,420,2.029,421,2.281,422,2.029,423,1.602,424,2.281,425,2.281,1123,5.543,1124,6.372,1125,4.661,1126,6.795,1127,6.037,1128,6.795,1129,5.286]],["title/injectables/CardOperationEffects.html",[546,3.061,632,1.231]],["body/injectables/CardOperationEffects.html",[0,0.222,3,0.064,4,0.064,5,0.064,8,0.908,12,2.047,17,2.103,28,2.074,32,0.328,34,0.26,35,0.637,39,0.271,42,0.336,44,0.481,45,0.01,46,0.414,47,0.467,49,1.341,50,0.755,51,0.172,52,0.598,57,0.073,59,1.982,66,3.063,89,0.583,90,0.583,91,0.552,97,2.661,115,1.979,124,1.711,135,0.004,136,0.006,137,0.004,157,1.11,161,1.753,176,1.481,180,1.887,211,3.109,227,1.853,236,2.885,238,3.109,239,3.46,240,1.192,258,2.132,279,1.76,285,1.795,306,0.789,307,1.353,308,1.548,309,2.414,310,1.389,311,1.592,326,1.389,339,4.866,423,1.222,546,3.96,586,2.216,593,2.414,594,2.414,595,3.007,632,1.593,636,2.132,836,1.853,842,4.562,844,4.066,865,3.244,866,4.476,875,4.455,876,3.996,878,3.75,900,5.101,909,5.706,946,2.414,947,2.216,953,3.007,954,3.007,955,3.007,1130,6.259,1131,3.555,1132,5.771,1133,4.032,1134,6.259,1135,6.259,1136,4.993,1137,5.662,1138,5.662,1139,5.662,1140,7.098,1141,5.662,1142,7.098,1143,5.662,1144,5.662,1145,5.662,1146,5.662,1147,5.662,1148,5.706,1149,7.098,1150,4.032,1151,5.662,1152,5.662,1153,4.993,1154,5.662,1155,5.662,1156,4.032,1157,3.241,1158,3.007]],["title/injectables/CardService.html",[632,1.231,844,2.507]],["body/injectables/CardService.html",[0,0.234,3,0.068,4,0.093,5,0.068,17,2.317,28,1.854,32,0.346,34,0.274,35,0.661,36,0.923,38,1.41,39,0.286,42,0.429,44,0.866,45,0.01,46,0.746,47,0.841,49,0.735,50,0.567,51,0.17,55,2.256,57,0.077,71,2.09,79,1.263,80,1.954,124,1.237,135,0.004,136,0.006,137,0.004,157,0.665,159,1.632,176,1.112,180,1.819,186,1.504,205,2.953,245,1.321,279,1.321,282,1.653,290,2.093,291,1.587,306,0.832,307,1.426,326,1.464,373,2.659,452,2.435,462,3.17,498,2.166,499,2.668,632,1.653,633,4.558,638,5.071,639,3.17,649,4.016,694,3.418,801,4.382,819,3.418,836,1.954,844,3.366,1087,2.888,1159,3.749,1160,6.733,1161,6.733,1162,6.733,1163,5.875,1164,7.263,1165,7.263,1166,5.875,1167,3.418,1168,5.875,1169,5.875,1170,7.623,1171,4.251,1172,5.875,1173,4.251,1174,5.875,1175,4.251,1176,4.251,1177,4.251,1178,6.733,1179,4.251,1180,4.251,1181,4.251,1182,4.251,1183,4.251,1184,4.251,1185,4.251,1186,3.418,1187,3.418,1188,4.251,1189,4.251,1190,4.251,1191,5.875,1192,4.251,1193,4.251,1194,4.251,1195,4.251,1196,4.251,1197,4.251,1198,4.251,1199,4.251,1200,4.251,1201,4.251,1202,4.251,1203,3.749,1204,4.251,1205,3.418,1206,4.251,1207,3.418,1208,4.251,1209,4.251,1210,3.749,1211,4.251,1212,4.251,1213,4.251,1214,4.251,1215,4.251,1216,4.251,1217,4.251,1218,4.251,1219,4.251,1220,4.251,1221,4.251,1222,4.251,1223,4.251,1224,4.251,1225,4.251,1226,4.251,1227,4.251,1228,4.251,1229,4.251]],["title/interfaces/CardState.html",[522,2.151,529,3.061]],["body/interfaces/CardState.html",[3,0.102,4,0.102,5,0.102,32,0.358,34,0.412,35,0.859,45,0.009,51,0.13,57,0.138,79,1.278,124,1.823,135,0.007,136,0.008,137,0.007,146,2.971,157,1.325,159,2.452,176,1.67,181,3.018,195,2.452,360,5.436,522,3.14,523,4.009,529,5.719,1097,4.963,1230,5.135,1231,5.135]],["title/modules/CardsModule.html",[426,1.779,1232,3.061]],["body/modules/CardsModule.html",[0,0.275,3,0.079,4,0.104,5,0.104,36,0.684,42,0.256,45,0.009,51,0.176,57,0.09,73,2.029,105,1.551,135,0.005,136,0.007,137,0.005,180,1.102,202,2.825,235,1.439,282,1.404,290,1.37,306,0.977,317,2.988,318,2.988,366,2.09,367,2.029,368,2.09,369,2.09,370,2.09,371,2.09,372,1.765,373,1.971,374,2.09,375,2.09,376,2.09,377,2.029,378,2.09,379,2.029,380,2.09,381,2.09,382,2.09,383,2.09,387,1.719,396,3.394,398,3.301,402,3.301,404,3.394,426,2.029,428,2.371,429,2.744,430,4.373,431,2.859,432,4.642,433,3.721,441,3.75,442,2.988,444,2.639,448,3.862,453,4.108,456,2.859,470,5.262,1054,3.722,1057,3.334,1232,6.347,1233,4.401,1234,4.401,1235,4.401,1236,4.401,1237,5.459,1238,4.991,1239,5.872,1240,4.991,1241,5.872,1242,4.991,1243,4.401,1244,4.401,1245,4.991,1246,4.991,1247,4.012,1248,4.401]],["title/classes/CheckAuthenticationStatus.html",[0,0.241,63,2.079]],["body/classes/CheckAuthenticationStatus.html",[0,0.433,1,2.774,2,0.529,3,0.052,4,0.052,5,0.103,6,1.679,7,1.467,8,1.364,9,3.393,10,1.467,11,1.774,12,2.525,13,3.437,14,3.651,15,1.566,16,3.346,17,2.036,18,3.346,19,3.174,20,2.691,21,1.889,22,1.812,23,3.293,24,2.445,25,3.088,26,3.346,27,3.088,28,1.49,29,2.805,30,3.211,31,2.805,32,0.367,33,1.293,34,0.213,35,0.551,36,0.8,37,1.65,38,1.35,39,0.222,41,2.407,42,0.169,45,0.01,49,0.57,50,0.44,51,0.119,52,0.489,53,2.684,54,1.515,55,2.242,56,1.679,57,0.147,58,0.645,59,1.621,60,2.774,61,1.566,62,2.05,63,3.071,64,1.566,65,3.211,66,3.453,67,3.978,68,3.417,69,2.774,70,1.812,71,2.407,72,2.971,73,2.374,74,3.281,75,2.774,76,1.377,77,1.896,78,1.467,79,1.079,80,1.515,81,1.515,82,1.566,83,1.621,84,3.346,85,3.346,86,2.774,87,3.211,88,1.889,89,1.112,90,1.112,91,1.054,92,1.889,93,2.691,94,1.889,95,1.889,96,1.743,97,1.34,98,0.974,99,1.812,100,2.445,101,2.805,102,2.774,103,2.494,104,1.812,105,1.024,106,1.812,107,1.812,108,1.679,109,3.417,110,0.999,111,1.889,112,1.743,113,1.812,114,2.805,115,1.249,116,1.889,117,1.889,118,3.703,119,1.812,120,1.889,121,2.805,122,1.889,123,2.691,124,0.694,125,1.889,126,1.812,127,1.889,128,1.812,129,1.889,130,2.691,131,2.691,132,1.889,133,1.889,134,1.743,135,0.003,136,0.005,137,0.003,1249,3.296]],["title/classes/CheckTokenResponse.html",[0,0.241,823,3.061]],["body/classes/CheckTokenResponse.html",[0,0.346,2,0.374,3,0.037,4,0.037,5,0.037,7,1.038,9,1.006,12,2.275,13,1.779,17,1.858,23,2.39,24,0.976,27,1.232,28,1.896,32,0.31,34,0.15,35,0.421,36,1.081,37,0.955,39,0.361,41,3.246,42,0.276,44,0.278,45,0.01,46,0.239,47,0.765,51,0.156,52,0.346,53,2.157,54,1.071,55,1.437,57,0.114,58,0.456,64,1.779,66,1.006,71,1.84,78,2.392,79,1.311,80,3.582,81,3.891,82,3.137,83,2.641,96,2.84,97,2.88,102,2.229,105,1.458,108,2.737,115,1.604,124,0.491,135,0.002,136,0.004,137,0.002,146,1.705,161,0.624,176,2.038,180,1.878,181,1.853,184,1.522,186,1.324,195,1.801,202,3.137,205,2.955,230,1.038,235,1.697,246,0.762,279,2.259,291,0.87,306,0.456,307,0.782,308,0.895,309,1.395,310,0.803,311,0.921,325,1.63,326,0.803,357,1.738,372,1.9,418,2.138,452,1.335,498,1.187,499,1.463,619,4.007,620,1.63,621,2.055,622,5.541,623,2.055,624,2.055,627,2.809,632,1.053,633,3.372,634,2.055,635,1.738,636,1.232,637,1.395,638,3.372,639,1.738,640,1.738,641,2.055,642,6.18,643,1.874,644,1.463,645,1.395,646,1.874,647,2.792,648,1.874,649,1.187,650,2.055,651,2.055,652,4.137,653,2.055,654,2.055,655,2.055,656,2.055,657,2.055,658,5.422,659,2.055,660,2.055,661,2.055,662,2.055,663,2.055,664,2.055,665,2.055,666,5.541,667,4.737,668,3.301,669,5.189,670,2.055,671,3.301,672,2.055,673,3.301,674,5.189,675,3.301,676,2.055,677,5.541,678,2.055,679,1.874,680,3.772,681,2.055,682,3.301,683,1.874,684,1.738,685,2.055,686,3.301,687,2.055,688,3.372,689,2.055,690,3.301,691,2.055,692,4.137,693,2.055,694,5.519,695,4.137,696,4.137,697,4.137,698,4.137,699,4.137,700,4.137,701,2.055,702,2.055,703,2.055,704,2.055,705,3.301,706,1.874,707,3.499,708,3.301,709,3.301,710,3.301,711,2.055,712,2.055,713,2.055,714,4.137,715,4.137,716,3.301,717,2.241,718,2.055,719,3.301,720,2.055,721,3.01,722,3.301,723,3.301,724,2.055,725,2.055,726,3.301,727,3.301,728,2.055,729,2.055,730,2.055,731,2.055,732,2.055,733,2.055,734,2.055,735,2.055,736,2.055,737,2.055,738,2.055,739,2.055,740,2.055,741,2.055,742,3.01,743,5.189,744,2.055,745,3.301,746,2.39,747,4.007,748,3.499,749,2.055,750,2.055,751,2.055,752,2.055,753,3.301,754,2.055,755,3.301,756,2.055,757,3.301,758,2.055,759,2.055,760,2.055,761,2.055,762,1.335,763,2.055,764,2.055,765,2.055,766,2.055,767,2.792,768,2.055,769,2.055,770,2.055,771,2.055,772,2.055,773,2.055,774,2.055,775,2.055,776,2.055,777,2.055,778,2.055,779,2.055,780,2.055,781,2.055,782,2.055,783,2.055,784,2.055,785,4.137,786,3.301,787,2.055,788,2.055,789,3.301,790,3.301,791,2.055,792,1.107,793,2.055,794,2.055,795,2.055,796,2.055,797,2.055,798,2.055,799,2.055,800,2.055,801,1.738,802,2.055,803,2.055,804,2.055,805,2.055,806,2.055,807,2.055,808,2.055,809,2.055,810,2.055,811,2.055,812,2.055,813,2.055,814,2.055,815,2.055,816,2.055,817,2.055,818,2.055,819,1.874,820,4.737,821,3.301,822,3.301,823,2.618,824,2.055,825,2.055,826,3.301,827,3.301,828,2.241,829,1.874,830,2.055,831,2.055,832,2.055,1250,2.331,1251,2.331,1252,2.331,1253,2.331,1254,2.331]],["title/classes/ClearCard.html",[0,0.241,942,2.406]],["body/classes/ClearCard.html",[0,0.445,2,0.811,3,0.08,4,0.08,5,0.08,8,1.354,32,0.375,33,1.364,34,0.326,35,0.742,37,1.989,38,1.425,42,0.26,45,0.01,49,0.875,50,0.674,51,0.134,52,0.75,57,0.153,58,0.989,76,1.422,77,2.139,79,0.79,89,1.169,90,1.169,91,1.108,124,1.702,135,0.005,136,0.007,137,0.005,157,1.385,159,1.941,186,1.788,224,2.466,232,1.788,240,2.172,241,1.741,242,1.741,243,2.055,244,2.055,245,1.571,246,1.653,247,1.837,762,2.896,942,4.284,1086,3.173,1087,3.613,1088,4.041,1089,4.041,1255,3.026,1256,4.617,1257,5.055,1258,3.536,1259,3.536,1260,3.536,1261,3.536,1262,3.34]],["title/injectables/ConfigEffects.html",[576,3.061,632,1.231]],["body/injectables/ConfigEffects.html",[0,0.253,3,0.073,4,0.073,5,0.073,8,0.737,17,2.204,28,1.915,32,0.307,34,0.296,35,0.697,39,0.309,42,0.36,44,0.548,45,0.01,46,0.472,47,0.532,49,0.795,50,0.613,51,0.175,52,0.682,55,2.379,57,0.083,89,0.664,90,0.664,91,0.63,97,3.184,115,2.06,135,0.005,136,0.006,137,0.005,161,1.231,180,1.657,205,2.85,224,2.517,279,2.178,285,2.045,306,0.899,307,1.542,308,1.764,310,1.583,311,1.815,321,3.854,322,3.694,325,3.213,326,1.583,339,3.888,423,1.392,525,3.549,575,4.052,576,4.333,632,1.743,636,2.429,792,2.183,828,2.751,836,2.112,842,4.725,865,3.549,866,4.689,875,4.709,876,3.688,878,2.632,899,4.621,900,4.709,946,2.751,947,2.526,949,3.694,950,2.884,1077,5.635,1080,4.621,1090,3.694,1091,3.694,1092,3.694,1205,4.981,1263,4.052,1264,6.832,1265,4.957,1266,7.01,1267,4.595,1268,6.195,1269,6.195,1270,6.195,1271,6.195,1272,6.195,1273,4.595,1274,7.502,1275,6.195,1276,4.595,1277,5.463,1278,4.052,1279,4.595,1280,4.052,1281,2.632,1282,2.632,1283,3.694,1284,3.427,1285,4.595,1286,4.595,1287,4.595,1288,6.195,1289,6.195,1290,6.195,1291,6.195,1292,4.595]],["title/injectables/ConfigService.html",[632,1.231,1265,2.891]],["body/injectables/ConfigService.html",[0,0.331,3,0.095,4,0.095,5,0.095,17,2.24,32,0.323,34,0.388,35,0.828,39,0.404,42,0.409,44,0.716,45,0.009,46,0.617,47,0.696,51,0.178,52,0.892,57,0.109,79,1.151,115,1.533,135,0.006,136,0.008,137,0.006,180,1.327,279,2.474,282,2.071,290,1.649,306,1.176,307,2.016,310,2.069,311,2.373,320,4.201,326,2.069,452,3.442,498,3.06,499,3.77,632,2.071,633,5.439,649,3.06,836,2.761,1167,4.829,1265,4.865,1293,5.297,1294,7.961,1295,8.299,1296,7.363,1297,6.007,1298,4.829,1299,4.829,1300,4.829,1301,6.007,1302,6.007,1303,6.007]],["title/interfaces/ConfigState.html",[522,2.151,530,3.061]],["body/interfaces/ConfigState.html",[3,0.097,4,0.097,5,0.097,32,0.375,34,0.394,35,0.836,45,0.009,51,0.124,57,0.145,79,1.253,124,1.8,135,0.006,136,0.008,137,0.006,146,3.161,157,0.954,159,2.342,176,1.943,181,2.41,195,2.854,205,3.259,341,4.905,353,6.379,360,5.368,522,2.999,523,3.829,525,4.78,530,5.606,792,2.898,1264,6.876,1284,4.55,1304,4.905,1305,6.101,1306,4.905]],["title/injectables/CustomRouterEffects.html",[563,3.061,632,1.231]],["body/injectables/CustomRouterEffects.html",[0,0.261,3,0.075,4,0.075,5,0.075,8,0.762,17,2.228,28,2.079,32,0.312,34,0.511,35,0.712,39,0.319,42,0.366,44,0.566,45,0.01,46,0.488,47,0.55,49,1.096,50,0.845,51,0.177,52,0.705,57,0.086,89,0.686,90,0.686,91,0.651,97,2.897,115,2.123,135,0.005,136,0.006,137,0.005,176,1.988,180,1.866,233,2.256,279,1.968,285,2.114,306,0.929,307,1.593,308,1.823,310,1.636,311,1.875,326,1.636,423,1.439,535,3.137,563,4.429,632,1.782,836,2.182,842,4.765,844,4.356,861,6.704,865,3.629,866,4.741,878,2.72,946,2.842,947,2.61,953,3.541,954,3.541,955,3.541,956,3.541,1080,5.67,1087,2.334,1307,6.704,1308,4.187,1309,7.127,1310,7.127,1311,4.748,1312,7.603,1313,7.603,1314,7.92,1315,6.334,1316,7.603,1317,7.603,1318,6.334,1319,7.603,1320,6.334,1321,4.748,1322,6.334,1323,6.334,1324,6.334,1325,6.334,1326,4.748,1327,4.748,1328,2.61,1329,3.817]],["title/classes/CustomRouterStateSerializer.html",[0,0.241,1330,3.061]],["body/classes/CustomRouterStateSerializer.html",[0,0.36,2,0.8,3,0.079,4,0.104,5,0.079,11,2.005,13,3.11,28,1.274,32,0.287,33,1.077,34,0.322,38,1.232,39,0.336,42,0.336,44,0.924,45,0.01,46,0.672,47,0.758,51,0.133,57,0.132,79,0.78,86,2.371,89,0.721,90,0.721,91,0.684,115,1.671,135,0.005,136,0.007,137,0.005,176,2.027,180,1.446,184,3.152,202,2.154,230,2.222,245,2.034,279,2.27,282,1.841,290,2.005,418,1.813,495,2.859,527,2.988,535,3.297,536,5.108,584,3.49,684,3.722,707,3.722,717,5.346,767,3.722,792,2.371,963,3.49,1330,4.578,1331,3.722,1332,6.234,1333,6.546,1334,6.546,1335,5.772,1336,6.837,1337,4.991,1338,5.772,1339,6.472,1340,4.991,1341,5.772,1342,4.012,1343,6.234,1344,4.012,1345,4.012,1346,4.401,1347,5.872,1348,4.401,1349,4.401,1350,5.262,1351,4.012,1352,4.401,1353,4.401,1354,4.401,1355,4.401,1356,5.772,1357,4.401,1358,4.401,1359,4.401,1360,4.401,1361,4.401,1362,4.401,1363,4.401,1364,4.401,1365,4.401]],["title/classes/Detail.html",[0,0.241,158,1.948]],["body/classes/Detail.html",[0,0.38,2,0.868,3,0.086,4,0.086,5,0.086,11,1.486,32,0.237,38,1.551,39,0.511,42,0.278,44,0.645,45,0.009,46,0.556,47,0.627,51,0.154,57,0.137,58,1.06,79,1.423,89,0.997,90,0.997,91,0.945,135,0.006,136,0.007,137,0.006,144,3.881,157,0.846,158,3.381,160,2.758,161,1.45,163,2.662,177,2.758,186,1.915,205,3.251,219,2.337,220,2.201,230,2.41,263,4.175,281,5.964,980,4.038,982,3.577,983,4.353,984,4.774,985,4.774,986,4.774,987,5.664,988,4.774,989,4.774,990,4.774,991,4.774,992,3.787,994,4.774,995,6.789,996,4.353,997,4.353,998,4.353,999,6.696,1000,6.105,1366,5.414,1367,5.414]],["title/components/DetailComponent.html",[259,1.039,402,1.634]],["body/components/DetailComponent.html",[0,0.184,3,0.053,4,0.053,5,0.053,8,1.207,11,0.918,28,1.263,32,0.33,33,0.814,34,0.216,35,0.557,36,0.807,38,0.994,39,0.225,42,0.428,44,0.702,45,0.01,46,0.714,47,0.682,49,0.856,50,0.66,51,0.153,57,0.061,79,0.921,98,0.989,103,2.522,110,1.014,135,0.003,136,0.005,137,0.003,149,2.433,150,2.542,157,1.208,158,3.441,159,1.285,164,3.093,176,2.021,180,0.739,184,1.36,186,1.183,187,1.704,195,1.9,197,1.645,237,1.589,245,1.04,259,1.546,260,1.285,261,2.073,262,1.401,264,2.136,265,1.444,267,2.708,268,1.444,269,3.741,273,2.136,279,2.561,282,1.392,284,2.992,290,1.997,291,2.811,306,0.655,307,1.123,326,1.152,367,2.012,387,1.152,388,2.136,389,2.81,390,1.444,391,2.81,392,1.444,393,1.444,394,1.249,395,1.444,396,1.285,397,1.444,398,1.249,399,2.136,400,1.285,401,1.444,402,2.431,403,1.444,404,1.285,405,1.249,406,1.444,407,1.285,408,1.444,409,1.285,410,1.444,411,1.249,412,1.444,413,1.444,414,1.444,415,1.285,416,1.444,417,1.285,418,1.799,419,1.444,420,1.285,421,1.444,422,1.285,423,1.014,424,1.444,425,1.444,446,2.495,447,2.34,599,3.697,792,1.589,982,2.211,983,3.979,1006,2.963,1057,3.317,1066,2.95,1072,2.95,1074,2.95,1132,2.95,1186,3.979,1237,4.302,1247,2.69,1248,2.95,1368,2.95,1369,4.95,1370,5.891,1371,5.891,1372,4.95,1373,4.95,1374,6.51,1375,6.51,1376,6.51,1377,5.891,1378,3.346,1379,6.51,1380,4.736,1381,4.736,1382,5.195,1383,5.741,1384,4.95,1385,3.346,1386,3.346,1387,4.95,1388,5.891,1389,7.275,1390,3.346,1391,3.346,1392,3.346,1393,3.346,1394,3.346,1395,3.346,1396,3.346,1397,5.891,1398,3.346,1399,4.365,1400,3.346,1401,3.346,1402,3.346,1403,3.346,1404,1.704,1405,2.95,1406,3.346,1407,3.346,1408,3.346,1409,3.346,1410,3.346,1411,3.346,1412,3.346,1413,3.346,1414,3.346,1415,3.346,1416,3.346,1417,3.346,1418,4.95,1419,4.95,1420,3.346,1421,3.346,1422,3.346,1423,3.346,1424,3.346,1425,3.346,1426,3.346,1427,3.346,1428,3.346,1429,3.346,1430,3.346,1431,3.346,1432,4.95,1433,3.346,1434,2.95,1435,3.346,1436,3.346,1437,3.346,1438,3.346,1439,3.346,1440,3.346,1441,3.346,1442,3.346,1443,3.346,1444,4.95,1445,3.346,1446,3.346,1447,4.95,1448,3.346,1449,4.95,1450,3.346,1451,3.346,1452,3.346,1453,3.346,1454,3.346,1455,3.346,1456,3.346,1457,3.346,1458,3.346,1459,2.69,1460,3.346,1461,3.346,1462,3.346,1463,3.346,1464,3.346]],["title/components/DetailsComponent.html",[259,1.039,404,1.68]],["body/components/DetailsComponent.html",[0,0.232,3,0.067,4,0.067,5,0.067,32,0.345,33,0.962,34,0.272,35,0.658,36,0.579,39,0.451,42,0.429,44,0.697,45,0.01,46,0.744,47,0.677,51,0.136,57,0.076,66,1.822,79,0.914,98,1.248,110,1.279,135,0.004,136,0.006,137,0.004,149,2.875,150,2.524,157,1.285,158,2.603,159,1.621,180,0.933,195,1.621,259,1.593,260,1.621,261,2.449,262,1.768,264,1.822,265,1.822,268,1.822,269,3.85,273,2.524,279,2.445,282,1.645,290,1.988,291,2.938,306,0.826,356,2.953,387,1.454,388,2.524,389,2.524,390,1.822,391,3.125,392,1.822,393,1.822,394,1.577,395,1.822,396,1.621,397,1.822,398,1.577,399,2.524,400,1.621,401,1.822,402,2.84,403,1.822,404,2.78,405,1.577,406,1.822,407,1.621,408,1.822,409,1.621,410,1.822,411,1.577,412,1.822,413,1.822,414,1.822,415,1.621,416,1.822,417,1.621,418,2.125,419,1.822,420,1.621,421,1.822,422,1.621,423,1.279,424,1.822,425,1.822,599,2.65,746,2.151,792,2.006,865,2.419,945,3.723,992,5.318,1004,5.916,1006,3.501,1007,5.916,1015,3.723,1022,5.157,1056,5.157,1434,3.723,1465,3.723,1466,5.916,1467,6.709,1468,6.386,1469,5.848,1470,5.848,1471,7.242,1472,5.848,1473,4.222,1474,4.222,1475,5.848,1476,7.242,1477,4.222,1478,4.222,1479,5.848,1480,4.222,1481,4.222,1482,6.709,1483,5.848,1484,4.222,1485,4.222,1486,4.222,1487,4.222,1488,5.848,1489,4.222,1490,4.222,1491,4.222,1492,4.222,1493,5.848,1494,3.723,1495,5.848,1496,4.222,1497,4.222,1498,4.222,1499,4.222,1500,4.222,1501,5.848,1502,4.222,1503,4.222,1504,5.848]],["title/classes/EmptyLightCards.html",[0,0.241,225,2.079]],["body/classes/EmptyLightCards.html",[0,0.46,2,0.684,3,0.068,4,0.068,5,0.068,8,1.371,12,1.229,32,0.378,33,1.393,34,0.275,35,0.662,37,1.947,38,1.443,39,0.396,42,0.219,45,0.01,49,0.737,50,0.568,51,0.12,52,0.633,57,0.155,58,0.834,76,1.199,77,2.095,89,1.236,90,1.236,91,1.172,124,1.702,135,0.004,136,0.006,137,0.004,157,0.666,211,3.203,212,2.999,213,2.171,217,2.442,218,2.54,219,1.84,220,1.733,221,2.254,222,3.315,223,4.598,224,2.44,225,3.454,226,2.171,227,3.099,228,2.894,229,2.343,230,1.898,231,3.315,232,2.082,233,3.203,234,2.096,235,1.229,236,2.171,237,2.025,238,3.203,239,2.254,240,1.993,241,1.468,242,1.468,243,1.733,244,1.733,245,1.325,246,1.394,247,1.549,248,2.442,249,3.372,250,2.442,251,2.254,252,2.442,253,2.442,254,2.442,255,2.442,256,2.442,257,2.442,258,2.254,1505,4.263]],["title/components/FeedComponent.html",[259,1.039,405,1.634]],["body/components/FeedComponent.html",[0,0.254,3,0.073,4,0.099,5,0.099,17,2.206,32,0.329,33,1.021,34,0.297,35,0.698,36,0.631,39,0.31,42,0.403,44,0.549,45,0.009,46,0.721,47,0.534,51,0.168,52,0.684,57,0.083,98,1.362,105,1.432,110,1.396,115,2.061,135,0.005,136,0.006,137,0.005,157,0.97,218,1.989,219,1.989,220,1.873,234,2.265,235,1.329,251,3.712,259,1.667,260,1.769,261,2.599,262,1.929,263,2.533,264,1.989,265,1.989,267,3.227,268,1.989,269,3.886,271,3.896,273,2.679,282,1.746,284,3.453,285,2.051,290,1.704,291,2.318,306,0.902,307,1.546,308,1.769,310,1.587,311,1.82,326,1.587,366,1.929,367,1.873,368,1.929,369,1.929,370,1.929,371,1.929,372,1.63,373,1.82,374,1.929,375,1.929,376,1.929,377,1.873,378,1.929,379,1.873,380,1.929,381,1.929,382,1.929,383,1.929,387,1.587,388,2.679,389,2.679,390,1.989,391,3.242,392,1.989,393,1.989,394,1.721,395,1.989,396,1.769,397,1.989,398,1.721,399,2.679,400,1.769,401,1.989,402,1.721,403,1.989,404,1.769,405,2.805,406,1.989,407,1.769,408,1.989,409,1.769,410,1.989,411,1.721,412,1.989,413,1.989,414,1.989,415,1.769,416,1.989,417,1.769,418,2.256,419,1.989,420,1.769,421,1.989,422,1.769,423,1.396,424,1.989,425,1.989,636,2.436,1100,4.342,1127,5.644,1466,6.19,1468,6.624,1506,4.064,1507,7.02,1508,6.208,1509,6.208,1510,4.608,1511,4.608,1512,4.608,1513,4.608,1514,3.705,1515,4.608,1516,4.608,1517,4.608,1518,3.705,1519,4.608,1520,4.608]],["title/injectables/FeedFiltersEffects.html",[572,3.061,632,1.231]],["body/injectables/FeedFiltersEffects.html",[0,0.302,3,0.087,4,0.087,5,0.087,12,2.005,17,2.149,28,1.775,32,0.305,34,0.354,35,0.782,39,0.369,42,0.357,44,0.653,45,0.009,46,0.563,47,0.635,49,1.321,50,0.731,51,0.179,52,0.813,57,0.099,59,2.694,66,3.001,89,0.792,90,0.792,91,0.751,97,3.105,115,2.162,135,0.006,136,0.007,137,0.006,157,1.087,161,1.468,180,1.536,279,2.161,285,2.44,306,1.073,307,1.839,308,2.104,309,3.281,310,1.888,311,2.165,326,1.888,572,4.863,594,3.281,600,3.44,603,4.087,632,1.956,836,2.519,842,4.93,863,6.131,865,3.14,866,4.572,875,4.364,876,3.418,909,5.59,946,3.281,947,3.013,1134,6.131,1135,6.131,1136,6.131,1158,4.087,1521,6.735,1522,4.833,1523,7.637,1524,5.307,1525,5.481,1526,6.953,1527,5.481]],["title/modules/FeedModule.html",[426,1.779,1528,3.264]],["body/modules/FeedModule.html",[0,0.26,3,0.075,4,0.1,5,0.1,36,0.647,45,0.009,51,0.182,57,0.085,73,1.919,105,1.467,135,0.005,136,0.006,137,0.005,235,1.361,306,0.924,317,2.825,318,2.825,366,1.976,367,1.919,368,1.976,369,1.976,370,1.976,371,1.976,372,1.669,373,1.864,374,1.976,375,1.976,376,1.976,377,1.919,378,1.976,379,1.919,380,1.976,381,1.976,382,1.976,383,1.976,387,1.626,400,3.122,405,3.274,407,3.122,415,3.122,417,3.122,420,3.122,422,3.122,426,1.919,428,2.242,429,2.595,430,4.253,431,3.614,432,2.825,433,3.619,441,3.614,442,2.825,444,3.335,448,3.335,453,3.959,456,2.704,457,5.562,458,5.562,459,3.118,461,4.162,462,3.52,463,3.794,465,3.301,470,5.071,473,5.562,474,3.794,475,3.794,476,4.162,477,3.794,478,4.705,479,3.794,481,3.794,482,3.794,483,3.794,501,2.704,1124,3.794,1232,5.688,1243,6.688,1528,6.792,1529,4.162,1530,4.162,1531,4.162,1532,4.162,1533,5.688,1534,4.719,1535,4.719,1536,4.162,1537,4.719,1538,3.794,1539,4.719,1540,4.719,1541,3.794,1542,4.719,1543,4.719,1544,4.719,1545,3.794,1546,3.794,1547,6.308,1548,3.794,1549,3.794,1550,4.719,1551,4.719,1552,4.719]],["title/modules/FeedRoutingModule.html",[426,1.779,1533,3.061]],["body/modules/FeedRoutingModule.html",[0,0.307,3,0.088,4,0.112,5,0.112,36,0.763,45,0.01,51,0.173,57,0.101,105,1.73,135,0.006,136,0.007,137,0.006,176,1.456,235,1.606,259,1.918,306,1.09,366,2.332,367,2.264,368,2.332,369,2.332,370,2.332,371,2.332,372,1.97,373,2.199,374,2.332,375,2.332,376,2.332,377,2.264,378,2.332,379,2.264,380,2.332,381,2.332,382,2.332,383,2.332,398,2.873,402,2.623,405,2.623,428,2.645,433,2.837,444,2.944,448,3.713,491,4.153,493,5.238,494,4.829,495,3.19,496,5.238,497,4.477,500,6.343,504,4.477,509,4.91,618,4.477,1054,4.153,1100,4.912,1244,4.91,1533,4.912,1536,4.91,1553,5.568,1554,5.568,1555,5.568,1556,7.694,1557,5.568,1558,5.568,1559,5.568,1560,5.568]],["title/classes/Filter.html",[0,0.241,423,1.326]],["body/classes/Filter.html",[0,0.211,2,0.614,3,0.061,4,0.061,5,0.061,7,1.705,11,1.904,24,2.664,28,0.977,30,3.813,32,0.334,34,0.247,35,0.614,36,1.045,38,0.646,39,0.466,42,0.403,44,0.827,45,0.01,46,0.712,47,0.803,51,0.078,57,0.069,62,3.573,73,2.22,86,2.594,89,0.554,90,0.554,91,1.135,115,1.393,135,0.004,136,0.006,137,0.004,146,2.665,157,1.384,180,1.684,195,2.443,202,2.746,218,3.523,219,1.653,220,1.557,259,1.296,282,1.536,290,2.093,291,1.43,294,4.389,379,2.22,423,2.746,501,3.128,586,3.002,599,4.353,658,5.469,688,3.427,721,4.389,746,3.241,792,2.594,913,4.851,1108,4.851,1277,4.814,1345,4.389,1561,7.073,1562,3.377,1563,5.46,1564,5.46,1565,5.46,1566,5.46,1567,5.46,1568,8.021,1569,5.46,1570,5.46,1571,5.46,1572,5.46,1573,5.46,1574,5.46,1575,5.46,1576,5.46,1577,5.46,1578,5.46,1579,5.46,1580,5.46,1581,6.936,1582,6.363,1583,3.829,1584,3.829,1585,3.829,1586,3.829,1587,3.829,1588,5.46,1589,3.829,1590,5.46,1591,6.936,1592,3.829,1593,6.936,1594,5.46,1595,5.46,1596,5.46,1597,5.46,1598,3.829,1599,5.46,1600,5.46,1601,3.829,1602,3.829,1603,3.829,1604,3.829,1605,3.829,1606,3.829,1607,3.829,1608,3.829,1609,3.829,1610,3.829,1611,3.829,1612,3.829,1613,5.46,1614,3.829]],["title/injectables/FilterService.html",[632,1.231,1524,2.891]],["body/injectables/FilterService.html",[0,0.259,3,0.075,4,0.075,5,0.075,8,1.138,28,2.074,34,0.304,35,0.708,39,0.477,42,0.426,45,0.01,49,0.814,50,0.627,51,0.144,57,0.114,58,0.921,62,2.97,135,0.007,136,0.006,137,0.005,157,0.984,161,2.115,176,2.125,180,1.833,195,2.724,218,2.031,219,2.031,220,1.913,270,3.783,279,2.754,282,1.771,290,2.079,306,0.921,423,2.295,591,3.109,592,3.109,593,2.817,600,4.452,632,1.771,746,3.859,836,2.163,987,3.509,1006,3.769,1108,4.403,1524,4.159,1615,3.783,1616,7.094,1617,7.575,1618,7.575,1619,7.575,1620,7.094,1621,6.295,1622,4.705,1623,4.705,1624,4.705,1625,4.705,1626,4.705,1627,4.705,1628,4.149,1629,6.295,1630,4.705,1631,5.704,1632,4.705,1633,4.705,1634,5.704,1635,4.705,1636,5.704,1637,4.705,1638,4.705,1639,7.575,1640,4.705,1641,4.705,1642,4.705,1643,4.705,1644,4.705,1645,4.705,1646,4.705,1647,4.705,1648,4.705,1649,4.705,1650,4.705,1651,4.705,1652,4.705,1653,4.705,1654,4.149,1655,4.149,1656,4.149,1657,4.149]],["title/components/FiltersComponent.html",[259,1.039,407,1.68]],["body/components/FiltersComponent.html",[0,0.301,3,0.087,4,0.087,5,0.087,32,0.24,33,1.143,34,0.353,39,0.513,42,0.357,45,0.009,46,0.713,51,0.111,57,0.099,98,1.617,110,1.658,135,0.006,136,0.007,137,0.006,157,1.086,259,1.812,260,2.101,261,2.908,262,2.291,264,2.361,265,2.361,267,3.508,268,2.361,269,3.95,273,2.997,282,1.954,284,3.69,290,1.502,291,2.043,306,1.071,387,1.885,388,2.997,389,2.997,390,2.361,391,3.464,392,2.361,393,2.361,394,2.043,395,2.361,396,2.101,397,2.361,398,2.043,399,2.997,400,2.101,401,2.361,402,2.043,403,2.361,404,2.101,405,2.043,406,2.361,407,3.082,408,2.361,409,2.101,410,2.361,411,2.043,412,2.361,413,2.361,414,2.361,415,2.101,416,2.361,417,2.101,418,2.524,419,2.361,420,2.101,421,2.361,422,2.101,423,1.658,424,2.361,425,2.361,1108,4.858,1123,5.337,1658,4.824,1659,6.946,1660,5.471,1661,5.471]],["title/classes/GuidService.html",[0,0.241,638,2.747]],["body/classes/GuidService.html",[0,0.337,2,0.98,3,0.097,4,0.097,5,0.097,32,0.268,34,0.394,35,0.837,38,1.354,39,0.54,42,0.429,45,0.009,51,0.151,53,4.116,54,2.81,57,0.111,79,0.956,135,0.006,136,0.008,137,0.006,180,1.644,270,4.914,279,2.493,282,2.093,290,2.043,306,1.196,638,4.67,1278,6.562,1628,5.39,1662,5.39,1663,8.349,1664,8.023,1665,7.442,1666,6.113,1667,6.113,1668,7.442,1669,6.113,1670,6.113,1671,6.113]],["title/classes/HandleUnexpectedError.html",[0,0.241,240,1.293]],["body/classes/HandleUnexpectedError.html",[0,0.44,2,0.78,3,0.077,4,0.077,5,0.077,8,1.342,32,0.388,33,1.35,34,0.314,35,0.724,36,0.882,37,2.136,38,1.412,39,0.327,40,1.817,42,0.371,44,0.58,45,0.01,46,0.5,47,0.564,49,0.842,50,0.649,51,0.131,52,0.722,57,0.151,58,0.952,76,1.369,77,2.108,79,0.761,89,1.154,90,1.154,91,1.094,124,1.681,135,0.005,136,0.007,137,0.005,157,1.377,159,1.868,186,1.721,214,2.77,224,2.421,232,1.721,240,2.269,241,1.676,242,1.676,243,1.978,244,1.978,245,1.512,246,1.591,247,1.768,762,2.788,942,3.966,1086,3.054,1087,3.547,1088,3.966,1089,3.966,1255,2.913,1256,3.403,1258,3.403,1259,3.403,1260,3.403,1261,4.502,1262,3.215,1672,6.438,1673,4.866]],["title/classes/HandleUnexpectedError-1.html",[0,0.201,240,1.077,338,2.408]],["body/classes/HandleUnexpectedError-1.html",[0,0.431,2,0.819,3,0.081,4,0.081,5,0.081,8,1.333,32,0.389,33,1.334,34,0.329,35,0.747,36,0.91,37,2.122,38,1.403,39,0.343,40,1.906,42,0.379,44,0.609,45,0.01,46,0.524,47,0.591,49,0.883,50,0.681,51,0.104,52,0.758,57,0.15,58,0.999,76,1.436,77,2.027,89,1.131,90,1.131,91,1.072,124,1.707,135,0.005,136,0.007,137,0.005,214,2.835,224,2.478,232,1.806,240,2.312,241,1.758,242,1.758,243,2.075,244,2.075,245,1.586,246,1.669,247,1.855,321,4.06,525,4.917,950,3.204,1281,4.231,1282,4.231,1674,3.204,1675,6.643,1676,5.105,1677,4.954,1678,3.57,1679,3.807,1680,3.807,1681,3.807,1682,3.57]],["title/classes/HandleUnexpectedError-2.html",[0,0.201,240,1.077,517,3.214]],["body/classes/HandleUnexpectedError-2.html",[0,0.457,2,0.66,3,0.065,4,0.065,5,0.065,8,1.363,12,1.187,32,0.387,33,1.383,34,0.266,35,0.646,36,0.787,37,2.085,38,1.434,39,0.445,40,1.537,42,0.34,44,0.491,45,0.01,46,0.423,47,0.477,49,0.712,50,0.549,51,0.117,52,0.611,57,0.154,58,0.806,76,1.158,77,2.068,89,1.228,90,1.228,91,1.164,124,1.686,135,0.004,136,0.006,137,0.004,157,0.644,211,3.144,212,3.649,213,2.097,214,2.541,217,2.359,218,2.48,219,1.777,220,1.674,221,2.177,222,3.254,223,4.563,224,2.404,225,3.144,226,2.097,227,3.042,228,2.825,229,2.263,230,1.833,231,3.254,232,2.032,233,3.144,234,2.024,235,1.187,236,2.097,237,1.956,238,3.144,239,2.177,240,2.117,241,1.418,242,1.418,243,1.674,244,1.674,245,1.279,246,1.346,247,1.496,248,2.359,249,2.359,250,2.359,251,2.177,252,2.359,253,2.359,254,2.359,255,2.359,256,2.359,257,3.292,258,2.177,1683,5.746,1684,4.117]],["title/classes/HandleUnexpectedError-3.html",[0,0.201,240,1.077,1685,3.214]],["body/classes/HandleUnexpectedError-3.html",[0,0.435,2,0.757,3,0.075,4,0.075,5,0.075,8,1.353,9,2.037,10,2.808,11,1.296,12,1.361,32,0.387,33,1.338,34,0.305,35,0.709,36,0.864,37,2.119,38,1.401,39,0.424,40,1.762,42,0.365,44,0.563,45,0.01,46,0.485,47,0.547,49,0.816,50,0.629,51,0.128,52,0.7,57,0.15,58,0.924,76,1.328,77,2.082,79,0.986,89,1.143,90,1.143,91,1.083,124,1.664,135,0.005,136,0.006,137,0.005,185,2.422,214,2.728,224,2.384,232,1.669,240,2.242,241,1.626,242,1.626,245,1.467,246,1.543,247,1.715,510,2.962,526,4.786,1097,3.614,1328,3.906,1404,2.404,1686,2.825,1687,6.308,1688,4.719,1689,4.412,1690,2.962,1691,3.906,1692,3.906,1693,3.906,1694,3.301,1695,3.301,1696,3.301,1697,3.301,1698,3.301,1699,3.301,1700,3.301,1701,3.301,1702,3.118,1703,3.118,1704,3.118]],["title/injectables/HandlebarsService.html",[632,1.231,1237,2.891]],["body/injectables/HandlebarsService.html",[0,0.156,3,0.045,4,0.045,5,0.045,17,1.496,24,3.277,28,1.357,32,0.262,34,0.474,35,0.49,36,0.729,39,0.19,42,0.432,44,0.634,45,0.01,46,0.7,47,0.616,49,0.754,50,0.948,51,0.159,53,2.002,54,1.299,57,0.051,79,1.223,135,0.008,136,0.004,137,0.003,157,1.066,159,1.085,161,1.729,163,1.389,166,1.619,176,1.688,180,1.931,187,2.219,205,1.771,262,1.183,279,2.816,282,1.226,286,3.718,287,4.456,290,2.274,291,3.037,306,0.553,307,0.948,308,1.085,317,1.692,318,1.692,326,0.973,332,2.492,338,2.879,418,1.027,632,1.226,637,1.692,746,1.439,792,3.24,828,2.608,836,1.299,960,1.867,961,2.272,963,5.626,966,5.19,982,1.867,1000,2.272,1057,3.044,1237,2.879,1247,2.272,1380,4.274,1381,2.272,1685,2.492,1705,2.492,1706,4.357,1707,4.357,1708,4.357,1709,5.975,1710,5.975,1711,5.975,1712,5.975,1713,5.975,1714,5.317,1715,5.975,1716,5.975,1717,5.975,1718,5.975,1719,5.975,1720,5.975,1721,5.975,1722,5.317,1723,2.826,1724,3.337,1725,4.357,1726,4.357,1727,2.826,1728,2.826,1729,2.826,1730,2.826,1731,2.826,1732,2.826,1733,2.826,1734,2.826,1735,2.826,1736,2.826,1737,2.826,1738,2.826,1739,2.826,1740,2.826,1741,2.826,1742,2.826,1743,2.826,1744,2.826,1745,2.272,1746,2.826,1747,2.826,1748,2.826,1749,2.826,1750,2.826,1751,2.826,1752,2.826,1753,2.826,1754,2.826,1755,2.826,1756,2.826,1757,2.826,1758,2.826,1759,2.826,1760,2.826,1761,2.826,1762,2.826,1763,2.826,1764,2.826,1765,2.826,1766,2.826,1767,2.272,1768,2.826,1769,2.826,1770,2.826,1771,2.826,1772,2.826,1773,2.826,1774,2.826,1775,2.826,1776,7.53,1777,5.317,1778,7.53,1779,7.69,1780,2.826,1781,2.826,1782,2.826,1783,2.826,1784,2.826,1785,2.826,1786,2.826,1787,6.82,1788,2.826,1789,6.455,1790,2.826,1791,2.826,1792,2.826,1793,5.975,1794,2.826,1795,4.357,1796,2.826,1797,2.826,1798,2.826,1799,2.826,1800,2.826,1801,2.826,1802,2.826,1803,2.826,1804,2.826,1805,2.826,1806,2.826,1807,2.826,1808,2.826,1809,2.826,1810,2.826,1811,2.826,1812,2.826,1813,2.826,1814,2.826,1815,2.826,1816,2.826,1817,2.826,1818,2.826,1819,2.826,1820,4.357,1821,5.317,1822,4.357,1823,5.317,1824,2.826]],["title/classes/I18n.html",[0,0.241,144,2.011]],["body/classes/I18n.html",[0,0.36,2,1.048,3,0.104,4,0.104,5,0.104,32,0.286,38,1.307,39,0.521,42,0.336,44,1.018,45,0.009,46,0.671,47,0.757,51,0.133,57,0.118,79,1.291,89,0.945,90,0.945,91,0.895,135,0.007,136,0.008,137,0.007,144,3.56,161,2.287,163,3.212,627,3.912,960,5.118,1825,5.762,1826,6.534,1827,6.534]],["title/components/IconComponent.html",[259,1.039,409,1.68]],["body/components/IconComponent.html",[0,0.223,3,0.064,4,0.09,5,0.09,32,0.371,33,0.934,34,0.261,35,0.639,36,0.555,39,0.272,42,0.435,44,0.483,45,0.01,46,0.673,47,0.469,49,0.7,51,0.133,57,0.073,79,1.111,98,1.196,105,1.258,110,1.226,135,0.004,136,0.006,137,0.004,146,2.721,149,2.791,150,3.44,157,0.888,235,1.167,237,3.378,259,1.557,260,1.554,261,2.377,262,1.695,263,2.225,264,1.747,265,1.747,267,3.015,268,1.747,269,3.831,271,3.564,273,1.747,282,1.597,284,3.268,290,1.111,291,1.511,306,0.792,366,1.695,367,1.645,368,1.695,369,1.695,370,1.695,371,1.695,372,1.432,373,1.599,374,1.695,375,1.695,376,1.695,377,1.645,378,1.695,379,1.645,380,1.695,381,1.695,382,1.695,383,1.695,387,1.394,388,2.45,389,2.45,390,1.747,391,3.068,392,1.747,393,1.747,394,1.511,395,1.747,396,1.554,397,1.747,398,1.511,399,2.45,400,1.554,401,1.747,402,1.511,403,1.747,404,1.554,405,1.511,406,1.747,407,1.554,408,1.747,409,2.73,410,1.747,411,1.511,412,1.747,413,1.747,414,1.747,415,1.554,416,1.747,417,1.554,418,2.063,419,1.747,420,1.554,421,1.747,422,1.554,423,1.226,424,1.747,425,1.747,456,2.319,961,3.254,963,3.971,966,4.565,1041,5.007,1043,6.27,1459,5.716,1828,3.569,1829,7.11,1830,6.559,1831,4.047,1832,5.678,1833,5.678,1834,6.559,1835,6.559,1836,4.047,1837,7.11,1838,5.678,1839,4.047,1840,4.047,1841,4.047,1842,4.047,1843,4.047,1844,4.047,1845,4.047,1846,4.047,1847,4.047,1848,4.047,1849,4.047,1850,4.047,1851,4.047,1852,4.047,1853,4.047,1854,4.047,1855,4.047,1856,4.047,1857,4.047,1858,4.047,1859,4.047,1860,4.047,1861,4.047,1862,4.047,1863,6.559,1864,6.603,1865,6.559,1866,5.678,1867,6.559,1868,5.678,1869,4.047,1870,6.559,1871,4.047,1872,4.047,1873,4.047,1874,4.047,1875,4.047,1876,4.047,1877,4.047,1878,3.569,1879,5.678]],["title/components/IframeDisplayComponent.html",[259,1.039,411,1.634]],["body/components/IframeDisplayComponent.html",[0,0.178,3,0.051,4,0.077,5,0.077,14,1.705,17,2.272,24,1.35,32,0.326,33,0.792,34,0.208,35,0.542,36,0.442,39,0.217,42,0.425,44,0.687,45,0.01,46,0.703,47,0.668,50,0.43,51,0.162,52,0.479,57,0.058,61,1.532,79,1.163,87,2.648,98,0.953,105,1.002,110,0.977,115,1.832,135,0.003,136,0.005,137,0.003,157,0.753,161,0.864,164,3.41,180,1.826,182,3.656,184,1.958,185,3.231,186,2.539,235,0.93,236,1.643,241,1.111,259,1.369,260,1.238,261,2.017,262,1.35,263,1.773,264,1.392,265,1.392,267,2.65,268,1.392,269,3.722,271,3.023,273,2.079,279,2.473,282,1.355,284,2.939,285,1.436,290,1.582,291,1.204,306,0.631,307,1.082,308,1.238,310,1.111,311,1.274,326,1.111,338,2.131,366,1.35,367,1.311,368,1.35,369,1.35,370,1.35,371,1.35,372,1.141,373,1.274,374,1.35,375,1.35,376,1.35,377,1.311,378,1.35,379,1.311,380,1.35,381,1.35,382,1.35,383,1.35,387,1.111,388,2.079,389,2.079,390,1.392,391,2.759,392,1.392,393,1.392,394,1.204,395,1.392,396,1.238,397,1.392,398,1.204,399,2.079,400,1.238,401,1.392,402,1.204,403,1.392,404,1.238,405,1.204,406,1.392,407,1.238,408,1.392,409,1.238,410,1.392,411,2.388,412,1.392,413,1.392,414,1.392,415,1.238,416,1.392,417,1.238,418,2.095,419,1.392,420,1.238,421,1.392,422,1.238,423,0.977,424,1.392,425,1.392,446,2.405,447,2.255,510,2.024,526,3.946,792,1.532,871,2.844,876,1.585,914,3.872,949,2.593,1006,2.883,1102,2.844,1382,5.083,1383,5.638,1399,2.844,1404,1.643,1702,4.521,1703,4.914,1864,6.329,1880,2.844,1881,4.816,1882,5.765,1883,4.816,1884,5.765,1885,5.765,1886,5.765,1887,4.816,1888,4.816,1889,7.646,1890,7.816,1891,5.765,1892,5.765,1893,4.816,1894,4.816,1895,6.033,1896,3.225,1897,4.816,1898,3.225,1899,3.225,1900,3.225,1901,3.225,1902,3.225,1903,3.225,1904,3.225,1905,3.225,1906,3.225,1907,3.225,1908,3.225,1909,3.225,1910,3.225,1911,3.225,1912,3.225,1913,3.225,1914,3.592,1915,2.593,1916,2.593,1917,2.844,1918,3.225,1919,3.225,1920,3.225,1921,3.225,1922,3.225,1923,3.225,1924,3.225,1925,3.225,1926,3.225,1927,3.225,1928,3.225,1929,3.225,1930,3.225,1931,3.225,1932,3.225,1933,3.225,1934,3.225,1935,3.225,1936,7.178,1937,3.225,1938,3.225,1939,3.225,1940,3.225,1941,3.225,1942,3.225,1943,3.225,1944,3.225,1945,3.225,1946,3.225,1947,3.225,1948,3.225,1949,3.225,1950,3.225,1951,3.225,1952,3.225,1953,3.225,1954,4.816,1955,7.178,1956,4.816,1957,4.816,1958,6.394]],["title/classes/InitAuthStatus.html",[0,0.241,60,2.079]],["body/classes/InitAuthStatus.html",[0,0.43,1,2.734,2,0.516,3,0.051,4,0.051,5,0.101,6,1.638,7,1.431,8,1.359,9,3.37,10,1.431,11,1.753,12,2.518,13,3.406,14,3.613,15,1.527,16,3.297,17,2.017,18,3.297,19,3.141,20,2.642,21,1.842,22,1.767,23,3.252,24,2.409,25,3.042,26,3.297,27,3.042,28,1.469,29,2.753,30,3.163,31,2.753,32,0.378,33,1.285,34,0.207,35,0.54,36,0.936,37,1.896,38,1.342,39,0.323,40,1.201,41,2.362,42,0.296,44,0.383,45,0.01,46,0.33,47,0.372,49,0.556,50,0.429,51,0.117,52,0.477,53,2.645,54,1.478,55,2.209,56,1.638,57,0.146,58,0.629,59,1.581,60,3.033,61,1.527,62,2.012,63,2.734,64,1.527,65,3.163,66,3.432,67,3.941,68,3.375,69,2.734,70,1.767,71,2.362,72,2.934,73,2.339,74,3.246,75,2.734,76,1.352,77,1.876,78,1.431,79,1.068,80,1.478,81,1.478,82,1.527,83,1.581,84,3.297,85,3.297,86,2.734,87,3.163,88,2.753,89,1.104,90,1.104,91,1.047,92,1.842,93,1.767,94,1.842,95,1.842,96,1.7,97,1.307,98,0.95,99,1.767,100,2.409,101,2.753,102,2.734,103,2.448,104,1.767,105,0.999,106,1.767,107,1.767,108,1.638,109,3.375,110,0.974,111,1.842,112,1.7,113,1.767,114,2.753,115,1.226,116,1.842,117,1.842,118,3.658,119,1.767,120,1.842,121,2.753,122,1.842,123,2.642,124,0.677,125,1.842,126,1.767,127,1.842,128,1.767,129,1.842,130,2.642,131,2.642,132,1.842,133,1.842,134,1.7,135,0.003,136,0.005,137,0.003,214,2.209,1959,4.805,1960,3.215]],["title/classes/InitFilters.html",[0,0.241,600,2.747]],["body/classes/InitFilters.html",[0,0.391,2,0.908,3,0.09,4,0.09,5,0.09,8,1.303,32,0.39,33,1.275,34,0.365,35,0.798,36,0.972,37,1.978,38,1.371,39,0.381,40,2.113,42,0.398,44,0.675,45,0.009,46,0.581,47,0.655,49,0.979,50,0.755,51,0.157,52,0.84,57,0.147,58,1.108,61,2.689,62,2.971,77,1.948,89,1.026,90,1.026,91,0.972,135,0.006,136,0.007,137,0.006,146,2.056,161,1.516,214,2.976,423,2.349,501,4.065,586,4.261,587,3.958,590,4.99,591,3.739,592,3.739,593,4.248,594,3.388,595,4.221,596,3.958,597,4.55,598,4.99,599,3.552,600,4.865,601,6.257,602,4.99,603,4.221,1961,7.095,1962,5.659]],["title/classes/Input.html",[0,0.241,150,1.889]],["body/classes/Input.html",[0,0.448,2,0.651,3,0.064,4,0.064,5,0.064,8,0.651,11,1.114,32,0.312,36,0.556,38,1.555,39,0.556,42,0.208,44,0.484,45,0.01,46,0.731,47,0.47,50,0.949,51,0.133,57,0.152,58,1.113,79,1.397,89,1.177,90,1.177,91,1.116,100,1.699,135,0.004,136,0.006,137,0.004,140,2.231,141,3.578,142,3.259,143,4.776,144,3.571,145,2.429,146,3.079,147,2.429,148,2.429,149,1.995,150,2.834,151,2.429,152,2.429,153,2.429,154,2.429,155,2.429,157,0.634,158,1.807,159,1.558,160,2.067,161,1.087,162,2.429,163,1.995,164,1.928,165,2.429,166,2.325,167,2.429,168,2.429,169,2.429,170,2.429,171,2.429,172,2.429,173,2.429,174,2.429,175,3.405,176,1.061,177,2.898,178,2.429,179,3.405,180,1.256,181,1.603,182,2.898,183,2.429,184,1.65,185,1.558,186,1.435,187,2.067,188,2.429,189,2.429,190,2.429,191,2.429,192,2.325,193,2.325,194,2.325,195,3.063,196,4.078,197,1.995,198,2.231,199,2.325,200,2.325,201,2.325,202,1.751,203,3.932,204,3.932,205,3.158,206,3.932,207,3.932,208,3.913,209,3.932,210,3.932,1963,4.058]],["title/injectables/LightCardEffects.html",[569,3.061,632,1.231]],["body/injectables/LightCardEffects.html",[0,0.287,3,0.083,4,0.083,5,0.083,8,0.836,17,2.099,28,1.719,32,0.295,34,0.337,35,0.758,39,0.351,42,0.346,44,0.622,45,0.009,46,0.536,47,0.604,49,0.902,50,0.696,51,0.177,52,0.774,57,0.094,89,0.754,90,0.754,91,0.715,115,2.134,135,0.005,136,0.007,137,0.005,157,1.053,161,1.999,180,1.742,221,2.757,227,2.397,228,3.668,279,2.093,285,2.322,306,1.021,307,1.75,308,2.002,310,1.796,311,2.06,326,1.796,360,4.228,569,4.711,632,1.895,636,2.757,637,3.122,828,3.122,836,2.397,842,4.874,865,2.988,866,4.467,875,4.228,876,3.877,878,2.988,901,5.415,946,3.122,947,2.867,954,3.89,955,3.89,1057,4.017,1063,3.89,1077,5.998,1090,4.193,1091,4.193,1092,4.193,1964,6.579,1965,4.599,1966,7.461,1967,5.215,1968,6.736,1969,6.736,1970,6.736,1971,6.736,1972,6.736,1973,5.94,1974,6.736,1975,6.736,1976,6.736,1977,5.94,1978,5.215,1979,5.215]],["title/classes/LoadCard.html",[0,0.241,1087,2.151]],["body/classes/LoadCard.html",[0,0.44,2,0.78,3,0.077,4,0.077,5,0.077,8,1.342,32,0.388,33,1.35,34,0.314,35,0.724,36,0.882,37,2.136,38,1.412,39,0.327,40,1.817,42,0.371,44,0.58,45,0.01,46,0.5,47,0.564,49,0.842,50,0.649,51,0.131,52,0.722,57,0.151,58,0.952,76,1.369,77,2.108,79,0.761,89,1.154,90,1.154,91,1.094,124,1.681,135,0.005,136,0.007,137,0.005,157,1.377,159,1.868,186,1.721,214,2.77,224,2.421,232,1.721,240,2.132,241,1.676,242,1.676,243,1.978,244,1.978,245,1.512,246,1.591,247,1.768,762,2.788,942,3.966,1086,3.054,1087,3.774,1088,3.966,1089,3.966,1255,2.913,1256,3.403,1258,4.502,1259,3.403,1260,3.403,1261,3.403,1262,3.215,1980,6.438,1981,4.866]],["title/classes/LoadCardFailure.html",[0,0.241,1088,2.406]],["body/classes/LoadCardFailure.html",[0,0.44,2,0.78,3,0.077,4,0.077,5,0.077,8,1.342,32,0.388,33,1.35,34,0.314,35,0.724,36,0.882,37,2.136,38,1.412,39,0.327,40,1.817,42,0.371,44,0.58,45,0.01,46,0.5,47,0.564,49,0.842,50,0.649,51,0.131,52,0.722,57,0.151,58,0.952,76,1.369,77,2.108,79,0.761,89,1.154,90,1.154,91,1.094,124,1.681,135,0.005,136,0.007,137,0.005,157,1.377,159,1.868,186,1.721,214,2.77,224,2.421,232,1.721,240,2.132,241,1.676,242,1.676,243,1.978,244,1.978,245,1.512,246,1.591,247,1.768,762,2.788,942,3.966,1086,3.054,1087,3.547,1088,4.221,1089,3.966,1255,2.913,1256,3.403,1258,3.403,1259,4.502,1260,3.403,1261,3.403,1262,3.215,1982,6.438,1983,4.866]],["title/classes/LoadCardSuccess.html",[0,0.241,1089,2.406]],["body/classes/LoadCardSuccess.html",[0,0.44,2,0.78,3,0.077,4,0.077,5,0.077,8,1.342,32,0.388,33,1.35,34,0.314,35,0.724,36,0.882,37,2.136,38,1.412,39,0.327,40,1.817,42,0.371,44,0.58,45,0.01,46,0.5,47,0.564,49,0.842,50,0.649,51,0.131,52,0.722,57,0.151,58,0.952,76,1.369,77,2.108,79,0.761,89,1.154,90,1.154,91,1.094,124,1.681,135,0.005,136,0.007,137,0.005,157,1.377,159,1.868,186,1.721,214,2.77,224,2.421,232,1.721,240,2.132,241,1.676,242,1.676,243,1.978,244,1.978,245,1.512,246,1.591,247,1.768,762,2.788,942,3.966,1086,3.054,1087,3.547,1088,3.966,1089,4.221,1255,2.913,1256,3.403,1258,3.403,1259,3.403,1260,4.502,1261,3.403,1262,3.215,1984,6.438,1985,4.866]],["title/classes/LoadConfig.html",[0,0.241,321,2.406]],["body/classes/LoadConfig.html",[0,0.437,2,0.852,3,0.084,4,0.084,5,0.084,8,1.348,32,0.374,33,1.351,34,0.343,35,0.767,37,1.921,38,1.418,42,0.273,45,0.01,49,0.919,50,0.709,51,0.108,52,0.788,57,0.152,58,1.04,76,1.495,77,2.066,89,1.148,90,1.148,91,1.088,124,1.728,135,0.005,136,0.007,137,0.005,224,2.526,232,1.879,240,2.225,241,1.83,242,1.83,243,2.16,244,2.16,245,1.651,246,1.737,247,1.93,321,4.365,525,4.958,950,3.334,1281,4.312,1282,4.312,1674,3.334,1677,3.962,1678,3.716,1679,5.084,1680,3.962,1681,3.962,1682,3.716,1986,5.313]],["title/classes/LoadConfigFailure.html",[0,0.241,1281,2.507]],["body/classes/LoadConfigFailure.html",[0,0.431,2,0.819,3,0.081,4,0.081,5,0.081,8,1.333,32,0.389,33,1.334,34,0.329,35,0.747,36,0.91,37,2.122,38,1.403,39,0.343,40,1.906,42,0.379,44,0.609,45,0.01,46,0.524,47,0.591,49,0.883,50,0.681,51,0.104,52,0.758,57,0.15,58,0.999,76,1.436,77,2.027,89,1.131,90,1.131,91,1.072,124,1.707,135,0.005,136,0.007,137,0.005,214,2.835,224,2.478,232,1.806,240,2.183,241,1.758,242,1.758,243,2.075,244,2.075,245,1.586,246,1.669,247,1.855,321,4.06,525,4.917,950,3.204,1281,4.481,1282,4.231,1674,3.204,1677,3.807,1678,3.57,1679,3.807,1680,4.954,1681,3.807,1682,3.57,1987,6.643,1988,5.105]],["title/classes/LoadConfigSuccess.html",[0,0.241,1282,2.507]],["body/classes/LoadConfigSuccess.html",[0,0.431,2,0.819,3,0.081,4,0.081,5,0.081,8,1.333,32,0.389,33,1.334,34,0.329,35,0.747,36,0.91,37,2.122,38,1.403,39,0.343,40,1.906,42,0.379,44,0.609,45,0.01,46,0.524,47,0.591,49,0.883,50,0.681,51,0.104,52,0.758,57,0.15,58,0.999,76,1.436,77,2.027,89,1.131,90,1.131,91,1.072,124,1.707,135,0.005,136,0.007,137,0.005,214,2.835,224,2.478,232,1.806,240,2.183,241,1.758,242,1.758,243,2.075,244,2.075,245,1.586,246,1.669,247,1.855,321,4.06,525,4.917,950,3.204,1281,4.231,1282,4.481,1674,3.204,1677,3.807,1678,3.57,1679,3.807,1680,3.807,1681,4.954,1682,3.57,1989,6.643,1990,5.105]],["title/classes/LoadLightCards.html",[0,0.241,222,2.151]],["body/classes/LoadLightCards.html",[0,0.46,2,0.684,3,0.068,4,0.068,5,0.068,8,1.371,12,1.229,32,0.378,33,1.393,34,0.275,35,0.662,37,1.947,38,1.443,39,0.396,42,0.219,45,0.01,49,0.737,50,0.568,51,0.12,52,0.633,57,0.155,58,0.834,76,1.199,77,2.095,89,1.236,90,1.236,91,1.172,124,1.702,135,0.004,136,0.006,137,0.004,157,0.666,211,3.203,212,2.999,213,2.171,217,2.442,218,2.54,219,1.84,220,1.733,221,2.254,222,3.575,223,4.598,224,2.44,225,3.203,226,2.171,227,3.099,228,2.894,229,2.343,230,1.898,231,3.315,232,2.082,233,3.203,234,2.096,235,1.229,236,2.171,237,2.025,238,3.203,239,2.254,240,1.993,241,1.468,242,1.468,243,1.733,244,1.733,245,1.325,246,1.394,247,1.549,248,3.372,249,2.442,250,2.442,251,2.254,252,2.442,253,2.442,254,2.442,255,2.442,256,2.442,257,2.442,258,2.254,1991,4.263]],["title/classes/LoadLightCardsExtendedData.html",[0,0.241,228,2.151]],["body/classes/LoadLightCardsExtendedData.html",[0,0.46,2,0.679,3,0.067,4,0.067,5,0.067,8,1.37,12,1.221,32,0.378,33,1.391,34,0.273,35,0.659,37,1.943,38,1.441,39,0.488,42,0.301,45,0.01,49,0.732,50,0.565,51,0.119,52,0.628,57,0.155,58,0.829,76,1.191,77,2.09,89,1.235,90,1.235,91,1.17,124,1.699,135,0.004,136,0.006,137,0.004,157,0.662,211,3.192,212,3.422,213,2.157,217,2.426,218,2.528,219,1.827,220,1.721,221,2.238,222,3.303,223,4.592,224,2.433,225,3.192,226,2.157,227,3.088,228,3.303,229,2.328,230,1.885,231,3.303,232,2.072,233,3.192,234,2.081,235,1.221,236,2.157,237,2.011,238,3.192,239,2.238,240,1.986,241,1.458,242,1.458,243,1.721,244,1.721,245,1.316,246,1.384,247,1.538,248,2.426,249,2.426,250,2.426,251,2.238,252,3.357,253,2.426,254,2.426,255,2.426,256,2.426,257,2.426,258,2.238,1992,5.859]],["title/classes/LoadLightCardsFailure.html",[0,0.241,231,2.151]],["body/classes/LoadLightCardsFailure.html",[0,0.457,2,0.66,3,0.065,4,0.065,5,0.065,8,1.363,12,1.187,32,0.387,33,1.383,34,0.266,35,0.646,36,0.787,37,2.085,38,1.434,39,0.445,40,1.537,42,0.34,44,0.491,45,0.01,46,0.423,47,0.477,49,0.712,50,0.549,51,0.117,52,0.611,57,0.154,58,0.806,76,1.158,77,2.068,89,1.228,90,1.228,91,1.164,124,1.686,135,0.004,136,0.006,137,0.004,157,0.644,211,3.144,212,3.649,213,2.097,214,2.541,217,2.359,218,2.48,219,1.777,220,1.674,221,2.177,222,3.254,223,4.563,224,2.404,225,3.144,226,2.097,227,3.042,228,2.825,229,2.263,230,1.833,231,3.521,232,2.032,233,3.144,234,2.024,235,1.187,236,2.097,237,1.956,238,3.144,239,2.177,240,1.956,241,1.418,242,1.418,243,1.674,244,1.674,245,1.279,246,1.346,247,1.496,248,2.359,249,2.359,250,2.359,251,2.177,252,2.359,253,3.292,254,2.359,255,2.359,256,2.359,257,2.359,258,2.177,1993,5.746,1994,4.117]],["title/classes/LoadLightCardsSuccess.html",[0,0.241,227,2.011]],["body/classes/LoadLightCardsSuccess.html",[0,0.457,2,0.66,3,0.065,4,0.065,5,0.065,8,1.363,12,1.187,32,0.387,33,1.383,34,0.266,35,0.646,36,0.787,37,2.085,38,1.434,39,0.445,40,1.537,42,0.34,44,0.491,45,0.01,46,0.423,47,0.477,49,0.712,50,0.549,51,0.117,52,0.611,57,0.154,58,0.806,76,1.158,77,2.068,89,1.228,90,1.228,91,1.164,124,1.686,135,0.004,136,0.006,137,0.004,157,0.644,211,3.144,212,3.649,213,2.097,214,2.541,217,2.359,218,2.48,219,1.777,220,1.674,221,2.177,222,3.254,223,4.563,224,2.404,225,3.144,226,2.097,227,3.292,228,2.825,229,2.263,230,1.833,231,3.254,232,2.032,233,3.144,234,2.024,235,1.187,236,2.097,237,1.956,238,3.144,239,2.177,240,1.956,241,1.418,242,1.418,243,1.674,244,1.674,245,1.279,246,1.346,247,1.496,248,2.359,249,2.359,250,3.292,251,2.177,252,2.359,253,2.359,254,2.359,255,2.359,256,2.359,257,2.359,258,2.177,1995,5.746,1996,4.117]],["title/classes/LoadMenu.html",[0,0.241,1691,2.406]],["body/classes/LoadMenu.html",[0,0.44,2,0.78,3,0.077,4,0.077,5,0.077,8,1.362,9,2.1,10,2.866,11,1.336,12,1.403,32,0.372,33,1.35,34,0.314,35,0.724,37,1.959,38,1.412,39,0.485,42,0.331,45,0.01,49,0.842,50,0.649,51,0.131,52,0.722,57,0.151,58,0.952,76,1.369,77,2.108,79,1.006,89,1.154,90,1.154,91,1.094,124,1.681,135,0.005,136,0.007,137,0.005,185,2.472,224,2.421,232,1.721,240,2.132,241,1.676,242,1.676,245,1.512,246,1.591,247,1.768,510,3.054,526,4.81,1097,3.688,1328,3.966,1404,2.479,1686,2.913,1689,3.403,1690,3.054,1691,4.221,1692,3.966,1693,3.966,1694,4.502,1695,3.403,1696,3.403,1697,3.403,1698,3.403,1699,3.403,1700,3.403,1701,3.403,1702,3.215,1703,3.215,1704,3.215,1997,6.438]],["title/classes/LoadMenuFailure.html",[0,0.241,1693,2.406]],["body/classes/LoadMenuFailure.html",[0,0.435,2,0.757,3,0.075,4,0.075,5,0.075,8,1.353,9,2.037,10,2.808,11,1.296,12,1.361,32,0.387,33,1.338,34,0.305,35,0.709,36,0.864,37,2.119,38,1.401,39,0.424,40,1.762,42,0.365,44,0.563,45,0.01,46,0.485,47,0.547,49,0.816,50,0.629,51,0.128,52,0.7,57,0.15,58,0.924,76,1.328,77,2.082,79,0.986,89,1.143,90,1.143,91,1.083,124,1.664,135,0.005,136,0.006,137,0.005,185,2.422,214,2.728,224,2.384,232,1.669,240,2.1,241,1.626,242,1.626,245,1.467,246,1.543,247,1.715,510,2.962,526,4.786,1097,3.614,1328,3.906,1404,2.404,1686,2.825,1689,3.301,1690,2.962,1691,3.906,1692,3.906,1693,4.17,1694,3.301,1695,4.412,1696,3.301,1697,3.301,1698,3.301,1699,3.301,1700,3.301,1701,3.301,1702,3.118,1703,3.118,1704,3.118,1998,6.308,1999,4.719]],["title/classes/LoadMenuSuccess.html",[0,0.241,1692,2.406]],["body/classes/LoadMenuSuccess.html",[0,0.435,2,0.757,3,0.075,4,0.075,5,0.075,8,1.353,9,2.037,10,2.808,11,1.296,12,1.361,32,0.387,33,1.338,34,0.305,35,0.709,36,0.864,37,2.119,38,1.401,39,0.424,40,1.762,42,0.365,44,0.563,45,0.01,46,0.485,47,0.547,49,0.816,50,0.629,51,0.128,52,0.7,57,0.15,58,0.924,76,1.328,77,2.082,79,0.986,89,1.143,90,1.143,91,1.083,124,1.664,135,0.005,136,0.006,137,0.005,185,2.422,214,2.728,224,2.384,232,1.669,240,2.1,241,1.626,242,1.626,245,1.467,246,1.543,247,1.715,510,2.962,526,4.786,1097,3.614,1328,3.906,1404,2.404,1686,2.825,1689,3.301,1690,2.962,1691,3.906,1692,4.17,1693,3.906,1694,3.301,1695,3.301,1696,4.412,1697,3.301,1698,3.301,1699,3.301,1700,3.301,1701,3.301,1702,3.118,1703,3.118,1704,3.118,2000,6.308,2001,4.719]],["title/components/LoginComponent.html",[98,1.293,259,1.039]],["body/components/LoginComponent.html",[0,0.22,3,0.064,4,0.064,5,0.064,17,1.99,19,1.839,28,1.663,32,0.348,33,0.927,34,0.258,35,0.633,39,0.379,42,0.429,44,0.477,45,0.009,46,0.669,47,0.463,51,0.172,52,0.594,55,2.502,56,2.038,57,0.072,78,1.781,89,0.578,90,0.578,91,0.548,97,2.65,98,2.091,99,3.889,102,2.676,107,3.096,108,3.604,110,1.212,115,1.974,135,0.004,136,0.006,137,0.004,146,2.046,157,0.88,161,1.072,176,1.473,259,1.547,260,1.536,261,2.358,262,1.675,263,3.583,264,1.727,265,1.727,267,2.996,268,1.727,269,3.826,273,2.431,279,1.75,282,1.584,284,3.251,285,1.781,290,1.942,291,2.967,306,0.783,307,1.342,308,1.536,309,2.395,310,1.378,311,1.58,316,3.216,320,2.798,325,2.798,339,2.511,372,1.415,384,5.24,385,4.861,386,5.747,387,1.378,388,2.431,389,2.431,390,1.727,391,3.053,392,1.727,393,1.727,394,1.494,395,1.727,396,1.536,397,1.727,398,1.494,399,2.431,400,1.536,401,1.727,402,1.494,403,1.727,404,1.536,405,1.494,406,1.727,407,1.536,408,1.727,409,1.536,410,1.727,411,1.494,412,1.727,413,1.727,414,1.727,415,1.536,416,1.727,417,1.536,418,2.046,419,1.727,420,1.536,421,1.727,422,1.536,423,1.707,424,1.727,425,1.727,459,2.643,640,2.984,649,3.604,746,2.038,952,2.984,2002,3.528,2003,6.518,2004,6.518,2005,5.632,2006,7.074,2007,6.518,2008,6.518,2009,6.518,2010,6.518,2011,7.074,2012,7.074,2013,5.632,2014,4.001,2015,4.001,2016,4.001,2017,4.001,2018,4.001,2019,4.001,2020,4.001,2021,5.687,2022,4.001,2023,5.24,2024,3.216,2025,4.001,2026,4.001,2027,4.001,2028,4.001,2029,4.001,2030,4.001,2031,4.001,2032,4.001,2033,4.001,2034,4.001,2035,4.001,2036,4.001,2037,4.001,2038,4.001,2039,4.001,2040,4.001,2041,5.632,2042,5.632,2043,5.632,2044,5.632,2045,5.632,2046,5.632]],["title/classes/Map.html",[0,0.241,161,1.172]],["body/classes/Map.html",[0,0.38,2,1.106,3,0.11,4,0.11,5,0.11,42,0.354,45,0.009,57,0.125,79,1.25,135,0.007,136,0.008,137,0.007,161,2.141,960,5.281,2047,6.08,2048,6.895,2049,7.993,2050,6.895]],["title/injectables/MenuEffects.html",[567,3.061,632,1.231]],["body/injectables/MenuEffects.html",[0,0.287,3,0.083,4,0.083,5,0.083,8,0.836,17,2.099,28,1.719,32,0.295,34,0.337,35,0.758,39,0.351,42,0.346,44,0.622,45,0.01,46,0.536,47,0.604,49,0.902,50,0.696,51,0.177,52,0.774,57,0.094,89,0.754,90,0.754,91,0.715,97,3.033,115,2.134,135,0.005,136,0.007,137,0.005,161,1.397,180,1.742,224,2.504,279,2.093,285,2.322,306,1.021,307,1.75,308,2.002,310,1.796,311,2.06,326,1.796,339,4.228,567,4.711,632,1.895,636,2.757,836,2.397,842,4.874,865,2.988,866,4.467,875,4.228,876,3.877,878,2.988,899,5.024,900,4.949,901,6.34,946,3.122,947,2.867,956,3.89,1057,4.017,1063,3.89,1080,5.024,1087,2.564,1329,4.193,1405,4.599,1690,3.273,1692,2.867,1693,2.867,1973,5.94,1977,5.94,2051,4.599,2052,5.215,2053,6.736,2054,6.736,2055,6.736,2056,6.736,2057,6.736,2058,6.736,2059,6.736,2060,5.215]],["title/interfaces/MenuState.html",[522,2.151,532,3.061]],["body/interfaces/MenuState.html",[3,0.098,4,0.098,5,0.098,32,0.376,34,0.397,35,0.84,45,0.009,51,0.125,57,0.135,79,1.391,124,1.693,135,0.006,136,0.008,137,0.006,146,2.923,176,1.608,181,2.95,185,3.212,195,2.361,360,5.38,522,3.023,523,3.859,526,4.712,532,5.625,1404,3.132,2061,4.943,2062,7.559,2063,7.559,2064,6.149,2065,4.943,2066,5.422]],["title/classes/Message.html",[0,0.241,55,1.68]],["body/classes/Message.html",[0,0.35,2,1.02,3,0.121,4,0.101,5,0.101,32,0.279,38,1.377,39,0.513,42,0.327,44,0.758,45,0.009,46,0.653,47,0.737,51,0.129,55,3.249,57,0.138,58,1.245,79,1.276,89,0.92,90,0.92,91,0.872,124,1.339,135,0.007,136,0.008,137,0.007,144,4.082,160,3.241,627,3.808,952,4.744,2067,5.114,2068,6.362,2069,8.162,2070,6.362,2071,6.362,2072,5.61]],["title/components/NavbarComponent.html",[110,1.326,259,1.039]],["body/components/NavbarComponent.html",[0,0.231,3,0.067,4,0.067,5,0.067,17,1.879,32,0.344,33,0.957,34,0.375,35,0.654,39,0.282,42,0.433,44,0.693,45,0.009,46,0.741,47,0.674,49,1.156,50,0.891,51,0.175,52,0.622,57,0.076,72,2.673,98,1.238,109,3.816,110,2.187,112,3.075,115,2.003,135,0.004,136,0.006,137,0.004,146,1.522,157,0.909,180,0.925,185,1.608,205,2.364,259,1.586,260,1.608,261,2.435,262,1.754,264,1.808,265,1.808,267,3.07,268,1.808,269,3.846,273,2.51,276,5.37,279,2.076,282,1.636,284,3.317,285,1.865,286,4.067,290,1.834,291,2.494,293,3.367,306,0.82,307,1.405,308,1.608,309,2.507,310,1.443,311,1.654,312,2.929,314,3.693,326,1.443,338,5.185,339,3.65,343,3.367,387,1.443,388,2.51,389,2.51,390,1.808,391,3.114,392,1.808,393,1.808,394,1.564,395,1.808,396,1.608,397,1.808,398,1.564,399,2.51,400,1.608,401,1.808,402,1.564,403,1.808,404,1.608,405,1.564,406,1.808,407,1.608,408,1.808,409,1.608,410,1.808,411,1.564,412,1.808,413,1.808,414,1.808,415,1.608,416,1.808,417,1.608,418,2.113,419,1.808,420,1.608,421,1.808,422,1.608,423,1.269,424,1.808,425,1.808,465,2.929,515,6.92,637,2.507,644,2.629,645,2.507,746,2.962,1006,3.481,1024,3.693,1025,3.693,1026,3.693,1329,3.367,1404,2.134,1691,3.197,1895,5.89,1914,3.124,1917,3.693,2073,3.693,2074,5.815,2075,6.68,2076,5.815,2077,6.68,2078,5.815,2079,5.815,2080,4.188,2081,4.188,2082,4.188,2083,4.188,2084,4.188,2085,4.188,2086,4.188,2087,4.188,2088,4.188,2089,4.188,2090,4.188,2091,4.188,2092,4.188,2093,4.188,2094,4.188,2095,4.188,2096,4.188,2097,4.188,2098,4.188,2099,4.188,2100,4.188,2101,4.188,2102,5.815,2103,5.815,2104,5.815,2105,5.815,2106,5.815,2107,4.188]],["title/components/NoSelectionComponent.html",[259,1.039,415,1.68]],["body/components/NoSelectionComponent.html",[0,0.298,3,0.086,4,0.086,5,0.086,32,0.237,33,1.135,34,0.349,39,0.511,42,0.354,45,0.009,46,0.708,51,0.11,57,0.098,98,1.6,110,1.641,135,0.006,136,0.007,137,0.006,157,1.079,259,1.803,260,2.079,261,2.889,262,2.267,264,2.337,265,2.337,267,3.491,268,2.337,269,3.946,273,2.978,282,1.941,284,3.676,290,1.486,291,2.022,306,1.06,387,1.865,388,2.978,389,2.978,390,2.337,391,3.451,392,2.337,393,2.337,394,2.022,395,2.337,396,2.079,397,2.337,398,2.022,399,2.978,400,2.079,401,2.337,402,2.022,403,2.337,404,2.079,405,2.022,406,2.337,407,2.079,408,2.337,409,2.079,410,2.337,411,2.022,412,2.337,413,2.337,414,2.337,415,3.07,416,2.337,417,2.079,418,2.507,419,2.337,420,2.079,421,2.337,422,2.079,423,1.641,424,2.337,425,2.337,609,6.084,1127,6.429,1538,6.105,2108,6.696,2109,4.774,2110,6.9,2111,5.414,2112,5.414]],["title/classes/ParameterListItem.html",[0,0.241,208,2.406]],["body/classes/ParameterListItem.html",[0,0.453,2,0.679,3,0.067,4,0.067,5,0.067,8,0.679,11,1.162,32,0.294,36,0.58,38,1.558,39,0.562,42,0.218,44,0.505,45,0.01,46,0.602,47,0.49,50,0.967,51,0.137,57,0.153,58,1.147,79,1.372,89,1.189,90,1.189,91,1.127,100,1.773,135,0.004,136,0.006,137,0.004,140,2.328,142,3.357,143,4.713,144,3.619,145,2.535,146,3.035,147,2.535,148,2.535,149,2.081,150,2.528,151,2.535,152,2.535,153,2.535,154,2.535,155,2.535,157,0.662,158,1.885,159,1.625,160,2.157,161,1.134,162,2.535,163,2.081,164,2.011,165,2.535,166,2.426,167,2.535,168,2.535,169,2.535,170,2.535,171,2.535,172,2.535,173,2.535,174,2.535,175,3.507,176,1.107,177,2.985,178,2.535,179,3.507,180,1.294,181,1.672,182,2.985,183,2.535,184,1.721,185,1.625,186,1.498,187,2.157,188,2.535,189,2.535,190,2.535,191,2.535,192,2.426,193,2.426,194,2.426,195,3.099,196,3.357,197,2.081,198,2.328,199,2.426,200,2.426,201,2.426,202,1.827,203,2.535,204,2.535,205,2.382,206,2.535,207,2.535,208,3.693,209,2.535,210,2.535,2113,4.234,2114,4.234]],["title/classes/PayloadForSuccessfulAuthentication.html",[0,0.241,41,2.151]],["body/classes/PayloadForSuccessfulAuthentication.html",[0,0.427,1,2.697,2,0.504,3,0.05,4,0.05,5,0.1,6,1.602,7,1.4,8,1.344,9,3.35,10,1.4,11,1.733,12,2.511,13,3.378,14,3.578,15,1.494,16,3.253,17,2,18,3.253,19,3.111,20,2.598,21,1.801,22,1.728,23,3.216,24,2.377,25,3.002,26,3.253,27,3.002,28,1.449,29,2.707,30,3.121,31,2.707,32,0.372,33,1.248,34,0.203,35,0.531,36,1.1,37,1.727,38,1.28,39,0.318,41,2.791,42,0.348,44,0.375,45,0.01,46,0.323,47,0.364,51,0.115,52,0.467,53,3.268,54,1.445,55,2.18,56,1.602,57,0.145,58,0.615,59,1.546,60,2.697,61,1.494,62,1.979,63,2.697,64,1.494,65,3.121,66,3.413,67,3.909,68,3.338,69,2.697,70,1.728,71,2.323,72,2.902,73,2.308,74,3.215,75,2.697,76,1.597,77,1.858,78,2.811,79,1.255,80,3.111,81,3.111,82,3.215,83,3.104,84,2.707,85,2.707,86,2.245,87,2.598,88,1.801,89,1.097,90,1.097,91,1.04,92,1.801,93,1.728,94,1.801,95,1.801,96,1.662,97,1.278,98,0.929,99,1.728,100,2.377,101,2.707,102,2.697,103,2.407,104,1.728,105,0.977,106,1.728,107,1.728,108,1.602,109,3.338,110,0.953,111,1.801,112,1.662,113,1.728,114,2.707,115,1.206,116,1.801,117,1.801,118,3.617,119,1.728,120,1.801,121,2.707,122,1.801,123,2.598,124,0.662,125,1.801,126,1.728,127,1.801,128,1.728,129,1.801,130,2.598,131,2.598,132,1.801,133,1.801,134,1.662,135,0.003,136,0.005,137,0.003,2115,3.144,2116,3.144,2117,3.144,2118,3.144,2119,3.144,2120,3.144]],["title/classes/Process.html",[0,0.241,177,2.229]],["body/classes/Process.html",[0,0.453,2,0.682,3,0.068,4,0.068,5,0.068,8,0.682,11,1.167,32,0.295,36,0.583,38,1.558,39,0.562,42,0.218,44,0.507,45,0.01,46,0.603,47,0.492,50,0.783,51,0.137,57,0.153,58,1.15,79,1.357,89,1.19,90,1.19,91,1.128,100,1.78,135,0.004,136,0.006,137,0.004,140,2.337,142,3.366,143,4.563,144,3.338,145,2.545,146,3.037,147,2.545,148,2.545,149,2.09,150,2.536,151,2.545,152,2.545,153,2.545,154,2.545,155,2.545,157,0.665,158,1.892,159,1.632,160,2.166,161,1.139,162,4.031,163,2.09,164,2.02,165,2.545,166,2.435,167,2.545,168,2.545,169,2.545,170,2.545,171,2.545,172,2.545,173,2.545,174,2.545,175,3.517,176,1.112,177,3.43,178,2.545,179,3.517,180,1.298,181,1.679,182,2.993,183,2.545,184,1.728,185,1.632,186,1.504,187,2.166,188,2.545,189,2.545,190,2.545,191,2.545,192,2.435,193,2.435,194,2.435,195,3.102,196,3.366,197,2.09,198,2.337,199,2.435,200,2.435,201,2.435,202,1.835,203,2.545,204,2.545,205,2.388,206,2.545,207,2.545,208,3.23,209,2.545,210,2.545,627,2.545,2121,4.251,2122,4.251,2123,4.251]],["title/classes/RejectLogIn.html",[0,0.241,69,2.079]],["body/classes/RejectLogIn.html",[0,0.426,1,2.683,2,0.5,3,0.05,4,0.05,5,0.107,6,1.587,7,1.387,8,1.361,9,3.458,10,1.387,11,1.851,12,2.517,13,3.493,14,3.564,15,1.48,16,3.601,17,2.129,18,3.601,19,3.257,20,3.104,21,1.785,22,1.713,23,3.434,24,2.631,25,3.323,26,3.601,27,3.323,28,1.604,29,3.235,30,3.455,31,2.689,32,0.378,33,1.274,34,0.201,35,0.528,36,0.924,37,1.877,38,1.331,39,0.316,40,1.163,41,2.307,42,0.29,44,0.371,45,0.01,46,0.32,47,0.361,49,0.539,50,0.415,51,0.115,52,0.462,53,2.595,54,1.432,55,2.413,56,1.587,57,0.145,58,0.61,59,1.532,60,2.683,61,1.48,62,1.965,63,2.683,64,1.48,65,3.104,66,3.405,67,3.895,68,3.323,69,2.986,70,1.713,71,2.307,72,2.889,73,2.295,74,3.203,75,2.683,76,1.32,77,1.851,78,1.387,79,1.054,80,1.432,81,1.432,82,1.48,83,1.532,84,2.689,85,2.689,86,2.23,87,2.58,88,1.785,89,1.094,90,1.094,91,1.037,92,1.785,93,1.713,94,1.785,95,1.785,96,1.647,97,1.267,98,0.921,99,1.713,100,2.631,101,2.689,102,2.986,103,2.391,104,1.713,105,0.968,106,1.713,107,1.713,108,1.587,109,3.323,110,0.944,111,1.785,112,1.647,113,1.713,114,3.235,115,1.441,116,2.689,117,2.689,118,3.862,119,2.58,120,2.689,121,3.235,122,2.689,123,3.455,124,0.656,125,1.785,126,1.713,127,1.785,128,1.713,129,1.785,130,2.58,131,2.58,132,1.785,133,1.785,134,1.647,135,0.003,136,0.005,137,0.003,214,2.168,2124,4.693,2125,3.116]],["title/classes/RouterStateUrl.html",[0,0.241,536,3.061]],["body/classes/RouterStateUrl.html",[0,0.352,2,0.773,3,0.077,4,0.114,5,0.077,7,2.146,11,1.971,13,3.634,28,1.231,32,0.211,33,0.793,38,1.212,39,0.43,42,0.248,44,0.949,45,0.01,46,0.495,47,0.558,51,0.13,57,0.13,79,1.123,86,3.04,89,0.697,90,0.697,91,0.661,115,1.833,135,0.005,136,0.007,137,0.005,176,2,180,1.413,184,3.326,202,2.761,230,2.848,245,2.377,279,1.498,290,1.756,418,2.325,495,2.762,527,3.83,535,3.186,536,5.022,584,3.372,684,4.772,707,4.772,717,5.415,767,4.772,792,2.291,963,4.475,1330,3.372,1331,3.596,1332,6.15,1335,4.252,1336,5.642,1338,4.252,1339,6.15,1341,4.252,1342,3.876,1343,6.578,1344,3.876,1345,5.144,1346,5.642,1347,6.578,1348,5.642,1349,5.642,1350,6.15,1351,5.144,1352,5.642,1353,5.642,1354,5.642,1355,5.642,1356,6.745,1357,5.642,1358,5.642,1359,4.252,1360,4.252,1361,4.252,1362,4.252,1363,4.252,1364,4.252,1365,4.252,2126,4.821,2127,4.821]],["title/classes/SelectLightCard.html",[0,0.241,233,2.079]],["body/classes/SelectLightCard.html",[0,0.457,2,0.66,3,0.065,4,0.065,5,0.065,8,1.363,12,1.187,32,0.387,33,1.383,34,0.266,35,0.646,36,0.787,37,2.085,38,1.434,39,0.445,40,1.537,42,0.34,44,0.491,45,0.01,46,0.423,47,0.477,49,0.712,50,0.549,51,0.117,52,0.611,57,0.154,58,0.806,76,1.158,77,2.068,89,1.228,90,1.228,91,1.164,124,1.686,135,0.004,136,0.006,137,0.004,157,0.644,211,3.144,212,3.649,213,2.097,214,2.541,217,2.359,218,2.48,219,1.777,220,1.674,221,2.177,222,3.254,223,4.563,224,2.404,225,3.144,226,2.097,227,3.042,228,2.825,229,2.263,230,1.833,231,3.254,232,2.032,233,3.403,234,2.024,235,1.187,236,2.097,237,1.956,238,3.144,239,2.177,240,1.956,241,1.418,242,1.418,243,1.674,244,1.674,245,1.279,246,1.346,247,1.496,248,2.359,249,2.359,250,2.359,251,2.177,252,2.359,253,2.359,254,3.292,255,2.359,256,2.359,257,2.359,258,2.177,2128,5.746,2129,4.117]],["title/modules/ServicesModule.html",[426,1.779,439,3.061]],["body/modules/ServicesModule.html",[0,0.268,3,0.077,4,0.102,5,0.102,28,1.244,36,0.668,39,0.328,42,0.25,45,0.01,47,0.746,51,0.18,57,0.088,73,1.981,105,1.515,124,1.026,135,0.005,136,0.007,137,0.005,180,1.077,202,2.781,235,1.405,282,1.371,290,1.338,306,0.954,353,3.635,366,2.041,367,1.981,368,2.041,369,2.041,370,2.041,371,2.041,372,1.724,373,1.925,374,2.041,375,2.041,376,2.041,377,1.981,378,2.041,379,1.981,380,2.041,381,2.041,382,2.041,383,2.041,387,1.679,426,1.981,427,3.409,428,2.316,429,2.68,430,2.918,431,2.792,432,4.322,433,2.483,439,6.362,441,3.692,442,2.918,444,2.577,448,3.817,452,2.792,453,4.045,456,2.792,488,3.635,489,3.918,496,3.635,594,2.918,638,4.045,639,3.635,649,4.181,746,2.483,844,4.702,1057,4.181,1063,3.635,1187,3.918,1239,5.805,1241,5.805,1265,5.423,1280,4.298,1524,5.423,1724,5.151,1745,3.918,2130,4.298,2131,4.298,2132,5.74,2133,4.874,2134,4.874,2135,6.444,2136,6.444,2137,4.874,2138,4.874,2139,4.874,2140,4.874,2141,6.444,2142,4.874,2143,4.874]],["title/classes/State.html",[0,0.241,11,1.201]],["body/classes/State.html",[0,0.453,2,0.677,3,0.067,4,0.067,5,0.067,8,0.677,11,1.605,32,0.294,36,0.579,38,1.558,39,0.561,42,0.217,44,0.503,45,0.01,46,0.6,47,0.489,50,0.78,51,0.136,57,0.153,58,1.144,79,1.356,89,1.188,90,1.188,91,1.127,100,1.768,135,0.004,136,0.006,137,0.004,140,2.321,142,3.35,143,4.552,144,3.329,145,2.528,146,3.033,147,2.528,148,2.528,149,2.076,150,2.524,151,2.528,152,2.528,153,2.528,154,2.528,155,2.528,157,0.66,158,2.987,159,1.621,160,2.151,161,1.131,162,4.016,163,2.076,164,2.006,165,2.528,166,2.419,167,2.528,168,2.528,169,2.528,170,2.528,171,2.528,172,2.528,173,2.528,174,2.528,175,3.501,176,1.104,177,2.979,178,2.528,179,3.501,180,1.292,181,1.668,182,2.979,183,2.528,184,1.716,185,1.621,186,1.493,187,2.151,188,2.528,189,2.528,190,2.528,191,2.528,192,2.419,193,2.419,194,2.419,195,3.097,196,3.35,197,2.076,198,2.321,199,2.419,200,2.419,201,2.419,202,1.822,203,2.528,204,2.528,205,2.377,206,2.528,207,2.528,208,3.215,209,2.528,210,2.528,627,3.501,842,3.35,992,2.953,2144,4.222,2145,4.222]],["title/modules/StateModule.html",[426,1.779,440,3.061]],["body/modules/StateModule.html",[0,0.285,3,0.082,4,0.107,5,0.107,9,2.236,34,0.334,36,0.71,42,0.266,45,0.01,51,0.177,52,0.995,57,0.094,73,2.106,105,1.61,115,1.712,135,0.005,136,0.007,137,0.005,180,1.144,202,2.895,235,1.494,282,1.457,290,1.422,306,1.014,366,2.169,367,2.106,368,2.169,369,2.169,370,2.169,371,2.169,372,1.833,373,2.046,374,2.169,375,2.169,376,2.169,377,2.106,378,2.169,379,2.106,380,2.169,381,2.169,382,2.169,383,2.169,387,1.785,426,2.106,428,2.461,429,2.848,430,4.015,431,2.968,432,4.015,433,2.639,440,5.941,441,3.843,442,3.102,444,3.546,448,3.932,453,4.209,456,2.968,488,3.864,489,4.165,498,4.15,499,3.252,520,3.864,527,3.102,535,4.432,537,4.569,578,3.864,579,3.864,582,5.002,947,2.848,1239,5.979,1241,5.979,1330,5.202,1332,5.979,1339,5.392,1347,4.165,1350,4.165,2146,4.569,2147,4.569,2148,5.181,2149,5.181,2150,5.181,2151,5.181,2152,5.181,2153,4.569,2154,6.707,2155,5.181,2156,5.181,2157,5.181,2158,5.181,2159,5.181,2160,5.181,2161,5.181,2162,5.181,2163,6.707,2164,5.181,2165,5.181,2166,5.181,2167,5.181,2168,5.181,2169,5.181,2170,5.181]],["title/classes/Third.html",[0,0.241,164,2.079]],["body/classes/Third.html",[0,0.446,2,0.636,3,0.063,4,0.063,5,0.063,8,0.636,11,1.536,32,0.309,34,0.256,36,0.889,38,1.553,39,0.553,42,0.288,44,0.667,45,0.01,46,0.724,47,0.648,50,0.746,51,0.132,57,0.151,58,1.095,79,1.408,89,1.17,90,1.17,91,1.109,100,1.66,135,0.004,136,0.006,137,0.004,140,2.18,142,3.206,143,4.448,144,3.239,145,2.374,146,2.99,147,2.374,148,2.374,149,1.949,150,2.415,151,2.374,152,2.374,153,2.374,154,2.374,155,2.374,157,1.101,158,1.765,159,1.522,160,2.02,161,1.062,162,3.883,163,1.949,164,2.659,165,2.374,166,2.272,167,3.883,168,2.374,169,2.374,170,2.374,171,2.374,172,2.374,173,2.374,174,2.374,175,3.35,176,1.037,177,2.851,178,2.374,179,3.35,180,1.236,181,1.566,182,3.589,183,2.374,184,1.612,185,1.522,186,1.403,187,3.304,188,2.374,189,2.374,190,2.374,191,2.374,192,2.272,193,2.272,194,2.272,195,3.043,196,3.206,197,1.949,198,2.18,199,2.272,200,2.272,201,2.272,202,1.711,203,2.374,204,2.374,205,2.275,206,2.374,207,2.374,208,3.077,209,2.374,210,2.374,282,1.574,290,1.089,627,4.448,2171,5.597,2172,3.965,2173,5.597,2174,5.597,2175,4.499,2176,5.597,2177,5.597,2178,3.965,2179,3.965,2180,3.965]],["title/classes/ThirdMenu.html",[0,0.241,185,1.68]],["body/classes/ThirdMenu.html",[0,0.452,2,0.672,3,0.067,4,0.067,5,0.067,8,0.672,11,1.15,32,0.293,36,0.574,38,1.557,39,0.56,42,0.215,44,0.499,45,0.01,46,0.597,47,0.485,50,0.775,51,0.136,57,0.153,58,1.138,79,1.393,89,1.186,90,1.186,91,1.124,100,1.754,135,0.004,136,0.006,137,0.004,140,2.303,142,3.332,143,4.818,144,3.317,145,2.507,146,3.028,147,2.507,148,2.507,149,2.059,150,2.51,151,2.507,152,2.507,153,2.507,154,2.507,155,2.507,157,0.655,158,1.865,159,1.608,160,2.134,161,1.122,162,2.507,163,2.059,164,1.99,165,2.507,166,2.4,167,2.507,168,2.507,169,2.507,170,2.507,171,2.507,172,2.507,173,2.507,174,2.507,175,3.481,176,1.095,177,2.962,178,2.507,179,3.481,180,1.284,181,1.654,182,3.676,183,2.507,184,1.703,185,2.233,186,2.057,187,3.403,188,3.999,189,2.507,190,2.507,191,2.507,192,2.4,193,2.4,194,2.4,195,3.09,196,3.332,197,2.059,198,2.303,199,2.4,200,2.4,201,2.4,202,1.808,203,2.507,204,2.507,205,2.364,206,2.507,207,2.507,208,3.197,209,2.507,210,2.507,2181,3.693,2182,4.188]],["title/classes/ThirdMenuEntry.html",[0,0.241,182,2.229]],["body/classes/ThirdMenuEntry.html",[0,0.452,2,0.675,3,0.067,4,0.067,5,0.067,8,0.675,11,1.156,32,0.294,36,0.577,38,1.558,39,0.561,42,0.216,44,0.502,45,0.01,46,0.599,47,0.488,50,0.778,51,0.136,57,0.153,58,1.142,79,1.394,89,1.188,90,1.188,91,1.126,100,1.763,135,0.004,136,0.006,137,0.004,140,2.315,142,3.344,143,4.825,144,3.325,145,2.521,146,3.031,147,2.521,148,2.521,149,2.07,150,2.519,151,2.521,152,2.521,153,2.521,154,2.521,155,2.521,157,0.658,158,1.875,159,1.617,160,2.145,161,1.128,162,2.521,163,2.07,164,2.001,165,2.521,166,2.413,167,2.521,168,2.521,169,2.521,170,2.521,171,2.521,172,2.521,173,2.521,174,2.521,175,3.494,176,1.101,177,2.973,178,2.521,179,3.494,180,1.289,181,1.663,182,3.413,183,2.521,184,2.723,185,1.617,186,2.065,187,2.145,188,2.521,189,2.521,190,2.521,191,2.521,192,2.413,193,2.413,194,2.413,195,3.094,196,3.344,197,2.07,198,2.315,199,2.413,200,2.413,201,2.413,202,1.817,203,2.521,204,2.521,205,2.373,206,2.521,207,2.521,208,3.209,209,2.521,210,2.521,2181,3.713,2183,4.211]],["title/modules/ThirdpartyModule.html",[426,1.779,2184,3.264]],["body/modules/ThirdpartyModule.html",[0,0.323,3,0.093,4,0.115,5,0.115,36,0.803,45,0.009,51,0.167,57,0.106,73,2.383,105,1.821,135,0.006,136,0.007,137,0.006,235,1.69,306,1.147,366,2.454,367,2.383,368,2.454,369,2.454,370,2.454,371,2.454,372,2.073,373,2.315,374,2.454,375,2.454,376,2.454,377,2.383,378,2.454,379,2.383,380,2.454,381,2.454,382,2.454,383,2.454,387,2.019,411,3.217,426,2.383,428,2.784,429,3.222,430,4.714,431,3.358,432,3.509,433,2.986,441,4.155,442,3.509,444,3.834,448,3.834,453,4.551,456,3.358,465,4.099,507,5.168,2184,6.579,2185,5.168,2186,5.168,2187,5.168,2188,6.025,2189,5.861,2190,5.168]],["title/modules/ThirdpartyRoutingModule.html",[426,1.779,2188,3.061]],["body/modules/ThirdpartyRoutingModule.html",[0,0.343,3,0.099,4,0.12,5,0.12,36,0.853,45,0.009,51,0.164,57,0.113,105,1.934,135,0.006,136,0.008,137,0.006,176,1.627,235,1.794,259,1.477,306,1.218,366,2.605,367,2.53,368,2.605,369,2.605,370,2.605,371,2.605,372,2.201,373,2.458,374,2.605,375,2.605,376,2.605,377,2.53,378,2.605,379,2.53,380,2.605,381,2.605,382,2.605,383,2.605,411,2.809,428,2.956,433,3.17,444,3.29,448,3.977,491,4.641,493,5.61,494,5.074,495,3.565,500,4.641,618,5.002,2188,5.261,2190,5.487,2191,6.222,2192,6.222]],["title/classes/ThirdsI18nLoader.html",[0,0.241,2193,3.264]],["body/classes/ThirdsI18nLoader.html",[0,0.271,2,0.531,3,0.053,4,0.053,5,0.053,17,2.286,24,1.388,28,1.967,32,0.215,33,0.809,34,0.214,38,0.559,39,0.223,42,0.252,44,0.586,45,0.01,46,0.602,47,0.569,51,0.167,52,0.492,57,0.106,79,1.365,115,1.495,135,0.006,136,0.005,137,0.003,150,1.43,161,1.569,164,2.335,176,2.125,180,1.942,181,1.309,184,1.347,185,1.272,186,2.292,187,4.011,197,1.629,218,1.43,220,1.347,226,2.504,235,0.955,245,1.03,279,2.489,282,1.383,286,2.318,287,3.665,290,0.91,306,0.649,307,1.112,308,1.272,310,1.141,317,1.984,318,1.984,320,2.318,326,1.141,423,1.004,452,1.899,498,1.688,511,2.664,632,1.383,633,3.677,635,2.471,636,1.752,637,1.984,644,2.08,645,1.984,649,2.984,688,2.08,717,4.34,746,2.504,876,2.88,878,1.899,900,2.08,913,2.318,923,2.664,960,2.19,982,2.19,1057,3.693,1106,2.664,1148,2.664,1298,4.71,1299,5.21,1300,4.71,1404,1.688,1518,2.664,1767,5.21,2175,3.951,2193,3.665,2194,2.664,2195,5.21,2196,4.915,2197,4.334,2198,3.314,2199,4.334,2200,3.314,2201,4.334,2202,2.922,2203,2.922,2204,2.922,2205,2.922,2206,2.922,2207,2.922,2208,2.922,2209,2.922,2210,2.922,2211,2.922,2212,2.922,2213,2.922,2214,2.922,2215,2.922,2216,2.922,2217,2.922,2218,2.922,2219,2.922,2220,2.922,2221,2.922,2222,2.922,2223,2.922,2224,2.922,2225,2.922,2226,5.166,2227,2.922,2228,2.922,2229,4.334,2230,2.922,2231,2.922,2232,2.922,2233,2.922,2234,2.922,2235,2.922,2236,2.922,2237,2.922,2238,2.922,2239,2.922,2240,2.922,2241,2.922,2242,6.103,2243,5.166,2244,2.922,2245,2.922,2246,3.951,2247,2.922,2248,2.922,2249,2.922,2250,2.922,2251,2.922,2252,2.922,2253,4.334,2254,4.334,2255,4.334,2256,2.664,2257,2.922,2258,2.922,2259,2.922,2260,2.922,2261,2.922,2262,2.922,2263,2.922,2264,2.922,2265,2.922,2266,2.922,2267,2.922,2268,2.922,2269,2.922,2270,2.922,2271,2.922,2272,2.922,2273,4.334,2274,2.922,2275,2.922,2276,2.922,2277,2.922,2278,2.922,2279,2.922,2280,2.922,2281,2.922,2282,2.922,2283,2.922,2284,4.334,2285,2.922,2286,2.922,2287,2.922,2288,2.922,2289,2.922,2290,2.922,2291,2.922,2292,2.922,2293,2.922,2294,2.922,2295,2.922,2296,4.334,2297,2.922,2298,4.334,2299,2.922,2300,4.334,2301,2.922,2302,2.922,2303,4.334,2304,5.166,2305,2.922,2306,2.922,2307,2.922,2308,2.922,2309,2.922,2310,2.922,2311,2.922,2312,2.922,2313,2.922,2314,2.922,2315,2.922]],["title/injectables/ThirdsService.html",[632,1.231,1057,2.229]],["body/injectables/ThirdsService.html",[0,0.229,3,0.042,4,0.042,5,0.042,17,2.304,24,1.115,28,1.887,32,0.343,33,0.438,34,0.172,35,0.468,38,0.864,39,0.179,42,0.421,44,0.882,45,0.01,46,0.804,47,0.856,49,0.886,50,0.683,51,0.159,52,0.395,57,0.093,79,1.415,115,1.775,135,0.005,136,0.004,137,0.003,150,1.149,161,1.55,164,1.976,176,2.015,180,1.889,181,1.051,184,1.082,185,1.966,186,2.047,187,4.266,197,1.309,218,2.209,220,1.082,226,2.119,235,0.768,245,0.827,279,2.669,282,1.17,286,4.048,287,3.818,290,2.076,306,0.521,307,0.893,308,1.022,310,0.917,317,1.594,318,1.594,320,1.862,326,0.917,423,0.807,452,1.525,498,1.356,511,2.14,632,1.17,633,4.177,635,1.985,636,1.407,637,1.594,644,1.671,645,1.594,649,3.542,688,1.671,717,3.984,746,2.119,836,1.224,876,2.517,878,1.525,900,1.671,913,1.862,923,2.14,960,1.759,982,4.148,1057,2.948,1100,1.862,1106,2.14,1148,2.14,1167,2.14,1298,5.59,1299,4.653,1300,4.653,1404,1.356,1518,2.14,1767,5.351,2175,4.653,2193,1.985,2194,2.14,2195,4.116,2197,2.347,2199,2.347,2201,2.347,2202,2.347,2203,2.347,2204,2.347,2205,2.347,2206,2.347,2207,2.347,2208,4.514,2209,4.514,2210,4.514,2211,4.514,2212,4.514,2213,2.347,2214,2.347,2215,2.347,2216,2.347,2217,2.347,2218,2.347,2219,2.347,2220,2.347,2221,2.347,2222,2.347,2223,2.347,2224,2.347,2225,3.668,2226,4.514,2227,2.347,2228,3.668,2229,3.668,2230,2.347,2231,2.347,2232,3.668,2233,4.514,2234,2.347,2235,2.347,2236,2.347,2237,2.347,2238,2.347,2239,2.347,2240,2.347,2241,3.668,2242,5.537,2243,4.514,2244,2.347,2245,2.347,2246,3.344,2247,2.347,2248,2.347,2249,2.347,2250,2.347,2251,2.347,2252,2.347,2253,3.668,2254,3.668,2255,3.668,2256,4.653,2257,2.347,2258,2.347,2259,2.347,2260,2.347,2261,2.347,2262,2.347,2263,2.347,2264,2.347,2265,2.347,2266,2.347,2267,3.668,2268,2.347,2269,2.347,2270,2.347,2271,2.347,2272,2.347,2273,3.668,2274,2.347,2275,2.347,2276,2.347,2277,2.347,2278,2.347,2279,3.668,2280,2.347,2281,2.347,2282,2.347,2283,2.347,2284,3.668,2285,2.347,2286,2.347,2287,2.347,2288,2.347,2289,2.347,2290,2.347,2291,2.347,2292,2.347,2293,2.347,2294,2.347,2295,2.347,2296,3.668,2297,2.347,2298,3.668,2299,2.347,2300,3.668,2301,2.347,2302,2.347,2303,3.668,2304,4.514,2305,2.347,2306,2.347,2307,2.347,2308,2.347,2309,2.347,2310,2.347,2311,2.347,2312,2.347,2313,2.347,2314,2.347,2315,2.347,2316,4.16,2317,4.16,2318,4.16,2319,4.16,2320,4.16,2321,3.668,2322,4.16,2323,4.16,2324,4.16,2325,2.662,2326,2.662,2327,2.662,2328,2.662,2329,2.662,2330,2.662,2331,2.662,2332,2.662,2333,2.662,2334,2.662,2335,2.662,2336,2.662,2337,2.662,2338,2.662,2339,2.662,2340,2.662,2341,2.662,2342,2.662]],["title/classes/ThirdsServiceMock.html",[0,0.241,2343,3.518]],["body/classes/ThirdsServiceMock.html",[0,0.345,2,1.004,3,0.099,4,0.099,5,0.099,17,2.28,28,2.148,34,0.404,42,0.388,45,0.009,51,0.153,57,0.113,135,0.006,136,0.008,137,0.006,180,1.383,182,3.189,185,2.403,282,2.124,290,2.072,307,2.1,338,4.988,1404,3.189,2256,6.766,2321,7.148,2343,6.069,2344,5.52,2345,6.26,2346,6.26,2347,6.26,2348,6.26,2349,6.26,2350,6.26,2351,6.26,2352,6.26,2353,6.26,2354,6.26,2355,6.26,2356,6.26,2357,6.26,2358,6.26,2359,6.26,2360,6.26,2361,6.26,2362,6.26]],["title/components/TimeFilterComponent.html",[259,1.039,417,1.68]],["body/components/TimeFilterComponent.html",[0,0.205,3,0.059,4,0.059,5,0.059,17,1.926,28,1.927,32,0.3,33,0.88,34,0.24,35,0.601,39,0.25,42,0.409,44,0.443,45,0.01,46,0.703,47,0.431,49,0.644,50,0.496,51,0.171,52,0.552,57,0.067,62,1.558,91,0.51,98,1.099,110,1.127,115,1.927,135,0.004,136,0.005,137,0.004,157,0.836,180,1.383,181,2.112,259,1.486,260,1.428,261,2.239,262,1.558,264,1.605,265,1.605,267,2.878,268,1.605,269,3.793,273,2.308,279,2.557,282,1.504,284,3.146,285,1.656,290,1.719,291,1.997,306,0.728,307,1.248,308,1.428,310,1.281,311,1.469,326,1.281,356,2.602,373,2.473,387,1.281,388,2.308,389,2.308,390,1.605,391,2.954,392,1.605,393,1.605,394,1.389,395,1.605,396,1.428,397,1.605,398,1.389,399,2.308,400,1.428,401,1.605,402,1.389,403,1.605,404,1.428,405,1.389,406,1.605,407,1.428,408,1.605,409,1.428,410,1.605,411,1.389,412,1.605,413,1.605,414,1.605,415,1.428,416,1.605,417,2.628,418,2.743,419,1.605,420,1.428,421,1.605,422,1.428,423,2.412,424,1.605,425,1.605,459,2.458,586,2.94,591,2.458,592,2.458,593,2.227,594,2.227,596,2.602,599,2.335,644,2.335,645,2.227,876,1.829,1006,3.201,1123,5.67,1153,3.28,1157,2.991,1158,2.774,1514,2.991,1548,6.517,1549,6.517,1724,4.882,1745,2.991,2021,5.503,2023,5.033,2363,2.991,2364,5.521,2365,4.716,2366,5.521,2367,5.521,2368,6.261,2369,6.036,2370,6.036,2371,5.348,2372,3.72,2373,3.72,2374,3.72,2375,3.28,2376,3.72,2377,3.28,2378,3.72,2379,2.991,2380,3.28,2381,4.716,2382,3.28,2383,4.716,2384,5.348,2385,3.28,2386,3.28,2387,3.28,2388,3.72,2389,3.28,2390,3.72,2391,3.72,2392,3.72,2393,3.72,2394,5.348,2395,3.72,2396,3.72,2397,3.72,2398,3.72,2399,5.348,2400,3.72,2401,3.72,2402,3.72,2403,3.72,2404,3.28,2405,3.28,2406,3.28,2407,4.716,2408,3.72,2409,3.28,2410,3.28,2411,3.28,2412,5.348,2413,5.348,2414,5.348,2415,3.72,2416,5.348,2417,3.72,2418,3.28,2419,5.348,2420,5.348,2421,5.348]],["title/components/TimeLineComponent.html",[259,1.039,420,1.68]],["body/components/TimeLineComponent.html",[0,0.293,3,0.085,4,0.085,5,0.085,32,0.234,33,1.124,34,0.344,39,0.507,42,0.351,45,0.009,46,0.702,51,0.108,57,0.096,98,1.576,110,1.615,135,0.005,136,0.007,137,0.005,157,1.068,259,1.79,260,2.047,261,2.86,262,2.232,264,2.301,265,2.301,267,3.465,268,2.301,269,3.941,273,2.948,282,1.922,284,3.655,290,1.463,291,1.991,306,1.043,387,1.836,388,2.948,389,2.948,390,2.301,391,3.431,392,2.301,393,2.301,394,1.991,395,2.301,396,2.047,397,2.301,398,1.991,399,2.948,400,2.047,401,2.301,402,1.991,403,2.301,404,2.047,405,1.991,406,2.301,407,2.047,408,2.301,409,2.047,410,2.301,411,1.991,412,2.301,413,2.301,414,2.301,415,2.047,416,2.301,417,2.047,418,3.147,419,2.301,420,3.053,421,2.301,422,2.047,423,1.615,424,2.301,425,2.301,1203,6.024,1541,6.061,2422,6.648,2423,4.701,2424,7.951,2425,6.832,2426,5.331,2427,5.331,2428,6.832]],["title/injectables/TimeService.html",[632,1.231,1724,2.747]],["body/injectables/TimeService.html",[0,0.321,3,0.093,4,0.093,5,0.093,32,0.317,34,0.376,36,1.217,39,0.528,42,0.422,44,0.862,45,0.009,46,0.742,47,0.837,50,0.964,51,0.147,57,0.105,79,1.32,135,0.006,136,0.007,137,0.006,180,1.735,205,3.193,282,2.033,290,2.156,306,1.141,632,2.033,828,4.702,836,2.679,1724,4.535,2429,5.139,2430,7.227,2431,8.212,2432,7.227,2433,5.828,2434,7.227,2435,5.828,2436,5.828,2437,8.212,2438,7.227,2439,5.828,2440,5.139,2441,5.828,2442,7.227,2443,5.828,2444,5.828,2445,5.828]],["title/interceptors/TokenInjector.html",[1207,3.518,2132,3.061]],["body/interceptors/TokenInjector.html",[0,0.303,3,0.088,4,0.088,5,0.088,10,2.453,17,2.154,32,0.336,33,0.906,34,0.356,39,0.371,42,0.393,44,0.913,45,0.01,46,0.786,47,0.887,51,0.164,57,0.1,89,1.008,90,1.008,91,1.138,135,0.006,136,0.007,137,0.006,176,2.002,180,1.541,184,2.24,282,1.963,290,1.915,306,1.078,307,1.849,326,1.898,452,3.157,632,1.963,649,4.321,1187,4.429,1205,6.47,1210,4.858,2132,4.879,2446,5.51,2447,4.858,2448,6.977,2449,6.977,2450,5.51,2451,5.51,2452,6.977,2453,8.799,2454,5.51,2455,6.977,2456,8.048,2457,5.51,2458,5.51,2459,6.977,2460,5.51,2461,5.51,2462,6.977,2463,5.51,2464,5.51,2465,5.51,2466,5.51,2467,5.51]],["title/classes/TryToLogIn.html",[0,0.241,19,2.011]],["body/classes/TryToLogIn.html",[0,0.428,1,2.71,2,0.508,3,0.05,4,0.05,5,0.101,6,1.615,7,1.411,8,1.364,9,3.42,10,1.411,11,1.74,12,2.513,13,3.388,14,3.77,15,1.506,16,3.268,17,2.006,18,3.268,19,3.278,20,2.614,21,1.816,22,1.742,23,3.46,24,2.389,25,3.016,26,3.268,27,3.016,28,1.456,29,2.724,30,3.136,31,2.724,32,0.377,33,1.28,34,0.205,35,0.535,36,0.931,37,1.887,38,1.337,39,0.32,40,1.183,41,2.337,42,0.293,44,0.378,45,0.01,46,0.325,47,0.367,49,0.548,50,0.423,51,0.116,52,0.47,53,2.622,54,1.457,55,2.19,56,1.615,57,0.146,58,0.62,59,1.558,60,2.71,61,1.506,62,1.991,63,2.71,64,1.506,65,3.136,66,3.472,67,3.92,68,3.351,69,2.71,70,1.742,71,2.337,72,2.914,73,2.319,74,3.227,75,2.71,76,1.337,77,1.864,78,1.411,79,1.062,80,1.457,81,1.457,82,1.506,83,1.558,84,2.724,85,2.724,86,2.259,87,2.614,88,1.816,89,1.1,90,1.1,91,1.042,92,1.816,93,1.742,94,2.724,95,2.724,96,2.514,97,1.933,98,1.405,99,2.614,100,2.654,101,3.268,102,3.227,103,2.906,104,2.614,105,1.477,106,2.614,107,1.742,108,1.615,109,3.351,110,0.96,111,1.816,112,1.676,113,1.742,114,2.724,115,1.213,116,1.816,117,1.816,118,3.632,119,1.742,120,1.816,121,2.724,122,1.816,123,2.614,124,0.667,125,1.816,126,1.742,127,1.816,128,1.742,129,1.816,130,2.614,131,2.614,132,1.816,133,1.816,134,1.676,135,0.003,136,0.005,137,0.003,214,2.19,2468,4.754,2469,3.169]],["title/classes/TryToLogOut.html",[0,0.241,72,2.011]],["body/classes/TryToLogOut.html",[0,0.432,1,2.757,2,0.523,3,0.052,4,0.052,5,0.102,6,1.662,7,1.452,8,1.371,9,3.444,10,1.452,11,1.765,12,2.512,13,3.424,14,3.811,15,1.55,16,3.325,17,2.028,18,3.325,19,3.16,20,2.67,21,1.869,22,1.793,23,3.502,24,2.43,25,3.068,26,3.325,27,3.068,28,1.481,29,2.783,30,3.191,31,2.783,32,0.367,33,1.29,34,0.21,35,0.546,36,0.795,37,1.641,38,1.346,39,0.219,41,2.388,42,0.168,45,0.01,49,0.564,50,0.435,51,0.118,52,0.484,53,2.668,54,1.499,55,2.228,56,1.662,57,0.147,58,0.638,59,1.604,60,2.757,61,1.55,62,2.034,63,2.757,64,1.55,65,3.191,66,3.539,67,3.963,68,3.4,69,2.757,70,1.793,71,2.388,72,3.16,73,2.359,74,3.266,75,2.757,76,1.367,77,1.887,78,1.452,79,1.075,80,1.499,81,1.499,82,1.55,83,1.604,84,2.783,85,2.783,86,2.308,87,2.67,88,1.869,89,1.109,90,1.109,91,1.051,92,1.869,93,1.793,94,1.869,95,1.869,96,1.725,97,1.326,98,0.964,99,1.793,100,2.692,101,3.325,102,2.757,103,2.957,104,1.793,105,1.014,106,1.793,107,1.793,108,1.662,109,3.947,110,1.472,111,2.783,112,2.568,113,2.67,114,2.783,115,1.24,116,1.869,117,1.869,118,3.684,119,1.793,120,1.869,121,2.783,122,1.869,123,2.67,124,0.687,125,1.869,126,1.793,127,1.869,128,1.793,129,1.869,130,2.67,131,2.67,132,1.869,133,1.869,134,1.725,135,0.003,136,0.005,137,0.003,2470,3.262]],["title/components/TypeFilterComponent.html",[259,1.039,422,1.68]],["body/components/TypeFilterComponent.html",[0,0.185,3,0.053,4,0.079,5,0.079,8,0.538,17,1.957,28,1.974,32,0.368,33,0.816,34,0.217,35,0.558,36,0.46,39,0.226,42,0.397,44,0.4,45,0.01,46,0.67,47,0.389,49,0.581,50,0.448,51,0.168,52,0.498,57,0.061,62,1.405,91,0.46,98,0.992,105,1.542,110,1.017,115,1.859,135,0.003,136,0.005,137,0.003,157,0.776,180,1.304,235,0.968,237,2.357,259,1.401,260,1.289,261,2.077,262,1.405,263,1.845,264,1.449,265,1.449,267,2.713,268,1.449,269,3.742,271,3.114,273,2.141,279,2.455,282,1.396,284,2.997,285,1.494,290,1.62,291,1.853,306,0.657,307,1.126,308,1.289,310,1.156,311,1.326,326,1.156,356,2.347,366,1.405,367,1.365,368,1.405,369,1.405,370,1.405,371,1.405,372,1.187,373,2.575,374,1.405,375,1.405,376,1.405,377,1.365,378,1.405,379,1.365,380,1.405,381,1.405,382,1.405,383,1.405,385,2.503,387,1.156,388,2.141,389,2.141,390,1.449,391,2.814,392,1.449,393,1.449,394,1.253,395,1.449,396,1.289,397,1.449,398,1.253,399,2.141,400,1.289,401,1.449,402,1.253,403,1.449,404,1.289,405,1.253,406,1.449,407,1.289,408,1.449,409,1.289,410,1.449,411,1.253,412,1.449,413,1.449,414,1.449,415,1.289,416,1.449,417,1.289,418,1.803,419,1.449,420,1.289,421,1.449,422,2.503,423,2.394,424,1.449,425,1.449,459,2.218,586,2.728,591,2.218,592,2.218,593,2.009,594,2.009,596,2.347,599,2.107,644,2.107,645,2.009,801,2.503,876,1.65,914,4.745,1006,2.97,1035,5.75,1047,2.96,1123,5.525,1157,2.698,1158,2.503,1459,4.745,1494,2.96,1514,2.698,1545,6.351,1546,6.351,1631,2.698,1634,2.698,1636,2.698,1878,2.96,2021,5.242,2023,5.594,2363,2.698,2364,5.205,2365,4.375,2366,5.205,2367,5.205,2369,5.75,2370,5.75,2375,2.96,2377,2.96,2379,2.698,2380,2.96,2381,4.375,2382,2.96,2383,5.205,2385,2.96,2386,2.96,2387,2.96,2389,2.96,2404,2.96,2405,2.96,2406,2.96,2407,2.96,2409,2.96,2410,2.96,2411,2.96,2418,2.96,2471,5.902,2472,5.902,2473,3.357,2474,3.357,2475,3.357,2476,3.357,2477,3.357,2478,3.357,2479,3.357,2480,3.357,2481,4.962,2482,3.357,2483,3.357,2484,3.357,2485,3.357,2486,3.357,2487,3.357,2488,3.357,2489,3.357,2490,3.357,2491,3.357,2492,3.357,2493,3.357,2494,3.357,2495,3.357,2496,3.357,2497,3.357,2498,3.357,2499,3.357,2500,3.357,2501,3.357,2502,4.962,2503,4.962,2504,4.962,2505,4.962,2506,4.962,2507,6.958,2508,2.96,2509,3.357,2510,5.205,2511,4.962,2512,3.357,2513,4.962,2514,3.357,2515,5.902,2516,4.962,2517,6.958,2518,3.357,2519,3.357]],["title/classes/UpdateSelectedMenu.html",[0,0.241,1328,2.406]],["body/classes/UpdateSelectedMenu.html",[0,0.434,2,0.749,3,0.074,4,0.074,5,0.074,7,2.079,8,1.368,9,2.703,10,3.146,11,1.719,12,1.347,32,0.386,33,1.334,34,0.301,35,0.704,36,0.858,37,2.114,38,1.397,39,0.421,40,1.744,42,0.363,44,0.557,45,0.01,46,0.48,47,0.541,49,0.808,50,0.623,51,0.127,52,0.693,57,0.15,58,0.914,76,1.314,77,2.073,79,0.979,89,1.139,90,1.139,91,1.079,124,1.658,135,0.005,136,0.006,137,0.005,185,2.405,214,2.714,224,2.372,232,1.652,240,2.089,241,1.609,242,1.609,245,1.451,246,1.527,247,1.697,510,2.931,526,4.812,1097,4.049,1328,4.152,1404,2.379,1686,2.796,1689,3.266,1690,2.931,1691,3.885,1692,3.885,1693,3.885,1694,3.266,1695,3.266,1696,3.266,1697,3.266,1698,3.266,1699,3.266,1700,3.266,1701,4.381,1702,3.086,1703,3.086,1704,3.086,2520,6.264,2521,4.67]],["title/classes/UpdatedSubscription.html",[0,0.241,238,2.079]],["body/classes/UpdatedSubscription.html",[0,0.46,2,0.679,3,0.067,4,0.067,5,0.067,8,1.37,12,1.221,32,0.378,33,1.391,34,0.273,35,0.659,37,1.943,38,1.441,39,0.488,42,0.301,45,0.01,49,0.732,50,0.565,51,0.119,52,0.628,57,0.155,58,0.829,76,1.191,77,2.09,89,1.235,90,1.235,91,1.17,124,1.699,135,0.004,136,0.006,137,0.004,157,0.662,211,3.192,212,3.422,213,2.157,217,2.426,218,2.528,219,1.827,220,1.721,221,2.238,222,3.303,223,4.592,224,2.433,225,3.192,226,2.157,227,3.088,228,2.88,229,2.328,230,1.885,231,3.303,232,2.072,233,3.192,234,2.081,235,1.221,236,2.157,237,2.011,238,3.444,239,2.238,240,1.986,241,1.458,242,1.458,243,1.721,244,1.721,245,1.316,246,1.384,247,1.538,248,2.426,249,2.426,250,2.426,251,2.238,252,2.426,253,2.426,254,2.426,255,2.426,256,3.357,257,2.426,258,2.238,2522,5.859]],["title/coverage.html",[2523,5.285]],["body/coverage.html",[0,0.49,1,0.95,5,0.032,6,3.418,8,0.321,11,0.549,15,0.95,19,0.919,24,3.585,25,2.871,28,0.51,32,0.088,41,0.983,45,0.01,55,0.768,60,0.95,63,0.95,69,0.95,72,0.919,74,0.95,75,0.95,78,0.89,98,0.591,110,0.606,135,0.002,136,0.003,137,0.002,140,3.558,144,0.919,150,0.863,157,0.313,158,0.89,161,0.536,164,0.95,177,1.019,182,1.019,185,0.768,208,1.099,211,0.95,212,3.418,213,3.418,222,0.983,225,0.95,227,0.919,228,0.983,231,0.983,233,0.95,238,0.95,240,1.45,259,1.849,260,0.768,266,1.763,310,0.689,312,1.399,313,1.608,315,1.608,319,1.763,321,1.099,323,1.608,324,1.608,394,0.747,396,0.768,398,0.747,400,0.768,402,0.747,404,0.768,405,0.747,407,0.768,409,0.768,411,0.747,415,0.768,417,0.768,420,0.768,422,0.768,423,0.606,471,1.608,498,2.151,522,2.875,524,4.366,528,1.399,529,1.399,530,1.399,531,1.399,532,1.399,536,1.399,544,1.399,546,1.399,563,1.399,567,1.399,569,1.399,572,1.399,576,1.399,578,1.491,579,1.491,581,1.608,582,1.491,584,1.399,586,1.099,587,2.311,600,1.255,604,1.763,619,1.491,620,3.798,632,2.139,638,1.255,640,1.491,647,1.491,649,1.019,792,4.414,823,1.399,833,2.657,834,1.608,837,1.763,844,1.146,942,1.099,951,1.608,980,2.464,1001,1.763,1018,1.608,1053,1.763,1054,1.491,1055,1.763,1057,1.019,1076,1.763,1087,0.983,1088,1.099,1089,1.099,1093,3.943,1119,1.608,1121,1.608,1123,3.43,1124,1.608,1125,1.763,1130,1.763,1131,1.763,1159,1.763,1207,1.608,1230,2.657,1231,1.608,1237,1.321,1255,3.251,1263,1.763,1265,1.321,1281,1.146,1282,1.146,1283,1.608,1284,1.491,1293,1.763,1304,3.395,1306,1.608,1307,1.763,1308,1.763,1328,1.099,1330,1.399,1331,3.149,1368,1.763,1465,1.763,1506,1.763,1521,1.763,1522,1.763,1524,1.321,1538,1.608,1541,1.608,1545,1.608,1546,1.608,1548,1.608,1549,1.608,1561,1.763,1562,1.763,1615,1.608,1658,1.763,1662,1.763,1674,3.078,1686,3.251,1691,1.099,1692,1.099,1693,1.099,1705,2.914,1724,1.255,1825,1.763,1828,1.763,1880,1.763,1914,1.491,1915,1.608,1916,1.608,1964,1.763,1965,1.763,2002,1.763,2024,1.608,2047,1.763,2051,1.763,2061,2.657,2065,1.608,2067,1.608,2073,1.763,2108,1.763,2109,1.763,2132,1.399,2193,1.491,2194,3.395,2343,1.608,2344,1.763,2363,2.657,2379,1.608,2422,1.763,2423,1.763,2429,1.763,2447,1.763,2508,1.763,2510,1.763,2523,1.763,2524,2,2525,2,2526,2,2527,2,2528,2,2529,3.304,2530,7.605,2531,5.848,2532,2,2533,9.115,2534,7.605,2535,4.223,2536,4.904,2537,2,2538,2,2539,2,2540,2,2541,8.174,2542,4.223,2543,4.223,2544,4.223,2545,2,2546,2,2547,2,2548,2,2549,3.304,2550,3.304,2551,8.89,2552,4.223,2553,2,2554,2,2555,5.43,2556,5.43,2557,2,2558,2,2559,4.904,2560,2,2561,2,2562,2,2563,5.157,2564,1.763,2565,1.763,2566,1.763,2567,1.763,2568,1.763,2569,2.914,2570,2.914,2571,2,2572,2,2573,2,2574,2.914,2575,4.325,2576,1.763,2577,4.325,2578,1.763,2579,1.763,2580,1.763,2581,5.157,2582,1.763,2583,1.763,2584,5.706,2585,1.763,2586,1.763,2587,1.763,2588,1.763,2589,1.763,2590,1.763,2591,4.325,2592,1.763,2593,2.914,2594,2,2595,4.325,2596,1.763,2597,1.763,2598,1.763,2599,1.763,2600,1.763,2601,1.763,2602,2.914,2603,1.763,2604,1.763,2605,8.122,2606,2,2607,2,2608,2,2609,2,2610,2,2611,2,2612,2,2613,2,2614,2,2615,2,2616,2,2617,2,2618,2,2619,2,2620,2,2621,2,2622,2,2623,2,2624,2,2625,2,2626,2,2627,2,2628,2]],["title/dependencies.html",[429,2.897,2629,3.644]],["body/dependencies.html",[4,0.088,45,0.01,52,1.038,53,2.541,54,2.541,115,1.411,135,0.006,136,0.007,137,0.006,246,1.808,306,1.082,307,1.855,317,4.186,318,3.31,429,3.04,431,4.006,441,3.168,446,5.215,447,4.89,456,3.168,459,3.653,462,5.215,463,4.445,474,4.445,475,4.445,477,4.445,478,5.719,479,5.621,481,4.445,482,4.445,483,4.445,495,3.168,527,3.31,535,3.653,642,4.445,643,5.621,645,3.31,828,4.186,947,3.04,1114,4.876,1186,4.445,1381,4.445,2153,4.876,2440,4.876,2630,5.529,2631,8.804,2632,5.529,2633,5.529,2634,5.529,2635,5.529,2636,5.529,2637,5.529,2638,6.992,2639,8.312,2640,5.529,2641,5.529,2642,4.876,2643,5.529,2644,5.529,2645,5.529,2646,5.529,2647,5.529,2648,5.529,2649,5.529,2650,5.529,2651,5.529,2652,5.529,2653,5.529,2654,5.529,2655,5.529,2656,5.529,2657,5.529,2658,5.529,2659,5.529,2660,5.529,2661,5.529,2662,5.529]],["title/miscellaneous/enumerations.html",[2663,2.408,2664,4.646]],["body/miscellaneous/enumerations.html",[1,1.853,3,0.062,6,1.987,8,0.887,10,2.862,12,2.425,19,1.793,34,0.252,45,0.009,50,1.228,59,2.72,60,1.853,61,2.628,62,2.692,63,1.853,64,1.853,65,3.534,66,3.31,67,4.217,68,3.698,69,1.853,70,2.145,71,2.72,72,1.793,73,2.613,74,1.853,75,1.853,76,2.078,78,2.463,80,2.543,81,2.543,82,2.628,124,1.554,135,0.004,136,0.006,137,0.004,140,2.145,142,3.169,146,1.417,157,1.3,192,2.235,193,2.235,194,2.235,196,3.169,197,1.918,198,2.145,199,2.235,200,2.235,201,2.235,202,1.684,211,1.853,212,1.987,213,2.818,221,2.925,222,1.918,223,4.507,224,2.873,225,1.853,226,1.987,227,1.793,228,1.918,229,2.145,230,1.737,231,1.918,232,2.612,233,1.853,234,1.918,235,1.125,236,3.275,237,1.853,238,1.853,239,2.062,240,2.067,241,2.409,242,2.409,243,2.613,244,2.613,321,2.145,423,1.676,501,3.169,525,4.519,526,4.507,586,2.145,587,2.728,593,3.312,595,4.126,596,2.728,597,3.136,620,2.728,646,4.448,762,2.235,942,2.145,950,3.472,952,4.126,980,2.909,987,4.126,995,4.448,996,3.136,997,3.136,998,3.136,1086,3.472,1087,1.918,1088,2.145,1089,2.145,1097,2.235,1255,2.335,1281,2.235,1282,2.235,1328,2.145,1615,3.136,1631,4.448,1634,5.168,1636,5.168,1654,3.44,1655,3.44,1656,3.44,1657,3.44,1674,2.448,1678,2.728,1686,2.335,1690,3.472,1691,2.145,1692,2.145,1693,2.145,2067,3.136,2072,3.44,2663,2.577,2664,3.44,2665,5.532,2666,3.44,2667,3.44,2668,5.532,2669,3.901,2670,5.532,2671,3.44,2672,3.44,2673,3.901,2674,5.668,2675,3.44,2676,3.44,2677,3.901,2678,6.428,2679,5.532,2680,3.901,2681,3.901,2682,5.532,2683,3.901]],["title/index.html",[34,0.282,2684,3.859]],["body/index.html",[2,0.695,45,0.009,73,1.762,98,2.01,110,2.061,135,0.004,136,0.006,137,0.004,260,3.119,261,1.814,387,1.493,394,2.54,396,3.119,398,3.033,400,2.611,402,3.033,404,3.119,405,3.033,407,2.611,409,2.611,411,2.54,415,2.611,417,2.611,420,2.611,422,2.611,426,1.762,427,6.213,428,2.059,429,2.382,430,2.594,431,2.483,432,2.594,433,2.208,434,3.821,435,3.821,436,3.821,437,3.821,438,4.757,439,6.213,440,5.368,441,3.411,442,2.594,494,2.72,498,3.465,523,2.72,610,5.914,611,3.821,612,3.821,613,3.821,614,4.757,649,3.465,836,1.992,844,3.896,1057,3.465,1232,6.213,1233,3.821,1234,3.821,1235,3.821,1236,3.821,1237,4.494,1265,4.494,1524,4.494,1528,6.71,1529,3.821,1530,3.821,1531,3.821,1532,3.821,1533,4.757,1724,4.268,2130,3.821,2131,3.821,2132,4.757,2146,3.821,2147,3.821,2184,5.914,2185,3.821,2186,3.821,2187,3.821,2188,4.757,2684,3.821,2685,4.334,2686,4.334,2687,4.334,2688,4.334,2689,4.334,2690,4.334]],["title/modules.html",[428,2.847]],["body/modules.html",[45,0.008,135,0.007,136,0.008,137,0.007,361,7.492,427,4.504,428,3.06,438,4.504,439,4.504,440,4.504,447,6.226,478,6.639,610,4.803,614,4.504,1232,4.504,1528,4.803,1533,4.504,2184,4.803,2188,4.504,2691,8.902,2692,9.114,2693,8.496]],["title/routes.html",[494,3.762]],["body/routes.html",[45,0.008,135,0.007,136,0.008,137,0.007,494,4.516]],["title/miscellaneous/typealiases.html",[2663,2.408,2694,5.269]],["body/miscellaneous/typealiases.html",[1,2.848,6,3.054,19,2.756,32,0.263,34,0.387,45,0.01,60,2.848,63,2.848,69,2.848,72,2.756,74,2.848,75,2.848,134,3.888,135,0.006,136,0.008,137,0.006,211,2.848,212,3.054,213,3.746,222,2.947,225,2.848,227,2.756,231,2.947,233,2.848,238,2.848,240,2.451,258,3.888,321,3.296,586,3.296,587,4.193,600,3.763,603,5.485,942,3.296,1087,2.947,1088,3.296,1089,3.296,1255,3.589,1262,4.859,1281,3.435,1282,3.435,1328,3.296,1674,3.763,1682,5.143,1686,3.589,1691,3.296,1692,3.296,1693,3.296,1704,4.859,2663,3.961,2666,5.287,2667,5.287,2671,5.287,2672,5.287,2674,5.287,2676,5.287,2695,5.996]],["title/miscellaneous/variables.html",[2663,2.408,2696,4.646]],["body/miscellaneous/variables.html",[11,2.063,12,1.648,15,1.236,28,1.043,32,0.37,34,0.168,45,0.01,49,1.567,50,1.208,55,0.999,78,1.158,79,0.639,80,1.196,81,2.319,82,2.397,124,1.062,135,0.005,136,0.004,137,0.003,157,0.407,161,0.697,176,1.068,180,1.66,181,3.075,184,1.058,195,2.647,205,2.051,312,2.858,313,3.285,315,3.285,323,3.285,324,3.285,341,2.092,353,1.941,360,3.587,372,0.92,377,1.058,418,1.485,471,3.285,488,1.941,498,3.358,501,2.341,505,3.763,520,1.941,524,2.092,525,3.777,526,2.246,527,3.422,528,4.344,529,1.82,530,1.82,531,3.528,532,1.82,538,2.295,540,2.295,541,2.295,542,2.295,544,1.82,546,1.82,550,2.295,552,2.295,555,2.295,557,2.295,559,2.295,563,1.82,567,1.82,569,1.82,572,1.82,576,1.82,578,3.047,579,3.047,580,2.295,581,4.056,582,3.047,583,2.295,584,3.528,585,2.295,620,1.82,633,1.633,647,3.047,648,2.092,688,1.633,717,1.558,746,2.082,747,1.941,748,1.941,792,2.397,829,2.092,833,2.092,834,3.285,835,2.295,951,3.285,1018,3.285,1093,2.092,1096,2.295,1097,1.491,1098,2.295,1100,3.998,1108,2.858,1112,2.295,1113,2.295,1119,3.285,1120,2.295,1121,3.285,1122,2.295,1230,2.092,1231,3.285,1264,2.092,1283,3.285,1284,3.763,1304,2.092,1306,3.285,1331,1.941,1342,2.092,1343,2.092,1344,2.092,1351,2.092,1380,4.595,1914,3.047,1915,3.285,1916,3.285,2024,3.285,2061,2.092,2062,2.295,2063,2.295,2065,3.285,2066,2.295,2195,2.092,2246,4.994,2563,2.295,2564,3.603,2565,3.603,2566,3.603,2567,3.603,2568,4.449,2569,2.295,2570,5.04,2574,2.295,2575,2.295,2576,3.603,2577,2.295,2578,3.603,2579,3.603,2580,3.603,2581,2.295,2582,3.603,2583,3.603,2584,2.295,2585,3.603,2586,3.603,2587,3.603,2588,3.603,2589,3.603,2590,4.449,2591,2.295,2592,3.603,2593,2.295,2595,2.295,2596,2.295,2597,3.603,2598,3.603,2599,2.295,2600,2.295,2601,2.295,2602,2.295,2603,3.603,2604,3.603,2642,2.295,2663,1.719,2675,2.295,2696,2.295,2697,5.716,2698,2.602,2699,2.602,2700,4.086,2701,4.086,2702,2.602,2703,2.602,2704,2.602,2705,4.086,2706,6.211,2707,2.602,2708,2.602,2709,5.045,2710,2.602,2711,2.602,2712,6.894,2713,5.716,2714,5.716,2715,6.211,2716,4.086,2717,5.716,2718,2.602,2719,2.602,2720,5.045,2721,5.045,2722,5.716,2723,5.716,2724,2.602,2725,2.602,2726,2.602,2727,2.602,2728,2.602,2729,2.602,2730,2.602,2731,2.602,2732,2.602,2733,2.602,2734,2.602,2735,2.602,2736,2.602,2737,2.602,2738,2.602,2739,2.602,2740,5.045,2741,2.602,2742,2.602,2743,2.602,2744,2.602,2745,2.602,2746,2.602,2747,2.602,2748,2.602,2749,2.602,2750,2.602,2751,2.602,2752,4.086,2753,2.602,2754,2.602,2755,2.602,2756,2.602,2757,2.602,2758,2.602,2759,2.602,2760,2.602,2761,5.716,2762,2.602,2763,2.602,2764,5.045,2765,2.602,2766,2.602,2767,2.602,2768,2.602,2769,2.602,2770,2.602,2771,2.602,2772,4.086,2773,4.086,2774,2.602,2775,2.602,2776,2.602,2777,5.045,2778,5.045,2779,2.602,2780,2.602,2781,2.602,2782,2.602,2783,2.602,2784,2.602,2785,2.602,2786,2.602,2787,2.602,2788,2.602,2789,2.602,2790,5.045,2791,5.045,2792,2.602,2793,2.602,2794,2.602]]],"invertedIndex":[["",{"_index":45,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"classes/Message.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/State.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":792,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"interfaces/ConfigState.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/Filter.html":{},"injectables/HandlebarsService.html":{},"components/IframeDisplayComponent.html":{},"classes/RouterStateUrl.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.3.0",{"_index":2635,"title":{},"body":{"dependencies.html":{}}}],["0.5.25",{"_index":2653,"title":{},"body":{"dependencies.html":{}}}],["0.8.29",{"_index":2662,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2533,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2529,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2528,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2527,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2537,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2553,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":2539,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2530,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2534,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2541,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2535,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2542,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2552,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2536,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2538,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":338,"title":{"classes/HandleUnexpectedError-1.html":{}},"body":{"components/AppComponent.html":{},"injectables/HandlebarsService.html":{},"components/IframeDisplayComponent.html":{},"components/NavbarComponent.html":{},"classes/ThirdsServiceMock.html":{}}}],["1)?location.pathname",{"_index":815,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["1.0.14",{"_index":2654,"title":{},"body":{"dependencies.html":{}}}],["1.0.9",{"_index":2648,"title":{},"body":{"dependencies.html":{}}}],["1.2.17",{"_index":2636,"title":{},"body":{"dependencies.html":{}}}],["1.9.3",{"_index":2660,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2550,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":2526,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":2559,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2558,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":2556,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":2546,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":2544,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":2508,"title":{},"body":{"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["100",{"_index":2549,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":648,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["11",{"_index":2685,"title":{},"body":{"index.html":{}}}],["11.0.1",{"_index":2640,"title":{},"body":{"dependencies.html":{}}}],["11/25",{"_index":2548,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":2687,"title":{},"body":{"index.html":{}}}],["16",{"_index":2543,"title":{},"body":{"coverage.html":{}}}],["16px",{"_index":1873,"title":{},"body":{"components/IconComponent.html":{}}}],["17",{"_index":2686,"title":{},"body":{"index.html":{}}}],["19",{"_index":2690,"title":{},"body":{"index.html":{}}}],["2",{"_index":517,"title":{"classes/HandleUnexpectedError-2.html":{}},"body":{"modules/AppRoutingModule.html":{}}}],["2*60*60*1000",{"_index":1199,"title":{},"body":{"injectables/CardService.html":{}}}],["2.0",{"_index":378,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{}}}],["2.0.1",{"_index":2655,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":2650,"title":{},"body":{"dependencies.html":{}}}],["2.2.1",{"_index":2644,"title":{},"body":{"dependencies.html":{}}}],["2.24.0",{"_index":2652,"title":{},"body":{"dependencies.html":{}}}],["2.6.3",{"_index":2647,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":2562,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2545,"title":{},"body":{"coverage.html":{}}}],["2018",{"_index":368,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{}}}],["25",{"_index":2555,"title":{},"body":{"coverage.html":{}}}],["2px",{"_index":2511,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["3",{"_index":1685,"title":{"classes/HandleUnexpectedError-3.html":{}},"body":{"injectables/HandlebarsService.html":{}}}],["3.6.0",{"_index":2658,"title":{},"body":{"dependencies.html":{}}}],["30px",{"_index":1048,"title":{},"body":{"components/CardComponent.html":{}}}],["32px",{"_index":1872,"title":{},"body":{"components/IconComponent.html":{}}}],["33",{"_index":2557,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":2638,"title":{},"body":{"dependencies.html":{}}}],["4.0.12",{"_index":2649,"title":{},"body":{"dependencies.html":{}}}],["4.17.11",{"_index":2651,"title":{},"body":{"dependencies.html":{}}}],["4.2.1",{"_index":2645,"title":{},"body":{"dependencies.html":{}}}],["4/8",{"_index":2532,"title":{},"body":{"coverage.html":{}}}],["400px",{"_index":1036,"title":{},"body":{"components/CardComponent.html":{}}}],["401",{"_index":964,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["44",{"_index":2547,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":341,"title":{},"body":{"components/AppComponent.html":{},"interfaces/ConfigState.html":{},"miscellaneous/variables.html":{}}}],["5.8.1",{"_index":2637,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":2531,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":967,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["5000",{"_index":1286,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["55",{"_index":2688,"title":{},"body":{"index.html":{}}}],["5px",{"_index":1038,"title":{},"body":{"components/CardComponent.html":{}}}],["6",{"_index":2689,"title":{},"body":{"index.html":{}}}],["6.3.3",{"_index":2656,"title":{},"body":{"dependencies.html":{}}}],["600000",{"_index":1212,"title":{},"body":{"injectables/CardService.html":{}}}],["63",{"_index":2560,"title":{},"body":{"coverage.html":{}}}],["64px",{"_index":1871,"title":{},"body":{"components/IconComponent.html":{}}}],["7.1.0",{"_index":2639,"title":{},"body":{"dependencies.html":{}}}],["7.2.2",{"_index":2631,"title":{},"body":{"dependencies.html":{}}}],["7/11",{"_index":2561,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":700,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["8px",{"_index":386,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{}}}],["_",{"_index":644,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["_.difference(work",{"_index":2286,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["_.fill(this.expandedmenu,false",{"_index":2095,"title":{},"body":{"components/NavbarComponent.html":{}}}],["_.get(oauth2conf",{"_index":667,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["_.isequal(forma",{"_index":2408,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["_.isequal(forma,formb",{"_index":2496,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["_.merge(acc,val",{"_index":2255,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["_.remove(this.loadingi18n",{"_index":2300,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["_.uniq(ids",{"_index":2285,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["_currentselection",{"_index":1884,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["_defaultfilters",{"_index":1616,"title":{},"body":{"injectables/FilterService.html":{}}}],["_filter",{"_index":2366,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["_htmlcontent",{"_index":1370,"title":{},"body":{"components/DetailComponent.html":{}}}],["_i18nprefix",{"_index":1004,"title":{},"body":{"components/CardComponent.html":{},"components/DetailsComponent.html":{}}}],["_menu_entry_id",{"_index":1885,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["_menu_id",{"_index":1886,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["_thirdmenus",{"_index":2075,"title":{},"body":{"components/NavbarComponent.html":{}}}],["a[key",{"_index":1821,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["accept",{"_index":65,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["acceptlogin",{"_index":1,"title":{"classes/AcceptLogIn.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["acceptlogin(authenticationinfo",{"_index":885,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["acceptlogin(authinfo",{"_index":896,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["acceptlogout",{"_index":74,"title":{"classes/AcceptLogOut.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["acceptlogoutsuccess",{"_index":75,"title":{"classes/AcceptLogOutSuccess.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["acceptlogoutsucess",{"_index":872,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["access_token",{"_index":623,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["accessors",{"_index":1006,"title":{},"body":{"components/CardComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"injectables/FilterService.html":{},"components/IframeDisplayComponent.html":{},"components/NavbarComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["accordingly",{"_index":851,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["action",{"_index":8,"title":{"classes/Action.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"classes/EmptyLightCards.html":{},"injectables/FilterService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["action.buttonstyle",{"_index":1450,"title":{},"body":{"components/DetailComponent.html":{}}}],["action.buttonstyle.split",{"_index":1451,"title":{},"body":{"components/DetailComponent.html":{}}}],["action.contentstyle",{"_index":1453,"title":{},"body":{"components/DetailComponent.html":{}}}],["action.contentstyle.split",{"_index":1454,"title":{},"body":{"components/DetailComponent.html":{}}}],["action.payload",{"_index":926,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["action.payload.event.url.indexof(\"/feed/cards/\")>=0",{"_index":1315,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["action.payload.event.url.indexof(\"/thirdparty/\")>=0",{"_index":1322,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["action.payload.routerstate",{"_index":1317,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["actionid",{"_index":1389,"title":{},"body":{"components/DetailComponent.html":{}}}],["actionreducermap",{"_index":540,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["actions",{"_index":842,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"classes/State.html":{}}}],["actions?:ofmap",{"_index":191,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["actiontype",{"_index":142,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"miscellaneous/enumerations.html":{}}}],["activate",{"_index":1495,"title":{},"body":{"components/DetailsComponent.html":{}}}],["activatedroutesnapshot",{"_index":1336,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["active",{"_index":599,"title":{},"body":{"classes/ApplyFilter.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/Filter.html":{},"classes/InitFilters.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["active:boolean",{"_index":1603,"title":{},"body":{"classes/Filter.html":{}}}],["activedetail",{"_index":1490,"title":{},"body":{"components/DetailsComponent.html":{}}}],["activedetail.length",{"_index":1496,"title":{},"body":{"components/DetailsComponent.html":{}}}],["actual_component",{"_index":425,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["add",{"_index":236,"title":{},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"components/IframeDisplayComponent.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["addauthheadersifnecessary",{"_index":2448,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["addauthheadersifnecessary(request",{"_index":2452,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["added",{"_index":1101,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["addlightcardfailure",{"_index":211,"title":{"classes/AddLightCardFailure.html":{}},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["addlightcardfailure({error",{"_index":1147,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["afterviewinit",{"_index":1466,"title":{},"body":{"components/DetailsComponent.html":{},"components/FeedComponent.html":{}}}],["aims",{"_index":84,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["alarm",{"_index":1631,"title":{},"body":{"injectables/FilterService.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/enumerations.html":{}}}],["alert(`${actionid",{"_index":1461,"title":{},"body":{"components/DetailComponent.html":{}}}],["aliases",{"_index":2695,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1049,"title":{},"body":{"components/CardComponent.html":{}}}],["already",{"_index":2143,"title":{},"body":{"modules/ServicesModule.html":{}}}],["always",{"_index":1351,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"miscellaneous/variables.html":{}}}],["angular",{"_index":659,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["angular/animations",{"_index":2630,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":456,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"components/IconComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":452,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthObject.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigService.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{}}}],["angular/compiler",{"_index":2632,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":306,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"components/TypeFilterComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":459,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{},"components/LoginComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"dependencies.html":{}}}],["angular/http",{"_index":2633,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":446,"title":{},"body":{"modules/AppModule.html":{},"components/DetailComponent.html":{},"components/IframeDisplayComponent.html":{},"dependencies.html":{}}}],["angular/router",{"_index":495,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"classes/CustomRouterStateSerializer.html":{},"modules/FeedRoutingModule.html":{},"classes/RouterStateUrl.html":{},"modules/ThirdpartyRoutingModule.html":{},"dependencies.html":{}}}],["app",{"_index":293,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/NavbarComponent.html":{}}}],["app.component",{"_index":466,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":274,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":272,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":260,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["appeffects",{"_index":578,"title":{},"body":{"interfaces/AppState.html":{},"modules/StateModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appendfixedlengthalphanumericvalue",{"_index":2606,"title":{},"body":{"coverage.html":{}}}],["application",{"_index":357,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckTokenResponse.html":{}}}],["application/x",{"_index":696,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["applies",{"_index":1600,"title":{},"body":{"classes/Filter.html":{}}}],["apply",{"_index":913,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"interfaces/CardFeedState.html":{},"classes/Filter.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["applyfilter",{"_index":586,"title":{"classes/ApplyFilter.html":{}},"body":{"classes/ApplyFilter.html":{},"injectables/CardOperationEffects.html":{},"classes/Filter.html":{},"classes/InitFilters.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["applyfilter(card",{"_index":1588,"title":{},"body":{"classes/Filter.html":{}}}],["appmetareducers",{"_index":581,"title":{},"body":{"interfaces/AppState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":427,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"index.html":{},"modules.html":{}}}],["appreducer",{"_index":579,"title":{},"body":{"interfaces/AppState.html":{},"modules/StateModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appropriate",{"_index":798,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["approutingmodule",{"_index":438,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"index.html":{},"modules.html":{}}}],["appstate",{"_index":310,"title":{"interfaces/AppState.html":{}},"body":{"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"components/IframeDisplayComponent.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["archives",{"_index":505,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"miscellaneous/variables.html":{}}}],["archives'},{'name",{"_index":395,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["archives.component",{"_index":616,"title":{},"body":{"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{}}}],["archives.component.html",{"_index":606,"title":{},"body":{"components/ArchivesComponent.html":{}}}],["archives.component.scss",{"_index":605,"title":{},"body":{"components/ArchivesComponent.html":{}}}],["archivescomponent",{"_index":394,"title":{"components/ArchivesComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["archivesmodule",{"_index":610,"title":{"modules/ArchivesModule.html":{}},"body":{"modules/ArchivesModule.html":{},"index.html":{},"modules.html":{}}}],["archivesroutingmodule",{"_index":614,"title":{"modules/ArchivesRoutingModule.html":{}},"body":{"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"index.html":{},"modules.html":{}}}],["args",{"_index":1793,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["args[2",{"_index":1794,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["arguments",{"_index":1570,"title":{},"body":{"classes/Filter.html":{}}}],["array",{"_index":1399,"title":{},"body":{"components/DetailComponent.html":{},"components/IframeDisplayComponent.html":{}}}],["array(menus.length",{"_index":2094,"title":{},"body":{"components/NavbarComponent.html":{}}}],["array[0",{"_index":2058,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["arrow::after",{"_index":2519,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["asinputstring",{"_index":2430,"title":{},"body":{"injectables/TimeService.html":{}}}],["asinputstring(value",{"_index":2434,"title":{},"body":{"injectables/TimeService.html":{}}}],["ask",{"_index":652,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["asktokenfromcode(code",{"_index":713,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["asktokenfrompassword(login",{"_index":728,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["asktokenurl",{"_index":653,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["assets/i18n",{"_index":2741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/styles/_variables.scss",{"_index":1878,"title":{},"body":{"components/IconComponent.html":{},"components/TypeFilterComponent.html":{}}}],["assignconfigurationproperties(oauth2conf",{"_index":665,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["assuming",{"_index":1949,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["attachaction",{"_index":1372,"title":{},"body":{"components/DetailComponent.html":{}}}],["attachaction(button",{"_index":1387,"title":{},"body":{"components/DetailComponent.html":{}}}],["attempt",{"_index":68,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["auth",{"_index":2722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authenticate",{"_index":935,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["authenticated",{"_index":359,"title":{},"body":{"components/AppComponent.html":{}}}],["authentication",{"_index":12,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/EmptyLightCards.html":{},"injectables/FeedFiltersEffects.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitAuthStatus.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authentication.reducer.ts",{"_index":26,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authentication.service",{"_index":1187,"title":{},"body":{"injectables/CardService.html":{},"modules/ServicesModule.html":{},"interceptors/TokenInjector.html":{}}}],["authenticationactions",{"_index":134,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/typealiases.html":{}}}],["authenticationactiontypes",{"_index":59,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"injectables/FeedFiltersEffects.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["authenticationactiontypes.acceptlogin",{"_index":31,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.acceptlogout",{"_index":131,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.acceptlogoutsuccess",{"_index":133,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.checkauthenticationstatus",{"_index":93,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.initauthstatus",{"_index":88,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.rejectlogin",{"_index":123,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.trytologin",{"_index":106,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationactiontypes.trytologout",{"_index":113,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationeffect",{"_index":118,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["authenticationeffects",{"_index":15,"title":{"injectables/AuthenticationEffects.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"interfaces/AppState.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authenticationguard",{"_index":496,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{}}}],["authenticationreducer",{"_index":538,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["authenticationservice",{"_index":649,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigService.html":{},"components/LoginComponent.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{},"coverage.html":{},"index.html":{}}}],["authenticationservice,private",{"_index":1189,"title":{},"body":{"injectables/CardService.html":{}}}],["authenticationservice.clearauthenticationinformation",{"_index":920,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["authenticationservice.computeredirecturi",{"_index":725,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["authenticationservice.decodetoken(payload.access_token",{"_index":788,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["authenticationservice.extractidentificationinformation",{"_index":894,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["authenticationservice.extracttoken",{"_index":805,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["authenticationservice.getsecurityheader",{"_index":1210,"title":{},"body":{"injectables/CardService.html":{},"interceptors/TokenInjector.html":{}}}],["authenticationservice.isexpirationdateover",{"_index":892,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["authenticationservice.verifyexpirationdate",{"_index":761,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["authinfo",{"_index":893,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["authinitialstate",{"_index":834,"title":{},"body":{"interfaces/AuthState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authobject",{"_index":619,"title":{"classes/AuthObject.html":{}},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"coverage.html":{}}}],["authorization",{"_index":803,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["authorization_code",{"_index":720,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["authservice",{"_index":843,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["authstate",{"_index":528,"title":{"interfaces/AuthState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/AuthState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authstate)=>authstate.code",{"_index":2765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authstate)=>authstate.message",{"_index":2767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["available",{"_index":361,"title":{},"body":{"components/AppComponent.html":{},"modules.html":{}}}],["b[key",{"_index":1823,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["back",{"_index":682,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["background",{"_index":2516,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["badge",{"_index":1046,"title":{},"body":{"components/CardComponent.html":{}}}],["basehref",{"_index":1859,"title":{},"body":{"components/IconComponent.html":{}}}],["basehref?basehref:'/')+'assets/images/icons",{"_index":1862,"title":{},"body":{"components/IconComponent.html":{}}}],["bearer",{"_index":804,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["beginning",{"_index":2736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["behaviour",{"_index":1565,"title":{},"body":{"classes/Filter.html":{}}}],["better",{"_index":1928,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["beware",{"_index":721,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{}}}],["big",{"_index":1834,"title":{},"body":{"components/IconComponent.html":{}}}],["big:boolean",{"_index":1852,"title":{},"body":{"components/IconComponent.html":{}}}],["bindactions",{"_index":1373,"title":{},"body":{"components/DetailComponent.html":{}}}],["bindactions(third",{"_index":1391,"title":{},"body":{"components/DetailComponent.html":{}}}],["body",{"_index":2518,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["boolean",{"_index":146,"title":{},"body":{"classes/Action.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"components/CardComponent.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"classes/CheckTokenResponse.html":{},"interfaces/ConfigState.html":{},"classes/Filter.html":{},"components/IconComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"components/LoginComponent.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"miscellaneous/enumerations.html":{}}}],["bootstrap",{"_index":431,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"dependencies.html":{},"index.html":{}}}],["bootstrap/ng",{"_index":463,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{},"dependencies.html":{}}}],["border",{"_index":1047,"title":{},"body":{"components/CardComponent.html":{},"components/TypeFilterComponent.html":{}}}],["both",{"_index":1564,"title":{},"body":{"classes/Filter.html":{}}}],["bottom",{"_index":1037,"title":{},"body":{"components/CardComponent.html":{}}}],["break",{"_index":966,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{}}}],["browse",{"_index":2692,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":447,"title":{},"body":{"modules/AppModule.html":{},"components/DetailComponent.html":{},"components/IframeDisplayComponent.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/animations",{"_index":450,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":449,"title":{},"body":{"modules/AppModule.html":{}}}],["browserlang",{"_index":331,"title":{},"body":{"components/AppComponent.html":{}}}],["browsermodule",{"_index":445,"title":{},"body":{"modules/AppModule.html":{}}}],["btn",{"_index":2003,"title":{},"body":{"components/LoginComponent.html":{}}}],["build",{"_index":660,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["buildconfigselector",{"_index":640,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"components/LoginComponent.html":{},"coverage.html":{}}}],["buildfilterselector",{"_index":2379,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["business",{"_index":848,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["button",{"_index":103,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"components/DetailComponent.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["button.addeventlistener('click",{"_index":1460,"title":{},"body":{"components/DetailComponent.html":{}}}],["button.attributes['action",{"_index":1444,"title":{},"body":{"components/DetailComponent.html":{}}}],["button.children[0].classlist.add('fa",{"_index":1456,"title":{},"body":{"components/DetailComponent.html":{}}}],["button.children[0].classlist.add(c",{"_index":1455,"title":{},"body":{"components/DetailComponent.html":{}}}],["button.classlist.add('btn",{"_index":1449,"title":{},"body":{"components/DetailComponent.html":{}}}],["button.classlist.add(c",{"_index":1452,"title":{},"body":{"components/DetailComponent.html":{}}}],["buttons",{"_index":1443,"title":{},"body":{"components/DetailComponent.html":{}}}],["buttonstyle",{"_index":147,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["c",{"_index":367,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{}}}],["call",{"_index":678,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["call.pipe",{"_index":733,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["called",{"_index":100,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["calling",{"_index":911,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["canactivate",{"_index":504,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["caps",{"_index":1042,"title":{},"body":{"components/CardComponent.html":{}}}],["card",{"_index":157,"title":{"classes/Card.html":{}},"body":{"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"components/ArchivesComponent.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/ClearCard.html":{},"interfaces/ConfigState.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/SelectLightCard.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["card'},{'name",{"_index":397,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["card):observable",{"_index":1762,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["card.actions",{"_index":955,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/LightCardEffects.html":{}}}],["card.actions.ts",{"_index":213,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["card.actions.ts:25",{"_index":1991,"title":{},"body":{"classes/LoadLightCards.html":{}}}],["card.actions.ts:30",{"_index":1505,"title":{},"body":{"classes/EmptyLightCards.html":{}}}],["card.actions.ts:34",{"_index":1995,"title":{},"body":{"classes/LoadLightCardsSuccess.html":{}}}],["card.actions.ts:37",{"_index":1996,"title":{},"body":{"classes/LoadLightCardsSuccess.html":{}}}],["card.actions.ts:42",{"_index":1992,"title":{},"body":{"classes/LoadLightCardsExtendedData.html":{}}}],["card.actions.ts:50",{"_index":1993,"title":{},"body":{"classes/LoadLightCardsFailure.html":{}}}],["card.actions.ts:53",{"_index":1994,"title":{},"body":{"classes/LoadLightCardsFailure.html":{}}}],["card.actions.ts:59",{"_index":2128,"title":{},"body":{"classes/SelectLightCard.html":{}}}],["card.actions.ts:61",{"_index":2129,"title":{},"body":{"classes/SelectLightCard.html":{}}}],["card.actions.ts:66",{"_index":215,"title":{},"body":{"classes/AddLightCardFailure.html":{}}}],["card.actions.ts:69",{"_index":216,"title":{},"body":{"classes/AddLightCardFailure.html":{}}}],["card.actions.ts:74",{"_index":2522,"title":{},"body":{"classes/UpdatedSubscription.html":{}}}],["card.actions.ts:83",{"_index":1683,"title":{},"body":{"classes/HandleUnexpectedError-2.html":{}}}],["card.actions.ts:85",{"_index":1684,"title":{},"body":{"classes/HandleUnexpectedError-2.html":{}}}],["card.component.html",{"_index":1003,"title":{},"body":{"components/CardComponent.html":{}}}],["card.component.scss",{"_index":1002,"title":{},"body":{"components/CardComponent.html":{}}}],["card.details",{"_index":1070,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["card.effects",{"_index":571,"title":{},"body":{"interfaces/AppState.html":{}}}],["card.effects.ts",{"_index":1965,"title":{},"body":{"injectables/LightCardEffects.html":{},"coverage.html":{}}}],["card.effects.ts:20",{"_index":1967,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["card.effects.ts:30",{"_index":1978,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["card.enddate",{"_index":1646,"title":{},"body":{"injectables/FilterService.html":{}}}],["card.model",{"_index":220,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"classes/Detail.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/UpdatedSubscription.html":{}}}],["card.model.ts",{"_index":2678,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["card.publisher",{"_index":2271,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["card.publisherversion",{"_index":2272,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["card.reducer",{"_index":554,"title":{},"body":{"interfaces/AppState.html":{}}}],["card.reducer.ts",{"_index":2573,"title":{},"body":{"coverage.html":{}}}],["card.service",{"_index":2139,"title":{},"body":{"modules/ServicesModule.html":{}}}],["card.severity",{"_index":1639,"title":{},"body":{"injectables/FilterService.html":{}}}],["card.startdate",{"_index":1647,"title":{},"body":{"injectables/FilterService.html":{}}}],["card1.startdate",{"_index":1117,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["card2",{"_index":1116,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["card2.startdate",{"_index":1118,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["card:card",{"_index":2773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["card:lightcard",{"_index":1643,"title":{},"body":{"injectables/FilterService.html":{}}}],["card==null?null:card.details",{"_index":2774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["card==null?null:card.id",{"_index":2775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cardactions",{"_index":1262,"title":{},"body":{"classes/ClearCard.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"miscellaneous/typealiases.html":{}}}],["cardactiontypes",{"_index":1086,"title":{},"body":{"injectables/CardEffects.html":{},"classes/ClearCard.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"miscellaneous/enumerations.html":{}}}],["cardactiontypes.clearcard",{"_index":1256,"title":{},"body":{"classes/ClearCard.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{}}}],["cardactiontypes.handleunexpectederror",{"_index":1261,"title":{},"body":{"classes/ClearCard.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{}}}],["cardactiontypes.loadcard",{"_index":1258,"title":{},"body":{"classes/ClearCard.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{}}}],["cardactiontypes.loadcardfailure",{"_index":1259,"title":{},"body":{"classes/ClearCard.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{}}}],["cardactiontypes.loadcardsuccess",{"_index":1260,"title":{},"body":{"classes/ClearCard.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{}}}],["cardcomponent",{"_index":396,"title":{"components/CardComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["carddetailscomponent",{"_index":398,"title":{"components/CardDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedRoutingModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["cardeffects",{"_index":544,"title":{"injectables/CardEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/CardEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cardfeedstate",{"_index":531,"title":{"interfaces/CardFeedState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/CardFeedState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cardinitialstate",{"_index":1231,"title":{},"body":{"interfaces/CardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cardlistcomponent",{"_index":400,"title":{"components/CardListComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["cardoperation",{"_index":1183,"title":{},"body":{"injectables/CardService.html":{}}}],["cardoperationeffects",{"_index":546,"title":{"injectables/CardOperationEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/CardOperationEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cardoperationsurl",{"_index":1160,"title":{},"body":{"injectables/CardService.html":{}}}],["cardoperationtype",{"_index":2668,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cardreducer",{"_index":555,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["cards",{"_index":1100,"title":{},"body":{"interfaces/CardFeedState.html":{},"components/FeedComponent.html":{},"modules/FeedRoutingModule.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["cards'},{'name",{"_index":406,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["cards/cards.module",{"_index":1543,"title":{},"body":{"modules/FeedModule.html":{}}}],["cards/components/card",{"_index":1555,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["cards/components/detail/detail.component",{"_index":1554,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["cardselectors",{"_index":1061,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["cardservice",{"_index":844,"title":{"injectables/CardService.html":{}},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"injectables/CustomRouterEffects.html":{},"modules/ServicesModule.html":{},"coverage.html":{},"index.html":{}}}],["cardsmodule",{"_index":1232,"title":{"modules/CardsModule.html":{}},"body":{"modules/CardsModule.html":{},"modules/FeedModule.html":{},"index.html":{},"modules.html":{}}}],["cardstate",{"_index":529,"title":{"interfaces/CardState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/CardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cardstate.selected",{"_index":2771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cardstate:cardstate",{"_index":2770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cardsurl",{"_index":1161,"title":{},"body":{"injectables/CardService.html":{}}}],["care",{"_index":1574,"title":{},"body":{"classes/Filter.html":{}}}],["case",{"_index":963,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"classes/RouterStateUrl.html":{}}}],["catch",{"_index":819,"title":{},"body":{"classes/AuthObject.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{}}}],["catcherror",{"_index":636,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"components/FeedComponent.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["catcherror((err",{"_index":899,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/MenuEffects.html":{}}}],["catcherror((err,caught",{"_index":1973,"title":{},"body":{"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["catcherror((error",{"_index":1146,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["catcherror((error,caught",{"_index":1148,"title":{},"body":{"injectables/CardOperationEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["catcherror(authenticationservice.handleerror",{"_index":705,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["catcherror(err",{"_index":1518,"title":{},"body":{"components/FeedComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["catcherror(errorresponse",{"_index":886,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["category",{"_index":854,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["caught",{"_index":900,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/MenuEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["cell",{"_index":2507,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["center",{"_index":1050,"title":{},"body":{"components/CardComponent.html":{}}}],["cf",{"_index":1699,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/UpdateSelectedMenu.html":{}}}],["chain",{"_index":1593,"title":{},"body":{"classes/Filter.html":{}}}],["chainfilter",{"_index":1581,"title":{},"body":{"classes/Filter.html":{}}}],["chainfilter(card",{"_index":1591,"title":{},"body":{"classes/Filter.html":{}}}],["change",{"_index":596,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilters.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/enumerations.html":{}}}],["changes",{"_index":1478,"title":{},"body":{"components/DetailsComponent.html":{}}}],["changes['card'].currentvalue.publisher+'.'+changes['card'].currentvalue.publisherversion",{"_index":1503,"title":{},"body":{"components/DetailsComponent.html":{}}}],["character",{"_index":2234,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["charset=utf",{"_index":699,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["checauthentication",{"_index":120,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["check",{"_index":64,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["checkauthentication",{"_index":20,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["checkauthentication(token",{"_index":689,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["checkauthenticationstatus",{"_index":63,"title":{"classes/CheckAuthenticationStatus.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["checkauthenticationwhenready",{"_index":839,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["checking",{"_index":822,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["checks",{"_index":679,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckTokenResponse.html":{}}}],["checktokenresponse",{"_index":823,"title":{"classes/CheckTokenResponse.html":{}},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckTokenResponse.html":{},"coverage.html":{}}}],["checktokenurl",{"_index":650,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["child",{"_index":1363,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["children",{"_index":1556,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["cid",{"_index":1559,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["claim",{"_index":673,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["class",{"_index":0,"title":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"classes/Card.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"classes/EmptyLightCards.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/I18n.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/Map.html":{},"classes/Message.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"classes/ThirdsServiceMock.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"classes/Message.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/State.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"classes/Card.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"classes/EmptyLightCards.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/I18n.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/Map.html":{},"classes/Message.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"classes/ThirdsServiceMock.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"index.html":{}}}],["clear",{"_index":762,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"miscellaneous/enumerations.html":{}}}],["clearauthenticationinformation",{"_index":763,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["clearcard",{"_index":942,"title":{"classes/ClearCard.html":{}},"body":{"injectables/AuthenticationEffects.html":{},"classes/ClearCard.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["click",{"_index":101,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["clicked",{"_index":945,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"components/DetailsComponent.html":{}}}],["clicking",{"_index":938,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["clientid",{"_index":80,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["clientsecret",{"_index":655,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["clone",{"_index":1582,"title":{},"body":{"classes/Filter.html":{}}}],["clone():filter",{"_index":1604,"title":{},"body":{"classes/Filter.html":{}}}],["cluster_appmodule",{"_index":434,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_bootstrap",{"_index":437,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_declarations",{"_index":435,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":436,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_archivesmodule",{"_index":611,"title":{},"body":{"modules/ArchivesModule.html":{},"index.html":{}}}],["cluster_archivesmodule_declarations",{"_index":612,"title":{},"body":{"modules/ArchivesModule.html":{},"index.html":{}}}],["cluster_archivesmodule_imports",{"_index":613,"title":{},"body":{"modules/ArchivesModule.html":{},"index.html":{}}}],["cluster_cardsmodule",{"_index":1233,"title":{},"body":{"modules/CardsModule.html":{},"index.html":{}}}],["cluster_cardsmodule_declarations",{"_index":1234,"title":{},"body":{"modules/CardsModule.html":{},"index.html":{}}}],["cluster_cardsmodule_exports",{"_index":1235,"title":{},"body":{"modules/CardsModule.html":{},"index.html":{}}}],["cluster_cardsmodule_providers",{"_index":1236,"title":{},"body":{"modules/CardsModule.html":{},"index.html":{}}}],["cluster_feedmodule",{"_index":1529,"title":{},"body":{"modules/FeedModule.html":{},"index.html":{}}}],["cluster_feedmodule_declarations",{"_index":1530,"title":{},"body":{"modules/FeedModule.html":{},"index.html":{}}}],["cluster_feedmodule_exports",{"_index":1532,"title":{},"body":{"modules/FeedModule.html":{},"index.html":{}}}],["cluster_feedmodule_imports",{"_index":1531,"title":{},"body":{"modules/FeedModule.html":{},"index.html":{}}}],["cluster_servicesmodule",{"_index":2130,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["cluster_servicesmodule_providers",{"_index":2131,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["cluster_statemodule",{"_index":2146,"title":{},"body":{"modules/StateModule.html":{},"index.html":{}}}],["cluster_statemodule_imports",{"_index":2147,"title":{},"body":{"modules/StateModule.html":{},"index.html":{}}}],["cluster_thirdpartymodule",{"_index":2185,"title":{},"body":{"modules/ThirdpartyModule.html":{},"index.html":{}}}],["cluster_thirdpartymodule_declarations",{"_index":2186,"title":{},"body":{"modules/ThirdpartyModule.html":{},"index.html":{}}}],["cluster_thirdpartymodule_imports",{"_index":2187,"title":{},"body":{"modules/ThirdpartyModule.html":{},"index.html":{}}}],["code",{"_index":372,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"classes/CheckTokenResponse.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/variables.html":{}}}],["codeflow",{"_index":2011,"title":{},"body":{"components/LoginComponent.html":{}}}],["codeprovider",{"_index":2006,"title":{},"body":{"components/LoginComponent.html":{}}}],["collection",{"_index":1109,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["color",{"_index":2517,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["combinelatest",{"_index":1920,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["commonmodule",{"_index":453,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{}}}],["complex",{"_index":1350,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{}}}],["component",{"_index":259,"title":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":392,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["components",{"_index":261,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"index.html":{}}}],["components/card",{"_index":1243,"title":{},"body":{"modules/CardsModule.html":{},"modules/FeedModule.html":{}}}],["components/card/card.component",{"_index":1242,"title":{},"body":{"modules/CardsModule.html":{}}}],["components/detail/detail.component",{"_index":1246,"title":{},"body":{"modules/CardsModule.html":{}}}],["components/details/details.component",{"_index":1245,"title":{},"body":{"modules/CardsModule.html":{}}}],["components/icon/icon.component",{"_index":469,"title":{},"body":{"modules/AppModule.html":{}}}],["components/login/login.component",{"_index":468,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["components/navbar/navbar.component",{"_index":467,"title":{},"body":{"modules/AppModule.html":{}}}],["components/no",{"_index":1537,"title":{},"body":{"modules/FeedModule.html":{}}}],["components/time",{"_index":1540,"title":{},"body":{"modules/FeedModule.html":{}}}],["computeredirecturi",{"_index":810,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["computethirdcssurl",{"_index":2316,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["computethirdcssurl(publisher",{"_index":2232,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["computethirdsmenu",{"_index":2256,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{}}}],["config",{"_index":525,"title":{},"body":{"interfaces/AppState.html":{},"injectables/ConfigEffects.html":{},"interfaces/ConfigState.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["config:any",{"_index":1305,"title":{},"body":{"interfaces/ConfigState.html":{}}}],["config_load_max_retries",{"_index":1284,"title":{},"body":{"injectables/ConfigEffects.html":{},"interfaces/ConfigState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configactions",{"_index":1682,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"miscellaneous/typealiases.html":{}}}],["configactiontypes",{"_index":950,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/ConfigEffects.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"miscellaneous/enumerations.html":{}}}],["configactiontypes.handleunexpectederror",{"_index":1677,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{}}}],["configactiontypes.loadconfig",{"_index":1679,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{}}}],["configactiontypes.loadconfigfailure",{"_index":1680,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{}}}],["configactiontypes.loadconfigsuccess",{"_index":1681,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{}}}],["configeffects",{"_index":576,"title":{"injectables/ConfigEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/ConfigEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configinitialstate",{"_index":1306,"title":{},"body":{"interfaces/ConfigState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configloaded",{"_index":275,"title":{},"body":{"components/AppComponent.html":{}}}],["configreducer",{"_index":557,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["configservice",{"_index":1265,"title":{"injectables/ConfigService.html":{}},"body":{"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"modules/ServicesModule.html":{},"coverage.html":{},"index.html":{}}}],["configstate",{"_index":530,"title":{"interfaces/ConfigState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/ConfigState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configstate.config",{"_index":2779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configstate.loaded",{"_index":2780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configstate.retry",{"_index":2781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configstate:configstate",{"_index":2778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configuration",{"_index":1678,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"miscellaneous/enumerations.html":{}}}],["configurel10nwithenglishasdefault",{"_index":283,"title":{},"body":{"components/AppComponent.html":{}}}],["configurl",{"_index":1294,"title":{},"body":{"injectables/ConfigService.html":{}}}],["confirm",{"_index":824,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["connection",{"_index":708,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["consequence",{"_index":873,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["consist",{"_index":1094,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["console.error('something",{"_index":2310,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["console.error(`error",{"_index":1219,"title":{},"body":{"injectables/CardService.html":{}}}],["console.error(`i18",{"_index":1974,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["console.error(err",{"_index":901,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["console.error(error",{"_index":740,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["console.error(message",{"_index":973,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["console.log(`location",{"_index":334,"title":{},"body":{"components/AppComponent.html":{}}}],["console.log(`this",{"_index":1423,"title":{},"body":{"components/DetailComponent.html":{}}}],["const",{"_index":176,"title":{},"body":{"classes/Action.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"components/CardDetailsComponent.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckTokenResponse.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"modules/FeedRoutingModule.html":{},"injectables/FilterService.html":{},"injectables/HandlebarsService.html":{},"classes/Input.html":{},"components/LoginComponent.html":{},"interfaces/MenuState.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/RouterStateUrl.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"modules/ThirdpartyRoutingModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":39,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/Message.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{}}}],["constructor(access_token",{"_index":625,"title":{},"body":{"classes/AuthObject.html":{}}}],["constructor(authenticationservice",{"_index":2450,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["constructor(details",{"_index":2144,"title":{},"body":{"classes/State.html":{}}}],["constructor(element",{"_index":1378,"title":{},"body":{"components/DetailComponent.html":{}}}],["constructor(funktion",{"_index":1583,"title":{},"body":{"classes/Filter.html":{}}}],["constructor(httpclient",{"_index":1167,"title":{},"body":{"injectables/CardService.html":{},"injectables/ConfigService.html":{},"injectables/ThirdsService.html":{}}}],["constructor(id",{"_index":2181,"title":{},"body":{"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["constructor(identifier",{"_index":2115,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["constructor(key",{"_index":1826,"title":{},"body":{"classes/I18n.html":{}}}],["constructor(label",{"_index":2113,"title":{},"body":{"classes/ParameterListItem.html":{}}}],["constructor(message",{"_index":2068,"title":{},"body":{"classes/Message.html":{}}}],["constructor(name",{"_index":2172,"title":{},"body":{"classes/Third.html":{}}}],["constructor(payload",{"_index":40,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/UpdateSelectedMenu.html":{}}}],["constructor(platformlocation",{"_index":1836,"title":{},"body":{"components/IconComponent.html":{}}}],["constructor(platformlocation:platformlocation",{"_index":1858,"title":{},"body":{"components/IconComponent.html":{}}}],["constructor(private",{"_index":326,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/HandlebarsService.html":{},"components/IframeDisplayComponent.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"interceptors/TokenInjector.html":{},"components/TypeFilterComponent.html":{}}}],["constructor(public",{"_index":77,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/ClearCard.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{}}}],["constructor(router",{"_index":1008,"title":{},"body":{"components/CardComponent.html":{}}}],["constructor(states",{"_index":2121,"title":{},"body":{"classes/Process.html":{}}}],["constructor(store",{"_index":285,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"components/IframeDisplayComponent.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["constructor(sub",{"_index":1250,"title":{},"body":{"classes/CheckTokenResponse.html":{}}}],["constructor(thirdsservice",{"_index":2197,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["constructor(time",{"_index":1723,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["constructor(titleposition",{"_index":1366,"title":{},"body":{"classes/Detail.html":{}}}],["constructor(type",{"_index":141,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{}}}],["constructor(uid",{"_index":981,"title":{},"body":{"classes/Card.html":{}}}],["constructor(url",{"_index":2126,"title":{},"body":{"classes/RouterStateUrl.html":{}}}],["consume",{"_index":129,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["containing",{"_index":29,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["contains",{"_index":684,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["content",{"_index":686,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["contentchildren",{"_index":1486,"title":{},"body":{"components/DetailsComponent.html":{}}}],["contentchildren(detailcomponent",{"_index":1483,"title":{},"body":{"components/DetailsComponent.html":{}}}],["contentstyle",{"_index":148,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["context",{"_index":2603,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["convert",{"_index":753,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["convert(payload",{"_index":787,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["copy",{"_index":379,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{}}}],["copyright",{"_index":366,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{}}}],["core",{"_index":479,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{},"dependencies.html":{}}}],["correctly",{"_index":715,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["corresponding",{"_index":820,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["coverage",{"_index":2523,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":27,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["createentityadapter",{"_index":1112,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["createfeatureselector('authentication",{"_index":2763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createfeatureselector('router",{"_index":2788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createformgroup",{"_index":2369,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["createselector",{"_index":2760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectauthenticationstate",{"_index":2764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectcardstate",{"_index":2769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectcardstateselected",{"_index":2772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectconfig",{"_index":2777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectconfigretry",{"_index":2782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectfeed,selectactivefiltersarray",{"_index":2754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectfilter",{"_index":2747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectlightcardsstate",{"_index":2752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectmenustate",{"_index":2790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(selectrouterstate",{"_index":2785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["css",{"_index":1418,"title":{},"body":{"components/DetailComponent.html":{}}}],["csses",{"_index":2174,"title":{},"body":{"classes/Third.html":{}}}],["csses?:string",{"_index":169,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["cssurl",{"_index":1412,"title":{},"body":{"components/DetailComponent.html":{}}}],["current",{"_index":86,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["currently",{"_index":358,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"interfaces/CardFeedState.html":{}}}],["currentpath",{"_index":276,"title":{},"body":{"components/AppComponent.html":{},"components/CardComponent.html":{},"components/NavbarComponent.html":{}}}],["currentselection",{"_index":1925,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["currenttime",{"_index":2431,"title":{},"body":{"injectables/TimeService.html":{}}}],["custom",{"_index":2166,"title":{},"body":{"modules/StateModule.html":{}}}],["customroutereffects",{"_index":563,"title":{"injectables/CustomRouterEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/CustomRouterEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["customrouterstateserializer",{"_index":1330,"title":{"classes/CustomRouterStateSerializer.html":{}},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{},"coverage.html":{}}}],["dark",{"_index":1459,"title":{},"body":{"components/DetailComponent.html":{},"components/IconComponent.html":{},"components/TypeFilterComponent.html":{}}}],["dark:boolean",{"_index":1853,"title":{},"body":{"components/IconComponent.html":{}}}],["data",{"_index":230,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/AuthObject.html":{},"classes/Card.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["date",{"_index":83,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["date().valueof",{"_index":1198,"title":{},"body":{"injectables/CardService.html":{}}}],["date(+localstorage.getitem(localstorageauthcontent.expirationdate",{"_index":784,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["date(0",{"_index":835,"title":{},"body":{"interfaces/AuthState.html":{},"miscellaneous/variables.html":{}}}],["date(expirationdate",{"_index":796,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["date(minus2hour.valueof()+48*60*60*1000",{"_index":1201,"title":{},"body":{"injectables/CardService.html":{}}}],["date(new",{"_index":1197,"title":{},"body":{"injectables/CardService.html":{}}}],["date(value",{"_index":1804,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["date.now",{"_index":790,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["ddthh:mm",{"_index":2443,"title":{},"body":{"injectables/TimeService.html":{}}}],["ddthh:mm:ss.sss",{"_index":2445,"title":{},"body":{"injectables/TimeService.html":{}}}],["deactivate",{"_index":1498,"title":{},"body":{"components/DetailsComponent.html":{}}}],["debounce",{"_index":2381,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["debug",{"_index":2072,"title":{},"body":{"classes/Message.html":{},"miscellaneous/enumerations.html":{}}}],["declarations",{"_index":430,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"index.html":{}}}],["decode",{"_index":643,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"dependencies.html":{}}}],["decodetoken(token",{"_index":817,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["decorators",{"_index":865,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailsComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["deep",{"_index":2514,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["default",{"_index":49,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"classes/EmptyLightCards.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/variables.html":{}}}],["defaultfilters",{"_index":1620,"title":{},"body":{"injectables/FilterService.html":{}}}],["defined",{"_index":42,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"classes/Message.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/State.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{}}}],["defines",{"_index":722,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["delay",{"_index":1279,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["delay(this.retrydelay",{"_index":1292,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["delete",{"_index":2682,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dentifier",{"_index":778,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["dependencies",{"_index":429,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"dependencies.html":{},"index.html":{}}}],["deps",{"_index":2745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["describe",{"_index":1697,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/UpdateSelectedMenu.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"interfaces/CardFeedState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdateSelectedMenu.html":{}}}],["deserializable",{"_index":685,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["desired",{"_index":2169,"title":{},"body":{"modules/StateModule.html":{}}}],["detail",{"_index":158,"title":{"classes/Detail.html":{}},"body":{"classes/Action.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"coverage.html":{}}}],["detail'},{'name",{"_index":403,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["detail.active",{"_index":1501,"title":{},"body":{"components/DetailsComponent.html":{}}}],["detail.component.html",{"_index":1369,"title":{},"body":{"components/DetailComponent.html":{}}}],["detail/detail.component",{"_index":1487,"title":{},"body":{"components/DetailsComponent.html":{}}}],["detailcomponent",{"_index":402,"title":{"components/DetailComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedRoutingModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["details",{"_index":992,"title":{},"body":{"classes/Card.html":{},"components/CardDetailsComponent.html":{},"classes/Detail.html":{},"components/DetailsComponent.html":{},"classes/State.html":{}}}],["details'},{'name",{"_index":399,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["details.component",{"_index":1244,"title":{},"body":{"modules/CardsModule.html":{},"modules/FeedRoutingModule.html":{}}}],["details.component.html",{"_index":1056,"title":{},"body":{"components/CardDetailsComponent.html":{},"components/DetailsComponent.html":{}}}],["details.component.ts",{"_index":1055,"title":{},"body":{"components/CardDetailsComponent.html":{},"coverage.html":{}}}],["details.component.ts:21",{"_index":1060,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["details.component.ts:22",{"_index":1058,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["details.component.ts:28",{"_index":1059,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["details/:did",{"_index":1560,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["details/card",{"_index":1054,"title":{},"body":{"components/CardDetailsComponent.html":{},"modules/CardsModule.html":{},"modules/FeedRoutingModule.html":{},"coverage.html":{}}}],["details?:detail",{"_index":190,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["detailscomponent",{"_index":404,"title":{"components/DetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["devtools",{"_index":2153,"title":{},"body":{"modules/StateModule.html":{},"dependencies.html":{}}}],["directive",{"_index":390,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["directives",{"_index":424,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["display",{"_index":914,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"components/IframeDisplayComponent.html":{},"components/TypeFilterComponent.html":{}}}],["distinctuntilchanged",{"_index":2382,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["distinctuntilchanged((forma",{"_index":2406,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["distributed",{"_index":381,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{}}}],["document.getelementbyid('${svguid}').addeventlistener('load",{"_index":1798,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["documentation",{"_index":2524,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":264,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["domsanitizer",{"_index":1383,"title":{},"body":{"components/DetailComponent.html":{},"components/IframeDisplayComponent.html":{}}}],["done",{"_index":298,"title":{},"body":{"components/AppComponent.html":{}}}],["down",{"_index":997,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{},"miscellaneous/enumerations.html":{}}}],["during",{"_index":1106,"title":{},"body":{"interfaces/CardFeedState.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["dynamic",{"_index":2634,"title":{},"body":{"dependencies.html":{}}}],["effect",{"_index":866,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["effects",{"_index":1091,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/LightCardEffects.html":{}}}],["effectsmodule",{"_index":2151,"title":{},"body":{"modules/StateModule.html":{}}}],["effectsmodule.forroot(appeffects",{"_index":2160,"title":{},"body":{"modules/StateModule.html":{}}}],["element",{"_index":389,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["elementref",{"_index":1379,"title":{},"body":{"components/DetailComponent.html":{}}}],["emission",{"_index":1933,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["emit",{"_index":871,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"components/IframeDisplayComponent.html":{}}}],["emits",{"_index":933,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["emitted",{"_index":14,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["emittedby",{"_index":910,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["emmited",{"_index":117,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["empty",{"_index":226,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["emptylightcards",{"_index":225,"title":{"classes/EmptyLightCards.html":{}},"body":{"classes/AddLightCardFailure.html":{},"injectables/AuthenticationEffects.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["emptylightcards(),new",{"_index":941,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["enabletracing",{"_index":519,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["encoding",{"_index":2235,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["end",{"_index":2416,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["enddate",{"_index":986,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{}}}],["entire",{"_index":1349,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["entities",{"_index":247,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/ClearCard.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{}}}],["entityadapter",{"_index":1113,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["entitystate",{"_index":1095,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["entries",{"_index":188,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["entry",{"_index":1956,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["enum",{"_index":58,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"classes/Card.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"classes/Detail.html":{},"classes/EmptyLightCards.html":{},"injectables/FilterService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/Message.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{}}}],["enumerations",{"_index":2664,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env/environment",{"_index":499,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/AuthObject.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigService.html":{},"modules/StateModule.html":{}}}],["environment",{"_index":498,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/AuthObject.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigService.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["environment.production",{"_index":520,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"modules/StateModule.html":{},"miscellaneous/variables.html":{}}}],["environment.urls.auth}/check_token",{"_index":651,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["environment.urls.auth}/code/redirect_uri=${authenticationservice.computeredirecturi",{"_index":809,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["environment.urls.auth}/token",{"_index":654,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["environment.urls.cards}/cards",{"_index":1194,"title":{},"body":{"injectables/CardService.html":{}}}],["environment.urls.cards}/cardsubscription?clientid=${clientid",{"_index":1192,"title":{},"body":{"injectables/CardService.html":{}}}],["environment.urls.config",{"_index":1302,"title":{},"body":{"injectables/ConfigService.html":{}}}],["environment.urls.thirds",{"_index":2215,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["environments/environment",{"_index":2202,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["err",{"_index":903,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["error",{"_index":124,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"interfaces/ConfigState.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitAuthStatus.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"interfaces/MenuState.html":{},"classes/Message.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["error(`unhandled",{"_index":1145,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["error.tostring",{"_index":1222,"title":{},"body":{"injectables/CardService.html":{}}}],["error:null",{"_index":2066,"title":{},"body":{"interfaces/MenuState.html":{},"miscellaneous/variables.html":{}}}],["error:string",{"_index":2064,"title":{},"body":{"interfaces/MenuState.html":{}}}],["errormsg",{"_index":859,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["errorresponse",{"_index":856,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["errorresponse.message",{"_index":972,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["errorresponse.status",{"_index":962,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["es",{"_index":1221,"title":{},"body":{"injectables/CardService.html":{}}}],["europe.com:2002/auth",{"_index":2724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["europe.com:2002/cards",{"_index":2725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["europe.com:2002/config",{"_index":2727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["europe.com:2002/thirds",{"_index":2726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["evaluate",{"_index":1571,"title":{},"body":{"classes/Filter.html":{}}}],["event",{"_index":1186,"title":{},"body":{"injectables/CardService.html":{},"components/DetailComponent.html":{},"dependencies.html":{}}}],["eventsource",{"_index":1172,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsource.close",{"_index":1226,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsource.closed",{"_index":1225,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsource.onerror",{"_index":1218,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsource.onmessage",{"_index":1215,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsource.readystate",{"_index":1224,"title":{},"body":{"injectables/CardService.html":{}}}],["eventsourcepolyfill",{"_index":1170,"title":{},"body":{"injectables/CardService.html":{}}}],["example",{"_index":1700,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/UpdateSelectedMenu.html":{}}}],["executetemplate",{"_index":1707,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["executetemplate(templatename",{"_index":1726,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["exists",{"_index":87,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["exp",{"_index":677,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["expandedmenu",{"_index":2076,"title":{},"body":{"components/NavbarComponent.html":{}}}],["expandedmenu:boolean",{"_index":2090,"title":{},"body":{"components/NavbarComponent.html":{}}}],["expiration",{"_index":747,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["expirationdate",{"_index":82,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["expirationdate.gettime",{"_index":2735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expireclaim",{"_index":657,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["expired",{"_index":897,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["expires_in",{"_index":624,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["export",{"_index":57,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"classes/Message.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/State.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{}}}],["exports",{"_index":433,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"index.html":{}}}],["extended",{"_index":229,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["extends",{"_index":1111,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["external",{"_index":192,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"miscellaneous/enumerations.html":{}}}],["extract",{"_index":742,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckTokenResponse.html":{}}}],["extractidentificationinformation",{"_index":779,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["extractparams",{"_index":1333,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{}}}],["extractparams(state",{"_index":1335,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["extractstate",{"_index":2171,"title":{},"body":{"classes/Third.html":{}}}],["extractstate(card",{"_index":2179,"title":{},"body":{"classes/Third.html":{}}}],["extractstate(card:card):state",{"_index":173,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["extracttoken",{"_index":744,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["f5",{"_index":365,"title":{},"body":{"components/AppComponent.html":{}}}],["fa",{"_index":1457,"title":{},"body":{"components/DetailComponent.html":{}}}],["faclock",{"_index":1550,"title":{},"body":{"modules/FeedModule.html":{}}}],["faexternallinkalt",{"_index":480,"title":{},"body":{"modules/AppModule.html":{}}}],["fail",{"_index":232,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/ClearCard.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["failed",{"_index":1975,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["false",{"_index":195,"title":{},"body":{"classes/Action.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"components/CardComponent.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"classes/CheckTokenResponse.html":{},"interfaces/ConfigState.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"classes/Input.html":{},"interfaces/MenuState.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"miscellaneous/variables.html":{}}}],["fctargs[fctargs.length",{"_index":1797,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["feed",{"_index":501,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"interfaces/CardFeedState.html":{},"modules/FeedModule.html":{},"classes/Filter.html":{},"classes/InitFilters.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["feed.component",{"_index":1536,"title":{},"body":{"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{}}}],["feed.component.html",{"_index":1508,"title":{},"body":{"components/FeedComponent.html":{}}}],["feed.component.scss",{"_index":1507,"title":{},"body":{"components/FeedComponent.html":{}}}],["feed.filter(card=>filter.chainfilter(card,filters",{"_index":2758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feed.filters.time.end.label",{"_index":2420,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["feed.filters.time.start.label",{"_index":2419,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["feed.filters.time.title",{"_index":2421,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["feed.filters.type.action.label",{"_index":2503,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["feed.filters.type.alarm.label",{"_index":2502,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["feed.filters.type.notification.label",{"_index":2505,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["feed.filters.type.question.label",{"_index":2504,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["feed.filters.type.title",{"_index":2506,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["feed:lightcard[],filters:filter",{"_index":2755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feedactions",{"_index":603,"title":{},"body":{"classes/ApplyFilter.html":{},"injectables/FeedFiltersEffects.html":{},"classes/InitFilters.html":{},"miscellaneous/typealiases.html":{}}}],["feedactiontypes",{"_index":595,"title":{},"body":{"classes/ApplyFilter.html":{},"injectables/CardOperationEffects.html":{},"classes/InitFilters.html":{},"miscellaneous/enumerations.html":{}}}],["feedactiontypes.applyfilter",{"_index":590,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilters.html":{}}}],["feedactiontypes.initfilter",{"_index":601,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilters.html":{}}}],["feedcomponent",{"_index":405,"title":{"components/FeedComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["feedfilterseffects",{"_index":572,"title":{"injectables/FeedFiltersEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/FeedFiltersEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["feedinitialstate",{"_index":1121,"title":{},"body":{"interfaces/CardFeedState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["feedmodule",{"_index":1528,"title":{"modules/FeedModule.html":{}},"body":{"modules/FeedModule.html":{},"index.html":{},"modules.html":{}}}],["feedroutingmodule",{"_index":1533,"title":{"modules/FeedRoutingModule.html":{}},"body":{"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"index.html":{},"modules.html":{}}}],["feedselectors",{"_index":1513,"title":{},"body":{"components/FeedComponent.html":{}}}],["fetchcardoperation",{"_index":1163,"title":{},"body":{"injectables/CardService.html":{}}}],["fetchcardoperation(eventsource",{"_index":1169,"title":{},"body":{"injectables/CardService.html":{}}}],["fetchconfiguration",{"_index":1295,"title":{},"body":{"injectables/ConfigService.html":{}}}],["fetchhbstemplate",{"_index":2317,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["fetchhbstemplate(publisher",{"_index":2228,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["fetchi18njson",{"_index":2318,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["fetchi18njson(publisher",{"_index":2241,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["fetchthird",{"_index":2319,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["fetchthird(publisher",{"_index":2225,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"classes/Message.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/State.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{}}}],["fill",{"_index":1879,"title":{},"body":{"components/IconComponent.html":{}}}],["filter",{"_index":423,"title":{"classes/Filter.html":{}},"body":{"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitFilters.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["filter$(filter",{"_index":2480,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter'},{'name",{"_index":419,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["filter(([action",{"_index":1291,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["filter((action",{"_index":1313,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["filter((af:applyfilter)=>af.payload.name",{"_index":1152,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["filter((t:third)=>!(!t.menuentries",{"_index":2259,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["filter.component",{"_index":1547,"title":{},"body":{"modules/FeedModule.html":{}}}],["filter.component.html",{"_index":2365,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["filter.component.scss",{"_index":2471,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter.component.ts",{"_index":2363,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["filter.component.ts:26",{"_index":2376,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["filter.component.ts:27",{"_index":2375,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["filter.component.ts:28",{"_index":2478,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter.component.ts:29",{"_index":2378,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["filter.component.ts:30",{"_index":2477,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter.component.ts:32",{"_index":2479,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter.component.ts:33",{"_index":2371,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["filter.component.ts:34",{"_index":2473,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter.component.ts:40",{"_index":2373,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["filter.component.ts:44",{"_index":2474,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter.component.ts:45",{"_index":2374,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["filter.component.ts:53",{"_index":2475,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter.component.ts:59",{"_index":2476,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["filter.component.ts:90",{"_index":2372,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["filter.model",{"_index":592,"title":{},"body":{"classes/ApplyFilter.html":{},"interfaces/CardFeedState.html":{},"injectables/FilterService.html":{},"classes/InitFilters.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["filter.model.ts",{"_index":1562,"title":{},"body":{"classes/Filter.html":{},"coverage.html":{}}}],["filter.model.ts:22",{"_index":1585,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:27",{"_index":1586,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:28",{"_index":1587,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:32",{"_index":1601,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:43",{"_index":1589,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:56",{"_index":1592,"title":{},"body":{"classes/Filter.html":{}}}],["filter.model.ts:67",{"_index":1598,"title":{},"body":{"classes/Filter.html":{}}}],["filter/time",{"_index":1549,"title":{},"body":{"modules/FeedModule.html":{},"components/TimeFilterComponent.html":{},"coverage.html":{}}}],["filter/type",{"_index":1546,"title":{},"body":{"modules/FeedModule.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["filtered",{"_index":1597,"title":{},"body":{"classes/Filter.html":{}}}],["filtering",{"_index":30,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/Filter.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["filters",{"_index":1108,"title":{},"body":{"interfaces/CardFeedState.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"miscellaneous/variables.html":{}}}],["filters'},{'name",{"_index":408,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["filters.component.html",{"_index":1659,"title":{},"body":{"components/FiltersComponent.html":{}}}],["filters.effects",{"_index":574,"title":{},"body":{"interfaces/AppState.html":{}}}],["filters.effects.ts",{"_index":1522,"title":{},"body":{"injectables/FeedFiltersEffects.html":{},"coverage.html":{}}}],["filters.effects.ts:19",{"_index":1525,"title":{},"body":{"injectables/FeedFiltersEffects.html":{}}}],["filters.effects.ts:28",{"_index":1527,"title":{},"body":{"injectables/FeedFiltersEffects.html":{}}}],["filters.length>0",{"_index":2757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filters.set(filtertype.recipient_filter",{"_index":1650,"title":{},"body":{"injectables/FilterService.html":{}}}],["filters.set(filtertype.time_filter",{"_index":1652,"title":{},"body":{"injectables/FilterService.html":{}}}],["filters.set(filtertype.type_filter",{"_index":1648,"title":{},"body":{"injectables/FilterService.html":{}}}],["filters.values",{"_index":2749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filterscomponent",{"_index":407,"title":{"components/FiltersComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["filterservice",{"_index":1524,"title":{"injectables/FilterService.html":{}},"body":{"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"modules/ServicesModule.html":{},"coverage.html":{},"index.html":{}}}],["filtertype",{"_index":593,"title":{},"body":{"classes/ApplyFilter.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/FilterService.html":{},"classes/InitFilters.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/enumerations.html":{}}}],["filtertype.time_filter",{"_index":1153,"title":{},"body":{"injectables/CardOperationEffects.html":{},"components/TimeFilterComponent.html":{}}}],["filtertype.type_filter",{"_index":2497,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["first",{"_index":356,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"components/DetailsComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["flow",{"_index":712,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["following",{"_index":16,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["font",{"_index":1039,"title":{},"body":{"components/CardComponent.html":{}}}],["fontawesome",{"_index":475,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{},"dependencies.html":{}}}],["fontawesomemodule",{"_index":473,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{}}}],["for(let",{"_index":2748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forcepositiveandoneminimum",{"_index":2607,"title":{},"body":{"coverage.html":{}}}],["form",{"_index":105,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{}}}],["form.action",{"_index":2499,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["form.alarm",{"_index":2498,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["form.end",{"_index":2413,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["form.notification",{"_index":2501,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["form.question",{"_index":2500,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["form.start",{"_index":2412,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["formatter",{"_index":1808,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["formatter.format(value",{"_index":1811,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["formb",{"_index":2407,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["formcontrol",{"_index":2023,"title":{},"body":{"components/LoginComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["formdata",{"_index":691,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["formgroup",{"_index":2021,"title":{},"body":{"components/LoginComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["forms",{"_index":1358,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["formsmodule",{"_index":457,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{}}}],["forroot",{"_index":1239,"title":{},"body":{"modules/CardsModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["fortawesome/angular",{"_index":474,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{},"dependencies.html":{}}}],["fortawesome/fontawesome",{"_index":477,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{},"dependencies.html":{}}}],["fortawesome/free",{"_index":481,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{},"dependencies.html":{}}}],["found",{"_index":1927,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["france.com",{"_index":371,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{}}}],["freeze",{"_index":543,"title":{},"body":{"interfaces/AppState.html":{}}}],["from(_.difference(work",{"_index":2288,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["from(cards).pipe",{"_index":2269,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["from(menus).pipe",{"_index":2275,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["fromauthentication.getexpirationtime",{"_index":2766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fromrouter",{"_index":534,"title":{},"body":{"interfaces/AppState.html":{}}}],["fromrouter.routerreducer",{"_index":580,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["full",{"_index":1558,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["function",{"_index":24,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/CardFeedState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{},"injectables/HandlebarsService.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{}}}],["function(a,b",{"_index":1819,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["function(lvalue",{"_index":1786,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["funktion",{"_index":1568,"title":{},"body":{"classes/Filter.html":{}}}],["futur",{"_index":825,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["future",{"_index":831,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["g",{"_index":1816,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["gather",{"_index":1563,"title":{},"body":{"classes/Filter.html":{}}}],["generaterandomarray",{"_index":2608,"title":{},"body":{"coverage.html":{}}}],["generaterandompositiveintegerwithinrangewithoneasminimum",{"_index":2609,"title":{},"body":{"coverage.html":{}}}],["generating",{"_index":709,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["gently",{"_index":514,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["getcardoperation",{"_index":1164,"title":{},"body":{"injectables/CardService.html":{}}}],["getcurrentguid",{"_index":1663,"title":{},"body":{"classes/GuidService.html":{}}}],["getcurrentguidstring",{"_index":1664,"title":{},"body":{"classes/GuidService.html":{}}}],["getcurrentguidstring():string",{"_index":1670,"title":{},"body":{"classes/GuidService.html":{}}}],["getdefaultfilters",{"_index":1626,"title":{},"body":{"injectables/FilterService.html":{}}}],["getexpirationdate",{"_index":2564,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getexpirationdate(state",{"_index":2733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getexpirationtime",{"_index":2565,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getfilter",{"_index":2377,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["getfixedlengthalphanumericvalue",{"_index":2610,"title":{},"body":{"coverage.html":{}}}],["gethtmlcontent",{"_index":1401,"title":{},"body":{"components/DetailComponent.html":{}}}],["geti18nprefix",{"_index":1015,"title":{},"body":{"components/CardComponent.html":{},"components/DetailsComponent.html":{}}}],["getidentifier",{"_index":2566,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getiframeurl",{"_index":1910,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["getitem",{"_index":782,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["getmenu_entry_id",{"_index":1904,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["getmenu_id",{"_index":1902,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["getmenubyid",{"_index":1887,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["getmenubyid(menu_id",{"_index":1894,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["getmenuentrybyid",{"_index":1888,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["getmenuentrybyid(menu_entry_id",{"_index":1897,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["getonerandomaddcardoperation",{"_index":2611,"title":{},"body":{"coverage.html":{}}}],["getonerandomcard",{"_index":2612,"title":{},"body":{"coverage.html":{}}}],["getonerandomcarddetail",{"_index":2613,"title":{},"body":{"coverage.html":{}}}],["getonerandomcardwithrandomdetails",{"_index":2614,"title":{},"body":{"coverage.html":{}}}],["getonerandomligthcard",{"_index":2615,"title":{},"body":{"coverage.html":{}}}],["getonerandomthird",{"_index":2616,"title":{},"body":{"coverage.html":{}}}],["getpositiverandomnumberwithinrange",{"_index":2617,"title":{},"body":{"coverage.html":{}}}],["getrandomactions",{"_index":2618,"title":{},"body":{"coverage.html":{}}}],["getrandomalphanumericvalue",{"_index":2619,"title":{},"body":{"coverage.html":{}}}],["getrandomcarddetails",{"_index":2620,"title":{},"body":{"coverage.html":{}}}],["getrandomi18ndata",{"_index":2621,"title":{},"body":{"coverage.html":{}}}],["getrandomindex",{"_index":2622,"title":{},"body":{"coverage.html":{}}}],["getrandommenu",{"_index":2623,"title":{},"body":{"coverage.html":{}}}],["getrandomthird",{"_index":2624,"title":{},"body":{"coverage.html":{}}}],["getroutepe",{"_index":277,"title":{},"body":{"components/AppComponent.html":{}}}],["getsafeiframeurl",{"_index":1912,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["getsecurityheader",{"_index":802,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["getselectedid",{"_index":2570,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getselectedthirdmenu",{"_index":1906,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["getselectedthirdmenuentry",{"_index":1908,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["getseveralrandomlightcards",{"_index":2625,"title":{},"body":{"coverage.html":{}}}],["getthirdmenus",{"_index":2088,"title":{},"body":{"components/NavbarComponent.html":{}}}],["gettoken",{"_index":2567,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gettoken(state",{"_index":2734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gettranslation",{"_index":2196,"title":{},"body":{"classes/ThirdsI18nLoader.html":{}}}],["gettranslation(lang",{"_index":2199,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["given",{"_index":707,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["gives",{"_index":681,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["goes",{"_index":2428,"title":{},"body":{"components/TimeLineComponent.html":{}}}],["graph",{"_index":2693,"title":{},"body":{"modules.html":{}}}],["guard.service",{"_index":2138,"title":{},"body":{"modules/ServicesModule.html":{}}}],["guid",{"_index":53,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"dependencies.html":{}}}],["guid.create",{"_index":1669,"title":{},"body":{"classes/GuidService.html":{}}}],["guid.parse(localstorage.getitem(localstorageauthcontent.clientid",{"_index":781,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["guidservice",{"_index":638,"title":{"classes/GuidService.html":{}},"body":{"classes/AuthObject.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"classes/GuidService.html":{},"modules/ServicesModule.html":{},"coverage.html":{}}}],["handle",{"_index":241,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/ClearCard.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"components/IframeDisplayComponent.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["handlebars",{"_index":1381,"title":{},"body":{"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{},"dependencies.html":{}}}],["handlebars.registerhelper(\"math",{"_index":1785,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper(\"preservespace",{"_index":1814,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('action",{"_index":1800,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('arrayatindex",{"_index":1790,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('arrayatindexlength",{"_index":1780,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('bool",{"_index":1775,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('dateformat",{"_index":1801,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('now",{"_index":1812,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('numberformat",{"_index":1807,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('slice",{"_index":1792,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('sort",{"_index":1796,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars.registerhelper('split",{"_index":1782,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebars/dist/handlebars.js",{"_index":1744,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["handlebarsservice",{"_index":1237,"title":{"injectables/HandlebarsService.html":{}},"body":{"modules/CardsModule.html":{},"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{},"coverage.html":{},"index.html":{}}}],["handleerror(error",{"_index":739,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["handleerrorontokengeneration",{"_index":840,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["handleerrorontokengeneration(errorresponse",{"_index":853,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["handleerrorontokengeneration(errorresponse,category:string",{"_index":959,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["handleloginattempt",{"_index":22,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["handleloginattempt(payload",{"_index":977,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["handlemaxagainstmin",{"_index":2626,"title":{},"body":{"coverage.html":{}}}],["handlenewtoken(call",{"_index":732,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["handlerejectedlogin",{"_index":119,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["handlerejectedlogin(errormsg",{"_index":857,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["handleunexpectederror",{"_index":240,"title":{"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{}},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/ClearCard.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["handleunexpectederror({error",{"_index":1149,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["handling",{"_index":1463,"title":{},"body":{"components/DetailComponent.html":{}}}],["hashlocationstrategy",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["header",{"_index":801,"title":{},"body":{"classes/AuthObject.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"components/TypeFilterComponent.html":{}}}],["headers",{"_index":694,"title":{},"body":{"classes/AuthObject.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{}}}],["headers}).pipe",{"_index":703,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["heartbeattimeout",{"_index":1211,"title":{},"body":{"injectables/CardService.html":{}}}],["height",{"_index":2512,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["helper",{"_index":785,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["here",{"_index":1203,"title":{},"body":{"injectables/CardService.html":{},"components/TimeLineComponent.html":{}}}],["hidden",{"_index":145,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["hide",{"_index":2007,"title":{},"body":{"components/LoginComponent.html":{}}}],["href",{"_index":1416,"title":{},"body":{"components/DetailComponent.html":{}}}],["hrefsofcsslink",{"_index":1371,"title":{},"body":{"components/DetailComponent.html":{}}}],["html",{"_index":388,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["htmlbuttonelement",{"_index":1388,"title":{},"body":{"components/DetailComponent.html":{}}}],["htmlcontent",{"_index":1377,"title":{},"body":{"components/DetailComponent.html":{}}}],["http",{"_index":800,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["http://localhost:2002/auth",{"_index":2728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:2002/cards",{"_index":2729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:2002/config",{"_index":2731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:2002/thirds",{"_index":2730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://mozilla.org/mpl/2.0",{"_index":383,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{}}}],["http://opfab.rte",{"_index":2723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://www.rte",{"_index":370,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{}}}],["http_interceptors",{"_index":2136,"title":{},"body":{"modules/ServicesModule.html":{}}}],["httpcall",{"_index":2243,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["httpclient",{"_index":633,"title":{},"body":{"classes/AuthObject.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["httpclient:httpclient",{"_index":1188,"title":{},"body":{"injectables/CardService.html":{}}}],["httpclientmodule",{"_index":451,"title":{},"body":{"modules/AppModule.html":{}}}],["httpevent",{"_index":2458,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["httphandler",{"_index":2456,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["httpheaders",{"_index":634,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["httpheaders({'content",{"_index":695,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["httpinterceptor",{"_index":2459,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["httploaderfactory",{"_index":2596,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpparams",{"_index":1299,"title":{},"body":{"injectables/ConfigService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["httpparams().set('version',version",{"_index":2239,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["httprequest",{"_index":2453,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["https://github.com/briebug/ngrx",{"_index":1357,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["httpurlencodingcodec",{"_index":1300,"title":{},"body":{"injectables/ConfigService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["i18n",{"_index":144,"title":{"classes/I18n.html":{}},"body":{"classes/Action.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"classes/Detail.html":{},"classes/I18n.html":{},"classes/Input.html":{},"classes/Message.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"coverage.html":{}}}],["i18n('login.error.token.expiration",{"_index":898,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["i18n('login.error.token.invalid",{"_index":891,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["i18n('login.error.unexpected",{"_index":905,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["i18n(key",{"_index":976,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["i18nlabelkey",{"_index":167,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["i18npath",{"_index":2597,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["i18nprefix",{"_index":1007,"title":{},"body":{"components/CardComponent.html":{},"components/DetailsComponent.html":{}}}],["i18nprefix+detailc.detail.title.key",{"_index":1504,"title":{},"body":{"components/DetailsComponent.html":{}}}],["i18nprefix+lightcard.summary.key",{"_index":1033,"title":{},"body":{"components/CardComponent.html":{}}}],["i18nprefix+lightcard.title.key",{"_index":1030,"title":{},"body":{"components/CardComponent.html":{}}}],["icon",{"_index":1829,"title":{},"body":{"components/IconComponent.html":{}}}],["icon'},{'name",{"_index":410,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["icon.component.html",{"_index":1831,"title":{},"body":{"components/IconComponent.html":{}}}],["icon.component.scss",{"_index":1830,"title":{},"body":{"components/IconComponent.html":{}}}],["icon:string",{"_index":1849,"title":{},"body":{"components/IconComponent.html":{}}}],["iconcomponent",{"_index":409,"title":{"components/IconComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["iconpath",{"_index":1832,"title":{},"body":{"components/IconComponent.html":{}}}],["iconpath:string",{"_index":1857,"title":{},"body":{"components/IconComponent.html":{}}}],["icons",{"_index":483,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{},"dependencies.html":{}}}],["id",{"_index":186,"title":{},"body":{"classes/Action.html":{},"classes/AuthObject.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"interfaces/CardFeedState.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"classes/HandleUnexpectedError.html":{},"components/IframeDisplayComponent.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["id'].nodevalue",{"_index":1445,"title":{},"body":{"components/DetailComponent.html":{}}}],["id.split",{"_index":2292,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["id:string",{"_index":183,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["identifier",{"_index":78,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/InitAuthStatus.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["ids",{"_index":2282,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["ids.push(id",{"_index":2281,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["if(!!next.status.end",{"_index":2397,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["if(!!next.status.start",{"_index":2392,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["if(!!state",{"_index":1446,"title":{},"body":{"components/DetailComponent.html":{}}}],["if(!this.getmenubyid(currentselection[0][0],currentselection[1])[0",{"_index":1937,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["if(!this.getmenuentrybyid(currentselection[0][1],selectedthirdmenu)[0",{"_index":1939,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["if(a[key]b[key",{"_index":1824,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["if(card",{"_index":1067,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["if(card.details",{"_index":1068,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["if(card.process",{"_index":174,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["if(card.state",{"_index":178,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["if(changes['card'].currentvalue",{"_index":1502,"title":{},"body":{"components/DetailsComponent.html":{}}}],["if(filters",{"_index":2756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["if(i",{"_index":337,"title":{},"body":{"components/AppComponent.html":{}}}],["if(template",{"_index":1770,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["if(third",{"_index":2220,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["if(this.active",{"_index":1609,"title":{},"body":{"classes/Filter.html":{}}}],["if(this.applyfilter(card",{"_index":1611,"title":{},"body":{"classes/Filter.html":{}}}],["if(this.dark||this.light",{"_index":1874,"title":{},"body":{"components/IconComponent.html":{}}}],["if(this.expandedmenu[index",{"_index":2099,"title":{},"body":{"components/NavbarComponent.html":{}}}],["if(typeof",{"_index":1820,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["if(url",{"_index":1025,"title":{},"body":{"components/CardComponent.html":{},"components/NavbarComponent.html":{}}}],["if(v.active",{"_index":2750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iframe",{"_index":1954,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["iframedisplay",{"_index":1881,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["iframedisplay'},{'name",{"_index":412,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["iframedisplay.component",{"_index":2190,"title":{},"body":{"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{}}}],["iframedisplay.component.html",{"_index":1883,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["iframedisplay.component.scss",{"_index":1882,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["iframedisplaycomponent",{"_index":411,"title":{"components/IframeDisplayComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["iframeurl",{"_index":1891,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["ignore",{"_index":90,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"classes/EmptyLightCards.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/I18n.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/Message.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{}}}],["implementation",{"_index":1576,"title":{},"body":{"classes/Filter.html":{}}}],["implemented",{"_index":1464,"title":{},"body":{"components/DetailComponent.html":{}}}],["implementing",{"_index":847,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["implements",{"_index":33,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/ClearCard.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{}}}],["import",{"_index":51,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"classes/Message.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/State.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{}}}],["imports",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{}}}],["include",{"_index":2168,"title":{},"body":{"modules/StateModule.html":{}}}],["index",{"_index":34,"title":{"index.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":2048,"title":{},"body":{"classes/Map.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"classes/Message.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/State.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["information",{"_index":13,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["informatios",{"_index":766,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["inheritance",{"_index":1578,"title":{},"body":{"classes/Filter.html":{}}}],["iniitialized",{"_index":807,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["init",{"_index":61,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"classes/CheckAuthenticationStatus.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["initauthstatus",{"_index":60,"title":{"classes/InitAuthStatus.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["initauthstatus({code:window.location.href.substring(i",{"_index":340,"title":{},"body":{"components/AppComponent.html":{}}}],["initfilter",{"_index":597,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilters.html":{},"miscellaneous/enumerations.html":{}}}],["initfilters",{"_index":600,"title":{"classes/InitFilters.html":{}},"body":{"classes/ApplyFilter.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"classes/InitFilters.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["initfilters({filters:this.service.defaultfilters",{"_index":1526,"title":{},"body":{"injectables/FeedFiltersEffects.html":{}}}],["initialized",{"_index":716,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["initializehandlebarstemplates",{"_index":1374,"title":{},"body":{"components/DetailComponent.html":{}}}],["initializehrefsofcsslink",{"_index":1375,"title":{},"body":{"components/DetailComponent.html":{}}}],["initialstate",{"_index":584,"title":{},"body":{"interfaces/AppState.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["initrecipientfilter",{"_index":1617,"title":{},"body":{"injectables/FilterService.html":{}}}],["inittimefilter",{"_index":1618,"title":{},"body":{"injectables/FilterService.html":{}}}],["inittypefilter",{"_index":1619,"title":{},"body":{"injectables/FilterService.html":{}}}],["inject",{"_index":1278,"title":{},"body":{"injectables/ConfigEffects.html":{},"classes/GuidService.html":{}}}],["inject('configretrydelay",{"_index":1285,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["injectable",{"_index":632,"title":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"injectables/ThirdsService.html":{},"injectables/TimeService.html":{}},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"coverage.html":{}}}],["injectables",{"_index":836,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"injectables/ThirdsService.html":{},"injectables/TimeService.html":{},"index.html":{}}}],["injector",{"_index":1298,"title":{},"body":{"injectables/ConfigService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["input",{"_index":150,"title":{"classes/Input.html":{}},"body":{"classes/Action.html":{},"components/CardComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/IconComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{}}}],["input[0",{"_index":2293,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["input[1",{"_index":2294,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["inputs",{"_index":149,"title":{},"body":{"classes/Action.html":{},"components/CardComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/IconComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["inputtype",{"_index":196,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"miscellaneous/enumerations.html":{}}}],["instance",{"_index":786,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["instanciation",{"_index":1577,"title":{},"body":{"classes/Filter.html":{}}}],["instantiate",{"_index":1415,"title":{},"body":{"components/DetailComponent.html":{}}}],["intercept",{"_index":2449,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["intercept(request",{"_index":2455,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["intercepted",{"_index":1206,"title":{},"body":{"injectables/CardService.html":{}}}],["interceptor",{"_index":1207,"title":{"interceptors/TokenInjector.html":{}},"body":{"injectables/CardService.html":{},"coverage.html":{}}}],["interceptors",{"_index":2446,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["interceptors.service",{"_index":2137,"title":{},"body":{"modules/ServicesModule.html":{}}}],["interface",{"_index":522,"title":{"interfaces/AppState.html":{},"interfaces/AuthState.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"interfaces/ConfigState.html":{},"interfaces/MenuState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/AuthState.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"interfaces/ConfigState.html":{},"interfaces/MenuState.html":{},"coverage.html":{}}}],["interfaces",{"_index":523,"title":{},"body":{"interfaces/AppState.html":{},"interfaces/AuthState.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"interfaces/ConfigState.html":{},"interfaces/MenuState.html":{},"index.html":{}}}],["intl.numberformat(this.translate.getbrowserlang",{"_index":1809,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["invalid",{"_index":683,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckTokenResponse.html":{}}}],["isauth",{"_index":348,"title":{},"body":{"components/AppComponent.html":{}}}],["isauthenticated",{"_index":278,"title":{},"body":{"components/AppComponent.html":{}}}],["isexpirationdateover",{"_index":760,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["isinthefuture",{"_index":319,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["isinthefuture(expirationdate",{"_index":758,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["isinthefuture(time",{"_index":832,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["isnan(expirationdate",{"_index":756,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["isnotanumber",{"_index":755,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["issue",{"_index":244,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/ClearCard.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["istanbul",{"_index":89,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"classes/EmptyLightCards.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/I18n.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/Message.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{}}}],["isused",{"_index":783,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["it's",{"_index":908,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["items",{"_index":1354,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["jnlp",{"_index":193,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"miscellaneous/enumerations.html":{}}}],["js",{"_index":2646,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":642,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"dependencies.html":{}}}],["jwt.expire",{"_index":676,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["jwt.login",{"_index":672,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["jwt[this.expireclaim",{"_index":791,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["jwt_decode",{"_index":641,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["jwt_decode(token",{"_index":818,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["key",{"_index":960,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"classes/Map.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["label",{"_index":143,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["label1",{"_index":2351,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["label2",{"_index":2354,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["label3",{"_index":2359,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["lang",{"_index":2201,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["langs",{"_index":2303,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["large",{"_index":2164,"title":{},"body":{"modules/StateModule.html":{}}}],["larger",{"_index":1044,"title":{},"body":{"components/CardComponent.html":{}}}],["last",{"_index":1099,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["lastcards",{"_index":1098,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["later",{"_index":364,"title":{},"body":{"components/AppComponent.html":{}}}],["latest",{"_index":1932,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["lcard",{"_index":223,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["legend",{"_index":387,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"index.html":{}}}],["level",{"_index":2069,"title":{},"body":{"classes/Message.html":{}}}],["library",{"_index":476,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{}}}],["library.add(faclock",{"_index":1551,"title":{},"body":{"modules/FeedModule.html":{}}}],["library.add(faexternallinkalt",{"_index":484,"title":{},"body":{"modules/AppModule.html":{}}}],["license",{"_index":376,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{}}}],["light",{"_index":237,"title":{},"body":{"classes/AddLightCardFailure.html":{},"components/CardComponent.html":{},"components/DetailComponent.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"components/IconComponent.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["light:boolean",{"_index":1854,"title":{},"body":{"components/IconComponent.html":{}}}],["lightcard",{"_index":218,"title":{},"body":{"classes/AddLightCardFailure.html":{},"components/CardComponent.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcard):boolean",{"_index":1608,"title":{},"body":{"classes/Filter.html":{}}}],["lightcard,any",{"_index":1602,"title":{},"body":{"classes/Filter.html":{}}}],["lightcard.enddate|date:'short",{"_index":1032,"title":{},"body":{"components/CardComponent.html":{}}}],["lightcard.enddate|date:\\'short",{"_index":1052,"title":{},"body":{"components/CardComponent.html":{}}}],["lightcard.startdate|date:'short",{"_index":1031,"title":{},"body":{"components/CardComponent.html":{}}}],["lightcard.startdate|date:\\'short",{"_index":1051,"title":{},"body":{"components/CardComponent.html":{}}}],["lightcardactions",{"_index":258,"title":{},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/typealiases.html":{}}}],["lightcardactiontypes",{"_index":221,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/LightCardEffects.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["lightcardactiontypes.addlightcardfailure",{"_index":217,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardactiontypes.emptylightcards",{"_index":249,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardactiontypes.handleunexpectederror",{"_index":257,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardactiontypes.loadlightcards",{"_index":248,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardactiontypes.loadlightcardsextendeddata",{"_index":252,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardactiontypes.loadlightcardsfailure",{"_index":253,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardactiontypes.loadlightcardssuccess",{"_index":250,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardactiontypes.selectlightcard",{"_index":254,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardactiontypes.updatedsubscription",{"_index":256,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcardadapter",{"_index":1119,"title":{},"body":{"interfaces/CardFeedState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lightcardadapter.getinitialstate",{"_index":1122,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["lightcardadapter.getselectors(selectlightcardsstate",{"_index":2746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lightcardeffects",{"_index":569,"title":{"injectables/LightCardEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/LightCardEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lightcardreducer",{"_index":552,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["lightcards",{"_index":251,"title":{},"body":{"classes/AddLightCardFailure.html":{},"components/CardListComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["lightcards:${test",{"_index":1972,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["line",{"_index":2424,"title":{},"body":{"components/TimeLineComponent.html":{}}}],["line'},{'name",{"_index":421,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["line.component",{"_index":1542,"title":{},"body":{"modules/FeedModule.html":{}}}],["line.component.html",{"_index":2425,"title":{},"body":{"components/TimeLineComponent.html":{}}}],["line.component.ts",{"_index":2423,"title":{},"body":{"components/TimeLineComponent.html":{},"coverage.html":{}}}],["line.component.ts:14",{"_index":2426,"title":{},"body":{"components/TimeLineComponent.html":{}}}],["line.component.ts:18",{"_index":2427,"title":{},"body":{"components/TimeLineComponent.html":{}}}],["line/time",{"_index":1541,"title":{},"body":{"modules/FeedModule.html":{},"components/TimeLineComponent.html":{},"coverage.html":{}}}],["link",{"_index":1417,"title":{},"body":{"components/DetailComponent.html":{}}}],["link/button",{"_index":944,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["link1",{"_index":2352,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["link2",{"_index":2355,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["link3",{"_index":2360,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["list",{"_index":198,"title":{},"body":{"classes/Action.html":{},"components/CardListComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"miscellaneous/enumerations.html":{}}}],["list'},{'name",{"_index":401,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["list.component",{"_index":1535,"title":{},"body":{"modules/FeedModule.html":{}}}],["list.component.html",{"_index":1126,"title":{},"body":{"components/CardListComponent.html":{}}}],["list.component.ts",{"_index":1125,"title":{},"body":{"components/CardListComponent.html":{},"coverage.html":{}}}],["list.component.ts:17",{"_index":1129,"title":{},"body":{"components/CardListComponent.html":{}}}],["list.component.ts:18",{"_index":1128,"title":{},"body":{"components/CardListComponent.html":{}}}],["list/card",{"_index":1124,"title":{},"body":{"components/CardListComponent.html":{},"modules/FeedModule.html":{},"coverage.html":{}}}],["list/filters/filters.component",{"_index":1544,"title":{},"body":{"modules/FeedModule.html":{}}}],["list/filters/filters.component.ts",{"_index":1658,"title":{},"body":{"components/FiltersComponent.html":{},"coverage.html":{}}}],["list/filters/filters.component.ts:14",{"_index":1660,"title":{},"body":{"components/FiltersComponent.html":{}}}],["list/filters/filters.component.ts:18",{"_index":1661,"title":{},"body":{"components/FiltersComponent.html":{}}}],["list/filters/time",{"_index":1548,"title":{},"body":{"modules/FeedModule.html":{},"components/TimeFilterComponent.html":{},"coverage.html":{}}}],["list/filters/type",{"_index":1545,"title":{},"body":{"modules/FeedModule.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["list_radio",{"_index":199,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"miscellaneous/enumerations.html":{}}}],["listen",{"_index":931,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["listens",{"_index":868,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["literal",{"_index":214,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/UpdateSelectedMenu.html":{}}}],["load",{"_index":224,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"classes/SelectLightCard.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["loadbyid",{"_index":1077,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/LightCardEffects.html":{}}}],["loadcard",{"_index":1087,"title":{"classes/LoadCard.html":{}},"body":{"injectables/CardEffects.html":{},"injectables/CardService.html":{},"classes/ClearCard.html":{},"injectables/CustomRouterEffects.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"injectables/MenuEffects.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadcard(id",{"_index":1174,"title":{},"body":{"injectables/CardService.html":{}}}],["loadcard({id",{"_index":1318,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["loadcardfailure",{"_index":1088,"title":{"classes/LoadCardFailure.html":{}},"body":{"injectables/CardEffects.html":{},"classes/ClearCard.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadcardfailure(err",{"_index":1084,"title":{},"body":{"injectables/CardEffects.html":{}}}],["loadcardsuccess",{"_index":1089,"title":{"classes/LoadCardSuccess.html":{}},"body":{"injectables/CardEffects.html":{},"classes/ClearCard.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadcardsuccess({card",{"_index":1083,"title":{},"body":{"injectables/CardEffects.html":{}}}],["loadchildren",{"_index":502,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["loadconfig",{"_index":321,"title":{"classes/LoadConfig.html":{}},"body":{"components/AppComponent.html":{},"injectables/ConfigEffects.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadconfigfailure",{"_index":1281,"title":{"classes/LoadConfigFailure.html":{}},"body":{"injectables/ConfigEffects.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadconfigfailure(err",{"_index":1272,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["loadconfigsuccess",{"_index":1282,"title":{"classes/LoadConfigSuccess.html":{}},"body":{"injectables/ConfigEffects.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadconfigsuccess({config",{"_index":1271,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["loaded",{"_index":353,"title":{},"body":{"components/AppComponent.html":{},"interfaces/ConfigState.html":{},"modules/ServicesModule.html":{},"miscellaneous/variables.html":{}}}],["loadedi18n",{"_index":2209,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["loader",{"_index":2642,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["loadfeedfilteronauthenticationsuccess",{"_index":1523,"title":{},"body":{"injectables/FeedFiltersEffects.html":{}}}],["loadi18nforlightcards",{"_index":2320,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["loadi18nforlightcards(cards",{"_index":2330,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["loadi18nforlightcards(cards:lightcard",{"_index":2268,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["loadi18nformenuentries",{"_index":2321,"title":{},"body":{"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{}}}],["loadi18nformenuentries(){return",{"_index":2361,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["loadi18nformenuentries(menus",{"_index":2332,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["loadi18nformenuentries(menus:thirdmenu",{"_index":2274,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["loading",{"_index":360,"title":{},"body":{"components/AppComponent.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"interfaces/ConfigState.html":{},"injectables/LightCardEffects.html":{},"interfaces/MenuState.html":{},"miscellaneous/variables.html":{}}}],["loadingi18n",{"_index":2210,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["loadlightcards",{"_index":222,"title":{"classes/LoadLightCards.html":{}},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadlightcardsextendeddata",{"_index":228,"title":{"classes/LoadLightCardsExtendedData.html":{}},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/LightCardEffects.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["loadlightcardsfailure",{"_index":231,"title":{"classes/LoadLightCardsFailure.html":{}},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadlightcardssuccess",{"_index":227,"title":{"classes/LoadLightCardsSuccess.html":{}},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"injectables/LightCardEffects.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadlightcardssuccess({lightcards",{"_index":1144,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["loadmenu",{"_index":1691,"title":{"classes/LoadMenu.html":{}},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/NavbarComponent.html":{},"classes/UpdateSelectedMenu.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadmenufailure",{"_index":1693,"title":{"classes/LoadMenuFailure.html":{}},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"classes/UpdateSelectedMenu.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadmenufailure(err",{"_index":2059,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["loadmenusuccess",{"_index":1692,"title":{"classes/LoadMenuSuccess.html":{}},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"classes/UpdateSelectedMenu.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadmenusuccess({menu",{"_index":2057,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["loads",{"_index":1134,"title":{},"body":{"injectables/CardOperationEffects.html":{},"injectables/FeedFiltersEffects.html":{}}}],["local",{"_index":1427,"title":{},"body":{"components/DetailComponent.html":{}}}],["locale",{"_index":1767,"title":{},"body":{"injectables/HandlebarsService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["locales",{"_index":2175,"title":{},"body":{"classes/Third.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["locales?:string",{"_index":170,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["localestorage",{"_index":749,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage",{"_index":743,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.clear",{"_index":764,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.getitem(localstorageauthcontent.expirationdate",{"_index":754,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.getitem(localstorageauthcontent.identifier",{"_index":780,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.getitem(localstorageauthcontent.token",{"_index":745,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.setitem(localstorageauthcontent.clientid",{"_index":775,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.setitem(localstorageauthcontent.expirationdate",{"_index":773,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.setitem(localstorageauthcontent.identifier",{"_index":769,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorage.setitem(localstorageauthcontent.token",{"_index":771,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["localstorageauthcontent",{"_index":646,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/enumerations.html":{}}}],["location.href",{"_index":335,"title":{},"body":{"components/AppComponent.html":{}}}],["location.origin",{"_index":812,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["location.pathname.length",{"_index":814,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["locationstrategy",{"_index":455,"title":{},"body":{"modules/AppModule.html":{}}}],["lockaction",{"_index":151,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["lockcard",{"_index":152,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["lodash",{"_index":645,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"dependencies.html":{}}}],["log",{"_index":67,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["login",{"_index":102,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"modules/AppRoutingModule.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/InitAuthStatus.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["login'},{'name",{"_index":413,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["login.component.html",{"_index":2005,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.error.${category",{"_index":965,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["login.error.unavailable",{"_index":969,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["login.error.unexpected",{"_index":970,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["login.login",{"_index":2041,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.password",{"_index":2042,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.reset",{"_index":2044,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.submit.code",{"_index":2045,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.submit.password",{"_index":2043,"title":{},"body":{"components/LoginComponent.html":{}}}],["login/password",{"_index":95,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["loginclaim",{"_index":656,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["logincomponent",{"_index":98,"title":{"components/LoginComponent.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"classes/CheckAuthenticationStatus.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["loginmessage",{"_index":2008,"title":{},"body":{"components/LoginComponent.html":{}}}],["loginmessage.i18n.key|translate:loginmessage.i18n.parameters",{"_index":2046,"title":{},"body":{"components/LoginComponent.html":{}}}],["logout",{"_index":109,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["longtext",{"_index":201,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"miscellaneous/enumerations.html":{}}}],["lttd",{"_index":990,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{}}}],["lvalue",{"_index":1789,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["m",{"_index":1802,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["m.format(options.hash.format",{"_index":1806,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["m.level==messagelevel.error",{"_index":2029,"title":{},"body":{"components/LoginComponent.html":{}}}],["m.locale(this.translate.getbrowserlang",{"_index":1805,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["mainrecipient",{"_index":988,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{}}}],["manage",{"_index":511,"title":{},"body":{"modules/AppRoutingModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["management",{"_index":838,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["manager",{"_index":846,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["manages",{"_index":1274,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["mandatory",{"_index":203,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["map",{"_index":161,"title":{"classes/Map.html":{}},"body":{"classes/Action.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"classes/Detail.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IframeDisplayComponent.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["map((action",{"_index":863,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/FeedFiltersEffects.html":{}}}],["map((auth",{"_index":736,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["map((card",{"_index":1082,"title":{},"body":{"injectables/CardEffects.html":{}}}],["map((config",{"_index":1270,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["map((currentselection",{"_index":1934,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["map(action",{"_index":921,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["map(array",{"_index":2056,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["map(authenticationinfo",{"_index":884,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["map(card",{"_index":2270,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["map(check",{"_index":704,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["map(data",{"_index":734,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["map(id=>this.lightcard.id",{"_index":1028,"title":{},"body":{"components/CardComponent.html":{}}}],["map(isinthefuture",{"_index":345,"title":{},"body":{"components/AppComponent.html":{}}}],["map(menu",{"_index":2276,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["map(operation",{"_index":1139,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["map(r",{"_index":2245,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["map(s=>handlebars.compile(s",{"_index":1773,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["map(t",{"_index":2260,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["map(t=>t(card",{"_index":1764,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["margin",{"_index":384,"title":{},"body":{"components/AppComponent.html":{},"components/CardComponent.html":{},"components/LoginComponent.html":{}}}],["matching",{"_index":136,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"classes/Message.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/State.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":1034,"title":{},"body":{"components/CardComponent.html":{}}}],["maxedretries",{"_index":280,"title":{},"body":{"components/AppComponent.html":{}}}],["maxlength",{"_index":204,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["medium",{"_index":1835,"title":{},"body":{"components/IconComponent.html":{}}}],["medium:boolean",{"_index":1851,"title":{},"body":{"components/IconComponent.html":{}}}],["member",{"_index":130,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["members",{"_index":18,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["menu",{"_index":526,"title":{},"body":{"interfaces/AppState.html":{},"classes/HandleUnexpectedError-3.html":{},"components/IframeDisplayComponent.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"interfaces/MenuState.html":{},"classes/UpdateSelectedMenu.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["menu.'+link.path",{"_index":2101,"title":{},"body":{"components/NavbarComponent.html":{}}}],["menu.\\'+link.path",{"_index":2107,"title":{},"body":{"components/NavbarComponent.html":{}}}],["menu.id",{"_index":2277,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["menu.logout",{"_index":2106,"title":{},"body":{"components/NavbarComponent.html":{}}}],["menu.version",{"_index":2278,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["menu_entry_id",{"_index":1703,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"components/IframeDisplayComponent.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/UpdateSelectedMenu.html":{}}}],["menu_entry_id,menu_entry_id",{"_index":1930,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["menu_entry_id|async",{"_index":1957,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["menu_id",{"_index":1702,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"components/IframeDisplayComponent.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/UpdateSelectedMenu.html":{}}}],["menu_id/:menu_entry_id",{"_index":2192,"title":{},"body":{"modules/ThirdpartyRoutingModule.html":{}}}],["menu_id|async",{"_index":1958,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["menuactions",{"_index":1704,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/UpdateSelectedMenu.html":{},"miscellaneous/typealiases.html":{}}}],["menuactiontypes",{"_index":1690,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"classes/UpdateSelectedMenu.html":{},"miscellaneous/enumerations.html":{}}}],["menuactiontypes.handleunexpectederror",{"_index":1689,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/UpdateSelectedMenu.html":{}}}],["menuactiontypes.loadmenu",{"_index":1694,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/UpdateSelectedMenu.html":{}}}],["menuactiontypes.loadmenufailure",{"_index":1695,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/UpdateSelectedMenu.html":{}}}],["menuactiontypes.loadmenusuccess",{"_index":1696,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/UpdateSelectedMenu.html":{}}}],["menuactiontypes.updateselectedmenu",{"_index":1701,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/UpdateSelectedMenu.html":{}}}],["menueffects",{"_index":567,"title":{"injectables/MenuEffects.html":{}},"body":{"interfaces/AppState.html":{},"injectables/MenuEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["menuentries",{"_index":2176,"title":{},"body":{"classes/Third.html":{}}}],["menuentries?:thirdmenuentry",{"_index":171,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["menuentry.id",{"_index":1953,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["menuinitialstate",{"_index":2065,"title":{},"body":{"interfaces/MenuState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["menureducer",{"_index":559,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["menus",{"_index":2267,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["menus.push(menu",{"_index":2266,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["menustate",{"_index":532,"title":{"interfaces/MenuState.html":{}},"body":{"interfaces/AppState.html":{},"interfaces/MenuState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["menustate.menu",{"_index":2792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menustate.selected_menu_entry_id",{"_index":2793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menustate.selected_menu_id",{"_index":2794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menustate:menustate",{"_index":2791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["merge",{"_index":2203,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["merge(previous",{"_index":2251,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["mergemap",{"_index":2204,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["mergemap((id",{"_index":2290,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["message",{"_index":55,"title":{"classes/Message.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"interfaces/CardFeedState.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"classes/InitAuthStatus.html":{},"components/LoginComponent.html":{},"classes/Message.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["message('the",{"_index":889,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["message(err",{"_index":904,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["message(message",{"_index":975,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["messagelevel",{"_index":952,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"components/LoginComponent.html":{},"classes/Message.html":{},"miscellaneous/enumerations.html":{}}}],["messagelevel.debug",{"_index":2071,"title":{},"body":{"classes/Message.html":{}}}],["messagelevel.error",{"_index":890,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["metadata",{"_index":268,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["metareducer",{"_index":541,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["metareducers",{"_index":583,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":23,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["methods",{"_index":282,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"injectables/ConfigService.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"components/TypeFilterComponent.html":{}}}],["minus2hour",{"_index":1196,"title":{},"body":{"injectables/CardService.html":{}}}],["miscellaneous",{"_index":2663,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":2442,"title":{},"body":{"injectables/TimeService.html":{}}}],["model/light",{"_index":2207,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["modification",{"_index":1105,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["module",{"_index":426,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"index.html":{}}}],["modules",{"_index":428,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"index.html":{},"modules.html":{}}}],["modules/archives/archives.module#archivesmodule",{"_index":506,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["modules/feed/feed.module#feedmodule",{"_index":503,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["modules/thirdparty/thirdparty.module#thirdpartymodule",{"_index":508,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["modulewithproviders",{"_index":1241,"title":{},"body":{"modules/CardsModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["moment",{"_index":828,"title":{},"body":{"classes/AuthObject.html":{},"injectables/CardEffects.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/TimeService.html":{},"dependencies.html":{}}}],["moment(new",{"_index":1803,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["moment(value).format('yyyy",{"_index":2444,"title":{},"body":{"injectables/TimeService.html":{}}}],["moment(value,'yyyy",{"_index":2441,"title":{},"body":{"injectables/TimeService.html":{}}}],["moment.moment",{"_index":2437,"title":{},"body":{"injectables/TimeService.html":{}}}],["mono.svg",{"_index":1876,"title":{},"body":{"components/IconComponent.html":{}}}],["more",{"_index":513,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["movetocodeflowloginpage",{"_index":806,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["mozilla",{"_index":375,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{}}}],["mpl",{"_index":380,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{}}}],["multi",{"_index":2140,"title":{},"body":{"modules/ServicesModule.html":{}}}],["name",{"_index":46,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"components/FiltersComponent.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/Message.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{}}}],["name:string",{"_index":165,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["navbar",{"_index":112,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"modules/AppRoutingModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["navbar'},{'name",{"_index":414,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["navbar.component.html",{"_index":2074,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbarcollapsed",{"_index":2077,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbarcomponent",{"_index":110,"title":{"components/NavbarComponent.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"classes/CheckAuthenticationStatus.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["navigate",{"_index":870,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["navigatetocard",{"_index":1309,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["navigatetomenuurl",{"_index":1310,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["navigationactiontiming",{"_index":2154,"title":{},"body":{"modules/StateModule.html":{}}}],["navigationactiontiming.postactivation",{"_index":2158,"title":{},"body":{"modules/StateModule.html":{}}}],["navigationid",{"_index":1344,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"miscellaneous/variables.html":{}}}],["navigationroutes",{"_index":515,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/NavbarComponent.html":{}}}],["need",{"_index":1352,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["needed",{"_index":245,"title":{},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardService.html":{},"classes/ClearCard.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{}}}],["needsconfirm",{"_index":155,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["new",{"_index":28,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"injectables/HandlebarsService.html":{},"classes/InitAuthStatus.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":91,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"classes/EmptyLightCards.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/I18n.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/Message.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"components/TimeFilterComponent.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{}}}],["next.handle(this.addauthheadersifnecessary(request",{"_index":2460,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["next.length",{"_index":1612,"title":{},"body":{"classes/Filter.html":{}}}],["next.status.action",{"_index":2486,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["next.status.alarm",{"_index":2484,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["next.status.end",{"_index":2396,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["next.status.notification",{"_index":2490,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["next.status.question",{"_index":2488,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["next.status.start",{"_index":2391,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["next[0].chainfilter(card,next.slice(1",{"_index":1613,"title":{},"body":{"classes/Filter.html":{}}}],["next||next.length",{"_index":1614,"title":{},"body":{"classes/Filter.html":{}}}],["ng",{"_index":462,"title":{},"body":{"modules/AppModule.html":{},"injectables/CardService.html":{},"modules/FeedModule.html":{},"dependencies.html":{}}}],["ngafterviewinit",{"_index":1468,"title":{},"body":{"components/DetailsComponent.html":{},"components/FeedComponent.html":{}}}],["ngbcollapse]=\"!expandedmenu[index",{"_index":2103,"title":{},"body":{"components/NavbarComponent.html":{}}}],["ngbmodule",{"_index":461,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{}}}],["ngbmodule.forroot",{"_index":1552,"title":{},"body":{"modules/FeedModule.html":{}}}],["ngmodule",{"_index":448,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{}}}],["ngonchanges",{"_index":1469,"title":{},"body":{"components/DetailsComponent.html":{}}}],["ngonchanges(changes",{"_index":1475,"title":{},"body":{"components/DetailsComponent.html":{}}}],["ngondestroy",{"_index":2370,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["ngoninit",{"_index":284,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/DetailComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["ngrx",{"_index":246,"title":{},"body":{"classes/AddLightCardFailure.html":{},"interfaces/AppState.html":{},"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"dependencies.html":{}}}],["ngrx/effects",{"_index":947,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"modules/StateModule.html":{},"dependencies.html":{}}}],["ngrx/entity",{"_index":1114,"title":{},"body":{"interfaces/CardFeedState.html":{},"dependencies.html":{}}}],["ngrx/router",{"_index":535,"title":{},"body":{"interfaces/AppState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{},"dependencies.html":{}}}],["ngrx/store",{"_index":52,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"dependencies.html":{}}}],["ngunsubscribe",{"_index":2367,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["ngx",{"_index":317,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"injectables/HandlebarsService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"dependencies.html":{}}}],["none",{"_index":998,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{},"miscellaneous/enumerations.html":{}}}],["noselectioncomponent",{"_index":415,"title":{"components/NoSelectionComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["notchecktokenrequest",{"_index":2462,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["notification",{"_index":1636,"title":{},"body":{"injectables/FilterService.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/enumerations.html":{}}}],["notify",{"_index":114,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["null",{"_index":181,"title":{},"body":{"classes/Action.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"components/CardDetailsComponent.html":{},"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"classes/CheckTokenResponse.html":{},"interfaces/ConfigState.html":{},"classes/Input.html":{},"interfaces/MenuState.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":205,"title":{},"body":{"classes/Action.html":{},"classes/AuthObject.html":{},"classes/Card.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"interfaces/ConfigState.html":{},"classes/Detail.html":{},"injectables/HandlebarsService.html":{},"classes/Input.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"injectables/TimeService.html":{},"miscellaneous/variables.html":{}}}],["oauth2.client",{"_index":668,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["object",{"_index":2246,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["object[locale",{"_index":2247,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["object[locale][publisher",{"_index":2248,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["object[locale][publisher][version",{"_index":2249,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["observable",{"_index":17,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/HandlebarsService.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{}}}],["observable.create(observer",{"_index":1214,"title":{},"body":{"injectables/CardService.html":{}}}],["observer.error(error",{"_index":1223,"title":{},"body":{"injectables/CardService.html":{}}}],["observer.error(message",{"_index":1216,"title":{},"body":{"injectables/CardService.html":{}}}],["observer.next(json.parse(message.data",{"_index":1217,"title":{},"body":{"injectables/CardService.html":{}}}],["obtain",{"_index":382,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{}}}],["occured",{"_index":1220,"title":{},"body":{"injectables/CardService.html":{}}}],["of([new",{"_index":2347,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["of(false",{"_index":1977,"title":{},"body":{"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["of(new",{"_index":895,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["of(null",{"_index":706,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckTokenResponse.html":{}}}],["of(template",{"_index":1771,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["of(third",{"_index":2221,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["of(this.handlerejectedlogin(new",{"_index":888,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["of(true",{"_index":2362,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["ofactions/authentication.actions",{"_index":309,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckTokenResponse.html":{},"injectables/FeedFiltersEffects.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{}}}],["ofactions/card.actions",{"_index":956,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/MenuEffects.html":{}}}],["ofactions/config.actions",{"_index":322,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"injectables/ConfigEffects.html":{}}}],["ofactions/feed.actions",{"_index":1158,"title":{},"body":{"injectables/CardOperationEffects.html":{},"injectables/FeedFiltersEffects.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["ofactions/light",{"_index":954,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/LightCardEffects.html":{}}}],["ofactions/menu.actions",{"_index":1329,"title":{},"body":{"injectables/CustomRouterEffects.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{}}}],["ofeffects/authentication.effects",{"_index":549,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/card",{"_index":547,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/card.effects",{"_index":545,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/config.effects",{"_index":577,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/custom",{"_index":564,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/feed",{"_index":573,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/light",{"_index":570,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofeffects/menu.effects",{"_index":568,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofmap",{"_index":162,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["ofmodel/card",{"_index":1184,"title":{},"body":{"injectables/CardService.html":{}}}],["ofmodel/card.model",{"_index":159,"title":{},"body":{"classes/Action.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/ClearCard.html":{},"interfaces/ConfigState.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/HandleUnexpectedError.html":{},"injectables/HandlebarsService.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["ofmodel/feed",{"_index":591,"title":{},"body":{"classes/ApplyFilter.html":{},"interfaces/CardFeedState.html":{},"injectables/FilterService.html":{},"classes/InitFilters.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["ofmodel/i18n.model",{"_index":160,"title":{},"body":{"classes/Action.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"classes/Detail.html":{},"classes/Input.html":{},"classes/Message.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["ofmodel/light",{"_index":219,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"classes/Detail.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["ofmodel/map",{"_index":163,"title":{},"body":{"classes/Action.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"classes/Detail.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["ofmodel/message.model",{"_index":56,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["ofmodel/thirds.model",{"_index":1404,"title":{},"body":{"components/DetailComponent.html":{},"classes/HandleUnexpectedError-3.html":{},"components/IframeDisplayComponent.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"classes/UpdateSelectedMenu.html":{}}}],["ofselectors/authentication.selectors",{"_index":316,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"components/LoginComponent.html":{}}}],["ofselectors/card.selectors",{"_index":1019,"title":{},"body":{"components/CardComponent.html":{}}}],["ofselectors/config.selectors",{"_index":325,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"components/LoginComponent.html":{}}}],["ofselectors/feed.selectors",{"_index":1514,"title":{},"body":{"components/FeedComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["ofselectors/menu.selectors",{"_index":1917,"title":{},"body":{"components/IframeDisplayComponent.html":{},"components/NavbarComponent.html":{}}}],["ofselectors/router.selectors",{"_index":314,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["ofservices/authentication.service",{"_index":320,"title":{},"body":{"components/AppComponent.html":{},"injectables/ConfigService.html":{},"components/LoginComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["ofservices/card.service",{"_index":953,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CustomRouterEffects.html":{}}}],["ofservices/config.service",{"_index":1280,"title":{},"body":{"injectables/ConfigEffects.html":{},"modules/ServicesModule.html":{}}}],["ofservices/filter.service",{"_index":594,"title":{},"body":{"classes/ApplyFilter.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/FeedFiltersEffects.html":{},"classes/InitFilters.html":{},"modules/ServicesModule.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["ofservices/guard.service",{"_index":497,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["ofservices/guid.service",{"_index":639,"title":{},"body":{"classes/AuthObject.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"modules/ServicesModule.html":{}}}],["ofservices/services.module",{"_index":464,"title":{},"body":{"modules/AppModule.html":{}}}],["ofservices/thirds.service",{"_index":1063,"title":{},"body":{"components/CardDetailsComponent.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"modules/ServicesModule.html":{}}}],["ofservices/time.service",{"_index":1745,"title":{},"body":{"injectables/HandlebarsService.html":{},"modules/ServicesModule.html":{},"components/TimeFilterComponent.html":{}}}],["ofstates/authentication.state",{"_index":561,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstates/card.state",{"_index":562,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstates/config.state",{"_index":575,"title":{},"body":{"interfaces/AppState.html":{},"injectables/ConfigEffects.html":{}}}],["ofstates/feed.state",{"_index":551,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstates/menu.state",{"_index":566,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/index",{"_index":311,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"components/IframeDisplayComponent.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["ofstore/reducers/authentication.reducer",{"_index":539,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/reducers/card.reducer",{"_index":556,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/reducers/config.reducer",{"_index":558,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/reducers/light",{"_index":553,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/reducers/menu.reducer",{"_index":560,"title":{},"body":{"interfaces/AppState.html":{}}}],["ofstore/selectors/card.selectors",{"_index":1062,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["ofstore/selectors/router.selectors",{"_index":1017,"title":{},"body":{"components/CardComponent.html":{}}}],["ofstore/state.module",{"_index":460,"title":{},"body":{"modules/AppModule.html":{}}}],["ofstore/states/router.state",{"_index":537,"title":{},"body":{"interfaces/AppState.html":{},"modules/StateModule.html":{}}}],["oftype",{"_index":946,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["oftype(authenticationactiontypes.acceptlogin",{"_index":1136,"title":{},"body":{"injectables/CardOperationEffects.html":{},"injectables/FeedFiltersEffects.html":{}}}],["oftype(authenticationactiontypes.acceptlogout",{"_index":862,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["oftype(authenticationactiontypes.checkauthenticationstatus",{"_index":877,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["oftype(authenticationactiontypes.trytologin",{"_index":924,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["oftype(authenticationactiontypes.trytologout",{"_index":939,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["oftype(cardactiontypes.loadcard",{"_index":1079,"title":{},"body":{"injectables/CardEffects.html":{}}}],["oftype(configactiontypes.loadconfig",{"_index":1268,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["oftype(configactiontypes.loadconfigfailure",{"_index":1289,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["oftype(configactiontypes.loadconfigsuccess",{"_index":915,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["oftype(feedactiontypes.applyfilter",{"_index":1151,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["oftype(lightcardactiontypes.loadlightcardssuccess",{"_index":1968,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["oftype(menuactiontypes.loadmenu",{"_index":2053,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["oftype(router_navigation",{"_index":1312,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["oidc",{"_index":711,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["ok",{"_index":909,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/FeedFiltersEffects.html":{}}}],["once",{"_index":296,"title":{},"body":{"components/AppComponent.html":{}}}],["onchanges",{"_index":1467,"title":{},"body":{"components/DetailsComponent.html":{}}}],["ondestroy",{"_index":2364,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["one",{"_index":235,"title":{},"body":{"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"classes/CheckTokenResponse.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/HandleUnexpectedError-2.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TypeFilterComponent.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["one_second",{"_index":647,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ongoing",{"_index":1104,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["oninit",{"_index":267,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/DetailComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["onsubmit",{"_index":99,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["opcards",{"_index":1142,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["open",{"_index":1005,"title":{},"body":{"components/CardComponent.html":{}}}],["operation.cards",{"_index":1143,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operation.effects",{"_index":548,"title":{},"body":{"interfaces/AppState.html":{}}}],["operation.effects.ts",{"_index":1131,"title":{},"body":{"injectables/CardOperationEffects.html":{},"coverage.html":{}}}],["operation.effects.ts:27",{"_index":1133,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operation.effects.ts:36",{"_index":1150,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operation.effects.ts:67",{"_index":1156,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operation.model",{"_index":1185,"title":{},"body":{"injectables/CardService.html":{}}}],["operation.model.ts",{"_index":2670,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["operation.type",{"_index":1140,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operation.type.tostring",{"_index":1141,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["operations",{"_index":1135,"title":{},"body":{"injectables/CardOperationEffects.html":{},"injectables/FeedFiltersEffects.html":{}}}],["operator",{"_index":1777,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["operatorfabric",{"_index":304,"title":{},"body":{"components/AppComponent.html":{}}}],["optional",{"_index":47,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/Message.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{}}}],["options",{"_index":1779,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["options.hash",{"_index":1810,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["otherwise",{"_index":688,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":73,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"modules/FeedModule.html":{},"classes/Filter.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["over",{"_index":759,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["overview",{"_index":2684,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":2629,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":104,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["pair",{"_index":96,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["paload",{"_index":936,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["pan",{"_index":2657,"title":{},"body":{"dependencies.html":{}}}],["param",{"_index":658,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckTokenResponse.html":{},"classes/Filter.html":{}}}],["parameterlistitem",{"_index":208,"title":{"classes/ParameterListItem.html":{}},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"coverage.html":{}}}],["parameters",{"_index":44,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/Message.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{}}}],["parameters['message",{"_index":902,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["parametrization",{"_index":1566,"title":{},"body":{"classes/Filter.html":{}}}],["params",{"_index":717,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["params.append('client_secret",{"_index":731,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["params.append('clientid",{"_index":723,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["params.append('code",{"_index":718,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["params.append('grant_type",{"_index":719,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["params.append('password",{"_index":730,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["params.append('redirect_uri",{"_index":724,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["params.append('username",{"_index":729,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["params.tostring",{"_index":727,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["params['error",{"_index":971,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["parentmodule",{"_index":2141,"title":{},"body":{"modules/ServicesModule.html":{}}}],["parse",{"_index":2167,"title":{},"body":{"modules/StateModule.html":{}}}],["parsestring",{"_index":2432,"title":{},"body":{"injectables/TimeService.html":{}}}],["parsestring(value",{"_index":2438,"title":{},"body":{"injectables/TimeService.html":{}}}],["party",{"_index":1955,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["pass",{"_index":1580,"title":{},"body":{"classes/Filter.html":{}}}],["passes",{"_index":1590,"title":{},"body":{"classes/Filter.html":{}}}],["password",{"_index":108,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/InitAuthStatus.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["past",{"_index":2737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":500,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ThirdpartyRoutingModule.html":{}}}],["pathend",{"_index":813,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["pathmatch",{"_index":1557,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["payload",{"_index":37,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{}}}],["payload.access_token",{"_index":795,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.clientid",{"_index":794,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.clientid.tostring",{"_index":776,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.expirationdate.gettime().tostring",{"_index":774,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.expires_in",{"_index":789,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.identifier",{"_index":770,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["payload.password).pipe",{"_index":928,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["payload.token",{"_index":772,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["payload:{code",{"_index":92,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["payload:{filters",{"_index":602,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilters.html":{}}}],["payload:{name",{"_index":598,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilters.html":{}}}],["payloadforsuccessfulauthentication",{"_index":41,"title":{"classes/PayloadForSuccessfulAuthentication.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{}}}],["payloadforsuccessfulauthentication(jwt[this.loginclaim",{"_index":793,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["pertinent",{"_index":1346,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["pickarandomitemofanenum",{"_index":2627,"title":{},"body":{"coverage.html":{}}}],["pieces",{"_index":2170,"title":{},"body":{"modules/StateModule.html":{}}}],["pipe",{"_index":876,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/FeedFiltersEffects.html":{},"components/IframeDisplayComponent.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["pipe(catcherror",{"_index":880,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["pipe(map(flowmode=>flowmode",{"_index":2027,"title":{},"body":{"components/LoginComponent.html":{}}}],["pipe(map(trans",{"_index":2297,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["pipe(tap(menus",{"_index":2092,"title":{},"body":{"components/NavbarComponent.html":{}}}],["platformlocation",{"_index":1837,"title":{},"body":{"components/IconComponent.html":{}}}],["platformlocation.getbasehreffromdom",{"_index":1860,"title":{},"body":{"components/IconComponent.html":{}}}],["please",{"_index":362,"title":{},"body":{"components/AppComponent.html":{}}}],["pluck",{"_index":1919,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["plus48hours",{"_index":1200,"title":{},"body":{"injectables/CardService.html":{}}}],["point",{"_index":1348,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["popover",{"_index":2515,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["possible",{"_index":116,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["postdata",{"_index":690,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["postdata.append('token",{"_index":693,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["postdata.tostring",{"_index":702,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["preloadallmodules",{"_index":492,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["preloadingstrategy",{"_index":521,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["present",{"_index":827,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["previous",{"_index":2242,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["previous.pipe",{"_index":2252,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["primary",{"_index":2004,"title":{},"body":{"components/LoginComponent.html":{}}}],["private",{"_index":279,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"components/IframeDisplayComponent.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/RouterStateUrl.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["process",{"_index":177,"title":{"classes/Process.html":{}},"body":{"classes/Action.html":{},"classes/Card.html":{},"classes/Detail.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"coverage.html":{}}}],["process.states[card.state",{"_index":179,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["processes",{"_index":2177,"title":{},"body":{"classes/Third.html":{}}}],["processes?:ofmap",{"_index":172,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["processid",{"_index":989,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{}}}],["processing",{"_index":1107,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["prodi18npath",{"_index":2598,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":2720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":35,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{}}}],["property",{"_index":1567,"title":{},"body":{"classes/Filter.html":{}}}],["provide",{"_index":488,"title":{},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":2163,"title":{},"body":{"modules/StateModule.html":{}}}],["providedin",{"_index":1628,"title":{},"body":{"injectables/FilterService.html":{},"classes/GuidService.html":{}}}],["providers",{"_index":432,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"index.html":{}}}],["providers:[{provide:'configretrydelay',usevalue:5000",{"_index":2162,"title":{},"body":{"modules/StateModule.html":{}}}],["public",{"_index":36,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"components/CardComponent.html":{},"components/CardListComponent.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/State.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"injectables/TimeService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{}}}],["publishdate",{"_index":984,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{}}}],["publisher",{"_index":982,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["publishers",{"_index":1976,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["publisherversion",{"_index":983,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{}}}],["publisher}.${version}.${name}.${locale",{"_index":1768,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["push",{"_index":94,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["put",{"_index":797,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["query",{"_index":1353,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["querylist",{"_index":1482,"title":{},"body":{"components/DetailsComponent.html":{}}}],["queryparams",{"_index":1343,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"miscellaneous/variables.html":{}}}],["querytemplate",{"_index":1708,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["querytemplate(publisher",{"_index":1728,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["querytemplate(publisher:string",{"_index":1765,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["querythird",{"_index":2322,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["querythird(thirdname",{"_index":2334,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["querythird(thirdname:string",{"_index":2216,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["question",{"_index":1634,"title":{},"body":{"injectables/FilterService.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/enumerations.html":{}}}],["r",{"_index":2250,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["rangeend",{"_index":1178,"title":{},"body":{"injectables/CardService.html":{}}}],["rangestart",{"_index":1180,"title":{},"body":{"injectables/CardService.html":{}}}],["rangestart:rangestart,rangeend",{"_index":1229,"title":{},"body":{"injectables/CardService.html":{}}}],["reactiveformsmodule",{"_index":458,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{}}}],["readonly",{"_index":38,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"classes/ApplyFilter.html":{},"classes/Card.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/ClearCard.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"classes/EmptyLightCards.html":{},"classes/Filter.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/I18n.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/Message.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{}}}],["ready",{"_index":918,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["reason",{"_index":1579,"title":{},"body":{"classes/Filter.html":{}}}],["recipient_filter",{"_index":1655,"title":{},"body":{"injectables/FilterService.html":{},"miscellaneous/enumerations.html":{}}}],["recursion",{"_index":1595,"title":{},"body":{"classes/Filter.html":{}}}],["recursively",{"_index":1594,"title":{},"body":{"classes/Filter.html":{}}}],["redirect",{"_index":850,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["redirectto",{"_index":509,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/FeedRoutingModule.html":{}}}],["reduce",{"_index":2205,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["reduce((acc",{"_index":2253,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["reduce((ids",{"_index":2280,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["reduce((menus:thirdmenu[],menu:thirdmenu",{"_index":2265,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["reducer",{"_index":25,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"interfaces/AppState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{}}}],["regarding",{"_index":826,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["registerarrayatindex",{"_index":1709,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registerarrayatindexlength",{"_index":1710,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registerbool",{"_index":1711,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registercardaction",{"_index":1712,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registerdateformat",{"_index":1713,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registered",{"_index":710,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["registeri18n",{"_index":1714,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registermath",{"_index":1715,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registernow",{"_index":1716,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registernumberformat",{"_index":1717,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registerpreservespace",{"_index":1718,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registerslice",{"_index":1719,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registersort",{"_index":1720,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registersplit",{"_index":1721,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["registersvg",{"_index":1722,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["reinsertscripts",{"_index":1376,"title":{},"body":{"components/DetailComponent.html":{}}}],["reject",{"_index":70,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["rejectedlogin",{"_index":912,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["rejection",{"_index":122,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["rejectlogin",{"_index":69,"title":{"classes/RejectLogIn.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["rejectlogin({error",{"_index":974,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["rejectloginattempt",{"_index":128,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["related",{"_index":243,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/ClearCard.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["relevant",{"_index":777,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["reload",{"_index":363,"title":{},"body":{"components/AppComponent.html":{}}}],["remove",{"_index":132,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["removes",{"_index":125,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["rendered",{"_index":1110,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["rendering",{"_index":1419,"title":{},"body":{"components/DetailComponent.html":{}}}],["replication",{"_index":1573,"title":{},"body":{"classes/Filter.html":{}}}],["request",{"_index":1205,"title":{},"body":{"injectables/CardService.html":{},"injectables/ConfigEffects.html":{},"interceptors/TokenInjector.html":{}}}],["request.clone(update",{"_index":2467,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["request.url",{"_index":2461,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["require",{"_index":2604,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":2718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":442,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"index.html":{}}}],["resetform",{"_index":2012,"title":{},"body":{"components/LoginComponent.html":{}}}],["resetstate",{"_index":841,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["resource",{"_index":1425,"title":{},"body":{"components/DetailComponent.html":{}}}],["resourceurl",{"_index":2236,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["resourceurl}?${versionparam.tostring",{"_index":2240,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["response",{"_index":821,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["responsetype",{"_index":2231,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["result",{"_index":135,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"classes/Message.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/State.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.id",{"_index":2308,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["result.push(v",{"_index":2751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result.translation[lang",{"_index":2305,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["result:any",{"_index":2302,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["results",{"_index":137,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"classes/Message.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/State.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retries",{"_index":2784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retries:number",{"_index":2783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retry",{"_index":1264,"title":{},"body":{"injectables/ConfigEffects.html":{},"interfaces/ConfigState.html":{},"miscellaneous/variables.html":{}}}],["retrydelay",{"_index":1266,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["return",{"_index":180,"title":{},"body":{"classes/Action.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"components/IframeDisplayComponent.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/RouterStateUrl.html":{},"modules/ServicesModule.html":{},"classes/State.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1355,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["returns",{"_index":290,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"injectables/ConfigService.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/RouterStateUrl.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"components/TypeFilterComponent.html":{}}}],["right",{"_index":385,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"components/LoginComponent.html":{},"components/TypeFilterComponent.html":{}}}],["root",{"_index":270,"title":{},"body":{"components/AppComponent.html":{},"injectables/FilterService.html":{},"classes/GuidService.html":{}}}],["root'},{'name",{"_index":393,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["route",{"_index":1356,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["router",{"_index":527,"title":{},"body":{"interfaces/AppState.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["router.effects",{"_index":565,"title":{},"body":{"interfaces/AppState.html":{}}}],["router.effects.ts",{"_index":1308,"title":{},"body":{"injectables/CustomRouterEffects.html":{},"coverage.html":{}}}],["router.effects.ts:21",{"_index":1311,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["router.effects.ts:29",{"_index":1321,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["router.effects.ts:44",{"_index":1326,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["router.state",{"_index":2786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["router.state.url",{"_index":2787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["router_navigation",{"_index":1327,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["routereffects",{"_index":550,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["routerinitialstate",{"_index":585,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["routermodule",{"_index":493,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ThirdpartyRoutingModule.html":{}}}],["routermodule.forchild(routes",{"_index":618,"title":{},"body":{"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ThirdpartyRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":518,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routernavigationaction",{"_index":1314,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["routerreducerstate",{"_index":533,"title":{},"body":{"interfaces/AppState.html":{}}}],["routerstate",{"_index":1341,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["routerstate.params['cid",{"_index":1319,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["routerstate.params['menu_entry_id",{"_index":1325,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["routerstate.params['menu_id'],menu_entry_id",{"_index":1324,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["routerstate.root.queryparams",{"_index":1360,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["routerstate:any",{"_index":1316,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["routerstateserializer",{"_index":1332,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{}}}],["routerstatesnapshot",{"_index":1339,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{}}}],["routerstateurl",{"_index":536,"title":{"classes/RouterStateUrl.html":{}},"body":{"interfaces/AppState.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"coverage.html":{}}}],["routerstateurl(url",{"_index":1361,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["routes",{"_index":494,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"index.html":{},"routes.html":{}}}],["routes.slice(0",{"_index":516,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routing.module",{"_index":465,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/FeedModule.html":{},"components/NavbarComponent.html":{},"modules/ThirdpartyModule.html":{}}}],["routing.module.ts",{"_index":491,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ArchivesRoutingModule.html":{},"modules/FeedRoutingModule.html":{},"modules/ThirdpartyRoutingModule.html":{}}}],["row",{"_index":2513,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["rows",{"_index":206,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["rte",{"_index":369,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{}}}],["rules",{"_index":849,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["running",{"_index":751,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["rvalue",{"_index":1787,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["rxjs",{"_index":307,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/HandlebarsService.html":{},"components/IframeDisplayComponent.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"interceptors/TokenInjector.html":{},"components/TypeFilterComponent.html":{},"dependencies.html":{}}}],["rxjs/internal/observable/combinelatest",{"_index":1921,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["rxjs/internal/operators/tap",{"_index":1979,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["rxjs/internal/operators/withlatestfrom",{"_index":1922,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["rxjs/operators",{"_index":308,"title":{},"body":{"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/HandlebarsService.html":{},"components/IframeDisplayComponent.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["safe",{"_index":1424,"title":{},"body":{"components/DetailComponent.html":{}}}],["safecssurl",{"_index":1420,"title":{},"body":{"components/DetailComponent.html":{}}}],["safecssurl.tolocalestring",{"_index":1428,"title":{},"body":{"components/DetailComponent.html":{}}}],["safecssurl.tostring",{"_index":1426,"title":{},"body":{"components/DetailComponent.html":{}}}],["safehtml",{"_index":1397,"title":{},"body":{"components/DetailComponent.html":{}}}],["safeiframeurl",{"_index":1892,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["saferesourceurl",{"_index":1403,"title":{},"body":{"components/DetailComponent.html":{}}}],["safeurl",{"_index":1918,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["sanitizer",{"_index":1382,"title":{},"body":{"components/DetailComponent.html":{},"components/IframeDisplayComponent.html":{}}}],["save",{"_index":765,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["saveauthenticationinformation(payload",{"_index":768,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["scope",{"_index":1575,"title":{},"body":{"classes/Filter.html":{}}}],["scripts",{"_index":1438,"title":{},"body":{"components/DetailComponent.html":{}}}],["scripts.length",{"_index":1441,"title":{},"body":{"components/DetailComponent.html":{}}}],["scriptsinitiallength",{"_index":1440,"title":{},"body":{"components/DetailComponent.html":{}}}],["secret",{"_index":670,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["security",{"_index":1202,"title":{},"body":{"injectables/CardService.html":{}}}],["select",{"_index":234,"title":{},"body":{"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"components/CardComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["select(feedselectors.selectfilteredfeed",{"_index":1517,"title":{},"body":{"components/FeedComponent.html":{}}}],["select(selectconfigloaded",{"_index":350,"title":{},"body":{"components/AppComponent.html":{}}}],["select(selectmaxedretries",{"_index":354,"title":{},"body":{"components/AppComponent.html":{}}}],["selectactivefiltersarray",{"_index":2585,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectauthenticationstate",{"_index":2576,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectcardstate",{"_index":2578,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectcardstateselected",{"_index":2579,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectcardstateselecteddetails",{"_index":2580,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectcardstateselectedid",{"_index":1018,"title":{},"body":{"components/CardComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectcode",{"_index":951,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectconfig",{"_index":2582,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectconfigdata",{"_index":2583,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectconfigloaded",{"_index":323,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectconfigretry",{"_index":1283,"title":{},"body":{"injectables/ConfigEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectcurrenturl",{"_index":312,"title":{},"body":{"components/AppComponent.html":{},"components/CardComponent.html":{},"components/NavbarComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectdetail",{"_index":1470,"title":{},"body":{"components/DetailsComponent.html":{}}}],["selectdetail(detail",{"_index":1479,"title":{},"body":{"components/DetailsComponent.html":{}}}],["selected",{"_index":1097,"title":{},"body":{"interfaces/CardFeedState.html":{},"interfaces/CardState.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/UpdateSelectedMenu.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["selected_menu_entry_id",{"_index":2062,"title":{},"body":{"interfaces/MenuState.html":{},"miscellaneous/variables.html":{}}}],["selected_menu_id",{"_index":2063,"title":{},"body":{"interfaces/MenuState.html":{},"miscellaneous/variables.html":{}}}],["selectedcardid",{"_index":1096,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["selectedcardid:string",{"_index":255,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{}}}],["selectedthirdmenu",{"_index":1889,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["selectedthirdmenuentry",{"_index":1890,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["selectedthirdmenuentry.url",{"_index":1941,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["selectedurl",{"_index":1936,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["selectedvalues",{"_index":209,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["selectexpirationtime",{"_index":315,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectfilter",{"_index":2586,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectfilteredfeed",{"_index":2587,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selection",{"_index":1127,"title":{},"body":{"components/CardListComponent.html":{},"components/FeedComponent.html":{},"components/NoSelectionComponent.html":{}}}],["selection'},{'name",{"_index":416,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["selection.component",{"_index":1539,"title":{},"body":{"modules/FeedModule.html":{}}}],["selection.component.html",{"_index":2110,"title":{},"body":{"components/NoSelectionComponent.html":{}}}],["selection.component.ts",{"_index":2109,"title":{},"body":{"components/NoSelectionComponent.html":{},"coverage.html":{}}}],["selection.component.ts:14",{"_index":2111,"title":{},"body":{"components/NoSelectionComponent.html":{}}}],["selection.component.ts:18",{"_index":2112,"title":{},"body":{"components/NoSelectionComponent.html":{}}}],["selection/no",{"_index":1538,"title":{},"body":{"modules/FeedModule.html":{},"components/NoSelectionComponent.html":{},"coverage.html":{}}}],["selections",{"_index":2509,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["selectlastcards",{"_index":2588,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectlightcard",{"_index":233,"title":{"classes/SelectLightCard.html":{}},"body":{"classes/AddLightCardFailure.html":{},"injectables/CustomRouterEffects.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["selectlightcard({selectedcardid",{"_index":1320,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["selectlightcardselection",{"_index":2589,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectlightcardsstate",{"_index":2590,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectmaxedretries",{"_index":324,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectmenustate",{"_index":2592,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectmenustatemenu",{"_index":1914,"title":{},"body":{"components/IframeDisplayComponent.html":{},"components/NavbarComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectmenustateselectedmenuentryid",{"_index":1915,"title":{},"body":{"components/IframeDisplayComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectmenustateselectedmenuid",{"_index":1916,"title":{},"body":{"components/IframeDisplayComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectmessage",{"_index":2024,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selector",{"_index":269,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["selectrouterstate",{"_index":313,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["send",{"_index":299,"title":{},"body":{"components/AppComponent.html":{}}}],["separate",{"_index":1926,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["sequentially",{"_index":1599,"title":{},"body":{"classes/Filter.html":{}}}],["serialize",{"_index":1334,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{}}}],["serialize(routerstate",{"_index":1338,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["serializer",{"_index":2159,"title":{},"body":{"modules/StateModule.html":{}}}],["service",{"_index":97,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/FeedFiltersEffects.html":{},"classes/InitAuthStatus.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["services/authentication.service",{"_index":948,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["services/handlebars.service",{"_index":1248,"title":{},"body":{"modules/CardsModule.html":{},"components/DetailComponent.html":{}}}],["services/thirds.service",{"_index":1247,"title":{},"body":{"modules/CardsModule.html":{},"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{}}}],["servicesmodule",{"_index":439,"title":{"modules/ServicesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"index.html":{},"modules.html":{}}}],["servicesmodule.forroot",{"_index":486,"title":{},"body":{"modules/AppModule.html":{}}}],["set",{"_index":1494,"title":{},"body":{"components/DetailsComponent.html":{},"components/TypeFilterComponent.html":{}}}],["set(\"locale",{"_index":2229,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["set(\"version",{"_index":2226,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["setheaders",{"_index":2466,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["settimeout",{"_index":1434,"title":{},"body":{"components/DetailComponent.html":{},"components/DetailsComponent.html":{}}}],["settimeout(()=>this.expandedmenu[index]=false,5000",{"_index":2100,"title":{},"body":{"components/NavbarComponent.html":{}}}],["severity",{"_index":987,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{},"injectables/FilterService.html":{},"miscellaneous/enumerations.html":{}}}],["severity.action",{"_index":1633,"title":{},"body":{"injectables/FilterService.html":{}}}],["severity.alarm",{"_index":1632,"title":{},"body":{"injectables/FilterService.html":{}}}],["severity.notification",{"_index":1637,"title":{},"body":{"injectables/FilterService.html":{}}}],["severity.question",{"_index":1635,"title":{},"body":{"injectables/FilterService.html":{}}}],["simplechanges",{"_index":1476,"title":{},"body":{"components/DetailsComponent.html":{}}}],["size",{"_index":1043,"title":{},"body":{"components/CardComponent.html":{},"components/IconComponent.html":{}}}],["size:string",{"_index":1855,"title":{},"body":{"components/IconComponent.html":{}}}],["skipself",{"_index":2135,"title":{},"body":{"modules/ServicesModule.html":{}}}],["small",{"_index":1041,"title":{},"body":{"components/CardComponent.html":{},"components/IconComponent.html":{}}}],["small:boolean",{"_index":1850,"title":{},"body":{"components/IconComponent.html":{}}}],["snapshot",{"_index":1347,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{}}}],["solid",{"_index":482,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{},"dependencies.html":{}}}],["sortbystartdate",{"_index":2594,"title":{},"body":{"coverage.html":{}}}],["sortbystartdate(card1",{"_index":1115,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["sortcomparer:sortbystartdate",{"_index":1120,"title":{},"body":{"interfaces/CardFeedState.html":{},"miscellaneous/variables.html":{}}}],["sortonkey",{"_index":2540,"title":{},"body":{"coverage.html":{}}}],["sortonkey(key",{"_index":1818,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["sound",{"_index":2679,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"modules/CardsModule.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"classes/Map.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"classes/Message.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"modules/ServicesModule.html":{},"classes/State.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"dependencies.html":{}}}],["spec\\.ts",{"_index":2719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["splitvalue",{"_index":1783,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["sprites",{"_index":1833,"title":{},"body":{"components/IconComponent.html":{}}}],["sprites:string",{"_index":1856,"title":{},"body":{"components/IconComponent.html":{}}}],["src/.../authentication.actions.ts",{"_index":2666,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../authentication.reducer.ts",{"_index":2706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication.selectors.ts",{"_index":2713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication.service.ts",{"_index":2675,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../authentication.state.ts",{"_index":2698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../card",{"_index":2669,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../card.actions.ts",{"_index":2667,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../card.model.ts",{"_index":2680,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../card.reducer.ts",{"_index":2707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../card.selectors.ts",{"_index":2714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../card.state.ts",{"_index":2699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config.actions.ts",{"_index":2671,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../config.selectors.ts",{"_index":2715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config.state.ts",{"_index":2700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":2704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":2703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.vps.ts",{"_index":2702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../feed.actions.ts",{"_index":2672,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../feed.selectors.ts",{"_index":2712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../feed.state.ts",{"_index":2705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../filter.service.ts",{"_index":2673,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.ts",{"_index":2697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../light",{"_index":2674,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../menu.actions.ts",{"_index":2676,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../menu.reducer.ts",{"_index":2708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../menu.selectors.ts",{"_index":2717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../menu.state.ts",{"_index":2711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../message.model.ts",{"_index":2677,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../router.selectors.ts",{"_index":2716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../router.state.ts",{"_index":2710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test.ts",{"_index":2701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../thirds.model.ts",{"_index":2665,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../translate.config.ts",{"_index":2709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":490,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":266,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:27",{"_index":305,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:28",{"_index":302,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:29",{"_index":301,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:30",{"_index":303,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:31",{"_index":300,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:32",{"_index":288,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:40",{"_index":289,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:50",{"_index":292,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":443,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/components/icon/icon.component.ts",{"_index":1828,"title":{},"body":{"components/IconComponent.html":{},"coverage.html":{}}}],["src/app/components/icon/icon.component.ts:18",{"_index":1841,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:19",{"_index":1844,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:20",{"_index":1843,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:21",{"_index":1839,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:22",{"_index":1840,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:23",{"_index":1842,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:24",{"_index":1846,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:25",{"_index":1847,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:26",{"_index":1838,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/icon/icon.component.ts:32",{"_index":1845,"title":{},"body":{"components/IconComponent.html":{}}}],["src/app/components/login/login.component.ts",{"_index":2002,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["src/app/components/login/login.component.ts:27",{"_index":2018,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login/login.component.ts:28",{"_index":2022,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login/login.component.ts:29",{"_index":2020,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login/login.component.ts:30",{"_index":2019,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login/login.component.ts:32",{"_index":2013,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login/login.component.ts:36",{"_index":2015,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login/login.component.ts:51",{"_index":2016,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login/login.component.ts:59",{"_index":2017,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login/login.component.ts:63",{"_index":2014,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts",{"_index":2073,"title":{},"body":{"components/NavbarComponent.html":{},"coverage.html":{}}}],["src/app/components/navbar/navbar.component.ts:27",{"_index":2086,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:28",{"_index":2087,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:29",{"_index":2085,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:30",{"_index":2084,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:31",{"_index":2079,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:36",{"_index":2081,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:50",{"_index":2080,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:54",{"_index":2089,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:58",{"_index":2083,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/model/card",{"_index":2681,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/model/card.model.ts",{"_index":980,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/app/model/card.model.ts:12",{"_index":993,"title":{},"body":{"classes/Card.html":{}}}],["src/app/model/card.model.ts:41",{"_index":1367,"title":{},"body":{"classes/Detail.html":{}}}],["src/app/model/feed",{"_index":1561,"title":{},"body":{"classes/Filter.html":{},"coverage.html":{}}}],["src/app/model/i18n.model.ts",{"_index":1825,"title":{},"body":{"classes/I18n.html":{},"coverage.html":{}}}],["src/app/model/i18n.model.ts:10",{"_index":1827,"title":{},"body":{"classes/I18n.html":{}}}],["src/app/model/light",{"_index":2683,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/model/map.ts",{"_index":2047,"title":{},"body":{"classes/Map.html":{},"coverage.html":{}}}],["src/app/model/map.ts:8",{"_index":2050,"title":{},"body":{"classes/Map.html":{}}}],["src/app/model/message.model.ts",{"_index":2067,"title":{},"body":{"classes/Message.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/app/model/message.model.ts:10",{"_index":2070,"title":{},"body":{"classes/Message.html":{}}}],["src/app/model/thirds.model.ts",{"_index":140,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/app/model/thirds.model.ts:115",{"_index":2114,"title":{},"body":{"classes/ParameterListItem.html":{}}}],["src/app/model/thirds.model.ts:18",{"_index":2180,"title":{},"body":{"classes/Third.html":{}}}],["src/app/model/thirds.model.ts:29",{"_index":2183,"title":{},"body":{"classes/ThirdMenuEntry.html":{}}}],["src/app/model/thirds.model.ts:38",{"_index":2182,"title":{},"body":{"classes/ThirdMenu.html":{}}}],["src/app/model/thirds.model.ts:47",{"_index":2122,"title":{},"body":{"classes/Process.html":{}}}],["src/app/model/thirds.model.ts:5",{"_index":2178,"title":{},"body":{"classes/Third.html":{}}}],["src/app/model/thirds.model.ts:54",{"_index":2145,"title":{},"body":{"classes/State.html":{}}}],["src/app/model/thirds.model.ts:69",{"_index":156,"title":{},"body":{"classes/Action.html":{}}}],["src/app/model/thirds.model.ts:98",{"_index":1963,"title":{},"body":{"classes/Input.html":{}}}],["src/app/modules/archives/archives",{"_index":617,"title":{},"body":{"modules/ArchivesRoutingModule.html":{}}}],["src/app/modules/archives/archives.component.ts",{"_index":604,"title":{},"body":{"components/ArchivesComponent.html":{},"coverage.html":{}}}],["src/app/modules/archives/archives.component.ts:15",{"_index":607,"title":{},"body":{"components/ArchivesComponent.html":{}}}],["src/app/modules/archives/archives.component.ts:19",{"_index":608,"title":{},"body":{"components/ArchivesComponent.html":{}}}],["src/app/modules/archives/archives.module.ts",{"_index":615,"title":{},"body":{"modules/ArchivesModule.html":{}}}],["src/app/modules/cards/cards.module.ts",{"_index":1238,"title":{},"body":{"modules/CardsModule.html":{}}}],["src/app/modules/cards/cards.module.ts:28",{"_index":1240,"title":{},"body":{"modules/CardsModule.html":{}}}],["src/app/modules/cards/components/card",{"_index":1053,"title":{},"body":{"components/CardDetailsComponent.html":{},"coverage.html":{}}}],["src/app/modules/cards/components/card/card.component.ts",{"_index":1001,"title":{},"body":{"components/CardComponent.html":{},"coverage.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:24",{"_index":1011,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:25",{"_index":1010,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:26",{"_index":1014,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:27",{"_index":1009,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:35",{"_index":1013,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:40",{"_index":1012,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/card/card.component.ts:53",{"_index":1016,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts",{"_index":1368,"title":{},"body":{"components/DetailComponent.html":{},"coverage.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:104",{"_index":1390,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:21",{"_index":1398,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:22",{"_index":1386,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:23",{"_index":1385,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:24",{"_index":1400,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:25",{"_index":1384,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:33",{"_index":1395,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:38",{"_index":1394,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:53",{"_index":1393,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:69",{"_index":1402,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:73",{"_index":1396,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/detail/detail.component.ts:88",{"_index":1392,"title":{},"body":{"components/DetailComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts",{"_index":1465,"title":{},"body":{"components/DetailsComponent.html":{},"coverage.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:18",{"_index":1484,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:19",{"_index":1473,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:20",{"_index":1472,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:25",{"_index":1474,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:34",{"_index":1481,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:44",{"_index":1480,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:53",{"_index":1485,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/components/details/details.component.ts:57",{"_index":1477,"title":{},"body":{"components/DetailsComponent.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts",{"_index":1705,"title":{},"body":{"injectables/HandlebarsService.html":{},"coverage.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:103",{"_index":1736,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:117",{"_index":1730,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:123",{"_index":1740,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:140",{"_index":1741,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:182",{"_index":1735,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:208",{"_index":1743,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:226",{"_index":1733,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:23",{"_index":1725,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:240",{"_index":1734,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:248",{"_index":1738,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:255",{"_index":1737,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:262",{"_index":1739,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:44",{"_index":1727,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:49",{"_index":1729,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:62",{"_index":1732,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:91",{"_index":1731,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/cards/services/handlebars.service.ts:97",{"_index":1742,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["src/app/modules/feed/components/card",{"_index":1123,"title":{},"body":{"components/CardListComponent.html":{},"components/FiltersComponent.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["src/app/modules/feed/components/no",{"_index":2108,"title":{},"body":{"components/NoSelectionComponent.html":{},"coverage.html":{}}}],["src/app/modules/feed/components/time",{"_index":2422,"title":{},"body":{"components/TimeLineComponent.html":{},"coverage.html":{}}}],["src/app/modules/feed/feed",{"_index":1553,"title":{},"body":{"modules/FeedRoutingModule.html":{}}}],["src/app/modules/feed/feed.component.ts",{"_index":1506,"title":{},"body":{"components/FeedComponent.html":{},"coverage.html":{}}}],["src/app/modules/feed/feed.component.ts:23",{"_index":1512,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/modules/feed/feed.component.ts:24",{"_index":1509,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/modules/feed/feed.component.ts:29",{"_index":1511,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/modules/feed/feed.component.ts:38",{"_index":1510,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/modules/feed/feed.module.ts",{"_index":1534,"title":{},"body":{"modules/FeedModule.html":{}}}],["src/app/modules/thirdparty/iframedisplay.component.ts",{"_index":1880,"title":{},"body":{"components/IframeDisplayComponent.html":{},"coverage.html":{}}}],["src/app/modules/thirdparty/iframedisplay.component.ts:101",{"_index":1898,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["src/app/modules/thirdparty/iframedisplay.component.ts:30",{"_index":1901,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["src/app/modules/thirdparty/iframedisplay.component.ts:31",{"_index":1900,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["src/app/modules/thirdparty/iframedisplay.component.ts:32",{"_index":1893,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["src/app/modules/thirdparty/iframedisplay.component.ts:38",{"_index":1899,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["src/app/modules/thirdparty/iframedisplay.component.ts:69",{"_index":1903,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["src/app/modules/thirdparty/iframedisplay.component.ts:73",{"_index":1905,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["src/app/modules/thirdparty/iframedisplay.component.ts:77",{"_index":1907,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["src/app/modules/thirdparty/iframedisplay.component.ts:81",{"_index":1909,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["src/app/modules/thirdparty/iframedisplay.component.ts:85",{"_index":1911,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["src/app/modules/thirdparty/iframedisplay.component.ts:89",{"_index":1913,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["src/app/modules/thirdparty/iframedisplay.component.ts:95",{"_index":1896,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["src/app/modules/thirdparty/thirdparty",{"_index":2191,"title":{},"body":{"modules/ThirdpartyRoutingModule.html":{}}}],["src/app/modules/thirdparty/thirdparty.module.ts",{"_index":2189,"title":{},"body":{"modules/ThirdpartyModule.html":{}}}],["src/app/services/authentication.service.ts",{"_index":620,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/app/services/authentication.service.ts:266",{"_index":626,"title":{},"body":{"classes/AuthObject.html":{}}}],["src/app/services/authentication.service.ts:269",{"_index":628,"title":{},"body":{"classes/AuthObject.html":{}}}],["src/app/services/authentication.service.ts:270",{"_index":630,"title":{},"body":{"classes/AuthObject.html":{}}}],["src/app/services/authentication.service.ts:271",{"_index":629,"title":{},"body":{"classes/AuthObject.html":{}}}],["src/app/services/authentication.service.ts:272",{"_index":631,"title":{},"body":{"classes/AuthObject.html":{}}}],["src/app/services/authentication.service.ts:281",{"_index":1251,"title":{},"body":{"classes/CheckTokenResponse.html":{}}}],["src/app/services/authentication.service.ts:283",{"_index":1254,"title":{},"body":{"classes/CheckTokenResponse.html":{}}}],["src/app/services/authentication.service.ts:284",{"_index":1253,"title":{},"body":{"classes/CheckTokenResponse.html":{}}}],["src/app/services/authentication.service.ts:285",{"_index":1252,"title":{},"body":{"classes/CheckTokenResponse.html":{}}}],["src/app/services/card.service.ts",{"_index":1159,"title":{},"body":{"injectables/CardService.html":{},"coverage.html":{}}}],["src/app/services/card.service.ts:20",{"_index":1182,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:21",{"_index":1181,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:22",{"_index":1168,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:30",{"_index":1175,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:34",{"_index":1173,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:44",{"_index":1176,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:48",{"_index":1171,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/card.service.ts:72",{"_index":1179,"title":{},"body":{"injectables/CardService.html":{}}}],["src/app/services/config.service.ts",{"_index":1293,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["src/app/services/config.service.ts:18",{"_index":1296,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/app/services/config.service.ts:24",{"_index":1297,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/app/services/filter.service.ts",{"_index":1615,"title":{},"body":{"injectables/FilterService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/app/services/filter.service.ts:17",{"_index":1621,"title":{},"body":{"injectables/FilterService.html":{}}}],["src/app/services/filter.service.ts:23",{"_index":1627,"title":{},"body":{"injectables/FilterService.html":{}}}],["src/app/services/filter.service.ts:28",{"_index":1625,"title":{},"body":{"injectables/FilterService.html":{}}}],["src/app/services/filter.service.ts:52",{"_index":1623,"title":{},"body":{"injectables/FilterService.html":{}}}],["src/app/services/filter.service.ts:60",{"_index":1624,"title":{},"body":{"injectables/FilterService.html":{}}}],["src/app/services/filter.service.ts:82",{"_index":1622,"title":{},"body":{"injectables/FilterService.html":{}}}],["src/app/services/guid.service.ts",{"_index":1662,"title":{},"body":{"classes/GuidService.html":{},"coverage.html":{}}}],["src/app/services/guid.service.ts:16",{"_index":1665,"title":{},"body":{"classes/GuidService.html":{}}}],["src/app/services/guid.service.ts:22",{"_index":1666,"title":{},"body":{"classes/GuidService.html":{}}}],["src/app/services/guid.service.ts:26",{"_index":1667,"title":{},"body":{"classes/GuidService.html":{}}}],["src/app/services/interceptors.service.ts",{"_index":2447,"title":{},"body":{"interceptors/TokenInjector.html":{},"coverage.html":{}}}],["src/app/services/interceptors.service.ts:14",{"_index":2451,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["src/app/services/interceptors.service.ts:20",{"_index":2457,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["src/app/services/interceptors.service.ts:25",{"_index":2454,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["src/app/services/services.module.ts",{"_index":2133,"title":{},"body":{"modules/ServicesModule.html":{}}}],["src/app/services/services.module.ts:42",{"_index":2134,"title":{},"body":{"modules/ServicesModule.html":{}}}],["src/app/services/thirds.service.ts",{"_index":2194,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{}}}],["src/app/services/thirds.service.ts:109",{"_index":2326,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:123",{"_index":2331,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:129",{"_index":2333,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:136",{"_index":2337,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:188",{"_index":2338,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:193",{"_index":2198,"title":{},"body":{"classes/ThirdsI18nLoader.html":{}}}],["src/app/services/thirds.service.ts:197",{"_index":2200,"title":{},"body":{"classes/ThirdsI18nLoader.html":{}}}],["src/app/services/thirds.service.ts:23",{"_index":2341,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:24",{"_index":2339,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:25",{"_index":2340,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:26",{"_index":2342,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:27",{"_index":2324,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:38",{"_index":2335,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:51",{"_index":2329,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:59",{"_index":2327,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:69",{"_index":2325,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/thirds.service.ts:76",{"_index":2328,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["src/app/services/time.service.ts",{"_index":2429,"title":{},"body":{"injectables/TimeService.html":{},"coverage.html":{}}}],["src/app/services/time.service.ts:12",{"_index":2433,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/services/time.service.ts:17",{"_index":2436,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/services/time.service.ts:21",{"_index":2439,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/services/time.service.ts:25",{"_index":2435,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/store/actions/authentication.actions.ts",{"_index":6,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/authentication.actions.ts:109",{"_index":2124,"title":{},"body":{"classes/RejectLogIn.html":{}}}],["src/app/store/actions/authentication.actions.ts:112",{"_index":2125,"title":{},"body":{"classes/RejectLogIn.html":{}}}],["src/app/store/actions/authentication.actions.ts:126",{"_index":138,"title":{},"body":{"classes/AcceptLogOut.html":{}}}],["src/app/store/actions/authentication.actions.ts:142",{"_index":139,"title":{},"body":{"classes/AcceptLogOutSuccess.html":{}}}],["src/app/store/actions/authentication.actions.ts:26",{"_index":2116,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["src/app/store/actions/authentication.actions.ts:27",{"_index":2119,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["src/app/store/actions/authentication.actions.ts:28",{"_index":2117,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["src/app/store/actions/authentication.actions.ts:29",{"_index":2120,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["src/app/store/actions/authentication.actions.ts:30",{"_index":2118,"title":{},"body":{"classes/PayloadForSuccessfulAuthentication.html":{}}}],["src/app/store/actions/authentication.actions.ts:39",{"_index":1959,"title":{},"body":{"classes/InitAuthStatus.html":{}}}],["src/app/store/actions/authentication.actions.ts:41",{"_index":1960,"title":{},"body":{"classes/InitAuthStatus.html":{}}}],["src/app/store/actions/authentication.actions.ts:50",{"_index":1249,"title":{},"body":{"classes/CheckAuthenticationStatus.html":{}}}],["src/app/store/actions/authentication.actions.ts:65",{"_index":43,"title":{},"body":{"classes/AcceptLogIn.html":{}}}],["src/app/store/actions/authentication.actions.ts:68",{"_index":48,"title":{},"body":{"classes/AcceptLogIn.html":{}}}],["src/app/store/actions/authentication.actions.ts:78",{"_index":2468,"title":{},"body":{"classes/TryToLogIn.html":{}}}],["src/app/store/actions/authentication.actions.ts:81",{"_index":2469,"title":{},"body":{"classes/TryToLogIn.html":{}}}],["src/app/store/actions/authentication.actions.ts:92",{"_index":2470,"title":{},"body":{"classes/TryToLogOut.html":{}}}],["src/app/store/actions/card.actions.ts",{"_index":1255,"title":{},"body":{"classes/ClearCard.html":{},"classes/HandleUnexpectedError.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/card.actions.ts:20",{"_index":1257,"title":{},"body":{"classes/ClearCard.html":{}}}],["src/app/store/actions/card.actions.ts:23",{"_index":1980,"title":{},"body":{"classes/LoadCard.html":{}}}],["src/app/store/actions/card.actions.ts:26",{"_index":1981,"title":{},"body":{"classes/LoadCard.html":{}}}],["src/app/store/actions/card.actions.ts:29",{"_index":1982,"title":{},"body":{"classes/LoadCardFailure.html":{}}}],["src/app/store/actions/card.actions.ts:32",{"_index":1983,"title":{},"body":{"classes/LoadCardFailure.html":{}}}],["src/app/store/actions/card.actions.ts:36",{"_index":1984,"title":{},"body":{"classes/LoadCardSuccess.html":{}}}],["src/app/store/actions/card.actions.ts:39",{"_index":1985,"title":{},"body":{"classes/LoadCardSuccess.html":{}}}],["src/app/store/actions/card.actions.ts:44",{"_index":1672,"title":{},"body":{"classes/HandleUnexpectedError.html":{}}}],["src/app/store/actions/card.actions.ts:47",{"_index":1673,"title":{},"body":{"classes/HandleUnexpectedError.html":{}}}],["src/app/store/actions/config.actions.ts",{"_index":1674,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/config.actions.ts:18",{"_index":1986,"title":{},"body":{"classes/LoadConfig.html":{}}}],["src/app/store/actions/config.actions.ts:21",{"_index":1987,"title":{},"body":{"classes/LoadConfigFailure.html":{}}}],["src/app/store/actions/config.actions.ts:24",{"_index":1988,"title":{},"body":{"classes/LoadConfigFailure.html":{}}}],["src/app/store/actions/config.actions.ts:29",{"_index":1989,"title":{},"body":{"classes/LoadConfigSuccess.html":{}}}],["src/app/store/actions/config.actions.ts:32",{"_index":1990,"title":{},"body":{"classes/LoadConfigSuccess.html":{}}}],["src/app/store/actions/config.actions.ts:38",{"_index":1675,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{}}}],["src/app/store/actions/config.actions.ts:40",{"_index":1676,"title":{},"body":{"classes/HandleUnexpectedError-1.html":{}}}],["src/app/store/actions/feed.actions.ts",{"_index":587,"title":{},"body":{"classes/ApplyFilter.html":{},"classes/InitFilters.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/feed.actions.ts:18",{"_index":588,"title":{},"body":{"classes/ApplyFilter.html":{}}}],["src/app/store/actions/feed.actions.ts:20",{"_index":589,"title":{},"body":{"classes/ApplyFilter.html":{}}}],["src/app/store/actions/feed.actions.ts:24",{"_index":1961,"title":{},"body":{"classes/InitFilters.html":{}}}],["src/app/store/actions/feed.actions.ts:27",{"_index":1962,"title":{},"body":{"classes/InitFilters.html":{}}}],["src/app/store/actions/light",{"_index":212,"title":{},"body":{"classes/AddLightCardFailure.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/menu.actions.ts",{"_index":1686,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/UpdateSelectedMenu.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/store/actions/menu.actions.ts:20",{"_index":1997,"title":{},"body":{"classes/LoadMenu.html":{}}}],["src/app/store/actions/menu.actions.ts:27",{"_index":1998,"title":{},"body":{"classes/LoadMenuFailure.html":{}}}],["src/app/store/actions/menu.actions.ts:30",{"_index":1999,"title":{},"body":{"classes/LoadMenuFailure.html":{}}}],["src/app/store/actions/menu.actions.ts:35",{"_index":2000,"title":{},"body":{"classes/LoadMenuSuccess.html":{}}}],["src/app/store/actions/menu.actions.ts:38",{"_index":2001,"title":{},"body":{"classes/LoadMenuSuccess.html":{}}}],["src/app/store/actions/menu.actions.ts:43",{"_index":1687,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{}}}],["src/app/store/actions/menu.actions.ts:46",{"_index":1688,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{}}}],["src/app/store/actions/menu.actions.ts:56",{"_index":2520,"title":{},"body":{"classes/UpdateSelectedMenu.html":{}}}],["src/app/store/actions/menu.actions.ts:59",{"_index":2521,"title":{},"body":{"classes/UpdateSelectedMenu.html":{}}}],["src/app/store/effects/authentication.effects.ts",{"_index":837,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/authentication.effects.ts:110",{"_index":943,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:119",{"_index":860,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:136",{"_index":867,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:155",{"_index":922,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:179",{"_index":906,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:224",{"_index":855,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:246",{"_index":858,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:40",{"_index":845,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:61",{"_index":916,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/authentication.effects.ts:83",{"_index":930,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["src/app/store/effects/card",{"_index":1130,"title":{},"body":{"injectables/CardOperationEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/card.effects.ts",{"_index":1076,"title":{},"body":{"injectables/CardEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/card.effects.ts:20",{"_index":1078,"title":{},"body":{"injectables/CardEffects.html":{}}}],["src/app/store/effects/card.effects.ts:30",{"_index":1085,"title":{},"body":{"injectables/CardEffects.html":{}}}],["src/app/store/effects/config.effects.ts",{"_index":1263,"title":{},"body":{"injectables/ConfigEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/config.effects.ts:21",{"_index":1267,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["src/app/store/effects/config.effects.ts:54",{"_index":1273,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["src/app/store/effects/config.effects.ts:71",{"_index":1276,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["src/app/store/effects/custom",{"_index":1307,"title":{},"body":{"injectables/CustomRouterEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/feed",{"_index":1521,"title":{},"body":{"injectables/FeedFiltersEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/light",{"_index":1964,"title":{},"body":{"injectables/LightCardEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/menu.effects.ts",{"_index":2051,"title":{},"body":{"injectables/MenuEffects.html":{},"coverage.html":{}}}],["src/app/store/effects/menu.effects.ts:19",{"_index":2052,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["src/app/store/effects/menu.effects.ts:29",{"_index":2060,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["src/app/store/index.ts",{"_index":524,"title":{},"body":{"interfaces/AppState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/reducers/authentication.reducer.ts",{"_index":2563,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/reducers/card.reducer.ts",{"_index":2569,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/reducers/config.reducer.ts",{"_index":2571,"title":{},"body":{"coverage.html":{}}}],["src/app/store/reducers/light",{"_index":2572,"title":{},"body":{"coverage.html":{}}}],["src/app/store/reducers/menu.reducer.ts",{"_index":2574,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/authentication.selectors.ts",{"_index":2575,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/card.selectors.ts",{"_index":2577,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/config.selectors.ts",{"_index":2581,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/feed.selectors.ts",{"_index":2584,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/menu.selectors.ts",{"_index":2591,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/selectors/router.selectors.ts",{"_index":2593,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/state.module.ts",{"_index":2148,"title":{},"body":{"modules/StateModule.html":{}}}],["src/app/store/state.module.ts:33",{"_index":2149,"title":{},"body":{"modules/StateModule.html":{}}}],["src/app/store/states/authentication.state.ts",{"_index":833,"title":{},"body":{"interfaces/AuthState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/card.state.ts",{"_index":1230,"title":{},"body":{"interfaces/CardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/config.state.ts",{"_index":1304,"title":{},"body":{"interfaces/ConfigState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/feed.state.ts",{"_index":1093,"title":{},"body":{"interfaces/CardFeedState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/menu.state.ts",{"_index":2061,"title":{},"body":{"interfaces/MenuState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/router.state.ts",{"_index":1331,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/store/states/router.state.ts:37",{"_index":2127,"title":{},"body":{"classes/RouterStateUrl.html":{}}}],["src/app/store/states/router.state.ts:48",{"_index":1340,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{}}}],["src/app/store/states/router.state.ts:55",{"_index":1337,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{}}}],["src/app/translate.config.ts",{"_index":2595,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.prod.ts",{"_index":2599,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":2600,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.vps.ts",{"_index":2601,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test.ts",{"_index":2602,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/tests/helpers.ts",{"_index":2605,"title":{},"body":{"coverage.html":{}}}],["src/tests/mocks/thirds.service.mock.ts",{"_index":2344,"title":{},"body":{"classes/ThirdsServiceMock.html":{},"coverage.html":{}}}],["src/tests/mocks/thirds.service.mock.ts:14",{"_index":2346,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["src/tests/mocks/thirds.service.mock.ts:5",{"_index":2345,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["sse",{"_index":1204,"title":{},"body":{"injectables/CardService.html":{}}}],["start",{"_index":2414,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["startdate",{"_index":985,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{}}}],["state",{"_index":11,"title":{"classes/State.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardDetailsComponent.html":{},"interfaces/CardFeedState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"classes/Filter.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitAuthStatus.html":{},"classes/Input.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdateSelectedMenu.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["state.actions[actionid",{"_index":1447,"title":{},"body":{"components/DetailComponent.html":{}}}],["state.card",{"_index":2768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.children",{"_index":1364,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["state.config",{"_index":2776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.expirationdate",{"_index":2732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.feed",{"_index":2762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.filters",{"_index":2753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.identifier",{"_index":2738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.lastcards",{"_index":2759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.menu",{"_index":2789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.params",{"_index":1362,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["state.selectedcardid",{"_index":2740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.token",{"_index":2739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state:appstate",{"_index":2761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":2525,"title":{},"body":{"coverage.html":{}}}],["statemodule",{"_index":440,"title":{"modules/StateModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StateModule.html":{},"index.html":{},"modules.html":{}}}],["statemodule.forroot",{"_index":485,"title":{},"body":{"modules/AppModule.html":{}}}],["states",{"_index":2123,"title":{},"body":{"classes/Process.html":{}}}],["states?:ofmap",{"_index":189,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["static",{"_index":202,"title":{},"body":{"classes/Action.html":{},"classes/AuthObject.html":{},"modules/CardsModule.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/RouterStateUrl.html":{},"modules/ServicesModule.html":{},"classes/State.html":{},"modules/StateModule.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"miscellaneous/enumerations.html":{}}}],["status",{"_index":62,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"components/TimeFilterComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/enumerations.html":{}}}],["status.action",{"_index":1640,"title":{},"body":{"injectables/FilterService.html":{}}}],["status.alarm",{"_index":1638,"title":{},"body":{"injectables/FilterService.html":{}}}],["status.end",{"_index":1645,"title":{},"body":{"injectables/FilterService.html":{}}}],["status.notification",{"_index":1642,"title":{},"body":{"injectables/FilterService.html":{}}}],["status.question",{"_index":1641,"title":{},"body":{"injectables/FilterService.html":{}}}],["status.start",{"_index":1644,"title":{},"body":{"injectables/FilterService.html":{}}}],["still",{"_index":750,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["stillvalid",{"_index":757,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["stops",{"_index":1596,"title":{},"body":{"classes/Filter.html":{}}}],["store",{"_index":115,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"injectables/LightCardEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"modules/StateModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"dependencies.html":{}}}],["store.select(buildconfigselector('security",{"_index":662,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["store/index",{"_index":2206,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["storeconfig",{"_index":582,"title":{},"body":{"interfaces/AppState.html":{},"modules/StateModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stored",{"_index":748,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["storedevtoolsmodule",{"_index":2152,"title":{},"body":{"modules/StateModule.html":{}}}],["storedevtoolsmodule.instrument",{"_index":2161,"title":{},"body":{"modules/StateModule.html":{}}}],["storefreeze",{"_index":542,"title":{},"body":{"interfaces/AppState.html":{},"miscellaneous/variables.html":{}}}],["storemodule",{"_index":2150,"title":{},"body":{"modules/StateModule.html":{}}}],["storemodule.forroot(appreducer",{"_index":2156,"title":{},"body":{"modules/StateModule.html":{}}}],["storerouterconnectingmodule",{"_index":2155,"title":{},"body":{"modules/StateModule.html":{}}}],["storerouterconnectingmodule.forroot",{"_index":2157,"title":{},"body":{"modules/StateModule.html":{}}}],["string",{"_index":79,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/Input.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/Map.html":{},"interfaces/MenuState.html":{},"classes/Message.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"injectables/TimeService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdateSelectedMenu.html":{},"miscellaneous/variables.html":{}}}],["string):observable",{"_index":1766,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["string,string],thirdmenu",{"_index":1935,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["structure",{"_index":2165,"title":{},"body":{"modules/StateModule.html":{}}}],["style",{"_index":1414,"title":{},"body":{"components/DetailComponent.html":{}}}],["stylename",{"_index":2233,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["styles",{"_index":263,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/Detail.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/TypeFilterComponent.html":{}}}],["styleurls",{"_index":271,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/FeedComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/TypeFilterComponent.html":{}}}],["sub",{"_index":674,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["subject",{"_index":373,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"injectables/CardService.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["submitted",{"_index":937,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["subscribe",{"_index":1132,"title":{},"body":{"injectables/CardOperationEffects.html":{},"components/DetailComponent.html":{}}}],["subscribe((maxedretries=>this.maxedretries=maxedretries",{"_index":355,"title":{},"body":{"components/AppComponent.html":{}}}],["subscribe(card",{"_index":1065,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["subscribe(form",{"_index":2410,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["subscribe(isauth",{"_index":346,"title":{},"body":{"components/AppComponent.html":{}}}],["subscribe(loaded",{"_index":351,"title":{},"body":{"components/AppComponent.html":{}}}],["subscribe(m=>this.loginmessage=m",{"_index":2030,"title":{},"body":{"components/LoginComponent.html":{}}}],["subscribe(oauth2conf",{"_index":663,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["subscribe(open=>this.open",{"_index":1029,"title":{},"body":{"components/CardComponent.html":{}}}],["subscribe(provider=>this.codeprovider={name:provider",{"_index":2032,"title":{},"body":{"components/LoginComponent.html":{}}}],["subscribe(third",{"_index":1073,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["subscribetoloadi18n",{"_index":2323,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["subscribetoloadi18n(observable",{"_index":2279,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["subscription",{"_index":297,"title":{},"body":{"components/AppComponent.html":{}}}],["subtitle",{"_index":1045,"title":{},"body":{"components/CardComponent.html":{}}}],["success",{"_index":76,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AddLightCardFailure.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/ClearCard.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitAuthStatus.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["success/message",{"_index":1275,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["such",{"_index":767,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["summary",{"_index":991,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{}}}],["support",{"_index":2691,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":478,"title":{},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{},"dependencies.html":{},"modules.html":{}}}],["svgpanzoom(document.getelementbyid('${svguid",{"_index":1799,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["switch",{"_index":961,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{}}}],["switch(operator",{"_index":1788,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["switch_list",{"_index":200,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"miscellaneous/enumerations.html":{}}}],["switchmap",{"_index":878,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["switchmap(([payload",{"_index":882,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["switchmap((action",{"_index":925,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["switchmap((action:loadlightcardssuccess",{"_index":1969,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["switchmap((af:applyfilter",{"_index":1154,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["switchmap((ids:string",{"_index":2283,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["switchmap(action",{"_index":1080,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"injectables/MenuEffects.html":{}}}],["switchmap(menu=>zip(of(menu),this.service.loadi18nformenuentries(menu",{"_index":2055,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["switchmap(ts=>from(ts",{"_index":2258,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["system",{"_index":126,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["t",{"_index":2049,"title":{},"body":{"classes/Map.html":{}}}],["t.i18nlabelkey",{"_index":2263,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["t.menuentries",{"_index":2264,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["t.version",{"_index":2262,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["tab",{"_index":1493,"title":{},"body":{"components/DetailsComponent.html":{}}}],["tab.active",{"_index":1492,"title":{},"body":{"components/DetailsComponent.html":{}}}],["table",{"_index":2510,"title":{},"body":{"components/TypeFilterComponent.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2628,"title":{},"body":{"coverage.html":{}}}],["tabs",{"_index":1499,"title":{},"body":{"components/DetailsComponent.html":{}}}],["take",{"_index":294,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationEffects.html":{},"classes/Filter.html":{}}}],["takes",{"_index":1345,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/Filter.html":{},"classes/RouterStateUrl.html":{}}}],["takeuntil",{"_index":1157,"title":{},"body":{"injectables/CardOperationEffects.html":{},"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["takeuntil(this.ngunsubscribe",{"_index":2405,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["takeuntil(this.ngunsubscribe$)).subscribe",{"_index":2403,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["takeuntil(this.service.unsubscribe",{"_index":1138,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["tap",{"_index":637,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckTokenResponse.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["tap(authenticationservice.saveauthenticationinformation",{"_index":738,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["tap(t=>object.setprototypeof(t,third.prototype",{"_index":2223,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["tap(t=>this.templatecache[key]=t",{"_index":1774,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["tap(t=>this.thirdcache.set(key,t",{"_index":2224,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["tap(test=>console.log(`loaded",{"_index":1971,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["tells",{"_index":869,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["template",{"_index":262,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["templatecache",{"_index":1706,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["templatecache:map",{"_index":1746,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["templatename",{"_index":1000,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{},"injectables/HandlebarsService.html":{}}}],["templates",{"_index":2173,"title":{},"body":{"classes/Third.html":{}}}],["templates?:string",{"_index":168,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["templateurl",{"_index":273,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["templateurl:'icon.component.html",{"_index":1848,"title":{},"body":{"components/IconComponent.html":{}}}],["terms",{"_index":374,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{}}}],["test",{"_index":830,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["test_filter",{"_index":1657,"title":{},"body":{"injectables/FilterService.html":{},"miscellaneous/enumerations.html":{}}}],["text",{"_index":197,"title":{},"body":{"classes/Action.html":{},"components/CardComponent.html":{},"components/DetailComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/enumerations.html":{}}}],["that.time.currenttime().valueof",{"_index":1813,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["third",{"_index":164,"title":{"classes/Third.html":{}},"body":{"classes/Action.html":{},"components/DetailComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{}}}],["third,html",{"_index":1431,"title":{},"body":{"components/DetailComponent.html":{}}}],["third.extractstate(this.card",{"_index":1074,"title":{},"body":{"components/CardDetailsComponent.html":{},"components/DetailComponent.html":{}}}],["thirdcache",{"_index":2212,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["thirdmenu",{"_index":185,"title":{"classes/ThirdMenu.html":{}},"body":{"classes/Action.html":{},"classes/HandleUnexpectedError-3.html":{},"components/IframeDisplayComponent.html":{},"classes/Input.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"interfaces/MenuState.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"classes/ThirdsServiceMock.html":{},"classes/UpdateSelectedMenu.html":{},"coverage.html":{}}}],["thirdmenu('t1",{"_index":2348,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["thirdmenu('t2",{"_index":2356,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["thirdmenu(t.name",{"_index":2261,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["thirdmenu.entries.filter((menuentry",{"_index":1952,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["thirdmenu.id",{"_index":1951,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["thirdmenuentry",{"_index":182,"title":{"classes/ThirdMenuEntry.html":{}},"body":{"classes/Action.html":{},"components/IframeDisplayComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsServiceMock.html":{},"coverage.html":{}}}],["thirdmenuentry('id1",{"_index":2350,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["thirdmenuentry('id2",{"_index":2353,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["thirdmenuentry('id3",{"_index":2358,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["thirdmenus",{"_index":1895,"title":{},"body":{"components/IframeDisplayComponent.html":{},"components/NavbarComponent.html":{}}}],["thirdmenus.filter((thirdmenu",{"_index":1950,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["thirdname",{"_index":2336,"title":{},"body":{"injectables/ThirdsService.html":{}}}],["thirdname}.${version",{"_index":2218,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["thirdparty",{"_index":507,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ThirdpartyModule.html":{}}}],["thirdpartymodule",{"_index":2184,"title":{"modules/ThirdpartyModule.html":{}},"body":{"modules/ThirdpartyModule.html":{},"index.html":{},"modules.html":{}}}],["thirdpartyroutingmodule",{"_index":2188,"title":{"modules/ThirdpartyRoutingModule.html":{}},"body":{"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"index.html":{},"modules.html":{}}}],["thirds",{"_index":1380,"title":{},"body":{"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{},"miscellaneous/variables.html":{}}}],["thirdservice",{"_index":1966,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["thirdsi18nloader",{"_index":2193,"title":{"classes/ThirdsI18nLoader.html":{}},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{}}}],["thirdsi18nloader(thirdsservice",{"_index":2315,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["thirdsi18nloaderfactory",{"_index":2554,"title":{},"body":{"coverage.html":{}}}],["thirdsi18nloaderfactory(thirdsservice",{"_index":2314,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["thirdsservice",{"_index":1057,"title":{"injectables/ThirdsService.html":{}},"body":{"components/CardDetailsComponent.html":{},"modules/CardsModule.html":{},"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"coverage.html":{},"index.html":{}}}],["thirdsservicemock",{"_index":2343,"title":{"classes/ThirdsServiceMock.html":{}},"body":{"classes/ThirdsServiceMock.html":{},"coverage.html":{}}}],["thirdsurl",{"_index":2208,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.$injector.get(translateservice",{"_index":2313,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this._currentselection.pipe(pluck('selectedthirdmenu",{"_index":1944,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["this._currentselection.pipe(pluck('selectedthirdmenuentry",{"_index":1945,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["this._currentselection.pipe(pluck('selectedurl",{"_index":1946,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["this._currentselection=combinelatest(this.menu_id,this.menu_entry_id",{"_index":1929,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["this._defaultfilters",{"_index":1629,"title":{},"body":{"injectables/FilterService.html":{}}}],["this._filter",{"_index":2383,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["this._filter$.pipe(first",{"_index":2402,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this._filter$.pipe(first(),takeuntil(this.ngunsubscribe$)).subscribe",{"_index":2495,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this._filter$.pipe(takeuntil(this.ngunsubscribe$)).subscribe((next",{"_index":2389,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["this._htmlcontent",{"_index":1432,"title":{},"body":{"components/DetailComponent.html":{}}}],["this._i18nprefix",{"_index":1022,"title":{},"body":{"components/CardComponent.html":{},"components/DetailsComponent.html":{}}}],["this._menu_entry_id",{"_index":1943,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["this._menu_entry_id=this.store.select(selectmenustateselectedmenuentryid",{"_index":1924,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["this._menu_id",{"_index":1942,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["this._menu_id=this.store.select(selectmenustateselectedmenuid",{"_index":1923,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["this._thirdmenus",{"_index":2096,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this._thirdmenus=this.store.select(selectmenustatemenu",{"_index":2091,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.actions",{"_index":875,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/LightCardEffects.html":{},"injectables/MenuEffects.html":{}}}],["this.actions$.pipe",{"_index":861,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/CustomRouterEffects.html":{}}}],["this.actions$.pipe(oftype(authenticationactiontypes.rejectlogin",{"_index":919,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.active",{"_index":1606,"title":{},"body":{"classes/Filter.html":{}}}],["this.assignconfigurationproperties(oauth2conf",{"_index":664,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["this.attachaction(button",{"_index":1448,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.authservice.asktokenfromcode(code).pipe",{"_index":883,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.authservice.asktokenfrompassword(payload.username",{"_index":927,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.authservice.checkauthentication(authenticationservice.extracttoken",{"_index":879,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.authservice.extractidentificationinformation",{"_index":978,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.big",{"_index":1863,"title":{},"body":{"components/IconComponent.html":{}}}],["this.big?'big':this.medium?'medium':'small",{"_index":1869,"title":{},"body":{"components/IconComponent.html":{}}}],["this.bindactions(third",{"_index":1437,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.card",{"_index":1066,"title":{},"body":{"components/CardDetailsComponent.html":{},"components/DetailComponent.html":{}}}],["this.card.publisher",{"_index":1410,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.card.publisherversion",{"_index":1072,"title":{},"body":{"components/CardDetailsComponent.html":{},"components/DetailComponent.html":{}}}],["this.cardoperationsurl",{"_index":1191,"title":{},"body":{"injectables/CardService.html":{}}}],["this.cardoperationsurl}&notification=true&rangestart=${minus2hour.valueof()}&rangeend=${plus48hours.valueof",{"_index":1209,"title":{},"body":{"injectables/CardService.html":{}}}],["this.cardservice.unsubscribecardoperation",{"_index":958,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.cardsurl",{"_index":1193,"title":{},"body":{"injectables/CardService.html":{}}}],["this.clientid",{"_index":666,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["this.clientsecret",{"_index":669,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["this.configloaded",{"_index":352,"title":{},"body":{"components/AppComponent.html":{}}}],["this.configurel10nwithenglishasdefault",{"_index":329,"title":{},"body":{"components/AppComponent.html":{}}}],["this.configurl",{"_index":1301,"title":{},"body":{"injectables/ConfigService.html":{}}}],["this.convert(auth",{"_index":737,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["this.createformgroup",{"_index":2385,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["this.currentpath",{"_index":343,"title":{},"body":{"components/AppComponent.html":{},"components/CardComponent.html":{},"components/NavbarComponent.html":{}}}],["this.dark",{"_index":1867,"title":{},"body":{"components/IconComponent.html":{}}}],["this.detail",{"_index":1408,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.detail.styles",{"_index":1409,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.detail.styles.foreach(style",{"_index":1411,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.details",{"_index":1069,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["this.details.changes.subscribe",{"_index":1489,"title":{},"body":{"components/DetailsComponent.html":{}}}],["this.details.filter((tab",{"_index":1491,"title":{},"body":{"components/DetailsComponent.html":{}}}],["this.details.push(...state.details",{"_index":1075,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["this.details.toarray().foreach(detail",{"_index":1500,"title":{},"body":{"components/DetailsComponent.html":{}}}],["this.element.nativeelement.getelementsbytagname('button",{"_index":1442,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.element.nativeelement.getelementsbytagname('script",{"_index":1439,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.expandedmenu=new",{"_index":2093,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.expandedmenu[index]=!this.expandedmenu[index",{"_index":2098,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.expireclaim",{"_index":675,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["this.extractparams(child",{"_index":1365,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["this.extractparams(routerstate.root",{"_index":1359,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{}}}],["this.fetchcardoperation(new",{"_index":1208,"title":{},"body":{"injectables/CardService.html":{}}}],["this.fetchi18njson(publisher",{"_index":2295,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.fetchthird(thirdname,version",{"_index":2222,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.funktion",{"_index":1605,"title":{},"body":{"classes/Filter.html":{}}}],["this.funktion(card,this.status",{"_index":1610,"title":{},"body":{"classes/Filter.html":{}}}],["this.getcurrentguid().tostring",{"_index":1671,"title":{},"body":{"classes/GuidService.html":{}}}],["this.getmenubyid(currentselection[0][0],currentselection[1])[0",{"_index":1938,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["this.getmenuentrybyid(currentselection[0][1],selectedthirdmenu)[0",{"_index":1940,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["this.getroutepe",{"_index":327,"title":{},"body":{"components/AppComponent.html":{}}}],["this.guid",{"_index":1668,"title":{},"body":{"classes/GuidService.html":{}}}],["this.guidservice.getcurrentguid",{"_index":735,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["this.guidservice.getcurrentguidstring",{"_index":1190,"title":{},"body":{"injectables/CardService.html":{}}}],["this.handlebars.executetemplate(this.detail.templatename",{"_index":1430,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.handleerrorontokengeneration(errorresponse,'authenticate",{"_index":929,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.handleerrorontokengeneration(errorresponse,'code",{"_index":887,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.handlenewtoken(this.httpclient.post(this.asktokenurl",{"_index":726,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["this.handlerejectedlogin('invalid",{"_index":979,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.hide",{"_index":2033,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.hrefsofcsslink.push(safecssurl",{"_index":1422,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.httpclient.get(`${this.cardsurl}/${id",{"_index":1195,"title":{},"body":{"injectables/CardService.html":{}}}],["this.httpclient.get(`${this.configurl",{"_index":1303,"title":{},"body":{"injectables/ConfigService.html":{}}}],["this.httpclient.get(`${this.thirdsurl}/${publisher",{"_index":2227,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.httpclient.get(`${this.thirdsurl}/${publisher}/i18n",{"_index":2244,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.httpclient.get(`${this.thirdsurl}/${publisher}/templates/${name",{"_index":2230,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.httpclient.get(`${this.thirdsurl}/`).pipe",{"_index":2257,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.httpclient.post",{"_index":1228,"title":{},"body":{"injectables/CardService.html":{}}}],["this.httpclient.post(this.checktokenurl",{"_index":701,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["this.iconpath",{"_index":1861,"title":{},"body":{"components/IconComponent.html":{}}}],["this.iframeurl.pipe(map(url",{"_index":1947,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["this.initfilters",{"_index":1630,"title":{},"body":{"injectables/FilterService.html":{}}}],["this.initializehandlebarstemplates",{"_index":1407,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.initializehrefsofcsslink",{"_index":1406,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.initrecipientfilter",{"_index":1651,"title":{},"body":{"injectables/FilterService.html":{}}}],["this.inittimefilter",{"_index":1653,"title":{},"body":{"injectables/FilterService.html":{}}}],["this.inittypefilter",{"_index":1649,"title":{},"body":{"injectables/FilterService.html":{}}}],["this.isauthenticated",{"_index":347,"title":{},"body":{"components/AppComponent.html":{}}}],["this.light",{"_index":1868,"title":{},"body":{"components/IconComponent.html":{}}}],["this.lightcard.publisher+'.'+this.lightcard.publisherversion",{"_index":1023,"title":{},"body":{"components/CardComponent.html":{}}}],["this.lightcards",{"_index":1515,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.loadedi18n",{"_index":2289,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.loadedi18n.push(result.id",{"_index":2309,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.loadingi18n",{"_index":2287,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.loadingi18n.push(id",{"_index":2291,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.loginclaim",{"_index":671,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["this.medium",{"_index":1865,"title":{},"body":{"components/IconComponent.html":{}}}],["this.ngunsubscribe$.complete",{"_index":2387,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["this.ngunsubscribe$.next",{"_index":2386,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["this.open=true",{"_index":1021,"title":{},"body":{"components/CardComponent.html":{}}}],["this.processes[card.process",{"_index":175,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["this.querytemplate(card.publisher,card.publisherversion,templatename).pipe",{"_index":1763,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerarrayatindex",{"_index":1756,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerarrayatindexlength",{"_index":1759,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerbool",{"_index":1760,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registercardaction",{"_index":1751,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerdateformat",{"_index":1750,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registeri18n",{"_index":1753,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registermath",{"_index":1757,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registernow",{"_index":1761,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registernumberformat",{"_index":1749,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerpreservespace",{"_index":1748,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registerslice",{"_index":1755,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registersort",{"_index":1754,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registersplit",{"_index":1758,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.registersvg",{"_index":1752,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.reinsertscripts",{"_index":1436,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.resetstate",{"_index":940,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.retry",{"_index":1288,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["this.retrydelay",{"_index":1287,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["this.router.navigate(['/'+this.currentpath,'cards',this.lightcard.id",{"_index":1020,"title":{},"body":{"components/CardComponent.html":{}}}],["this.router.navigate(['/login",{"_index":864,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["this.sanitizer.bypasssecuritytrusthtml(html",{"_index":1433,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.sanitizer.bypasssecuritytrustresourceurl(cssurl",{"_index":1421,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.sanitizer.bypasssecuritytrustresourceurl(url",{"_index":1948,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["this.selectdetail(this.details.first",{"_index":1497,"title":{},"body":{"components/DetailsComponent.html":{}}}],["this.selection",{"_index":1519,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.service.computethirdsmenu",{"_index":2054,"title":{},"body":{"injectables/MenuEffects.html":{}}}],["this.service.fetchconfiguration",{"_index":1269,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["this.service.getcardoperation",{"_index":1137,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["this.service.loadcard(action.payload.id",{"_index":1081,"title":{},"body":{"injectables/CardEffects.html":{}}}],["this.service.movetocodeflowloginpage",{"_index":2040,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.service.updatecardsubscriptionwithdates(af.payload.status.start,af.payload.status.end",{"_index":1155,"title":{},"body":{"injectables/CardOperationEffects.html":{}}}],["this.size",{"_index":1870,"title":{},"body":{"components/IconComponent.html":{}}}],["this.small",{"_index":1866,"title":{},"body":{"components/IconComponent.html":{}}}],["this.sprites='sprites",{"_index":1875,"title":{},"body":{"components/IconComponent.html":{}}}],["this.sprites='sprites.svg",{"_index":1877,"title":{},"body":{"components/IconComponent.html":{}}}],["this.status",{"_index":1607,"title":{},"body":{"classes/Filter.html":{}}}],["this.store",{"_index":349,"title":{},"body":{"components/AppComponent.html":{}}}],["this.store.dispatch",{"_index":2411,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["this.store.dispatch(new",{"_index":339,"title":{},"body":{"components/AppComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/ConfigEffects.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{}}}],["this.store.pipe",{"_index":1516,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.store.pipe(select(selectcurrenturl)).subscribe(url",{"_index":342,"title":{},"body":{"components/AppComponent.html":{}}}],["this.store.pipe(select(selectexpirationtime",{"_index":344,"title":{},"body":{"components/AppComponent.html":{}}}],["this.store.pipe(select(selectrouterstate",{"_index":328,"title":{},"body":{"components/AppComponent.html":{}}}],["this.store.select(buildconfigselector('security.oauth2.flow.mode",{"_index":2026,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.store.select(buildconfigselector('security.oauth2.flow.provider",{"_index":2031,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.store.select(buildfilterselector(filtertype.time_filter",{"_index":2388,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.store.select(buildfilterselector(filtertype.type_filter",{"_index":2482,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.store.select(cardselectors.selectcardstateselected",{"_index":1064,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["this.store.select(feedselectors.selectlightcardselection",{"_index":1520,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.store.select(selectcardstateselectedid",{"_index":1027,"title":{},"body":{"components/CardComponent.html":{}}}],["this.store.select(selectcurrenturl).subscribe(url",{"_index":1024,"title":{},"body":{"components/CardComponent.html":{},"components/NavbarComponent.html":{}}}],["this.store.select(selectmessage).pipe(filter(m=>m!=null",{"_index":2028,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.subscribetoloadi18n(observable",{"_index":2273,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.templatecache[key",{"_index":1769,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.thirdcache.get(key",{"_index":2219,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.thirds.computethirdcssurl(publisher",{"_index":1413,"title":{},"body":{"components/DetailComponent.html":{}}}],["this.thirds.fetchhbstemplate(publisher,version,name,locale).pipe",{"_index":1772,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["this.thirdservice.loadi18nforlightcards(action.payload.lightcards",{"_index":1970,"title":{},"body":{"injectables/LightCardEffects.html":{}}}],["this.thirdsservice.querythird(this.card.publisher",{"_index":1071,"title":{},"body":{"components/CardDetailsComponent.html":{}}}],["this.thirdsurl",{"_index":2214,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.timefilterform",{"_index":2384,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timefilterform.get('end').setvalue(null",{"_index":2399,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timefilterform.get('end').setvalue(this.timeservice.asinputstring(next.status.end",{"_index":2398,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timefilterform.get('end').value",{"_index":2401,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timefilterform.get('start').setvalue(null",{"_index":2394,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timefilterform.get('start').setvalue(this.timeservice.asinputstring(next.status.start",{"_index":2393,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timefilterform.get('start').value",{"_index":2400,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timeservice.parsestring(form.end).valueof",{"_index":2417,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timeservice.parsestring(form.start).valueof",{"_index":2415,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timeservice.parsestring(this.timefilterform.get('end').value).valueof",{"_index":2395,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.timeservice.parsestring(this.timefilterform.get('start').value).valueof",{"_index":2390,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["this.translate().getlangs",{"_index":2296,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.translate().settranslation(lang",{"_index":2306,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.translate().use(lang",{"_index":2307,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.translate.getbrowserlang",{"_index":332,"title":{},"body":{"components/AppComponent.html":{},"injectables/HandlebarsService.html":{}}}],["this.translate.setdefaultlang('en",{"_index":330,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.use(browserlang",{"_index":333,"title":{},"body":{"components/AppComponent.html":{}}}],["this.typefilterform",{"_index":2481,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.typefilterform.get('action').setvalue(!next.active",{"_index":2485,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.typefilterform.get('action').setvalue(true",{"_index":2492,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.typefilterform.get('alarm').setvalue(!next.active",{"_index":2483,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.typefilterform.get('alarm').setvalue(true",{"_index":2491,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.typefilterform.get('notification').setvalue(!next.active",{"_index":2489,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.typefilterform.get('notification').setvalue(true",{"_index":2494,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.typefilterform.get('question').setvalue(!next.active",{"_index":2487,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.typefilterform.get('question').setvalue(true",{"_index":2493,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["this.unsubscribe$.next",{"_index":1213,"title":{},"body":{"injectables/CardService.html":{}}}],["this.updateasync",{"_index":1488,"title":{},"body":{"components/DetailsComponent.html":{}}}],["this.urlcleaner",{"_index":2213,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.urlcleaner.encodevalue(`${this.thirdsurl}/${publisher}/css/${stylename",{"_index":2237,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["this.usecodeflow",{"_index":2025,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userform",{"_index":2034,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userform.get('identifier').value",{"_index":2036,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userform.get('password').value",{"_index":2037,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userform.reset",{"_index":2039,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userform.valid",{"_index":2035,"title":{},"body":{"components/LoginComponent.html":{}}}],["those",{"_index":1090,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/LightCardEffects.html":{}}}],["throw",{"_index":2142,"title":{},"body":{"modules/ServicesModule.html":{}}}],["throwerror",{"_index":635,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["throwerror('the",{"_index":714,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["throwerror(err",{"_index":2301,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["throwerror(error",{"_index":741,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["thrown",{"_index":687,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["thus",{"_index":127,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["time",{"_index":418,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/RouterStateUrl.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/variables.html":{}}}],["time:timeservice",{"_index":1747,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["time_filter",{"_index":1656,"title":{},"body":{"injectables/FilterService.html":{},"miscellaneous/enumerations.html":{}}}],["timefiltercomponent",{"_index":417,"title":{"components/TimeFilterComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["timefilterform",{"_index":2368,"title":{},"body":{"components/TimeFilterComponent.html":{}}}],["timelinecomponent",{"_index":420,"title":{"components/TimeLineComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["timer",{"_index":2380,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["timer(500",{"_index":2409,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["timeservice",{"_index":1724,"title":{"injectables/TimeService.html":{}},"body":{"injectables/HandlebarsService.html":{},"modules/ServicesModule.html":{},"components/TimeFilterComponent.html":{},"injectables/TimeService.html":{},"coverage.html":{},"index.html":{}}}],["timezone",{"_index":2440,"title":{},"body":{"injectables/TimeService.html":{},"dependencies.html":{}}}],["title",{"_index":281,"title":{},"body":{"components/AppComponent.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"classes/Detail.html":{}}}],["titleposition",{"_index":995,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{},"miscellaneous/enumerations.html":{}}}],["titlestyle",{"_index":999,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{}}}],["tlabel1",{"_index":2349,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["tlabel2",{"_index":2357,"title":{},"body":{"classes/ThirdsServiceMock.html":{}}}],["tmenu.id}}.{{tmenu.version}}.{{entry.label",{"_index":2104,"title":{},"body":{"components/NavbarComponent.html":{}}}],["tmenu.id}}.{{tmenu.version}}.{{tmenu.entries[0].label",{"_index":2105,"title":{},"body":{"components/NavbarComponent.html":{}}}],["tmenu.id}}.{{tmenu.version}}.{{tmenu.label",{"_index":2102,"title":{},"body":{"components/NavbarComponent.html":{}}}],["todo",{"_index":510,"title":{},"body":{"modules/AppRoutingModule.html":{},"classes/HandleUnexpectedError-3.html":{},"components/IframeDisplayComponent.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/UpdateSelectedMenu.html":{}}}],["togglemenu",{"_index":2078,"title":{},"body":{"components/NavbarComponent.html":{}}}],["togglemenu(index",{"_index":2082,"title":{},"body":{"components/NavbarComponent.html":{}}}],["togglemenu(index:number",{"_index":2097,"title":{},"body":{"components/NavbarComponent.html":{}}}],["token",{"_index":81,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tokeninjector",{"_index":2132,"title":{"interceptors/TokenInjector.html":{}},"body":{"modules/ServicesModule.html":{},"interceptors/TokenInjector.html":{},"coverage.html":{},"index.html":{}}}],["trace",{"_index":295,"title":{},"body":{"components/AppComponent.html":{}}}],["trans",{"_index":2299,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["translate",{"_index":286,"title":{},"body":{"components/AppComponent.html":{},"injectables/HandlebarsService.html":{},"components/NavbarComponent.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["translate.config",{"_index":472,"title":{},"body":{"modules/AppModule.html":{}}}],["translate/core",{"_index":318,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"injectables/HandlebarsService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"dependencies.html":{}}}],["translate/http",{"_index":2641,"title":{},"body":{"dependencies.html":{}}}],["translateconfig",{"_index":471,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["translateloader",{"_index":2195,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["translatemodule",{"_index":470,"title":{},"body":{"modules/AppModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{}}}],["translatemodule.forroot(translateconfig",{"_index":487,"title":{},"body":{"modules/AppModule.html":{}}}],["translatemoduleconfig",{"_index":2743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["translateservice",{"_index":287,"title":{},"body":{"components/AppComponent.html":{},"injectables/HandlebarsService.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["translation",{"_index":2298,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["translation',error",{"_index":2312,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["translationelement",{"_index":2304,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["tree",{"_index":265,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["triggered.\\naction",{"_index":1462,"title":{},"body":{"components/DetailComponent.html":{}}}],["triggers",{"_index":917,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["true",{"_index":746,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"components/DetailsComponent.html":{},"classes/Filter.html":{},"injectables/FilterService.html":{},"injectables/HandlebarsService.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"modules/ServicesModule.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":71,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["trylogout",{"_index":874,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["trytologin",{"_index":19,"title":{"classes/TryToLogIn.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["trytologin({username",{"_index":2038,"title":{},"body":{"components/LoginComponent.html":{}}}],["trytologout",{"_index":72,"title":{"classes/TryToLogOut.html":{}},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"components/NavbarComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["tslib",{"_index":2659,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":1569,"title":{},"body":{"classes/Filter.html":{}}}],["type",{"_index":32,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"interfaces/AppState.html":{},"classes/ApplyFilter.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"injectables/AuthenticationEffects.html":{},"classes/Card.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardEffects.html":{},"interfaces/CardFeedState.html":{},"components/CardListComponent.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"interfaces/CardState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/ConfigService.html":{},"interfaces/ConfigState.html":{},"injectables/CustomRouterEffects.html":{},"classes/CustomRouterStateSerializer.html":{},"classes/Detail.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"classes/EmptyLightCards.html":{},"components/FeedComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/Filter.html":{},"components/FiltersComponent.html":{},"classes/GuidService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"classes/I18n.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"components/LoginComponent.html":{},"injectables/MenuEffects.html":{},"interfaces/MenuState.html":{},"classes/Message.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"classes/ParameterListItem.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/RouterStateUrl.html":{},"classes/SelectLightCard.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"injectables/TimeService.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type_filter",{"_index":1654,"title":{},"body":{"injectables/FilterService.html":{},"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":2694,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedef",{"_index":957,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["typefiltercomponent",{"_index":422,"title":{"components/TypeFilterComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["typefilterform",{"_index":2472,"title":{},"body":{"components/TypeFilterComponent.html":{}}}],["typeof",{"_index":1822,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["types/jwt",{"_index":2643,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":54,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"interfaces/AuthState.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/GuidService.html":{},"injectables/HandlebarsService.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"dependencies.html":{}}}],["u00a0",{"_index":1817,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["ui/assets/i18n",{"_index":2742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uid",{"_index":994,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{}}}],["unable",{"_index":934,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["unavailable",{"_index":968,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["undefined",{"_index":1864,"title":{},"body":{"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{}}}],["undefined,undefined",{"_index":1584,"title":{},"body":{"classes/Filter.html":{}}}],["unexpected",{"_index":242,"title":{},"body":{"classes/AddLightCardFailure.html":{},"injectables/AuthenticationEffects.html":{},"classes/ClearCard.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["unique",{"_index":661,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["unselectedvalues",{"_index":210,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["unsubscribe",{"_index":1162,"title":{},"body":{"injectables/CardService.html":{}}}],["unsubscribecardoperation",{"_index":1165,"title":{},"body":{"injectables/CardService.html":{}}}],["unused",{"_index":1092,"title":{},"body":{"injectables/CardEffects.html":{},"injectables/ConfigEffects.html":{},"injectables/LightCardEffects.html":{}}}],["up",{"_index":996,"title":{},"body":{"classes/Card.html":{},"classes/Detail.html":{},"miscellaneous/enumerations.html":{}}}],["update",{"_index":10,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitAuthStatus.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"interceptors/TokenInjector.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdateSelectedMenu.html":{},"miscellaneous/enumerations.html":{}}}],["updateasync",{"_index":1471,"title":{},"body":{"components/DetailsComponent.html":{}}}],["updatecardsubscriptionwithdates",{"_index":1166,"title":{},"body":{"injectables/CardService.html":{}}}],["updatecardsubscriptionwithdates(rangestart",{"_index":1177,"title":{},"body":{"injectables/CardService.html":{}}}],["updatecardsubscriptionwithdates(rangestart:number,rangeend:number):observable",{"_index":1227,"title":{},"body":{"injectables/CardService.html":{}}}],["updated",{"_index":1102,"title":{},"body":{"interfaces/CardFeedState.html":{},"components/IframeDisplayComponent.html":{}}}],["updatedsubscription",{"_index":238,"title":{"classes/UpdatedSubscription.html":{}},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["updateon",{"_index":2418,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["updateselectedmenu",{"_index":1328,"title":{"classes/UpdateSelectedMenu.html":{}},"body":{"injectables/CustomRouterEffects.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/UpdateSelectedMenu.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["updateselectedmenu({menu_id",{"_index":1323,"title":{},"body":{"injectables/CustomRouterEffects.html":{}}}],["updatestate",{"_index":153,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["updatestatebeforeaction",{"_index":154,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["updatesubscription",{"_index":239,"title":{},"body":{"classes/AddLightCardFailure.html":{},"injectables/CardOperationEffects.html":{},"classes/EmptyLightCards.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/SelectLightCard.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{}}}],["upon",{"_index":1277,"title":{},"body":{"injectables/ConfigEffects.html":{},"classes/Filter.html":{}}}],["uri",{"_index":194,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"miscellaneous/enumerations.html":{}}}],["uribase",{"_index":811,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["uribase}${pathend",{"_index":816,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["url",{"_index":184,"title":{},"body":{"classes/Action.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"classes/CustomRouterStateSerializer.html":{},"components/DetailComponent.html":{},"components/IframeDisplayComponent.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/RouterStateUrl.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{},"interceptors/TokenInjector.html":{},"miscellaneous/variables.html":{}}}],["url.endswith('/auth/check_token",{"_index":2463,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["url.endswith('/auth/code",{"_index":2465,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["url.endswith('/auth/token",{"_index":2464,"title":{},"body":{"interceptors/TokenInjector.html":{}}}],["url.split('/')[1",{"_index":1026,"title":{},"body":{"components/CardComponent.html":{},"components/NavbarComponent.html":{}}}],["urlcleaner",{"_index":2211,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["urlencoded",{"_index":698,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["urls",{"_index":2721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urlsearchparams",{"_index":692,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["usable",{"_index":799,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["usage",{"_index":1698,"title":{},"body":{"classes/HandleUnexpectedError-3.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/UpdateSelectedMenu.html":{}}}],["use",{"_index":1572,"title":{},"body":{"classes/Filter.html":{}}}],["useclass",{"_index":489,"title":{},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{}}}],["usecodeflow",{"_index":2009,"title":{},"body":{"components/LoginComponent.html":{}}}],["used",{"_index":9,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/AuthObject.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"classes/HandleUnexpectedError-3.html":{},"classes/InitAuthStatus.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"modules/StateModule.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"classes/UpdateSelectedMenu.html":{}}}],["usefactory",{"_index":2744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":66,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"components/AppComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"injectables/CardOperationEffects.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/CheckTokenResponse.html":{},"components/DetailsComponent.html":{},"injectables/FeedFiltersEffects.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"miscellaneous/enumerations.html":{}}}],["userform",{"_index":2010,"title":{},"body":{"components/LoginComponent.html":{}}}],["username",{"_index":107,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"components/LoginComponent.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["uses",{"_index":932,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["using",{"_index":621,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["utc",{"_index":829,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["utc_beginning_time",{"_index":2568,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["v",{"_index":377,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ArchivesComponent.html":{},"modules/ArchivesModule.html":{},"modules/ArchivesRoutingModule.html":{},"components/CardComponent.html":{},"modules/CardsModule.html":{},"components/FeedComponent.html":{},"modules/FeedModule.html":{},"modules/FeedRoutingModule.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"modules/ThirdpartyRoutingModule.html":{},"components/TypeFilterComponent.html":{},"miscellaneous/variables.html":{}}}],["v1",{"_index":1776,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["v2",{"_index":1778,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["val",{"_index":2254,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["valid",{"_index":680,"title":{},"body":{"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"classes/CheckTokenResponse.html":{}}}],["validate",{"_index":85,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["validity",{"_index":907,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["value",{"_index":50,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/Action.html":{},"classes/AddLightCardFailure.html":{},"components/AppComponent.html":{},"classes/ApplyFilter.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"injectables/CardEffects.html":{},"injectables/CardOperationEffects.html":{},"injectables/CardService.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/ClearCard.html":{},"injectables/ConfigEffects.html":{},"injectables/CustomRouterEffects.html":{},"components/DetailComponent.html":{},"classes/EmptyLightCards.html":{},"injectables/FeedFiltersEffects.html":{},"injectables/FilterService.html":{},"classes/HandleUnexpectedError.html":{},"classes/HandleUnexpectedError-1.html":{},"classes/HandleUnexpectedError-2.html":{},"classes/HandleUnexpectedError-3.html":{},"injectables/HandlebarsService.html":{},"components/IframeDisplayComponent.html":{},"classes/InitAuthStatus.html":{},"classes/InitFilters.html":{},"classes/Input.html":{},"injectables/LightCardEffects.html":{},"classes/LoadCard.html":{},"classes/LoadCardFailure.html":{},"classes/LoadCardSuccess.html":{},"classes/LoadConfig.html":{},"classes/LoadConfigFailure.html":{},"classes/LoadConfigSuccess.html":{},"classes/LoadLightCards.html":{},"classes/LoadLightCardsExtendedData.html":{},"classes/LoadLightCardsFailure.html":{},"classes/LoadLightCardsSuccess.html":{},"classes/LoadMenu.html":{},"classes/LoadMenuFailure.html":{},"classes/LoadMenuSuccess.html":{},"injectables/MenuEffects.html":{},"components/NavbarComponent.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/RejectLogIn.html":{},"classes/SelectLightCard.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"injectables/ThirdsService.html":{},"components/TimeFilterComponent.html":{},"injectables/TimeService.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{},"components/TypeFilterComponent.html":{},"classes/UpdateSelectedMenu.html":{},"classes/UpdatedSubscription.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.replace",{"_index":1815,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["value.slice(from",{"_index":1795,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["value.split(splitvalue)[index",{"_index":1784,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["value[index",{"_index":1791,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["value[index].length",{"_index":1781,"title":{},"body":{"injectables/HandlebarsService.html":{}}}],["valuechanges",{"_index":2404,"title":{},"body":{"components/TimeFilterComponent.html":{},"components/TypeFilterComponent.html":{}}}],["values",{"_index":207,"title":{},"body":{"classes/Action.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["var",{"_index":391,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"components/CardListComponent.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"components/FiltersComponent.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["variable",{"_index":2551,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2696,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variant",{"_index":1040,"title":{},"body":{"components/CardComponent.html":{}}}],["variation",{"_index":852,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["verifyexpirationdate",{"_index":752,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["version",{"_index":187,"title":{},"body":{"classes/Action.html":{},"components/DetailComponent.html":{},"injectables/HandlebarsService.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["version:string",{"_index":166,"title":{},"body":{"classes/Action.html":{},"injectables/HandlebarsService.html":{},"classes/Input.html":{},"classes/ParameterListItem.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{},"classes/ThirdMenu.html":{},"classes/ThirdMenuEntry.html":{}}}],["version:string):observable",{"_index":2217,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["versionparam",{"_index":2238,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["via",{"_index":21,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["visible",{"_index":512,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["void",{"_index":291,"title":{},"body":{"components/AppComponent.html":{},"components/ArchivesComponent.html":{},"classes/AuthObject.html":{},"injectables/AuthenticationEffects.html":{},"components/CardComponent.html":{},"components/CardDetailsComponent.html":{},"injectables/CardService.html":{},"classes/CheckTokenResponse.html":{},"components/DetailComponent.html":{},"components/DetailsComponent.html":{},"components/FeedComponent.html":{},"classes/Filter.html":{},"components/FiltersComponent.html":{},"injectables/HandlebarsService.html":{},"components/IconComponent.html":{},"components/IframeDisplayComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NoSelectionComponent.html":{},"components/TimeFilterComponent.html":{},"components/TimeLineComponent.html":{},"components/TypeFilterComponent.html":{}}}],["wait",{"_index":1435,"title":{},"body":{"components/DetailComponent.html":{}}}],["warning",{"_index":1458,"title":{},"body":{"components/DetailComponent.html":{}}}],["weather",{"_index":1103,"title":{},"body":{"interfaces/CardFeedState.html":{}}}],["web",{"_index":622,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["went",{"_index":2311,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["width",{"_index":1035,"title":{},"body":{"components/CardComponent.html":{},"components/TypeFilterComponent.html":{}}}],["win",{"_index":111,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["window.location.href",{"_index":808,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["window.location.href.indexof('code",{"_index":336,"title":{},"body":{"components/AppComponent.html":{}}}],["window.location.pathname",{"_index":1342,"title":{},"body":{"classes/CustomRouterStateSerializer.html":{},"classes/RouterStateUrl.html":{},"miscellaneous/variables.html":{}}}],["withlatestfrom",{"_index":949,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"injectables/ConfigEffects.html":{},"components/IframeDisplayComponent.html":{}}}],["withlatestfrom(this.store.select(selectcode",{"_index":881,"title":{},"body":{"injectables/AuthenticationEffects.html":{}}}],["withlatestfrom(this.store.select(selectconfigretry",{"_index":1290,"title":{},"body":{"injectables/ConfigEffects.html":{}}}],["withlatestfrom(this.store.select(selectmenustatemenu",{"_index":1931,"title":{},"body":{"components/IframeDisplayComponent.html":{}}}],["without",{"_index":121,"title":{},"body":{"classes/AcceptLogIn.html":{},"classes/AcceptLogOut.html":{},"classes/AcceptLogOutSuccess.html":{},"classes/CheckAuthenticationStatus.html":{},"classes/InitAuthStatus.html":{},"classes/PayloadForSuccessfulAuthentication.html":{},"classes/RejectLogIn.html":{},"classes/TryToLogIn.html":{},"classes/TryToLogOut.html":{}}}],["work",{"_index":2284,"title":{},"body":{"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["works",{"_index":609,"title":{},"body":{"components/ArchivesComponent.html":{},"components/NoSelectionComponent.html":{}}}],["wrong",{"_index":923,"title":{},"body":{"injectables/AuthenticationEffects.html":{},"classes/ThirdsI18nLoader.html":{},"injectables/ThirdsService.html":{}}}],["www",{"_index":697,"title":{},"body":{"classes/AuthObject.html":{},"classes/CheckTokenResponse.html":{}}}],["yes",{"_index":627,"title":{},"body":{"classes/AuthObject.html":{},"classes/Card.html":{},"classes/CheckTokenResponse.html":{},"classes/I18n.html":{},"classes/Message.html":{},"classes/Process.html":{},"classes/State.html":{},"classes/Third.html":{}}}],["zip",{"_index":1405,"title":{},"body":{"components/DetailComponent.html":{},"injectables/MenuEffects.html":{}}}],["zip(this.thirds.querythird(this.card.publisher,this.card.publisherversion",{"_index":1429,"title":{},"body":{"components/DetailComponent.html":{}}}],["zone.js",{"_index":2661,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":441,"title":{},"body":{"modules/AppModule.html":{},"modules/ArchivesModule.html":{},"modules/CardsModule.html":{},"modules/FeedModule.html":{},"modules/ServicesModule.html":{},"modules/StateModule.html":{},"modules/ThirdpartyModule.html":{},"dependencies.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AcceptLogIn.html":{"url":"classes/AcceptLogIn.html","title":"class - AcceptLogIn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AcceptLogIn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used to update the state with the authentication information\nEmitted by {AuthenticationEffects} in the following {Observable} @members:\n\nTryToLogIn\nCheckAuthentication via handleLogInAttempt @method\n\nUsed in the {function} reducer of the {authentication.reducer.ts} file to create a new state\ncontaining the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: PayloadForSuccessfulAuthentication)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/authentication.actions.ts:65\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    PayloadForSuccessfulAuthentication\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     PayloadForSuccessfulAuthentication\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.AcceptLogIn\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:65\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\nimport {Message} from \"@ofModel/message.model\";\n\nexport enum AuthenticationActionTypes {\n    InitAuthStatus = '[Authentication] Init Authentication Status',\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\n/**\n * Authentication success payload\n */\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class InitAuthStatus implements Action {\n    readonly type = AuthenticationActionTypes.InitAuthStatus;\n    /* istanbul ignore next */\n    constructor(public payload:{code: string}){}\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: PayloadForSuccessfulAuthentication) {}\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Message }) {}\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    /* istanbul ignore next */\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n    InitAuthStatus\n    | AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AcceptLogOut.html":{"url":"classes/AcceptLogOut.html","title":"class - AcceptLogOut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AcceptLogOut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used to removes authentication information of the system and thus logOut the user.\nEmitted by {AuthenticationEffect} in the following {Observable} @members:\n\nTryToLogOut\nRejectLogInAttempt\nConsume by {AuthenticationEffect} in the AcceptLogOut {Observable} @member\n\n\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/authentication.actions.ts:126\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.AcceptLogOut\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:126\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\nimport {Message} from \"@ofModel/message.model\";\n\nexport enum AuthenticationActionTypes {\n    InitAuthStatus = '[Authentication] Init Authentication Status',\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\n/**\n * Authentication success payload\n */\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class InitAuthStatus implements Action {\n    readonly type = AuthenticationActionTypes.InitAuthStatus;\n    /* istanbul ignore next */\n    constructor(public payload:{code: string}){}\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: PayloadForSuccessfulAuthentication) {}\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Message }) {}\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    /* istanbul ignore next */\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n    InitAuthStatus\n    | AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AcceptLogOutSuccess.html":{"url":"classes/AcceptLogOutSuccess.html","title":"class - AcceptLogOutSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AcceptLogOutSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used to notify the store to remove authentication information\nEmitted by {AuthenticationEffect} in AcceptLogOut {Observable} @member.\nUsed in the {function} reducer of the {authentication.reducer.ts} file to create a new state\nwithout any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.AcceptLogOutSuccess\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:142\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\nimport {Message} from \"@ofModel/message.model\";\n\nexport enum AuthenticationActionTypes {\n    InitAuthStatus = '[Authentication] Init Authentication Status',\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\n/**\n * Authentication success payload\n */\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class InitAuthStatus implements Action {\n    readonly type = AuthenticationActionTypes.InitAuthStatus;\n    /* istanbul ignore next */\n    constructor(public payload:{code: string}){}\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: PayloadForSuccessfulAuthentication) {}\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Message }) {}\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    /* istanbul ignore next */\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n    InitAuthStatus\n    | AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Action.html":{"url":"classes/Action.html","title":"class - Action","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Action\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/thirds.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: ActionType, label: I18n, hidden: boolean, buttonStyle: string, contentStyle: string, inputs: Input[], lockAction: boolean, lockCard: boolean, updateState: boolean, updateStateBeforeAction: boolean, called: boolean, needsConfirm: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/thirds.model.ts:69\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                    ActionType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hidden\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        buttonStyle\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        contentStyle\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        inputs\n                                                  \n                                                        \n                                                                    Input[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        lockAction\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        lockCard\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateState\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateStateBeforeAction\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        called\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        needsConfirm\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Card, Detail} from \"@ofModel/card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map as OfMap} from \"@ofModel/map\";\n\nexport class Third{\n    /* istanbul ignore next */\n    constructor(\n        readonly name:string,\n        readonly version:string,\n        readonly i18nLabelKey: string,\n        readonly templates?:string[],\n        readonly csses?:string[],\n        readonly locales?:string[],\n        readonly menuEntries?:ThirdMenuEntry[],\n        readonly processes?:OfMap\n    ){}\n\n    public extractState(card:Card):State{\n        if(card.process && this.processes[card.process]) {\n            const process = this.processes[card.process];\n            if(card.state && process.states[card.state]) {\n               return process.states[card.state];\n            }\n        }\n        return null;\n    }\n}\n\nexport class ThirdMenuEntry{\n    /* istanbul ignore next */\n    constructor(\n        readonly id:string,\n        readonly label: string,\n        readonly url: string\n    ){}\n}\n\nexport class ThirdMenu{\n    /* istanbul ignore next */\n    constructor(\n        readonly id: string,\n        readonly version: string,\n        readonly label: string,\n        readonly entries: ThirdMenuEntry[]){}\n}\n\nexport class Process{\n    /* istanbul ignore next */\n    constructor(\n        readonly states?:OfMap\n    ){}\n}\n\nexport class State{\n    /* istanbul ignore next */\n    constructor(\n        readonly details?:Detail[],\n        readonly actions?:OfMap\n    ){}\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    /* istanbul ignore next */\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    /* istanbul ignore next */\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    /* istanbul ignore next */\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddLightCardFailure.html":{"url":"classes/AddLightCardFailure.html","title":"class - AddLightCardFailure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddLightCardFailure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:66\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.AddLightCardFailure\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:66\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    EmptyLightCards = '[LCard] Empty',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class EmptyLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.EmptyLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError\n    | EmptyLightCards;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-root\n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                configLoaded\n                            \n                            \n                                currentPath\n                            \n                            \n                                getRoutePE\n                            \n                            \n                                isAuthenticated$\n                            \n                            \n                                    Private\n                                maxedRetries\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                configureL10nWithEnglishAsDefault\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, translate: TranslateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            configureL10nWithEnglishAsDefault\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        configureL10nWithEnglishAsDefault()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/app.component.ts:40\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/app.component.ts:50\n                            \n                        \n\n\n                \n                    \n                            On Init the app take trace of the current url and of the authentication status\nOnce the subscription done, send an Action to Check the current authentication status.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configLoaded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getRoutePE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAuthenticated$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxedRetries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'OperatorFabric'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\nimport {select, Store} from '@ngrx/store';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {InitAuthStatus} from '@ofActions/authentication.actions';\nimport {AppState} from '@ofStore/index';\nimport {selectCurrentUrl, selectRouterState} from '@ofSelectors/router.selectors';\nimport {selectExpirationTime} from '@ofSelectors/authentication.selectors';\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {isInTheFuture} from \"@ofServices/authentication.service\";\nimport {LoadConfig} from \"@ofActions/config.actions\";\nimport {selectConfigLoaded, selectMaxedRetries} from \"@ofSelectors/config.selectors\";\n\n@Component({\n    selector: 'of-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n    title = 'OperatorFabric';\n    getRoutePE: Observable;\n    currentPath: any;\n    isAuthenticated$: boolean = false;\n    configLoaded: boolean = false ;\n    private maxedRetries: boolean = false;\n\n    constructor(private store: Store,\n                private translate: TranslateService) {\n        this.getRoutePE = this.store.pipe(select(selectRouterState));\n        this.configureL10nWithEnglishAsDefault();\n    }\n\n    private configureL10nWithEnglishAsDefault() {\n        this.translate.setDefaultLang('en');\n        const browserLang = this.translate.getBrowserLang();\n        this.translate.use(browserLang);\n    }\n\n    /**\n     * On Init the app take trace of the current url and of the authentication status\n     * Once the subscription done, send an Action to Check the current authentication status.\n     */\n    ngOnInit() {\n        console.log(`location: ${location.href}`)\n        let i = window.location.href.indexOf('code');\n        if(i != -1){\n            this.store.dispatch(new InitAuthStatus({code:window.location.href.substring(i + 5)}))\n        }\n        this.store.pipe(select(selectCurrentUrl)).subscribe(url => this.currentPath = url);\n        this.store.pipe(select(selectExpirationTime),\n            map(isInTheFuture)\n                        ).subscribe(isAUth => this.isAuthenticated$ = isAUth);\n        this.store\n            .select(selectConfigLoaded)\n            .subscribe(loaded => this.configLoaded = loaded);\n        this.store\n            .select(selectMaxedRetries)\n            .subscribe((maxedRetries=>this.maxedRetries=maxedRetries));\n        // First Action send by the application, is the user currently authenticated ?\n        this.store.dispatch(new LoadConfig());\n    }\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n\n\n\n    \n        Application is loading ...\n    \n    \n        Application is not available yet, please reload later (F5)\n    \n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n.button {margin-right: 8px;}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Application is loading ...                Application is not available yet, please reload later (F5)    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nIconComponent\n\nIconComponent\n\nAppModule -->\n\nIconComponent->AppModule\n\n\n\n\n\nLoginComponent\n\nLoginComponent\n\nAppModule -->\n\nLoginComponent->AppModule\n\n\n\n\n\nNavbarComponent\n\nNavbarComponent\n\nAppModule -->\n\nNavbarComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nServicesModule\n\nServicesModule\n\nAppModule -->\n\nServicesModule->AppModule\n\n\n\n\n\nStateModule\n\nStateModule\n\nAppModule -->\n\nStateModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            IconComponent\n                        \n                        \n                            LoginComponent\n                        \n                        \n                            NavbarComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            ServicesModule\n                        \n                        \n                            StateModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {HttpClientModule} from '@angular/common/http';\nimport {CommonModule, HashLocationStrategy, LocationStrategy} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {StateModule} from '@ofStore/state.module';\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\nimport {ServicesModule} from '@ofServices/services.module';\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {NavbarComponent} from './components/navbar/navbar.component';\nimport {LoginComponent} from \"./components/login/login.component\";\nimport {IconComponent} from './components/icon/icon.component';\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {translateConfig} from \"./translate.config\";\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faExternalLinkAlt);\n\n@NgModule({\n    imports: [\n        CommonModule,\n        BrowserModule,\n        FormsModule,\n        ReactiveFormsModule,\n        BrowserAnimationsModule,\n        AppRoutingModule,\n        HttpClientModule,\n        StateModule.forRoot(),\n        ServicesModule.forRoot(),\n        NgbModule,\n        TranslateModule.forRoot(translateConfig),\n        FontAwesomeModule\n    ],\n    declarations: [AppComponent, NavbarComponent, LoginComponent, IconComponent],\n    providers: [ { provide: LocationStrategy, useClass: HashLocationStrategy }],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {NgModule} from '@angular/core';\nimport {PreloadAllModules, RouterModule, Routes} from '@angular/router';\n// import {AuthenticationGuard} from '@ofServices/guard.service';\nimport {LoginComponent} from './components/login/login.component';\nimport {environment} from \"@env/environment\";\n\nconst routes: Routes = [\n    // {\n    //     path: 'login',\n    //     component: LoginComponent\n    // },\n    {\n        path: 'feed',\n        loadChildren: './modules/feed/feed.module#FeedModule',\n        // canActivate: [AuthenticationGuard]\n    },\n    {\n        path: 'archives',\n        loadChildren: './modules/archives/archives.module#ArchivesModule',\n        // canActivate: [AuthenticationGuard]\n    },\n    {\n        path: 'thirdparty',\n        loadChildren: './modules/thirdparty/thirdparty.module#ThirdpartyModule',\n        // canActivate: [AuthenticationGuard]\n    },\n    {\n        path: 'navbar',\n        component: LoginComponent\n    },\n    {path: '**', redirectTo: '/feed'}\n];\n// TODO manage visible path more gently\nexport const navigationRoutes: Routes = routes.slice(0, 2);\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes,{ enableTracing: !environment.production, preloadingStrategy: PreloadAllModules })],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AppState.html":{"url":"interfaces/AppState.html","title":"interface - AppState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AppState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/index.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        authentication\n                                \n                                \n                                        card\n                                \n                                \n                                        config\n                                \n                                \n                                        feed\n                                \n                                \n                                        menu\n                                \n                                \n                                        router\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authentication\n                                    \n                                \n                                \n                                    \n                                        authentication:     AuthState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AuthState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        card\n                                    \n                                \n                                \n                                    \n                                        card:     CardState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CardState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     ConfigState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ConfigState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        feed\n                                    \n                                \n                                \n                                    \n                                        feed:     CardFeedState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CardFeedState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        menu\n                                    \n                                \n                                \n                                    \n                                        menu:     MenuState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MenuState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        router\n                                    \n                                \n                                \n                                    \n                                        router:     RouterReducerState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     RouterReducerState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as fromRouter from '@ngrx/router-store';\nimport {RouterReducerState} from '@ngrx/router-store';\nimport {RouterStateUrl} from '@ofStore/states/router.state';\nimport {reducer as authenticationReducer} from '@ofStore/reducers/authentication.reducer';\nimport {ActionReducerMap, MetaReducer} from '@ngrx/store';\nimport {environment} from '@env/environment';\nimport {storeFreeze} from 'ngrx-store-freeze';\nimport {CardEffects} from '@ofEffects/card.effects';\nimport {CardOperationEffects} from '@ofEffects/card-operation.effects';\nimport {AuthenticationEffects} from '@ofEffects/authentication.effects';\nimport {RouterEffects} from 'ngrx-router';\nimport {CardFeedState} from '@ofStates/feed.state';\nimport {reducer as lightCardReducer} from '@ofStore/reducers/light-card.reducer';\nimport {reducer as cardReducer} from '@ofStore/reducers/card.reducer';\nimport {reducer as configReducer} from '@ofStore/reducers/config.reducer';\nimport {reducer as menuReducer} from '@ofStore/reducers/menu.reducer';\nimport {AuthState} from '@ofStates/authentication.state';\nimport {CardState} from \"@ofStates/card.state\";\nimport {CustomRouterEffects} from \"@ofEffects/custom-router.effects\";\nimport {MenuState} from \"@ofStates/menu.state\";\nimport {MenuEffects} from \"@ofEffects/menu.effects\";\nimport {LightCardEffects} from \"@ofEffects/light-card.effects\";\nimport {FeedFiltersEffects} from \"@ofEffects/feed-filters.effects\";\nimport {ConfigState} from \"@ofStates/config.state\";\nimport {ConfigEffects} from \"@ofEffects/config.effects\";\n\nexport interface AppState {\n    router: RouterReducerState;\n    feed: CardFeedState;\n    authentication: AuthState;\n    card: CardState;\n    menu: MenuState;\n    config: ConfigState\n}\n\nexport const appEffects = [\n    CardEffects,\n    ConfigEffects,\n    CardOperationEffects,\n    RouterEffects,\n    CustomRouterEffects,\n    AuthenticationEffects,\n    MenuEffects,\n    LightCardEffects,\n    FeedFiltersEffects];\n\nexport const appReducer: ActionReducerMap = {\n    router: fromRouter.routerReducer,\n    feed: lightCardReducer,\n    authentication: authenticationReducer,\n    card: cardReducer,\n    menu: menuReducer,\n    config: configReducer\n};\n\nexport const appMetaReducers: MetaReducer[] = !environment.production\n    ? [storeFreeze]\n    : [];\n\nexport const storeConfig = {\n    metaReducers: appMetaReducers,\n    // initialState: {\n    //     router: routerInitialState,\n    // }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApplyFilter.html":{"url":"classes/ApplyFilter.html","title":"class - ApplyFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApplyFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/feed.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/feed.actions.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/feed.actions.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : FeedActionTypes.ApplyFilter\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/feed.actions.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Filter} from \"@ofModel/feed-filter.model\";\nimport {FilterType} from \"@ofServices/filter.service\";\n\nexport enum FeedActionTypes {\n    ApplyFilter = '[Feed] Change filter Status',\n    InitFilter = '[Feed] Init filter',\n}\n\nexport class ApplyFilter implements Action {\n    readonly type = FeedActionTypes.ApplyFilter;\n    /* istanbul ignore next */\n    constructor(public payload:{name: FilterType, active: boolean, status: any}){}\n}\n\nexport class InitFilters implements Action {\n    readonly type = FeedActionTypes.InitFilter;\n\n    /* istanbul ignore next */\n    constructor(public payload:{filters: Map}){}\n}\n\nexport type FeedActions =\n    InitFilters\n    | ApplyFilter;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ArchivesComponent.html":{"url":"components/ArchivesComponent.html","title":"component - ArchivesComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ArchivesComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/archives/archives.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-archives\n            \n\n            \n                styleUrls\n                ./archives.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./archives.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/archives/archives.component.ts:15\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/archives/archives.component.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'of-archives',\n  templateUrl: './archives.component.html',\n  styleUrls: ['./archives.component.scss']\n})\nexport class ArchivesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  archives works!\n\n\n    \n\n    \n                \n                    ./archives.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  archives works!'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ArchivesComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArchivesModule.html":{"url":"modules/ArchivesModule.html","title":"module - ArchivesModule","body":"\n                   \n\n\n\n\n    Modules\n    ArchivesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ArchivesModule\n\n\n\ncluster_ArchivesModule_declarations\n\n\n\ncluster_ArchivesModule_imports\n\n\n\n\nArchivesComponent\n\nArchivesComponent\n\n\n\nArchivesModule\n\nArchivesModule\n\nArchivesModule -->\n\nArchivesComponent->ArchivesModule\n\n\n\n\n\nArchivesRoutingModule\n\nArchivesRoutingModule\n\nArchivesModule -->\n\nArchivesRoutingModule->ArchivesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/archives/archives.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ArchivesComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ArchivesRoutingModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {ArchivesRoutingModule} from './archives-routing.module';\nimport {ArchivesComponent} from \"./archives.component\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ArchivesRoutingModule\n  ],\n  declarations: [ArchivesComponent]\n})\nexport class ArchivesModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArchivesRoutingModule.html":{"url":"modules/ArchivesRoutingModule.html","title":"module - ArchivesRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    ArchivesRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/archives/archives-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\n// import {AuthenticationGuard} from \"@ofServices/guard.service\";\nimport {ArchivesComponent} from \"./archives.component\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: ArchivesComponent,\n        // canActivate: [AuthenticationGuard]\n    },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ArchivesRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthObject.html":{"url":"classes/AuthObject.html","title":"class - AuthObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/authentication.service.ts\n        \n\n            \n                Description\n            \n            \n                class used to try to login using the authentication web service.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                access_token\n                            \n                            \n                                    Public\n                                clientId\n                            \n                            \n                                    Public\n                                expires_in\n                            \n                            \n                                    Public\n                                    Optional\n                                identifier\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(access_token: string, expires_in: number, clientId: Guid, identifier?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/authentication.service.ts:266\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        access_token\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        expires_in\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clientId\n                                                  \n                                                        \n                                                                    Guid\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        identifier\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            access_token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:269\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            clientId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Guid\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:271\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            expires_in\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:270\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            identifier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:272\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, of, throwError} from 'rxjs';\nimport {catchError, map, tap} from 'rxjs/operators';\nimport {Guid} from 'guid-typescript';\nimport {PayloadForSuccessfulAuthentication} from '@ofActions/authentication.actions';\nimport {environment} from \"@env/environment\";\nimport {GuidService} from \"@ofServices/guid.service\";\nimport {AppState} from \"@ofStore/index\";\nimport {Store} from \"@ngrx/store\";\nimport {buildConfigSelector} from \"@ofSelectors/config.selectors\";\nimport * as jwt_decode from \"jwt-decode\";\nimport * as _ from \"lodash\";\n\nexport enum LocalStorageAuthContent {\n    token = 'token',\n    expirationDate = 'expirationDate',\n    identifier = 'identifier',\n    clientId = 'clientId'\n}\n\nexport const ONE_SECOND = 1000;\n\n@Injectable()\nexport class AuthenticationService {\n\n    /** url to check authentication token (jwt) */\n    private checkTokenUrl = `${environment.urls.auth}/check_token`;\n    /** url to ask for an authentication token (jwt) */\n    private askTokenUrl = `${environment.urls.auth}/token`;\n    private clientId: string;\n    private clientSecret: string;\n    private loginClaim: string;\n    private expireClaim: string;\n\n    /**\n     * @constructor\n     * @param httpClient - Angular build-in\n     * @param guidService - create and store the unique id for this application and user\n     * @param store NGRX store\n     */\n    constructor(private httpClient: HttpClient, private guidService: GuidService, private store: Store) {\n        store.select(buildConfigSelector('security'))\n            .subscribe(oauth2Conf => {\n                this.assignConfigurationProperties(oauth2Conf);\n\n            });\n    }\n\n    assignConfigurationProperties(oauth2Conf) {\n        this.clientId = _.get(oauth2Conf, 'oauth2.client-id', null);\n        this.clientSecret = _.get(oauth2Conf, 'oauth2.client-secret', null);\n        this.loginClaim = _.get(oauth2Conf, 'jwt.login-claim', 'sub');\n        this.expireClaim = _.get(oauth2Conf, 'jwt.expire-claim', 'exp');\n    }\n\n    /**\n     * Call the web service which checks the authentication token. A valid token gives back the authentication information\n     * and an invalid one an message.\n     *\n     * @param token - jwt token\n     * @return an {Observable} which contains the deserializable content of the token\n     * an message is thrown otherwise\n     */\n    checkAuthentication(token: string): Observable {\n        if (!!token) {\n            // const postData = new FormData();\n            const postData = new URLSearchParams();\n            postData.append('token', token);\n            const headers = new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'});\n            return this.httpClient.post(this.checkTokenUrl, postData.toString(), {headers: headers}).pipe(\n                map(check => check),\n                catchError(AuthenticationService.handleError)\n            );\n        }\n        return of(null);\n    }\n\n    /**\n     * Given a pair of connection, ask the web service generating jwt authentication token a token if the pair is\n     * a registered one.\n     * @param code OIDC code from code flow\n     */\n    askTokenFromCode(code: string):\n        Observable {\n        if (!this.clientId || !this.clientSecret || !this.loginClaim)\n            return throwError('The authentication service is no correctly initialized');\n        const params = new URLSearchParams();\n        params.append('code', code);\n        params.append('grant_type', 'authorization_code');\n// beware clientId for token defines a type of authentication\n        params.append('clientId', this.clientId);\n        params.append('redirect_uri', AuthenticationService.computeRedirectUri());\n\n        const headers = new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'});\n        return this.handleNewToken(this.httpClient.post(this.askTokenUrl, params.toString(), {headers: headers}));\n    }\n\n    /**\n     * Given a pair of connection, ask the web service generating jwt authentication token a token if the pair is\n     * a registered one.\n     * @param login\n     * @param password\n     */\n    askTokenFromPassword(login\n                             :\n                             string, password\n                             :\n                             string\n    ):\n        Observable {\n        if (!\n            this.clientId || !this.clientSecret\n        )\n            return throwError('The authentication service is no correctly initialized');\n        const params = new URLSearchParams();\n        params.append('username', login);\n        params.append('password', password);\n        params.append('grant_type', 'password');\n// beware clientId for token defines a type of authentication\n        params.append('clientId', this.clientId);\n        params.append('client_secret', this.clientSecret);\n\n        const headers = new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'});\n        return this.handleNewToken(this.httpClient.post(this.askTokenUrl, params.toString(), {headers: headers}));\n    }\n\n    private handleNewToken(call: Observable): Observable {\n        return call.pipe(\n            map(data => {\n                return {...data, clientId: this.guidService.getCurrentGuid()}\n            }),\n            map((auth: AuthObject) => this.convert(auth)),\n            tap(AuthenticationService.saveAuthenticationInformation),\n            catchError(AuthenticationService.handleError)\n        );\n    }\n\n    private static handleError(error: any) {\n        console.error(error);\n        return throwError(error);\n    }\n\n    /**\n     * extract the jwt authentication token from the localstorage\n     */\n    static extractToken(): string {\n        return localStorage.getItem(LocalStorageAuthContent.token);\n    }\n\n    /**\n     * @return true if the expiration date stored in the `localestorage` is still running, false otherwise.\n     */\n    static verifyExpirationDate(): boolean {\n        // + to convert the stored number as a string back to number\n        const expirationDate = +localStorage.getItem(LocalStorageAuthContent.expirationDate);\n        const isNotANumber = isNaN(expirationDate);\n        const stillValid = isInTheFuture(expirationDate);\n        return !isNotANumber && stillValid;\n    }\n\n    /**\n     * @return true if the expiration date stored in the `localstorage` is over, false otherwise\n     */\n    static isExpirationDateOver(): boolean {\n        return !AuthenticationService.verifyExpirationDate();\n    }\n\n    /**\n     * clear the `localstorage` from all its content.\n     */\n    static clearAuthenticationInformation(): void {\n        localStorage.clear();\n    }\n\n    /**\n     * save the authentication informatios such as identifier, jwt token, expiration date and clientId in the\n     * `localstorage`.\n     * @param payload\n     */\n    static saveAuthenticationInformation(payload: PayloadForSuccessfulAuthentication) {\n        localStorage.setItem(LocalStorageAuthContent.identifier, payload.identifier);\n        localStorage.setItem(LocalStorageAuthContent.token, payload.token);\n        localStorage.setItem(LocalStorageAuthContent.expirationDate, payload.expirationDate.getTime().toString());\n        localStorage.setItem(LocalStorageAuthContent.clientId, payload.clientId.toString());\n    }\n\n    /**\n     * extract from the `localstorage` the authentication relevant information such as dentifier, jwt token,\n     * expiration date and clientId\n     * @return {PayloadForSuccessfulAuthentication}\n     */\n    static extractIdentificationInformation(): PayloadForSuccessfulAuthentication {\n        return new PayloadForSuccessfulAuthentication(\n            localStorage.getItem(LocalStorageAuthContent.identifier),\n            Guid.parse(localStorage.getItem(LocalStorageAuthContent.clientId)),\n            localStorage.getItem(LocalStorageAuthContent.token),\n            // as getItem return a string, `+` isUsed\n            new Date(+localStorage.getItem(LocalStorageAuthContent.expirationDate)),\n        );\n    }\n\n\n\n    /**\n     * helper method to convert an {AuthObject} instance into a {PayloadForSuccessfulAuthentication} instance.\n     * @param payload\n     */\n    public convert(payload: AuthObject):\n        PayloadForSuccessfulAuthentication {\n        let expirationDate;\n        const jwt = AuthenticationService.decodeToken(payload.access_token);\n        if (!!payload.expires_in)\n            expirationDate = Date.now() + ONE_SECOND * payload.expires_in;\n        else if (!!this.expireClaim)\n            expirationDate = jwt[this.expireClaim];\n        else\n            expirationDate = 0;\n\n        return new PayloadForSuccessfulAuthentication(jwt[this.loginClaim],\n            payload.clientId,\n            payload.access_token,\n            new Date(expirationDate)\n        );\n    }\n\n    /**\n     * helper method to put the jwt token into an appropriate string usable as an http header\n     */\n    static getSecurityHeader() {\n        return {'Authorization': `Bearer ${AuthenticationService.extractToken()}`};\n    }\n\n    public moveToCodeFlowLoginPage() {\n        if (!this.clientId || !this.clientSecret)\n            return throwError('The authentication service is no correctly iniitialized');\n        window.location.href = `${environment.urls.auth}/code/redirect_uri=${AuthenticationService.computeRedirectUri()}`;\n    }\n\n    static computeRedirectUri(){\n        const uriBase = location.origin;\n        const pathEnd = (location.pathname.length > 1)?location.pathname:'';\n        return `${uriBase}${pathEnd}`\n    }\n\n    static decodeToken(token: string): any {\n        try {\n            return jwt_decode(token);\n        }\n        catch (Error) {\n            return null;\n        }\n    }\n}\n\n/**\n * class used to try to login using the authentication web service.\n */\nexport class AuthObject {\n\n    constructor(\n        public access_token: string,\n        public expires_in: number,\n        public clientId: Guid,\n        public identifier?: string\n    ) {\n    }\n\n}\n\n/**\n * class corresponding to the response of the web service checking jwt token when this token is a valid one.\n */\nexport class CheckTokenResponse {\n    constructor(\n        public sub?: string,\n        public exp?: number,\n        public clientId?: string,\n    ) {\n    }\n}\n\n/**\n * helper @method to confirm or not if the number corresponding to a given time is in the futur regarding the present\n * moment.\n * @param time - a number corresponding to an UTC time to test\n * @return  true if time is in the future regarding the present moment, false otherwise\n */\nexport function isInTheFuture(time: number): boolean {\n    return time > Date.now();\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthState.html":{"url":"interfaces/AuthState.html","title":"interface - AuthState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/authentication.state.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientId\n                                \n                                \n                                        code\n                                \n                                \n                                        expirationDate\n                                \n                                \n                                        identifier\n                                \n                                \n                                        message\n                                \n                                \n                                        token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientId\n                                    \n                                \n                                \n                                    \n                                        clientId:     Guid\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Guid\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                    \n                                \n                                \n                                    \n                                        code:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expirationDate\n                                    \n                                \n                                \n                                    \n                                        expirationDate:     Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        identifier\n                                    \n                                \n                                \n                                    \n                                        identifier:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     Message\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Message\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                    \n                                \n                                \n                                    \n                                        token:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Guid} from 'guid-typescript';\nimport {Message} from \"@ofModel/message.model\";\n\nexport interface AuthState {\n    code: string;\n    identifier: string;\n    clientId: Guid;\n    token: string;\n    expirationDate: Date;\n    message: Message;\n}\n\nexport const authInitialState: AuthState = {\n    code: null,\n    identifier: null,\n    clientId: null,\n    token: null,\n    expirationDate: new Date(0),\n    message: null\n};\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationEffects.html":{"url":"injectables/AuthenticationEffects.html","title":"injectable - AuthenticationEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/authentication.effects.ts\n        \n\n            \n                Description\n            \n            \n                Management of the authentication of the current user\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                AcceptLogOut\n                            \n                            \n                                CheckAuthentication\n                            \n                            \n                                checkAuthenticationWhenReady\n                            \n                            \n                                RejectLogInAttempt\n                            \n                            \n                                TryToLogIn\n                            \n                            \n                                TryToLogOut\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleErrorOnTokenGeneration\n                            \n                            \n                                handleRejectedLogin\n                            \n                            \n                                    Private\n                                resetState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, authService: AuthenticationService, cardService: CardService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/authentication.effects.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n{Store} state manager\n\n\n                                                        \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                    AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nservice implementing the authentication business rules\n\n\n                                                        \n                                                \n                                                \n                                                        cardService\n                                                  \n                                                        \n                                                                    CardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nrouter service to redirect user accordingly to the user authentication status or variation of it.\n\nistanbul ignore next \n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            handleErrorOnTokenGeneration\n                            \n                            \n                        \n                    \n                \n                \n                    \nhandleErrorOnTokenGeneration(errorResponse, category: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:224\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errorResponse\n                                                        \n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        category\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            handleRejectedLogin\n                            \n                            \n                        \n                    \n                \n                \n                    \nhandleRejectedLogin(errorMsg: Message)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:246\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errorMsg\n                                                        \n                                                                    Message\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     AuthenticationActions\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            resetState\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        resetState()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:119\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AcceptLogOut\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$.pipe(\n            ofType(AuthenticationActionTypes.AcceptLogOut),\n            map((action: AcceptLogOut) => {\n                this.router.navigate(['/login'])\n                return new AcceptLogOutSuccess();\n            })\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:136\n                            \n                        \n\n                \n                    \n                        This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.AcceptLogOut} type.\nIt tells the {Router} service to navigate to the Login page. and emit an {AcceptLogOutSucess} Action.\nThis {Effect} should be called as a consequence of a {TryLogOut} action\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CheckAuthentication\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n            .pipe(\n                ofType(AuthenticationActionTypes.CheckAuthenticationStatus),\n                switchMap(() => {\n                    return this.authService.checkAuthentication(AuthenticationService.extractToken())\n                        .pipe(catchError(() => of(null)));\n\n                }),\n                withLatestFrom(this.store.select(selectCode)),\n                switchMap(([payload, code]) => {\n                        //no token stored or token invalid\n                        if (!payload) {\n                            if (!!code)\n                                return this.authService.askTokenFromCode(code).pipe(\n                                    map(authenticationInfo => new AcceptLogIn(authenticationInfo)),\n                                    catchError(errorResponse => {\n                                            return this.handleErrorOnTokenGeneration(errorResponse,'code');\n                                        }\n                                    ));\n                            return of(this.handleRejectedLogin(new Message('The stored token is invalid',\n                                MessageLevel.ERROR,\n                                new I18n('login.error.token.invalid'))));\n                        } else {\n                            if (!AuthenticationService.isExpirationDateOver()) {\n                                const authInfo = AuthenticationService.extractIdentificationInformation();\n                                return of(new AcceptLogIn(authInfo));\n                            }\n                            return of(this.handleRejectedLogin(new Message('The stored token has expired',\n                                MessageLevel.ERROR,\n                                new I18n('login.error.token.expiration'))));\n                        }\n                    }\n                ),\n                catchError((err, caught) => {\n                    console.error(err);\n                    const parameters = new Map();\n                    parameters['message'] = err;\n                    return of(this.handleRejectedLogin(new Message(err,\n                        MessageLevel.ERROR,\n                        new I18n('login.error.unexpected', parameters)\n                    )));\n                })\n            )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:179\n                            \n                        \n\n                \n                    \n                        This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.CheckAuthenticationStatus} type.\nIt extract the current authentication information if any and checks its validity, the expiration date.\n  If it's OK then an {AcceptLogIn} Action with check result as payload is emittedby calling\n  the {handleLogInAttempt} @method,\n  otherwise a {RejectedLogIn} Action is emitted by calling the {handleRejectedLogin} @method.\nThis {Effect} should be the first effect apply by the application to display the right page accordingly with the\ncurrent authentication state.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            checkAuthenticationWhenReady\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n            .pipe(\n                ofType(ConfigActionTypes.LoadConfigSuccess),\n                map(() => new CheckAuthenticationStatus())\n            )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:61\n                            \n                        \n\n                \n                    \n                        Triggers Authentication Check when the application is ready\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RejectLogInAttempt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$.pipe(ofType(AuthenticationActionTypes.RejectLogIn),\n            tap(() => {\n                AuthenticationService.clearAuthenticationInformation();\n            }),\n            map(action => new AcceptLogOut()))\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:155\n                            \n                        \n\n                \n                    \n                        This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.RejectLogIn} type.\nIt tells the {AuthenticationService} to clear authentication information from the system\nThis {Effect} should be called after a wrong login attempt.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TryToLogIn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n            .pipe(\n                ofType(AuthenticationActionTypes.TryToLogIn),\n                switchMap((action: TryToLogIn) => {\n                    const payload = action.payload;\n                    return this.authService.askTokenFromPassword(payload.username, payload.password).pipe(\n                        map(authenticationInfo => new AcceptLogIn(authenticationInfo)),\n                        catchError(errorResponse => {\n                            return this.handleErrorOnTokenGeneration(errorResponse,'authenticate');\n                            }\n                        ));\n                })\n            )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:83\n                            \n                        \n\n                \n                    \n                        This {Observable} of {AuthenticationActions} listen {AuthenticationActionTypes.TryToLogIn} type and uses\nthe login payload to get an authentication token from the authentication service if the authentication is\nvalid and emit an {AcceptLogin} action with it.\nFor invalid authentication it emits a {RejectLogIn} Action with the message \"unable to authenticate the user\"\nas paload\nThis effect should take action after the user has submitted login information in the login page by clicking\non the login button.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TryToLogOut\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$.pipe(\n            ofType(AuthenticationActionTypes.TryToLogOut),\n            switchMap((action: TryToLogOut) => {\n                this.resetState();\n                return of(new EmptyLightCards(),new ClearCard(), new AcceptLogOut());\n            })\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/authentication.effects.ts:110\n                            \n                        \n\n                \n                    \n                        This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.TryToLogOut} type.\nIt tells the {AuthenticationService} to clear the authentication information from the system and emit\nan {AcceptLogOut} Action.\nThis effect should take action after the Logout link/button has been clicked by the user.\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Observable, of} from 'rxjs';\nimport {Action, Store} from '@ngrx/store';\nimport {\n    AcceptLogIn,\n    AcceptLogOut,\n    AcceptLogOutSuccess,\n    AuthenticationActions,\n    AuthenticationActionTypes,\n    CheckAuthenticationStatus,\n    RejectLogIn,\n    TryToLogIn,\n    TryToLogOut\n} from '@ofActions/authentication.actions';\nimport {AuthenticationService} from '../../services/authentication.service';\nimport {catchError, map, switchMap, tap, withLatestFrom} from 'rxjs/operators';\nimport {AppState} from \"@ofStore/index\";\nimport {Router} from \"@angular/router\";\nimport {ConfigActionTypes} from \"@ofActions/config.actions\";\nimport {selectCode} from \"@ofSelectors/authentication.selectors\";\nimport {Message, MessageLevel} from \"@ofModel/message.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map} from \"@ofModel/map\";\nimport {CardService} from \"@ofServices/card.service\";\nimport {EmptyLightCards} from \"@ofActions/light-card.actions\";\nimport {ClearCard} from \"@ofActions/card.actions\";\n\n/**\n * Management of the authentication of the current user\n */\n@Injectable()\nexport class AuthenticationEffects {\n\n    /**\n     * @constructor\n     * @param store - {Store} state manager\n     * @param action$ - {Action} {Observable} of Action of the Application\n     * @param authService - service implementing the authentication business rules\n     * @param router - router service to redirect user accordingly to the user authentication status or variation of it.\n     *\n     * istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private authService: AuthenticationService,\n                private cardService: CardService,\n                private router: Router) {\n    }\n\n    /**\n     * Triggers Authentication Check when the application is ready\n     */\n    @Effect()\n    checkAuthenticationWhenReady: Observable =\n        this.actions$\n            .pipe(\n                ofType(ConfigActionTypes.LoadConfigSuccess),\n                map(() => new CheckAuthenticationStatus())\n            );\n\n    /**\n     * This {Observable} of {AuthenticationActions} listen {AuthenticationActionTypes.TryToLogIn} type and uses\n     * the login payload to get an authentication token from the authentication service if the authentication is\n     * valid and emit an {AcceptLogin} action with it.\n     * For invalid authentication it emits a {RejectLogIn} Action with the message \"unable to authenticate the user\"\n     * as paload\n     *\n     * This effect should take action after the user has submitted login information in the login page by clicking\n     * on the login button.\n     *\n     * @member\n     * @name TryToLogin\n     * @typedef {Observable}\n     */\n    @Effect()\n    TryToLogIn: Observable =\n        this.actions$\n            .pipe(\n                ofType(AuthenticationActionTypes.TryToLogIn),\n                switchMap((action: TryToLogIn) => {\n                    const payload = action.payload;\n                    return this.authService.askTokenFromPassword(payload.username, payload.password).pipe(\n                        map(authenticationInfo => new AcceptLogIn(authenticationInfo)),\n                        catchError(errorResponse => {\n                            return this.handleErrorOnTokenGeneration(errorResponse,'authenticate');\n                            }\n                        ));\n                })\n            );\n\n    /**\n     * This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.TryToLogOut} type.\n     * It tells the {AuthenticationService} to clear the authentication information from the system and emit\n     * an {AcceptLogOut} Action.\n     *\n     * This effect should take action after the Logout link/button has been clicked by the user.\n     *\n     * @member\n     * @name TryToLogOut\n     * @typedef {Observable}\n     */\n    @Effect()\n    TryToLogOut: Observable =\n        this.actions$.pipe(\n            ofType(AuthenticationActionTypes.TryToLogOut),\n            switchMap((action: TryToLogOut) => {\n                this.resetState();\n                return of(new EmptyLightCards(),new ClearCard(), new AcceptLogOut());\n            })\n        );\n\n    private resetState() {\n        AuthenticationService.clearAuthenticationInformation();\n        this.cardService.unsubscribeCardOperation();\n    }\n\n    /**\n     * This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.AcceptLogOut} type.\n     * It tells the {Router} service to navigate to the Login page. and emit an {AcceptLogOutSucess} Action.\n     *\n     * This {Effect} should be called as a consequence of a {TryLogOut} action\n     *\n     * @member\n     * @name AcceptLogOut\n     * @typedef {Observable}\n     *\n     */\n    @Effect()\n    AcceptLogOut: Observable =\n        this.actions$.pipe(\n            ofType(AuthenticationActionTypes.AcceptLogOut),\n            map((action: AcceptLogOut) => {\n                this.router.navigate(['/login'])\n                return new AcceptLogOutSuccess();\n            })\n        );\n    /**\n     * This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.RejectLogIn} type.\n     * It tells the {AuthenticationService} to clear authentication information from the system\n     *\n     * This {Effect} should be called after a wrong login attempt.\n\n     * @member\n     * @name RejectLogInAttempt\n     * @typedef {Observable}\n     */\n    @Effect()\n    RejectLogInAttempt: Observable =\n        this.actions$.pipe(ofType(AuthenticationActionTypes.RejectLogIn),\n            tap(() => {\n                AuthenticationService.clearAuthenticationInformation();\n            }),\n            map(action => new AcceptLogOut()));\n\n    /**\n     * This {Observable} of {AuthenticationActions} listens for {AuthenticationActionTypes.CheckAuthenticationStatus} type.\n     *It extract the current authentication information if any and checks its validity, the expiration date.\n     *  If it's OK then an {AcceptLogIn} Action with check result as payload is emittedby calling\n     *  the {handleLogInAttempt} @method,\n     *\n     *  otherwise a {RejectedLogIn} Action is emitted by calling the {handleRejectedLogin} @method.\n     *\n     * This {Effect} should be the first effect apply by the application to display the right page accordingly with the\n     * current authentication state.\n     *\n     * @member\n     * @name CheckAuthentication\n     * @typedef {Observable}\n     *\n     */\n    @Effect()\n    CheckAuthentication: Observable =\n        this.actions$\n            .pipe(\n                ofType(AuthenticationActionTypes.CheckAuthenticationStatus),\n                switchMap(() => {\n                    return this.authService.checkAuthentication(AuthenticationService.extractToken())\n                        .pipe(catchError(() => of(null)));\n\n                }),\n                withLatestFrom(this.store.select(selectCode)),\n                switchMap(([payload, code]) => {\n                        //no token stored or token invalid\n                        if (!payload) {\n                            if (!!code)\n                                return this.authService.askTokenFromCode(code).pipe(\n                                    map(authenticationInfo => new AcceptLogIn(authenticationInfo)),\n                                    catchError(errorResponse => {\n                                            return this.handleErrorOnTokenGeneration(errorResponse,'code');\n                                        }\n                                    ));\n                            return of(this.handleRejectedLogin(new Message('The stored token is invalid',\n                                MessageLevel.ERROR,\n                                new I18n('login.error.token.invalid'))));\n                        } else {\n                            if (!AuthenticationService.isExpirationDateOver()) {\n                                const authInfo = AuthenticationService.extractIdentificationInformation();\n                                return of(new AcceptLogIn(authInfo));\n                            }\n                            return of(this.handleRejectedLogin(new Message('The stored token has expired',\n                                MessageLevel.ERROR,\n                                new I18n('login.error.token.expiration'))));\n                        }\n                    }\n                ),\n                catchError((err, caught) => {\n                    console.error(err);\n                    const parameters = new Map();\n                    parameters['message'] = err;\n                    return of(this.handleRejectedLogin(new Message(err,\n                        MessageLevel.ERROR,\n                        new I18n('login.error.unexpected', parameters)\n                    )));\n                })\n            );\n\n    handleErrorOnTokenGeneration(errorResponse,category:string) {\n        let message, key;\n        let params = new Map()\n        switch (errorResponse.status) {\n            case 401:\n                message = 'Unable to authenticate the user';\n                key = `login.error.${category}`;\n                break;\n            case 0:\n            case 500:\n                message = 'Authentication service currently unavailable';\n                key = 'login.error.unavailable';\n                break;\n            default:\n                message = 'Unexpected error';\n                key = 'login.error.unexpected';\n                params['error'] = errorResponse.message;\n        }\n        console.error(message, errorResponse);\n        return of(new RejectLogIn({error: new Message(message, MessageLevel.ERROR, new I18n(key, params))}));\n    }\n\n    handleRejectedLogin(errorMsg: Message): AuthenticationActions {\n        AuthenticationService.clearAuthenticationInformation();\n        return new RejectLogIn({error: errorMsg});\n\n    }\n\n    // handleLogInAttempt(payload: CheckTokenResponse): AuthenticationActions {\n    //     if (payload) {\n    //         const authInfo = this.authService.extractIdentificationInformation();\n    //         return new AcceptLogIn(authInfo);\n    //\n    //     }\n    //     return this.handleRejectedLogin('invalid token');\n    // }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Card.html":{"url":"classes/Card.html","title":"class - Card","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Card\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/card.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uid: string, id: string, publisher: string, publisherVersion: string, publishDate: number, startDate: number, endDate: number, severity: Severity, mainRecipient: string, process?: string, processId?: string, state?: string, lttd?: number, title?: I18n, summary?: I18n, data?: any, details?: Detail[])\n                    \n                \n                        \n                            \n                                Defined in src/app/model/card.model.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uid\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publisher\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publisherVersion\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publishDate\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        startDate\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        endDate\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        severity\n                                                  \n                                                        \n                                                                    Severity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mainRecipient\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        process\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        processId\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        lttd\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        title\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        summary\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        details\n                                                  \n                                                        \n                                                                    Detail[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Severity} from \"@ofModel/light-card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map} from \"@ofModel/map\";\n\nexport class Card {\n    /* istanbul ignore next */\n    constructor(\n        readonly uid: string,\n        readonly id: string,\n        readonly publisher: string,\n        readonly publisherVersion: string,\n        readonly publishDate: number,\n        readonly startDate: number,\n        readonly endDate: number,\n        readonly severity: Severity,\n        readonly mainRecipient: string,\n        readonly process?: string,\n        readonly processId?: string,\n        readonly state?: string,\n        readonly lttd?: number,\n        readonly title?: I18n,\n        readonly summary?: I18n,\n        readonly  data?: any,\n        readonly  details?: Detail[],\n    ) {\n    }\n}\n\nexport enum TitlePosition {\n    UP, DOWN, NONE\n\n}\n\nexport class Detail {\n    /* istanbul ignore next */\n    constructor(\n        readonly titlePosition: TitlePosition,\n        readonly title: I18n,\n        readonly titleStyle: string,\n        readonly templateName: string,\n        readonly styles: string[]) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CardComponent.html":{"url":"components/CardComponent.html","title":"component - CardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/cards/components/card/card.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-card\n            \n\n            \n                styleUrls\n                ./card.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./card.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _i18nPrefix\n                            \n                            \n                                currentPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                    Public\n                                select\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                lightCard\n                            \n                            \n                                open\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    i18nPrefix\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/cards/components/card/card.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        lightCard\n                    \n                \n                \n                    \n                        Type :     LightCard\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        open\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:24\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:40\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        select()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _i18nPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:26\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        i18nPrefix\n                    \n                \n\n                \n                    \n                        geti18nPrefix()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/cards/components/card/card.component.ts:53\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, Input, OnInit} from '@angular/core';\nimport {LightCard} from '@ofModel/light-card.model';\nimport {Router} from '@angular/router';\nimport {selectCurrentUrl} from '@ofStore/selectors/router.selectors';\nimport {Store} from '@ngrx/store';\nimport {AppState} from '@ofStore/index';\nimport {selectCardStateSelectedId} from \"@ofSelectors/card.selectors\";\nimport {map} from \"rxjs/operators\";\n\n@Component({\n    selector: 'of-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.scss']\n})\nexport class CardComponent implements OnInit{\n\n    @Input() public open: boolean = false;\n    @Input() public lightCard: LightCard;\n    currentPath: any;\n    private _i18nPrefix: string;\n\n    /* istanbul ignore next */\n    constructor(private router: Router,\n                private store: Store) {\n\n    }\n\n    public select() {\n        this.router.navigate(['/'+this.currentPath,'cards',this.lightCard.id]);\n        this.open=true;\n    }\n\n    ngOnInit() {\n        this._i18nPrefix = this.lightCard.publisher+'.'+this.lightCard.publisherVersion+'.'\n        this.store.select(selectCurrentUrl).subscribe(url=>{\n            if(url)\n                this.currentPath = url.split('/')[1];\n        });\n        this.store.select(selectCardStateSelectedId)\n            .pipe(\n                map(id=>this.lightCard.id == id)\n            ).subscribe(open=>this.open = open)\n        ;\n    }\n\n    get i18nPrefix(): string {\n        return this._i18nPrefix;\n    }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n    \n        \n        \n        \n            {{i18nPrefix+lightCard.title.key}}\n            ({{lightCard.startDate|date:'short'}} - {{lightCard.endDate|date:'short'}})\n        \n    \n    \n        \n        \n            {{i18nPrefix+lightCard.summary.key}}\n        \n    \n\n\n    \n\n    \n                \n                    ./card.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n.light-card-detail {\n  max-width: 400px;\n}\n\n.card {\n  margin-bottom: 5px;\n}\n\n.card-title {\n  font-variant: small-caps;\n  font-size: larger;\n}\n\n.card-subtitle {\n  font-size: small;\n}\n\n.card-text {\n  font-size: small;\n}\n\n.badge-border {\n  width: 30px;\n  text-align: center;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                        {{i18nPrefix+lightCard.title.key}}            ({{lightCard.startDate|date:\\'short\\'}} - {{lightCard.endDate|date:\\'short\\'}})                                            {{i18nPrefix+lightCard.summary.key}}            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CardDetailsComponent.html":{"url":"components/CardDetailsComponent.html","title":"component - CardDetailsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CardDetailsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/cards/components/card-details/card-details.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-card-details\n            \n\n\n\n\n            \n                templateUrl\n                ./card-details.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                card\n                            \n                            \n                                details\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, thirdsService: ThirdsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/cards/components/card-details/card-details.component.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        thirdsService\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/card-details/card-details.component.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            card\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Card\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card-details/card-details.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            details\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Detail[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/card-details/card-details.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\nimport {Card, Detail} from '@ofModel/card.model';\nimport {Store} from '@ngrx/store';\nimport {AppState} from '@ofStore/index';\nimport * as cardSelectors from '@ofStore/selectors/card.selectors';\nimport {ThirdsService} from \"@ofServices/thirds.service\";\n\n@Component({\n    selector: 'of-card-details',\n    templateUrl: './card-details.component.html',\n})\nexport class CardDetailsComponent implements OnInit {\n\n    card: Card;\n    details: Detail[];\n\n    constructor(private store: Store, private thirdsService: ThirdsService) {\n\n    }\n\n    ngOnInit() {\n        this.store.select(cardSelectors.selectCardStateSelected)\n            .subscribe(card => {\n                this.card = card;\n                if(card) {\n                    if(card.details) {\n                        this.details = [...card.details];\n                    }else{\n                        this.details = [];\n                    }\n                    this.thirdsService.queryThird(this.card.publisher, this.card.publisherVersion)\n                        .subscribe(third => {\n                            const state = third.extractState(this.card)\n                            if (state != null)\n                                this.details.push(...state.details);\n                        });\n                }\n            });\n    }\n\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CardDetailsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CardEffects.html":{"url":"injectables/CardEffects.html","title":"injectable - CardEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CardEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/card.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loadById\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, service: CardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/card.effects.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    CardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadById\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            ofType(CardActionTypes.LoadCard),\n            switchMap(action => this.service.loadCard(action.payload.id)),\n            map((card: Card) => {\n                return new LoadCardSuccess({card: card});\n            }),\n            catchError((err, caught) => {\n                this.store.dispatch(new LoadCardFailure(err));\n                return caught;\n            })\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/card.effects.ts:30\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {Observable} from 'rxjs';\nimport {catchError, map, switchMap} from 'rxjs/operators';\nimport {CardService} from '@ofServices/card.service';\nimport {AppState} from \"@ofStore/index\";\nimport {CardActionTypes, LoadCard, LoadCardFailure, LoadCardSuccess} from \"@ofActions/card.actions\";\nimport {Card} from \"@ofModel/card.model\";\n\n// those effects are unused for the moment\n@Injectable()\nexport class CardEffects {\n\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private service: CardService\n    ) {\n    }\n\n    @Effect()\n    loadById: Observable = this.actions$\n        .pipe(\n            ofType(CardActionTypes.LoadCard),\n            switchMap(action => this.service.loadCard(action.payload.id)),\n            map((card: Card) => {\n                return new LoadCardSuccess({card: card});\n            }),\n            catchError((err, caught) => {\n                this.store.dispatch(new LoadCardFailure(err));\n                return caught;\n            })\n        );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CardFeedState.html":{"url":"interfaces/CardFeedState.html","title":"interface - CardFeedState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CardFeedState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/feed.state.ts\n        \n\n            \n                Description\n            \n            \n                The Feed State consist of:\n\nEntityState of LightCard\nselectedCardId: the currently selected card id\nlastCards the last cards added / updated to the feed\nloading: weather there is an ongoing state modification\nmessage: last message during state processing\nfilters: a collection of filter to apply to the rendered feed\n\n\n            \n\n            \n                Extends\n            \n            \n                    EntityState\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        filters\n                                \n                                \n                                        lastCards\n                                \n                                \n                                        loading\n                                \n                                \n                                        selectedCardId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filters\n                                    \n                                \n                                \n                                    \n                                        filters:     Map\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Map\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastCards\n                                    \n                                \n                                \n                                    \n                                        lastCards:     LightCard[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LightCard[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                    \n                                \n                                \n                                    \n                                        loading:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectedCardId\n                                    \n                                \n                                \n                                    \n                                        selectedCardId:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createEntityAdapter, EntityAdapter, EntityState} from '@ngrx/entity';\nimport {LightCard} from '@ofModel/light-card.model';\nimport {Filter} from \"@ofModel/feed-filter.model\";\nimport {FilterType} from \"@ofServices/filter.service\";\n\n/**\n * The Feed State consist of:\n *  * EntityState of LightCard\n *  * selectedCardId: the currently selected card id\n *  * lastCards the last cards added / updated to the feed\n *  * loading: weather there is an ongoing state modification\n *  * message: last message during state processing\n *  * filters: a collection of filter to apply to the rendered feed\n */\nexport interface CardFeedState extends EntityState {\n    selectedCardId: string;\n    lastCards: LightCard[];\n    loading: boolean;\n    error: string;\n    filters: Map;\n}\n\nexport function sortByStartDate(card1: LightCard, card2: LightCard){\n    return card1.startDate - card2.startDate\n}\n\nexport const LightCardAdapter: EntityAdapter = createEntityAdapter({\n    sortComparer:sortByStartDate\n});\n\nexport const feedInitialState: CardFeedState = LightCardAdapter.getInitialState(\n    {\n        selectedCardId: null,\n        lastCards: [],\n        loading: false,\n        error: '',\n        filters: new Map()\n    });\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CardListComponent.html":{"url":"components/CardListComponent.html","title":"component - CardListComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CardListComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/components/card-list/card-list.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-card-list\n            \n\n\n\n\n            \n                templateUrl\n                ./card-list.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                lightCards\n                            \n                            \n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/components/card-list/card-list.component.ts:18\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        lightCards\n                    \n                \n                \n                    \n                        Type :     LightCard[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/card-list.component.ts:17\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        selection\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/card-list.component.ts:18\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import {Component, Input} from '@angular/core';\nimport {LightCard} from '@ofModel/light-card.model';\n\n@Component({\n  selector: 'of-card-list',\n  templateUrl: './card-list.component.html',\n})\nexport class CardListComponent  {\n\n  @Input() public lightCards: LightCard[];\n  @Input() public selection: string;\n\n  constructor() { }\n\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  \n\n  \n    \n  \n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '          '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CardListComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CardOperationEffects.html":{"url":"injectables/CardOperationEffects.html","title":"injectable - CardOperationEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CardOperationEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/card-operation.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                subscribe\n                            \n                            \n                                updateSubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, service: CardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/card-operation.effects.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    CardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subscribe\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            // loads card operations only after authentication of a default user ok.\n            ofType(AuthenticationActionTypes.AcceptLogIn),\n            switchMap(() => this.service.getCardOperation()\n                .pipe(\n                    takeUntil(this.service.unsubscribe$),\n                    map(operation => {\n                        if (operation.type && operation.type.toString() === 'ADD') {\n                            const opCards = operation.cards;\n                            return new LoadLightCardsSuccess({lightCards: opCards});\n                        }\n                        return new AddLightCardFailure(\n                            {\n                                error:\n                                    new Error(`unhandled action type '${operation.type}'`)\n                            });\n                    }),\n                    catchError((error, caught) => {\n                        this.store.dispatch(new AddLightCardFailure({error: error}));\n                        return caught;\n                    })\n                )\n            ),\n\n            catchError((error,caught )=> {\n                this.store.dispatch(new HandleUnexpectedError({error: error}));\n                return caught;\n            }))\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/card-operation.effects.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            // loads card operations only after authentication of a default user ok.\n            ofType(FeedActionTypes.ApplyFilter),\n            filter((af:ApplyFilter)=>af.payload.name == FilterType.TIME_FILTER),\n            switchMap((af:ApplyFilter) => this.service.updateCardSubscriptionWithDates(af.payload.status.start,af.payload.status.end)\n                .pipe(\n                    map(()=> {\n                        return new UpdatedSubscription();\n                    })\n                )\n            ),\n            catchError((error,caught )=> {\n                this.store.dispatch(new HandleUnexpectedError({error: error}))\n                return caught;\n            })\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/card-operation.effects.ts:67\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {CardService} from '@ofServices/card.service';\nimport {Observable} from 'rxjs';\nimport {catchError, filter, map, switchMap, takeUntil} from 'rxjs/operators';\nimport {\n    AddLightCardFailure,\n    HandleUnexpectedError,\n    LightCardActions,\n    LoadLightCardsSuccess,\n    UpdatedSubscription\n} from '@ofActions/light-card.actions';\nimport {AuthenticationActionTypes} from '@ofActions/authentication.actions';\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"@ofStore/index\";\nimport {ApplyFilter, FeedActionTypes} from \"@ofActions/feed.actions\";\nimport {FilterType} from \"@ofServices/filter.service\";\n\n@Injectable()\nexport class CardOperationEffects {\n\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private service: CardService) {\n    }\n\n    @Effect()\n    subscribe: Observable = this.actions$\n        .pipe(\n            // loads card operations only after authentication of a default user ok.\n            ofType(AuthenticationActionTypes.AcceptLogIn),\n            switchMap(() => this.service.getCardOperation()\n                .pipe(\n                    takeUntil(this.service.unsubscribe$),\n                    map(operation => {\n                        if (operation.type && operation.type.toString() === 'ADD') {\n                            const opCards = operation.cards;\n                            return new LoadLightCardsSuccess({lightCards: opCards});\n                        }\n                        return new AddLightCardFailure(\n                            {\n                                error:\n                                    new Error(`unhandled action type '${operation.type}'`)\n                            });\n                    }),\n                    catchError((error, caught) => {\n                        this.store.dispatch(new AddLightCardFailure({error: error}));\n                        return caught;\n                    })\n                )\n            ),\n\n            catchError((error,caught )=> {\n                this.store.dispatch(new HandleUnexpectedError({error: error}));\n                return caught;\n            }));\n\n    @Effect()\n    updateSubscription: Observable = this.actions$\n        .pipe(\n            // loads card operations only after authentication of a default user ok.\n            ofType(FeedActionTypes.ApplyFilter),\n            filter((af:ApplyFilter)=>af.payload.name == FilterType.TIME_FILTER),\n            switchMap((af:ApplyFilter) => this.service.updateCardSubscriptionWithDates(af.payload.status.start,af.payload.status.end)\n                .pipe(\n                    map(()=> {\n                        return new UpdatedSubscription();\n                    })\n                )\n            ),\n            catchError((error,caught )=> {\n                this.store.dispatch(new HandleUnexpectedError({error: error}))\n                return caught;\n            })\n        );\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CardService.html":{"url":"injectables/CardService.html","title":"injectable - CardService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/card.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                cardOperationsUrl\n                            \n                            \n                                    Readonly\n                                cardsUrl\n                            \n                            \n                                    Readonly\n                                unsubscribe$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fetchCardOperation\n                            \n                            \n                                getCardOperation\n                            \n                            \n                                loadCard\n                            \n                            \n                                unsubscribeCardOperation\n                            \n                            \n                                    Public\n                                updateCardSubscriptionWithDates\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient, authenticationService: AuthenticationService, guidService: GuidService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/card.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                    AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guidService\n                                                  \n                                                        \n                                                                    GuidService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchCardOperation\n                            \n                            \n                        \n                    \n                \n                \n                    \nfetchCardOperation(eventSource: EventSourcePolyfill)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/card.service.ts:48\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventSource\n                                                        \n                                                                    EventSourcePolyfill\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCardOperation\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCardOperation()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/card.service.ts:34\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadCard\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadCard(id: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/card.service.ts:30\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            unsubscribeCardOperation\n                            \n                            \n                        \n                    \n                \n                \n                    \nunsubscribeCardOperation()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/card.service.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            updateCardSubscriptionWithDates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        updateCardSubscriptionWithDates(rangeStart: number, rangeEnd: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/card.service.ts:72\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rangeStart\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        rangeEnd\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            cardOperationsUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/card.service.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            cardsUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/card.service.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            unsubscribe$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/card.service.ts:20\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {CardOperation} from '@ofModel/card-operation.model';\nimport {EventSourcePolyfill} from 'ng-event-source';\nimport {AuthenticationService} from './authentication.service';\nimport {Card} from \"@ofModel/card.model\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {environment} from \"@env/environment\";\nimport {GuidService} from \"@ofServices/guid.service\";\n\n@Injectable()\nexport class CardService {\n    readonly unsubscribe$ = new Subject();\n    readonly cardOperationsUrl: string;\n    readonly cardsUrl: string;\n\n    constructor(private httpClient:HttpClient, private authenticationService: AuthenticationService,private guidService: GuidService) {\n        const clientId = this.guidService.getCurrentGuidString();\n        this.cardOperationsUrl = `${environment.urls.cards}/cardSubscription?clientId=${clientId}`;\n        this.cardsUrl = `${environment.urls.cards}/cards`;\n    }\n\n    loadCard(id: string): Observable {\n        return this.httpClient.get(`${this.cardsUrl}/${id}`);\n    }\n\n    getCardOperation(): Observable {\n        let minus2Hour = new Date(new Date().valueOf()-2*60*60*1000);\n        let plus48Hours = new Date(minus2Hour.valueOf()+48*60*60*1000);\n        //security header needed here as SSE request are not intercepted by our header interceptor\n        return this.fetchCardOperation(new EventSourcePolyfill(\n            `${this.cardOperationsUrl}&notification=true&rangeStart=${minus2Hour.valueOf()}&rangeEnd=${plus48Hours.valueOf()}`\n            , {headers: AuthenticationService.getSecurityHeader(),\n                heartbeatTimeout: 600000}));\n    }\n\n    unsubscribeCardOperation(){\n        this.unsubscribe$.next();\n    }\n\n    fetchCardOperation(eventSource: EventSourcePolyfill): Observable {\n        return Observable.create(observer => {\n            try {\n                eventSource.onmessage = message => {\n                    if (!message) {\n                        return observer.error(message);\n                    }\n                    return observer.next(JSON.parse(message.data));\n                };\n                eventSource.onerror = error => {\n                    console.error(`error occured from ES: ${error.toString()}`)\n                }\n\n            } catch (error) {\n                return observer.error(error);\n            }\n            return () => {\n                if (eventSource && eventSource.readyState !== eventSource.CLOSED) {\n                    eventSource.close();\n                }\n            };\n        })\n    }\n\n    public updateCardSubscriptionWithDates(rangeStart:number,rangeEnd:number):Observable{\n        return this.httpClient.post(\n            `${this.cardOperationsUrl}`,\n            {rangeStart:rangeStart,rangeEnd: rangeEnd});\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CardState.html":{"url":"interfaces/CardState.html","title":"interface - CardState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CardState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/card.state.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        loading\n                                \n                                \n                                        selected\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                    \n                                \n                                \n                                    \n                                        loading:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                    \n                                \n                                \n                                    \n                                        selected:     Card\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Card\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Card} from \"@ofModel/card.model\";\n\nexport interface CardState{\n    selected: Card,\n    loading: boolean,\n    error: string\n}\n\nexport const cardInitialState: CardState = {\n    selected: null,\n    loading: false,\n    error: null\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CardsModule.html":{"url":"modules/CardsModule.html","title":"module - CardsModule","body":"\n                   \n\n\n\n\n    Modules\n    CardsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CardsModule\n\n\n\ncluster_CardsModule_declarations\n\n\n\ncluster_CardsModule_exports\n\n\n\ncluster_CardsModule_providers\n\n\n\n\nCardComponent\n\nCardComponent\n\n\n\nCardsModule\n\nCardsModule\n\nCardsModule -->\n\nCardComponent->CardsModule\n\n\n\n\n\nCardDetailsComponent\n\nCardDetailsComponent\n\nCardsModule -->\n\nCardDetailsComponent->CardsModule\n\n\n\n\n\nDetailComponent\n\nDetailComponent\n\nCardsModule -->\n\nDetailComponent->CardsModule\n\n\n\n\n\nDetailsComponent\n\nDetailsComponent\n\nCardsModule -->\n\nDetailsComponent->CardsModule\n\n\n\n\n\nCardComponent \n\nCardComponent \n\nCardComponent  -->\n\nCardsModule->CardComponent \n\n\n\n\n\nCardDetailsComponent \n\nCardDetailsComponent \n\nCardDetailsComponent  -->\n\nCardsModule->CardDetailsComponent \n\n\n\n\n\nDetailComponent \n\nDetailComponent \n\nDetailComponent  -->\n\nCardsModule->DetailComponent \n\n\n\n\n\nDetailsComponent \n\nDetailsComponent \n\nDetailsComponent  -->\n\nCardsModule->DetailsComponent \n\n\n\n\n\nHandlebarsService\n\nHandlebarsService\n\nCardsModule -->\n\nHandlebarsService->CardsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/cards/cards.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            CardComponent\n                        \n                        \n                            CardDetailsComponent\n                        \n                        \n                            DetailComponent\n                        \n                        \n                            DetailsComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            HandlebarsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CardComponent\n                        \n                        \n                            CardDetailsComponent\n                        \n                        \n                            DetailComponent\n                        \n                        \n                            DetailsComponent\n                        \n                    \n                \n            \n        \n\n        \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            forRoot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        forRoot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/cards.module.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     ModuleWithProviders\n\n                            \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CardComponent} from \"./components/card/card.component\";\nimport {CardDetailsComponent} from \"./components/card-details/card-details.component\";\nimport {DetailsComponent} from \"./components/details/details.component\";\nimport {DetailComponent} from \"./components/detail/detail.component\";\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {ThirdsService} from \"../../services/thirds.service\";\nimport {HandlebarsService} from \"./services/handlebars.service\";\n\n@NgModule({\n  declarations: [CardComponent, CardDetailsComponent, DetailsComponent, DetailComponent],\n  imports: [\n    CommonModule,\n      TranslateModule\n  ],\n    exports: [CardComponent, CardDetailsComponent, DetailsComponent, DetailComponent],\n    providers: [HandlebarsService]\n})\nexport class CardsModule {\n    static forRoot(): ModuleWithProviders{\n        return {\n            ngModule: CardsModule,\n            providers: [ThirdsService]\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckAuthenticationStatus.html":{"url":"classes/CheckAuthenticationStatus.html","title":"class - CheckAuthenticationStatus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckAuthenticationStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                It aims to validate the current authentication if exists.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.CheckAuthenticationStatus\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:50\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\nimport {Message} from \"@ofModel/message.model\";\n\nexport enum AuthenticationActionTypes {\n    InitAuthStatus = '[Authentication] Init Authentication Status',\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\n/**\n * Authentication success payload\n */\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class InitAuthStatus implements Action {\n    readonly type = AuthenticationActionTypes.InitAuthStatus;\n    /* istanbul ignore next */\n    constructor(public payload:{code: string}){}\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: PayloadForSuccessfulAuthentication) {}\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Message }) {}\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    /* istanbul ignore next */\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n    InitAuthStatus\n    | AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckTokenResponse.html":{"url":"classes/CheckTokenResponse.html","title":"class - CheckTokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckTokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/authentication.service.ts\n        \n\n            \n                Description\n            \n            \n                class corresponding to the response of the web service checking jwt token when this token is a valid one.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                clientId\n                            \n                            \n                                    Public\n                                    Optional\n                                exp\n                            \n                            \n                                    Public\n                                    Optional\n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sub?: string, exp?: number, clientId?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/authentication.service.ts:281\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sub\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        exp\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        clientId\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            clientId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:285\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            exp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:284\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            sub\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/authentication.service.ts:283\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, of, throwError} from 'rxjs';\nimport {catchError, map, tap} from 'rxjs/operators';\nimport {Guid} from 'guid-typescript';\nimport {PayloadForSuccessfulAuthentication} from '@ofActions/authentication.actions';\nimport {environment} from \"@env/environment\";\nimport {GuidService} from \"@ofServices/guid.service\";\nimport {AppState} from \"@ofStore/index\";\nimport {Store} from \"@ngrx/store\";\nimport {buildConfigSelector} from \"@ofSelectors/config.selectors\";\nimport * as jwt_decode from \"jwt-decode\";\nimport * as _ from \"lodash\";\n\nexport enum LocalStorageAuthContent {\n    token = 'token',\n    expirationDate = 'expirationDate',\n    identifier = 'identifier',\n    clientId = 'clientId'\n}\n\nexport const ONE_SECOND = 1000;\n\n@Injectable()\nexport class AuthenticationService {\n\n    /** url to check authentication token (jwt) */\n    private checkTokenUrl = `${environment.urls.auth}/check_token`;\n    /** url to ask for an authentication token (jwt) */\n    private askTokenUrl = `${environment.urls.auth}/token`;\n    private clientId: string;\n    private clientSecret: string;\n    private loginClaim: string;\n    private expireClaim: string;\n\n    /**\n     * @constructor\n     * @param httpClient - Angular build-in\n     * @param guidService - create and store the unique id for this application and user\n     * @param store NGRX store\n     */\n    constructor(private httpClient: HttpClient, private guidService: GuidService, private store: Store) {\n        store.select(buildConfigSelector('security'))\n            .subscribe(oauth2Conf => {\n                this.assignConfigurationProperties(oauth2Conf);\n\n            });\n    }\n\n    assignConfigurationProperties(oauth2Conf) {\n        this.clientId = _.get(oauth2Conf, 'oauth2.client-id', null);\n        this.clientSecret = _.get(oauth2Conf, 'oauth2.client-secret', null);\n        this.loginClaim = _.get(oauth2Conf, 'jwt.login-claim', 'sub');\n        this.expireClaim = _.get(oauth2Conf, 'jwt.expire-claim', 'exp');\n    }\n\n    /**\n     * Call the web service which checks the authentication token. A valid token gives back the authentication information\n     * and an invalid one an message.\n     *\n     * @param token - jwt token\n     * @return an {Observable} which contains the deserializable content of the token\n     * an message is thrown otherwise\n     */\n    checkAuthentication(token: string): Observable {\n        if (!!token) {\n            // const postData = new FormData();\n            const postData = new URLSearchParams();\n            postData.append('token', token);\n            const headers = new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'});\n            return this.httpClient.post(this.checkTokenUrl, postData.toString(), {headers: headers}).pipe(\n                map(check => check),\n                catchError(AuthenticationService.handleError)\n            );\n        }\n        return of(null);\n    }\n\n    /**\n     * Given a pair of connection, ask the web service generating jwt authentication token a token if the pair is\n     * a registered one.\n     * @param code OIDC code from code flow\n     */\n    askTokenFromCode(code: string):\n        Observable {\n        if (!this.clientId || !this.clientSecret || !this.loginClaim)\n            return throwError('The authentication service is no correctly initialized');\n        const params = new URLSearchParams();\n        params.append('code', code);\n        params.append('grant_type', 'authorization_code');\n// beware clientId for token defines a type of authentication\n        params.append('clientId', this.clientId);\n        params.append('redirect_uri', AuthenticationService.computeRedirectUri());\n\n        const headers = new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'});\n        return this.handleNewToken(this.httpClient.post(this.askTokenUrl, params.toString(), {headers: headers}));\n    }\n\n    /**\n     * Given a pair of connection, ask the web service generating jwt authentication token a token if the pair is\n     * a registered one.\n     * @param login\n     * @param password\n     */\n    askTokenFromPassword(login\n                             :\n                             string, password\n                             :\n                             string\n    ):\n        Observable {\n        if (!\n            this.clientId || !this.clientSecret\n        )\n            return throwError('The authentication service is no correctly initialized');\n        const params = new URLSearchParams();\n        params.append('username', login);\n        params.append('password', password);\n        params.append('grant_type', 'password');\n// beware clientId for token defines a type of authentication\n        params.append('clientId', this.clientId);\n        params.append('client_secret', this.clientSecret);\n\n        const headers = new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'});\n        return this.handleNewToken(this.httpClient.post(this.askTokenUrl, params.toString(), {headers: headers}));\n    }\n\n    private handleNewToken(call: Observable): Observable {\n        return call.pipe(\n            map(data => {\n                return {...data, clientId: this.guidService.getCurrentGuid()}\n            }),\n            map((auth: AuthObject) => this.convert(auth)),\n            tap(AuthenticationService.saveAuthenticationInformation),\n            catchError(AuthenticationService.handleError)\n        );\n    }\n\n    private static handleError(error: any) {\n        console.error(error);\n        return throwError(error);\n    }\n\n    /**\n     * extract the jwt authentication token from the localstorage\n     */\n    static extractToken(): string {\n        return localStorage.getItem(LocalStorageAuthContent.token);\n    }\n\n    /**\n     * @return true if the expiration date stored in the `localestorage` is still running, false otherwise.\n     */\n    static verifyExpirationDate(): boolean {\n        // + to convert the stored number as a string back to number\n        const expirationDate = +localStorage.getItem(LocalStorageAuthContent.expirationDate);\n        const isNotANumber = isNaN(expirationDate);\n        const stillValid = isInTheFuture(expirationDate);\n        return !isNotANumber && stillValid;\n    }\n\n    /**\n     * @return true if the expiration date stored in the `localstorage` is over, false otherwise\n     */\n    static isExpirationDateOver(): boolean {\n        return !AuthenticationService.verifyExpirationDate();\n    }\n\n    /**\n     * clear the `localstorage` from all its content.\n     */\n    static clearAuthenticationInformation(): void {\n        localStorage.clear();\n    }\n\n    /**\n     * save the authentication informatios such as identifier, jwt token, expiration date and clientId in the\n     * `localstorage`.\n     * @param payload\n     */\n    static saveAuthenticationInformation(payload: PayloadForSuccessfulAuthentication) {\n        localStorage.setItem(LocalStorageAuthContent.identifier, payload.identifier);\n        localStorage.setItem(LocalStorageAuthContent.token, payload.token);\n        localStorage.setItem(LocalStorageAuthContent.expirationDate, payload.expirationDate.getTime().toString());\n        localStorage.setItem(LocalStorageAuthContent.clientId, payload.clientId.toString());\n    }\n\n    /**\n     * extract from the `localstorage` the authentication relevant information such as dentifier, jwt token,\n     * expiration date and clientId\n     * @return {PayloadForSuccessfulAuthentication}\n     */\n    static extractIdentificationInformation(): PayloadForSuccessfulAuthentication {\n        return new PayloadForSuccessfulAuthentication(\n            localStorage.getItem(LocalStorageAuthContent.identifier),\n            Guid.parse(localStorage.getItem(LocalStorageAuthContent.clientId)),\n            localStorage.getItem(LocalStorageAuthContent.token),\n            // as getItem return a string, `+` isUsed\n            new Date(+localStorage.getItem(LocalStorageAuthContent.expirationDate)),\n        );\n    }\n\n\n\n    /**\n     * helper method to convert an {AuthObject} instance into a {PayloadForSuccessfulAuthentication} instance.\n     * @param payload\n     */\n    public convert(payload: AuthObject):\n        PayloadForSuccessfulAuthentication {\n        let expirationDate;\n        const jwt = AuthenticationService.decodeToken(payload.access_token);\n        if (!!payload.expires_in)\n            expirationDate = Date.now() + ONE_SECOND * payload.expires_in;\n        else if (!!this.expireClaim)\n            expirationDate = jwt[this.expireClaim];\n        else\n            expirationDate = 0;\n\n        return new PayloadForSuccessfulAuthentication(jwt[this.loginClaim],\n            payload.clientId,\n            payload.access_token,\n            new Date(expirationDate)\n        );\n    }\n\n    /**\n     * helper method to put the jwt token into an appropriate string usable as an http header\n     */\n    static getSecurityHeader() {\n        return {'Authorization': `Bearer ${AuthenticationService.extractToken()}`};\n    }\n\n    public moveToCodeFlowLoginPage() {\n        if (!this.clientId || !this.clientSecret)\n            return throwError('The authentication service is no correctly iniitialized');\n        window.location.href = `${environment.urls.auth}/code/redirect_uri=${AuthenticationService.computeRedirectUri()}`;\n    }\n\n    static computeRedirectUri(){\n        const uriBase = location.origin;\n        const pathEnd = (location.pathname.length > 1)?location.pathname:'';\n        return `${uriBase}${pathEnd}`\n    }\n\n    static decodeToken(token: string): any {\n        try {\n            return jwt_decode(token);\n        }\n        catch (Error) {\n            return null;\n        }\n    }\n}\n\n/**\n * class used to try to login using the authentication web service.\n */\nexport class AuthObject {\n\n    constructor(\n        public access_token: string,\n        public expires_in: number,\n        public clientId: Guid,\n        public identifier?: string\n    ) {\n    }\n\n}\n\n/**\n * class corresponding to the response of the web service checking jwt token when this token is a valid one.\n */\nexport class CheckTokenResponse {\n    constructor(\n        public sub?: string,\n        public exp?: number,\n        public clientId?: string,\n    ) {\n    }\n}\n\n/**\n * helper @method to confirm or not if the number corresponding to a given time is in the futur regarding the present\n * moment.\n * @param time - a number corresponding to an UTC time to test\n * @return  true if time is in the future regarding the present moment, false otherwise\n */\nexport function isInTheFuture(time: number): boolean {\n    return time > Date.now();\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClearCard.html":{"url":"classes/ClearCard.html","title":"class - ClearCard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClearCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CardActionTypes.ClearCard\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Card} from '@ofModel/card.model';\n\nexport enum CardActionTypes {\n    ClearCard = '[Card] Clear',\n    LoadCard = '[Card] Load Card',\n    LoadCardSuccess = '[Card] Load Card Success',\n    LoadCardFailure = '[Card] Load Card Fail',\n    HandleUnexpectedError = '[Card] Handle unexpected error related to card issue'\n}\n// needed by NGRX entities\nexport class ClearCard implements Action {\n    readonly type = CardActionTypes.ClearCard;\n}\nexport class LoadCard implements Action {\n    readonly type = CardActionTypes.LoadCard;\n\n    /* istanbul ignore next */\n    constructor(public payload: { id: string }) {}\n}\nexport class LoadCardFailure implements Action {\n    readonly type = CardActionTypes.LoadCardFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {}\n}\n\nexport class LoadCardSuccess implements Action {\n    readonly type = CardActionTypes.LoadCardSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { card: Card }) {}\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = CardActionTypes.HandleUnexpectedError;\n\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {}\n}\n\nexport type CardActions =\n    ClearCard\n    | LoadCard\n    | LoadCardSuccess\n    | LoadCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigEffects.html":{"url":"injectables/ConfigEffects.html","title":"injectable - ConfigEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConfigEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/config.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loadById\n                            \n                            \n                                retry\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, service: ConfigService, retryDelay: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/config.effects.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        retryDelay\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadById\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            ofType(ConfigActionTypes.LoadConfig),\n            switchMap(action => this.service.fetchConfiguration()),\n            map((config: any) => {\n                return new LoadConfigSuccess({config: config});\n            }),\n            catchError((err, caught) => {\n                this.store.dispatch(new LoadConfigFailure(err));\n                return caught;\n            })\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/config.effects.ts:54\n                            \n                        \n\n                \n                    \n                        Manages load -> service request -> success/message\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            retry\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/config.effects.ts:71\n                            \n                        \n\n                \n                    \n                        Manages load retry upon message\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import {Inject, Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {Observable} from 'rxjs';\nimport {catchError, delay, filter, map, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {ConfigService} from '@ofServices/config.service';\nimport {AppState} from \"@ofStore/index\";\nimport {ConfigActionTypes, LoadConfig, LoadConfigFailure, LoadConfigSuccess} from \"@ofActions/config.actions\";\nimport {selectConfigRetry} from \"@ofSelectors/config.selectors\";\nimport {CONFIG_LOAD_MAX_RETRIES} from \"@ofStates/config.state\";\n\n// those effects are unused for the moment\n@Injectable()\nexport class ConfigEffects {\n\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private service: ConfigService,\n                @Inject('configRetryDelay')\n                private retryDelay: number = 5000,\n    ) {\n\n        if (this.retryDelay > 0)\n            this.retry = this.actions$\n                .pipe(\n                    ofType(ConfigActionTypes.LoadConfigFailure),\n                    withLatestFrom(this.store.select(selectConfigRetry)),\n                    filter(([action, retry]) => retry  new LoadConfig()),\n                    delay(this.retryDelay)\n                );\n        else\n            this.retry = this.actions$\n                .pipe(\n                    ofType(ConfigActionTypes.LoadConfigFailure),\n                    withLatestFrom(this.store.select(selectConfigRetry)),\n                    filter(([action, retry]) => retry  new LoadConfig())\n                );\n    }\n\n    /**\n     * Manages load -> service request -> success/message\n     */\n    @Effect()\n    loadById: Observable = this.actions$\n        .pipe(\n            ofType(ConfigActionTypes.LoadConfig),\n            switchMap(action => this.service.fetchConfiguration()),\n            map((config: any) => {\n                return new LoadConfigSuccess({config: config});\n            }),\n            catchError((err, caught) => {\n                this.store.dispatch(new LoadConfigFailure(err));\n                return caught;\n            })\n        );\n\n    /**\n     * Manages load retry upon message\n     */\n    @Effect()\n    retry: Observable;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigService.html":{"url":"injectables/ConfigService.html","title":"injectable - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/config.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                configUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fetchConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/config.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchConfiguration\n                            \n                            \n                        \n                    \n                \n                \n                    \nfetchConfiguration()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/config.service.ts:24\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            configUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/config.service.ts:18\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable, Injector} from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport {HttpClient, HttpParams, HttpUrlEncodingCodec} from \"@angular/common/http\";\nimport {AuthenticationService} from \"@ofServices/authentication.service\";\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"@ofStore/index\";\nimport {environment} from \"@env/environment\";\n\n@Injectable()\nexport class ConfigService {\n    private configUrl: string;\n\n    constructor(private httpClient: HttpClient) {\n        this.configUrl = `${environment.urls.config}`;\n    }\n\n    fetchConfiguration(): Observable {\n        return this.httpClient.get(`${this.configUrl}`)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConfigState.html":{"url":"interfaces/ConfigState.html","title":"interface - ConfigState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ConfigState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/config.state.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                                \n                                        error\n                                \n                                \n                                        loaded\n                                \n                                \n                                        loading\n                                \n                                \n                                        retry\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loaded\n                                    \n                                \n                                \n                                    \n                                        loaded:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                    \n                                \n                                \n                                    \n                                        loading:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        retry\n                                    \n                                \n                                \n                                    \n                                        retry:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Card} from \"@ofModel/card.model\";\n\nexport const CONFIG_LOAD_MAX_RETRIES = 5;\n\nexport interface ConfigState{\n    config:any,\n    loading: boolean,\n    loaded: boolean,\n    error: string,\n    retry: number\n}\n\nexport const configInitialState: ConfigState = {\n    config:{},\n    loading: false,\n    loaded: false,\n    error: null,\n    retry: 0\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomRouterEffects.html":{"url":"injectables/CustomRouterEffects.html","title":"injectable - CustomRouterEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CustomRouterEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/custom-router.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                navigateToCard\n                            \n                            \n                                navigateToMenuURL\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, service: CardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/custom-router.effects.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    CardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            navigateToCard\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$.pipe(\n        ofType(ROUTER_NAVIGATION),\n        filter((action: RouterNavigationAction, index)=> {\n            return action.payload.event.url.indexOf(\"/feed/cards/\")>=0;\n        }),\n        switchMap(action=>{\n            const routerState:any = action.payload.routerState;\n            return [\n                new LoadCard({id: routerState.params['cid']}),\n                new SelectLightCard({selectedCardId: routerState.params['cid']})\n            ];\n        })\n    )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/custom-router.effects.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            navigateToMenuURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$.pipe(\n        ofType(ROUTER_NAVIGATION),\n        filter((action: RouterNavigationAction, index)=> {\n            return action.payload.event.url.indexOf(\"/thirdparty/\")>=0;\n        }),\n        switchMap(action=>{\n            const routerState:any = action.payload.routerState;\n            return [\n                new UpdateSelectedMenu({menu_id: routerState.params['menu_id'],menu_entry_id: routerState.params['menu_entry_id']})\n            ];\n        })\n    )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/custom-router.effects.ts:44\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from \"@angular/core\";\nimport {Action, Store} from \"@ngrx/store\";\nimport {AppState} from \"@ofStore/index\";\nimport {Actions, Effect, ofType} from \"@ngrx/effects\";\nimport {CardService} from \"@ofServices/card.service\";\nimport {Observable} from \"rxjs\";\nimport {ROUTER_NAVIGATION, RouterNavigationAction} from \"@ngrx/router-store\";\nimport {filter, switchMap} from \"rxjs/operators\";\nimport {LoadCard} from \"@ofActions/card.actions\";\nimport {SelectLightCard} from \"@ofActions/light-card.actions\";\nimport {UpdateSelectedMenu} from \"@ofActions/menu.actions\";\n\n@Injectable()\nexport class CustomRouterEffects {\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private service: CardService\n    ) {}\n\n    @Effect()\n    navigateToCard: Observable = this.actions$.pipe(\n        ofType(ROUTER_NAVIGATION),\n        filter((action: RouterNavigationAction, index)=> {\n            return action.payload.event.url.indexOf(\"/feed/cards/\")>=0;\n        }),\n        switchMap(action=>{\n            const routerState:any = action.payload.routerState;\n            return [\n                new LoadCard({id: routerState.params['cid']}),\n                new SelectLightCard({selectedCardId: routerState.params['cid']})\n            ];\n        })\n    );\n\n    @Effect()\n    navigateToMenuURL: Observable = this.actions$.pipe(\n        ofType(ROUTER_NAVIGATION),\n        filter((action: RouterNavigationAction, index)=> {\n            return action.payload.event.url.indexOf(\"/thirdparty/\")>=0;\n        }),\n        switchMap(action=>{\n            const routerState:any = action.payload.routerState;\n            return [\n                new UpdateSelectedMenu({menu_id: routerState.params['menu_id'],menu_entry_id: routerState.params['menu_entry_id']})\n            ];\n        })\n    );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomRouterStateSerializer.html":{"url":"classes/CustomRouterStateSerializer.html","title":"class - CustomRouterStateSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomRouterStateSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/router.state.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        RouterStateSerializer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                extractParams\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            extractParams\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        extractParams(state: ActivatedRouteSnapshot)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/store/states/router.state.ts:55\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                        \n                                                                    ActivatedRouteSnapshot\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Params\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            serialize\n                            \n                            \n                        \n                    \n                \n                \n                    \nserialize(routerState: RouterStateSnapshot)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/store/states/router.state.ts:48\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        routerState\n                                                        \n                                                                    RouterStateSnapshot\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RouterStateUrl\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {RouterStateSerializer} from \"@ngrx/router-store\";\nimport {ActivatedRouteSnapshot, Params, RouterStateSnapshot} from \"@angular/router\";\n\nexport const initialState = {\n    state: {\n        url: window.location.pathname,\n        params: {},\n        queryParams: {}\n    },\n    navigationId: 0\n}\n\n/**\n * The RouterStateSerializer takes the current RouterStateSnapshot\n * and returns any pertinent information needed. The snapshot contains\n * all information about the state of the router at the given point in time.\n * The entire snapshot is complex and not always needed. In this case, you only\n * need the URL and query parameters from the snapshot in the store. Other items could be\n * returned such as route parameters and static route data.\n *\n * source: https://github.com/briebug/ngrx-complex-forms\n *\n */\n\nexport class RouterStateUrl {\n    /* istanbul ignore next */\n    constructor(\n        readonly url: string,\n        readonly params: Params,\n        readonly queryParams: Params) {\n    }\n}\n\nexport class CustomRouterStateSerializer\n    implements RouterStateSerializer {\n    serialize(routerState: RouterStateSnapshot): RouterStateUrl {\n        const {url} = routerState;\n        const params = this.extractParams(routerState.root);\n        const queryParams = routerState.root.queryParams;\n        return new RouterStateUrl(url, params, queryParams);\n    }\n\n    private extractParams(state: ActivatedRouteSnapshot): Params {\n        let params: Params = {...state.params};\n        for (let child of state.children) {\n            params = {...params, ...this.extractParams(child)}\n        }\n        return params;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Detail.html":{"url":"classes/Detail.html","title":"class - Detail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Detail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/card.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(titlePosition: TitlePosition, title: I18n, titleStyle: string, templateName: string, styles: string[])\n                    \n                \n                        \n                            \n                                Defined in src/app/model/card.model.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        titlePosition\n                                                  \n                                                        \n                                                                    TitlePosition\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        title\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        titleStyle\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateName\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        styles\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Severity} from \"@ofModel/light-card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map} from \"@ofModel/map\";\n\nexport class Card {\n    /* istanbul ignore next */\n    constructor(\n        readonly uid: string,\n        readonly id: string,\n        readonly publisher: string,\n        readonly publisherVersion: string,\n        readonly publishDate: number,\n        readonly startDate: number,\n        readonly endDate: number,\n        readonly severity: Severity,\n        readonly mainRecipient: string,\n        readonly process?: string,\n        readonly processId?: string,\n        readonly state?: string,\n        readonly lttd?: number,\n        readonly title?: I18n,\n        readonly summary?: I18n,\n        readonly  data?: any,\n        readonly  details?: Detail[],\n    ) {\n    }\n}\n\nexport enum TitlePosition {\n    UP, DOWN, NONE\n\n}\n\nexport class Detail {\n    /* istanbul ignore next */\n    constructor(\n        readonly titlePosition: TitlePosition,\n        readonly title: I18n,\n        readonly titleStyle: string,\n        readonly templateName: string,\n        readonly styles: string[]) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DetailComponent.html":{"url":"components/DetailComponent.html","title":"component - DetailComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DetailComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/cards/components/detail/detail.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-detail\n            \n\n\n\n\n            \n                templateUrl\n                ./detail.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _htmlContent\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Readonly\n                                hrefsOfCssLink\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attachAction\n                            \n                            \n                                bindActions\n                            \n                            \n                                    Private\n                                initializeHandlebarsTemplates\n                            \n                            \n                                    Private\n                                initializeHrefsOfCssLink\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                reinsertScripts\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                card\n                            \n                            \n                                detail\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    htmlContent\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(element: ElementRef, thirds: ThirdsService, handlebars: HandlebarsService, sanitizer: DomSanitizer)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/cards/components/detail/detail.component.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        thirds\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        handlebars\n                                                  \n                                                        \n                                                                    HandlebarsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sanitizer\n                                                  \n                                                        \n                                                                    DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        card\n                    \n                \n                \n                    \n                        Type :     Card\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        detail\n                    \n                \n                \n                    \n                        Type :     Detail\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:22\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attachAction\n                            \n                            \n                        \n                    \n                \n                \n                    \nattachAction(button: HTMLButtonElement, action: Action, actionId: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:104\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        button\n                                                        \n                                                                    HTMLButtonElement\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        action\n                                                        \n                                                                    Action\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        actionId\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bindActions\n                            \n                            \n                        \n                    \n                \n                \n                    \nbindActions(third: Third)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:88\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        third\n                                                        \n                                                                    Third\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initializeHandlebarsTemplates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initializeHandlebarsTemplates()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:53\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initializeHrefsOfCssLink\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initializeHrefsOfCssLink()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:38\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reinsertScripts\n                            \n                            \n                        \n                    \n                \n                \n                    \nreinsertScripts()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:73\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _htmlContent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     SafeHtml\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            active\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            hrefsOfCssLink\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:24\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        htmlContent\n                    \n                \n\n                \n                    \n                        gethtmlContent()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/cards/components/detail/detail.component.ts:69\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, ElementRef, Input, OnInit} from '@angular/core';\nimport {Card, Detail} from '@ofModel/card.model';\nimport {ThirdsService} from \"../../../../services/thirds.service\";\nimport {HandlebarsService} from \"../../services/handlebars.service\";\nimport {DomSanitizer, SafeHtml, SafeResourceUrl} from \"@angular/platform-browser\";\nimport {Action, Third} from \"@ofModel/thirds.model\";\nimport {zip} from \"rxjs\";\n\n@Component({\n    selector: 'of-detail',\n    templateUrl: './detail.component.html',\n})\nexport class DetailComponent implements OnInit {\n    public active = false;\n    @Input() detail: Detail;\n    @Input() card: Card;\n    readonly hrefsOfCssLink = new Array();\n    private _htmlContent: SafeHtml;\n\n    constructor(private element: ElementRef,\n                private thirds: ThirdsService,\n                private handlebars: HandlebarsService,\n                private sanitizer: DomSanitizer) {\n    }\n\n    ngOnInit() {\n        this.initializeHrefsOfCssLink();\n        this.initializeHandlebarsTemplates();\n    }\n\n    private initializeHrefsOfCssLink() {\n        if (this.detail && this.detail.styles) {\n            const publisher = this.card.publisher;\n            const publisherVersion = this.card.publisherVersion;\n            this.detail.styles.forEach(style => {\n                const cssUrl = this.thirds.computeThirdCssUrl(publisher, style, publisherVersion);\n                //needed to instantiate href of link for css in component rendering\n                const safeCssUrl = this.sanitizer.bypassSecurityTrustResourceUrl(cssUrl);\n                this.hrefsOfCssLink.push(safeCssUrl);\n\n                console.log(`this is the safe resource Url for css '${safeCssUrl.toString()}' and with local version '${safeCssUrl.toLocaleString()}'`)\n            });\n        }\n    }\n\n    private initializeHandlebarsTemplates() {\n\n        zip(this.thirds.queryThird(this.card.publisher,this.card.publisherVersion),\n        this.handlebars.executeTemplate(this.detail.templateName, this.card))\n            .subscribe(\n                ([third,html]) => {\n                this._htmlContent = this.sanitizer.bypassSecurityTrustHtml(html);\n                setTimeout(() => { // wait for DOM rendering\n                    this.reinsertScripts();\n                    this.bindActions(third);\n                });\n            }\n        );\n    }\n\n\n    get htmlContent() {\n        return this._htmlContent;\n    }\n\n    reinsertScripts(): void {\n        const scripts = this.element.nativeElement.getElementsByTagName('script');\n        const scriptsInitialLength = scripts.length;\n        for (let i = 0; i this.element.nativeElement.getElementsByTagName('button');\n\n        for (let button of buttons) {\n            if (button.attributes['action-id']) {\n                const actionId = button.attributes['action-id'].nodeValue;\n                if (actionId) {\n                    const state = third.extractState(this.card);\n                    if(!!state && !!state.actions[actionId])\n                        this.attachAction(button, state.actions[actionId], actionId);\n                }\n            }\n        }\n    }\n\n    attachAction(button: HTMLButtonElement, action: Action, actionId: string) {\n        button.classList.add('btn');\n        if (action.buttonStyle) {\n            for (let c of action.buttonStyle.split(' ')) {\n                button.classList.add(c);\n            }\n        } else {\n            button.classList.add('btn-light');\n        }\n        if (action.contentStyle) {\n            for (let c of action.contentStyle.split(' ')) {\n                button.children[0].classList.add(c);\n            }\n        } else {\n            button.children[0].classList.add('fa', 'fa-warning', 'text-dark');\n        }\n        button.addEventListener('click', (event: Event) => {\n            alert(`${actionId} was triggered.\\nAction handling is not yet implemented`);\n        });\n    }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DetailComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DetailsComponent.html":{"url":"components/DetailsComponent.html","title":"component - DetailsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DetailsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/cards/components/details/details.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-details\n            \n\n\n\n\n            \n                templateUrl\n                ./details.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _i18nPrefix\n                            \n                            \n                                details\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                selectDetail\n                            \n                            \n                                    Private\n                                updateAsync\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                card\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    i18nPrefix\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/cards/components/details/details.component.ts:20\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        card\n                    \n                \n                \n                    \n                        Type :     Card\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:19\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngAfterViewInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngAfterViewInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnChanges\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnChanges(changes: SimpleChanges)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:57\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changes\n                                                        \n                                                                    SimpleChanges\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectDetail\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectDetail(detail: DetailComponent)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        detail\n                                                        \n                                                                    DetailComponent\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            updateAsync\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        updateAsync()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:34\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _i18nPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            details\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QueryList\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ContentChildren(DetailComponent)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:18\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        i18nPrefix\n                    \n                \n\n                \n                    \n                        geti18nPrefix()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/cards/components/details/details.component.ts:53\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {AfterViewInit, Component, ContentChildren, Input, OnChanges, QueryList, SimpleChanges} from '@angular/core';\nimport {DetailComponent} from \"../detail/detail.component\";\nimport {Card} from \"@ofModel/card.model\";\n\n@Component({\n    selector: 'of-details',\n    templateUrl: './details.component.html',\n})\nexport class DetailsComponent implements AfterViewInit, OnChanges {\n\n    @ContentChildren(DetailComponent) details: QueryList;\n    @Input() card: Card;\n    private _i18nPrefix: string;\n\n    constructor() {\n    }\n\n    ngAfterViewInit(): void {\n        this.updateAsync();\n        this.details.changes.subscribe(\n            () => {\n                this.updateAsync();\n            }\n        );\n    }\n\n    private updateAsync() {\n        setTimeout(() => {\n            let activeDetail = this.details.filter((tab) => tab.active)\n            // if there is no active tab set, activate the first\n            if (activeDetail.length === 0) {\n                this.selectDetail(this.details.first);\n            }\n        });\n    }\n\n    selectDetail(detail: DetailComponent) {\n        // deactivate all tabs\n        this.details.toArray().forEach(detail => detail.active = false);\n\n        // activate the tab the user has clicked on.\n        if (detail)\n            detail.active = true;\n    }\n\n    public get i18nPrefix(){\n        return this._i18nPrefix;\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if(changes['card'].currentValue)\n            this._i18nPrefix = changes['card'].currentValue.publisher+'.'+changes['card'].currentValue.publisherVersion+'.';\n    }\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  \n    {{i18nPrefix+detailC.detail.title.key}}\n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{i18nPrefix+detailC.detail.title.key}}  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DetailsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmptyLightCards.html":{"url":"classes/EmptyLightCards.html","title":"class - EmptyLightCards","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmptyLightCards\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.EmptyLightCards\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    EmptyLightCards = '[LCard] Empty',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class EmptyLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.EmptyLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError\n    | EmptyLightCards;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FeedComponent.html":{"url":"components/FeedComponent.html","title":"component - FeedComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FeedComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/feed.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-cards\n            \n\n            \n                styleUrls\n                ./feed.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./feed.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lightCards$\n                            \n                            \n                                selection$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/feed.component.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngAfterViewInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngAfterViewInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/feed.component.ts:38\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/feed.component.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lightCards$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/feed.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selection$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/feed.component.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {AfterViewInit, Component, OnInit} from '@angular/core';\nimport {select, Store} from '@ngrx/store';\nimport {AppState} from '@ofStore/index';\nimport {Observable, of} from 'rxjs';\nimport {LightCard} from '@ofModel/light-card.model';\nimport * as feedSelectors from '@ofSelectors/feed.selectors';\nimport {catchError} from \"rxjs/operators\";\n\n@Component({\n    selector: 'of-cards',\n    templateUrl: './feed.component.html',\n    styleUrls: ['./feed.component.scss']\n})\nexport class FeedComponent implements OnInit, AfterViewInit {\n\n    lightCards$: Observable;\n    selection$: Observable;\n\n    constructor(private store: Store) {\n    }\n\n    ngOnInit() {\n        this.lightCards$ = this.store.pipe(\n            select(feedSelectors.selectFilteredFeed),\n            catchError(err => of([]))\n        );\n        this.selection$ = this.store.select(feedSelectors.selectLightCardSelection);\n    }\n\n\n    ngAfterViewInit() {\n    }\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n    \n        \n            \n        \n    \n    \n        \n            \n        \n        \n            \n        \n    \n\n\n\n    \n\n    \n                \n                    ./feed.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FeedComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FeedFiltersEffects.html":{"url":"injectables/FeedFiltersEffects.html","title":"injectable - FeedFiltersEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FeedFiltersEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/feed-filters.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loadFeedFilterOnAuthenticationSuccess\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, service: FilterService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/feed-filters.effects.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    FilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadFeedFilterOnAuthenticationSuccess\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            // loads card operations only after authentication of a default user ok.\n            ofType(AuthenticationActionTypes.AcceptLogIn),\n            map((action) => {\n                return new InitFilters({filters:this.service.defaultFilters});\n            }))\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/feed-filters.effects.ts:28\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {AuthenticationActionTypes} from '@ofActions/authentication.actions';\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"@ofStore/index\";\nimport {FilterService} from \"@ofServices/filter.service\";\nimport {FeedActions, InitFilters} from \"@ofActions/feed.actions\";\n\n@Injectable()\nexport class FeedFiltersEffects {\n\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private service: FilterService) {\n    }\n\n    @Effect()\n    loadFeedFilterOnAuthenticationSuccess: Observable = this.actions$\n        .pipe(\n            // loads card operations only after authentication of a default user ok.\n            ofType(AuthenticationActionTypes.AcceptLogIn),\n            map((action) => {\n                return new InitFilters({filters:this.service.defaultFilters});\n            }));\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FeedModule.html":{"url":"modules/FeedModule.html","title":"module - FeedModule","body":"\n                   \n\n\n\n\n    Modules\n    FeedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FeedModule\n\n\n\ncluster_FeedModule_declarations\n\n\n\ncluster_FeedModule_imports\n\n\n\ncluster_FeedModule_exports\n\n\n\n\nCardListComponent\n\nCardListComponent\n\n\n\nFeedModule\n\nFeedModule\n\nFeedModule -->\n\nCardListComponent->FeedModule\n\n\n\n\n\nFeedComponent\n\nFeedComponent\n\nFeedModule -->\n\nFeedComponent->FeedModule\n\n\n\n\n\nFiltersComponent\n\nFiltersComponent\n\nFeedModule -->\n\nFiltersComponent->FeedModule\n\n\n\n\n\nNoSelectionComponent\n\nNoSelectionComponent\n\nFeedModule -->\n\nNoSelectionComponent->FeedModule\n\n\n\n\n\nTimeFilterComponent\n\nTimeFilterComponent\n\nFeedModule -->\n\nTimeFilterComponent->FeedModule\n\n\n\n\n\nTimeLineComponent\n\nTimeLineComponent\n\nFeedModule -->\n\nTimeLineComponent->FeedModule\n\n\n\n\n\nTypeFilterComponent\n\nTypeFilterComponent\n\nFeedModule -->\n\nTypeFilterComponent->FeedModule\n\n\n\n\n\nFeedComponent \n\nFeedComponent \n\nFeedComponent  -->\n\nFeedModule->FeedComponent \n\n\n\n\n\nCardsModule\n\nCardsModule\n\nFeedModule -->\n\nCardsModule->FeedModule\n\n\n\n\n\nFeedRoutingModule\n\nFeedRoutingModule\n\nFeedModule -->\n\nFeedRoutingModule->FeedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/feed/feed.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            CardListComponent\n                        \n                        \n                            FeedComponent\n                        \n                        \n                            FiltersComponent\n                        \n                        \n                            NoSelectionComponent\n                        \n                        \n                            TimeFilterComponent\n                        \n                        \n                            TimeLineComponent\n                        \n                        \n                            TypeFilterComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CardsModule\n                        \n                        \n                            FeedRoutingModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FeedComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CardListComponent} from './components/card-list/card-list.component';\nimport {FeedComponent} from './feed.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {FeedRoutingModule} from \"./feed-routing.module\";\nimport {NoSelectionComponent} from './components/no-selection/no-selection.component';\nimport {TimeLineComponent} from './components/time-line/time-line.component';\nimport {CardsModule} from \"../cards/cards.module\";\nimport {FiltersComponent} from './components/card-list/filters/filters.component';\nimport {TypeFilterComponent} from './components/card-list/filters/type-filter/type-filter.component';\nimport {NgbModule} from \"@ng-bootstrap/ng-bootstrap\";\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {TimeFilterComponent} from './components/card-list/filters/time-filter/time-filter.component';\nimport {FontAwesomeModule} from \"@fortawesome/angular-fontawesome\";\nimport {library} from \"@fortawesome/fontawesome-svg-core\";\nimport {faClock} from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faClock);\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        TranslateModule,\n        NgbModule.forRoot(),\n        CardsModule,\n        FeedRoutingModule,\n        FontAwesomeModule\n    ],\n    declarations: [CardListComponent, FeedComponent, NoSelectionComponent, TimeLineComponent, FiltersComponent, TypeFilterComponent, TimeFilterComponent],\n    exports: [FeedComponent]\n})\nexport class FeedModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FeedRoutingModule.html":{"url":"modules/FeedRoutingModule.html","title":"module - FeedRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    FeedRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/feed/feed-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {NgModule} from '@angular/core';\nimport {FeedComponent} from \"./feed.component\";\n// import {AuthenticationGuard} from \"@ofServices/guard.service\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {DetailComponent} from \"../cards/components/detail/detail.component\";\nimport {CardDetailsComponent} from \"../cards/components/card-details/card-details.component\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: FeedComponent,\n        // canActivate: [AuthenticationGuard],\n        children: [\n            // {\n            //     path: '',\n            //     pathMatch: 'full',\n            //     redirectTo: 'cards'\n            // },\n            {\n                path: 'cards',\n                children : [\n                    {\n                        path: '',\n                        component: CardDetailsComponent,\n                    },\n                    {\n                        path: ':cid',\n                        component: CardDetailsComponent,\n                        children: [\n                            {\n                                path: 'details/:did',\n                                component: DetailComponent\n                            }\n                        ]\n                    }]\n            },\n            ]\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class FeedRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Filter.html":{"url":"classes/Filter.html","title":"class - Filter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Filter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/feed-filter.model.ts\n        \n\n            \n                Description\n            \n            \n                A Filter gather both the feed filtering behaviour and the filter status for\nfiltering parametrization and component state\nThe function property funktion takes two arguments :\n\ncard: the card for which to evaluate filter\nstatus: the status of the current filter\n\nBeware: we use a copy constructor for replication of filters as a store state so take care of funktion scope\nin Filter implementation (Instanciation and Inheritance). This is the reason why we pass the filter status upon\nfunktion\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyFilter\n                            \n                            \n                                chainFilter\n                            \n                            \n                                    Static\n                                chainFilter\n                            \n                            \n                                clone\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(funktion: (undefined,undefined) => void, active: boolean, status: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/feed-filter.model.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        funktion\n                                                  \n                                                        \n                                                                    function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        active\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            active\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:28\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            applyFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \napplyFilter(card: LightCard)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:43\n                            \n                        \n\n\n                \n                    \n                            apply the filter to the card, returns true if the card passes the filter, false otherwise\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        card\n                                                        \n                                                                    LightCard\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chainFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \nchainFilter(card: LightCard, next: Filter[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:56\n                            \n                        \n\n\n                \n                    \n                            Apply this filter to a card, then a chain of filter recursively.\nThe recursion stops when the card is filtered out\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        card\n                                                        \n                                                                    LightCard\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        next\n                                                        \n                                                                    Filter[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            chainFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        chainFilter(card: LightCard, next: Filter[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:67\n                            \n                        \n\n\n                \n                    \n                            Sequentially applies a chain of filters to a card\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        card\n                                                        \n                                                                    LightCard\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        next\n                                                        \n                                                                    Filter[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clone\n                            \n                            \n                        \n                    \n                \n                \n                    \nclone()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/model/feed-filter.model.ts:32\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Filter\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {LightCard} from \"@ofModel/light-card.model\";\n\n/**\n * A Filter gather both the feed filtering behaviour and the filter status for\n * filtering parametrization and component state\n *\n * The function property funktion takes two arguments :\n *  * card: the card for which to evaluate filter\n *  * status: the status of the current filter\n *\n * Beware: we use a copy constructor for replication of filters as a store state so take care of funktion scope\n * in Filter implementation (Instanciation and Inheritance). This is the reason why we pass the filter status upon\n * funktion\n */\nexport class Filter {\n\n    /* istanbul ignore next */\n    constructor(\n        readonly funktion: (LightCard,any) => boolean,\n        public active:boolean,\n        public status: any\n    ) {\n    }\n\n    clone():Filter {\n        return new Filter(\n            this.funktion,\n            this.active,\n            this.status);\n    }\n\n    /**\n     * apply the filter to the card, returns true if the card passes the filter, false otherwise\n     * @param card\n     */\n    applyFilter(card: LightCard):boolean{\n        if(this.active){\n            return this.funktion(card,this.status);\n        }\n        return true;\n    }\n\n    /**\n     * Apply this filter to a card, then a chain of filter recursively.\n     * The recursion stops when the card is filtered out\n     * @param card\n     * @param next\n     */\n    chainFilter(card: LightCard, next: Filter[]){\n        if(this.applyFilter(card))\n            return !next || next.length == 0 || next[0].chainFilter(card,next.slice(1));\n        return false\n    }\n\n    /**\n     * Sequentially applies a chain of filters to a card\n     * @param card\n     * @param next\n     */\n    static chainFilter(card: LightCard, next: Filter[]){\n        return !next||next.length == 0 || next[0].chainFilter(card,next.slice(1));\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilterService.html":{"url":"injectables/FilterService.html","title":"injectable - FilterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FilterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/filter.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _defaultFilters\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                initFilters\n                            \n                            \n                                    Private\n                                initRecipientFilter\n                            \n                            \n                                    Private\n                                initTimeFilter\n                            \n                            \n                                    Private\n                                initTypeFilter\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    defaultFilters\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/filter.service.ts:17\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initFilters\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initFilters()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/filter.service.ts:82\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Map\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initRecipientFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initRecipientFilter()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/filter.service.ts:52\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initTimeFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initTimeFilter()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/filter.service.ts:60\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initTypeFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initTypeFilter()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/filter.service.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _defaultFilters\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/filter.service.ts:17\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        defaultFilters\n                    \n                \n\n                \n                    \n                        getdefaultFilters()\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/filter.service.ts:23\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Filter} from \"@ofModel/feed-filter.model\";\nimport {LightCard, Severity} from \"@ofModel/light-card.model\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FilterService {\n\n    private _defaultFilters = new Map();\n\n    constructor() {\n        this._defaultFilters = this.initFilters();\n    }\n\n    get defaultFilters(): Map {\n        return this._defaultFilters;\n    }\n\n\n    private initTypeFilter() {\n        const alarm = Severity.ALARM;\n        const action = Severity.ACTION;\n        const question = Severity.QUESTION;\n        const notification = Severity.NOTIFICATION;\n        return new Filter(\n            (card, status) => {\n                const result =\n                    status.alarm && card.severity == alarm ||\n                    status.action && card.severity == action ||\n                    status.question && card.severity == question ||\n                    status.notification && card.severity == notification;\n                return result;\n            },\n            true,\n            {\n                alarm: true,\n                action: true,\n                question: true,\n                notification: false\n            }\n        );\n    }\n\n    private initRecipientFilter() {\n        return new Filter(\n            (card, status) => false,\n            false,\n            {}\n        );\n    }\n\n    private initTimeFilter() {\n        return new Filter(\n            (card:LightCard, status) => {\n                if (!!status.start && !!status.end) {\n                    if (!card.endDate)\n                        return card.startDate  {\n        const filters = new Map();\n        filters.set(FilterType.TYPE_FILTER, this.initTypeFilter());\n        filters.set(FilterType.RECIPIENT_FILTER, this.initRecipientFilter());\n        filters.set(FilterType.TIME_FILTER, this.initTimeFilter());\n        return filters;\n    }\n}\n\nexport enum FilterType {\n    TYPE_FILTER,\n    RECIPIENT_FILTER,\n    TIME_FILTER,\n    TEST_FILTER\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FiltersComponent.html":{"url":"components/FiltersComponent.html","title":"component - FiltersComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FiltersComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/components/card-list/filters/filters.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-filters\n            \n\n\n\n\n            \n                templateUrl\n                ./filters.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/components/card-list/filters/filters.component.ts:14\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/filters.component.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'of-filters',\n  templateUrl: './filters.component.html',\n})\nexport class FiltersComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n    \n    \n    \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FiltersComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuidService.html":{"url":"classes/GuidService.html","title":"class - GuidService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuidService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/guid.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                guid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentGuid\n                            \n                            \n                                getCurrentGuidString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/guid.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            guid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Guid\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/guid.service.ts:16\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCurrentGuid\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCurrentGuid()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/guid.service.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Guid\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCurrentGuidString\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCurrentGuidString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/guid.service.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Inject} from \"@angular/core\";\nimport {Guid} from \"guid-typescript\";\n\n@Inject({\n    providedIn: 'root'\n})\nexport class GuidService {\n\n    private readonly guid: Guid;\n\n    constructor() {\n        this.guid = Guid.create();\n    }\n\n    getCurrentGuid(): Guid {\n        return this.guid;\n    }\n\n    getCurrentGuidString():string{\n        return this.getCurrentGuid().toString();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HandleUnexpectedError.html":{"url":"classes/HandleUnexpectedError.html","title":"class - HandleUnexpectedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HandleUnexpectedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/card.actions.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CardActionTypes.HandleUnexpectedError\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:44\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Card} from '@ofModel/card.model';\n\nexport enum CardActionTypes {\n    ClearCard = '[Card] Clear',\n    LoadCard = '[Card] Load Card',\n    LoadCardSuccess = '[Card] Load Card Success',\n    LoadCardFailure = '[Card] Load Card Fail',\n    HandleUnexpectedError = '[Card] Handle unexpected error related to card issue'\n}\n// needed by NGRX entities\nexport class ClearCard implements Action {\n    readonly type = CardActionTypes.ClearCard;\n}\nexport class LoadCard implements Action {\n    readonly type = CardActionTypes.LoadCard;\n\n    /* istanbul ignore next */\n    constructor(public payload: { id: string }) {}\n}\nexport class LoadCardFailure implements Action {\n    readonly type = CardActionTypes.LoadCardFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {}\n}\n\nexport class LoadCardSuccess implements Action {\n    readonly type = CardActionTypes.LoadCardSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { card: Card }) {}\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = CardActionTypes.HandleUnexpectedError;\n\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {}\n}\n\nexport type CardActions =\n    ClearCard\n    | LoadCard\n    | LoadCardSuccess\n    | LoadCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HandleUnexpectedError-1.html":{"url":"classes/HandleUnexpectedError-1.html","title":"class - HandleUnexpectedError-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HandleUnexpectedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/config.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/config.actions.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/config.actions.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConfigActionTypes.HandleUnexpectedError\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/config.actions.ts:38\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\n\nexport enum ConfigActionTypes {\n    LoadConfig = '[Config] Load Config',\n    LoadConfigSuccess = '[Config] Load Config Success',\n    LoadConfigFailure = '[Config] Load Config Fail',\n    HandleUnexpectedError = '[Config] Handle unexpected error related to configuration issue'\n}\n// needed by NGRX entities\nexport class LoadConfig implements Action {\n    readonly type = ConfigActionTypes.LoadConfig;\n}\nexport class LoadConfigFailure implements Action {\n    readonly type = ConfigActionTypes.LoadConfigFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadConfigSuccess implements Action {\n    readonly type = ConfigActionTypes.LoadConfigSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { config: any }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = ConfigActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type ConfigActions =\n    LoadConfig\n    | LoadConfigSuccess\n    | LoadConfigFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HandleUnexpectedError-2.html":{"url":"classes/HandleUnexpectedError-2.html","title":"class - HandleUnexpectedError-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HandleUnexpectedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:83\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:85\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.HandleUnexpectedError\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:83\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    EmptyLightCards = '[LCard] Empty',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class EmptyLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.EmptyLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError\n    | EmptyLightCards;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HandleUnexpectedError-3.html":{"url":"classes/HandleUnexpectedError-3.html","title":"class - HandleUnexpectedError-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HandleUnexpectedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/menu.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/menu.actions.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : MenuActionTypes.HandleUnexpectedError\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:43\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\n\nexport enum MenuActionTypes {\n    LoadMenu = '[Menu] Load Menu',\n    LoadMenuSuccess = '[Menu] Load Menu Success',\n    LoadMenuFailure = '[Menu] Load Menu Fail',\n    HandleUnexpectedError = '[Menu] Handle unexpected error',\n    UpdateSelectedMenu = '[Menu] Update Selected Menu',\n}\n// needed by NGRX entities\nexport class LoadMenu implements Action {\n    readonly type = MenuActionTypes.LoadMenu;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\nexport class LoadMenuFailure implements Action {\n    readonly type = MenuActionTypes.LoadMenuFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadMenuSuccess implements Action {\n    readonly type = MenuActionTypes.LoadMenuSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { menu: ThirdMenu[] }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    readonly type = MenuActionTypes.HandleUnexpectedError;\n\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\n/**\n * Action used to update the state with the selected menu\n */\n//TODO Describe usage (cf authentication example)\nexport class UpdateSelectedMenu implements Action {\n    readonly type = MenuActionTypes.UpdateSelectedMenu;\n\n    /* istanbul ignore next */\n    constructor(public payload: {menu_id: string, menu_entry_id: string}) {}\n}\n\nexport type MenuActions =\n    LoadMenu\n    | LoadMenuSuccess\n    | LoadMenuFailure\n    | HandleUnexpectedError\n    | UpdateSelectedMenu;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HandlebarsService.html":{"url":"injectables/HandlebarsService.html","title":"injectable - HandlebarsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  HandlebarsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/modules/cards/services/handlebars.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                templateCache\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                executeTemplate\n                            \n                            \n                                    Private\n                                queryTemplate\n                            \n                            \n                                    Private\n                                registerArrayAtIndex\n                            \n                            \n                                    Private\n                                registerArrayAtIndexLength\n                            \n                            \n                                    Private\n                                registerBool\n                            \n                            \n                                    Private\n                                registerCardAction\n                            \n                            \n                                    Private\n                                registerDateFormat\n                            \n                            \n                                    Private\n                                registerI18n\n                            \n                            \n                                    Private\n                                registerMath\n                            \n                            \n                                    Private\n                                registerNow\n                            \n                            \n                                    Private\n                                registerNumberFormat\n                            \n                            \n                                    Private\n                                registerPreserveSpace\n                            \n                            \n                                    Private\n                                registerSlice\n                            \n                            \n                                    Private\n                                registerSort\n                            \n                            \n                                    Private\n                                registerSplit\n                            \n                            \n                                    Private\n                                registerSvg\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(time: TimeService, translate: TranslateService, thirds: ThirdsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/cards/services/handlebars.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        time\n                                                  \n                                                        \n                                                                    TimeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        thirds\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            executeTemplate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        executeTemplate(templateName: string, card: Card)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        templateName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        card\n                                                        \n                                                                    Card\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            queryTemplate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        queryTemplate(publisher: string, version: string, name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:49\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publisher\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        version\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerArrayAtIndex\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerArrayAtIndex()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:117\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerArrayAtIndexLength\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerArrayAtIndexLength()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:91\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerBool\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerBool()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:62\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerCardAction\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerCardAction()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:226\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerDateFormat\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerDateFormat()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:240\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerI18n\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerI18n()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:182\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerMath\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerMath()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:103\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerNow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerNow()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:255\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerNumberFormat\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerNumberFormat()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:248\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerPreserveSpace\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerPreserveSpace()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:262\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerSlice\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerSlice()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:123\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerSort\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerSort()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:140\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerSplit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerSplit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:97\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            registerSvg\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        registerSvg()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:208\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            templateCache\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/cards/services/handlebars.service.ts:23\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from \"@angular/core\";\nimport {Card} from \"@ofModel/card.model\";\nimport * as Handlebars from \"handlebars/dist/handlebars.js\"\nimport {TimeService} from \"@ofServices/time.service\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport * as moment from 'moment';\nimport {Map} from \"@ofModel/map\";\nimport {Observable, of} from \"rxjs\";\nimport {map, tap} from \"rxjs/operators\";\nimport {ThirdsService} from \"../../../services/thirds.service\";\nimport {Guid} from \"guid-typescript\";\n\n@Injectable()\nexport class HandlebarsService {\n\n    private templateCache:Map = new Map();\n\n    constructor(private time:TimeService,\n                private translate: TranslateService,\n                private thirds: ThirdsService){\n        this.registerPreserveSpace();\n        this.registerNumberFormat();\n        this.registerDateFormat();\n        this.registerCardAction();\n        this.registerSvg();\n        this.registerI18n();\n        this.registerSort();\n        this.registerSlice();\n        this.registerArrayAtIndex();\n        this.registerMath();\n        this.registerSplit();\n        this.registerArrayAtIndexLength();\n        this.registerBool();\n        this.registerNow();\n    }\n\n    public executeTemplate(templateName: string, card: Card):Observable {\n        return this.queryTemplate(card.publisher,card.publisherVersion,templateName).pipe(\n            map(t=>t(card)));\n    }\n\n    private queryTemplate(publisher:string, version:string, name: string):Observable {\n        const locale = this.translate.getBrowserLang();\n        const key = `${publisher}.${version}.${name}.${locale}`;\n        let template = this.templateCache[key];\n        if(template){\n           return of(template);\n        }\n        return this.thirds.fetchHbsTemplate(publisher,version,name,locale).pipe(\n            map(s=>Handlebars.compile(s)),\n            tap(t=>this.templateCache[key]=t)\n        );\n    }\n\n    private registerBool() {\n        Handlebars.registerHelper('bool', function (v1, operator, v2, options) {\n            switch (operator) {\n                case '==':\n                    return (v1 == v2);\n                case '===':\n                    return (v1 === v2);\n                case '!=':\n                    return (v1 != v2);\n                case '!==':\n                    return (v1 !== v2);\n                case '':\n                    return (v1 > v2);\n                case '>=':\n                    return (v1 >= v2);\n                case '&&':\n                    return (v1 && v2);\n                case '||':\n                    return (v1 || v2);\n                default:\n                    return true;\n            }\n        });\n    }\n\n    private registerArrayAtIndexLength() {\n        Handlebars.registerHelper('arrayAtIndexLength', function (value, index, options) {\n            return value[index].length;\n        });\n    }\n\n    private registerSplit() {\n        Handlebars.registerHelper('split', function (value, splitValue, index, options) {\n            return value.split(splitValue)[index];\n        });\n    }\n\n    private registerMath(){\n        Handlebars.registerHelper(\"math\", function(lvalue, operator, rvalue, options) {\n            let result;\n            switch(operator) {\n                case \"+\": result = lvalue + rvalue; break;\n                case \"-\": result = lvalue - rvalue; break;\n                case \"*\": result = lvalue * rvalue; break;\n                case \"/\": result = lvalue / rvalue; break;\n                case \"%\": result = lvalue % rvalue; break;\n            }\n            return result;\n        });\n    }\n\n    private registerArrayAtIndex() {\n        Handlebars.registerHelper('arrayAtIndex', function (value, index, options) {\n            return value[index];\n        });\n    }\n\n    private registerSlice() {\n        Handlebars.registerHelper('slice', function () {\n            let args = [];\n            for (let index = 0; index =3) {\n                to = args[2];\n                return value.slice(from, to);\n            }\n            return value.slice(from);\n        });\n    }\n\n    private registerSort() {\n        Handlebars.registerHelper('sort', function () {\n            let args = [];\n            for (let index = 0; index  {\n            let args = [],\n                options = fctArgs[fctArgs.length - 1];\n            for (let i = 0; i \n                    document.getElementById('${svgUid}').addEventListener('load', function(){\n                            svgPanZoom(document.getElementById('${svgUid}'));});\n                    `\n        });\n    }\n\n    private registerCardAction() {\n        Handlebars.registerHelper('action', function () {\n            let args = [];\n            for (let i = 0; i `\n        });\n    }\n\n    private registerDateFormat() {\n        Handlebars.registerHelper('dateFormat', (value, options) => {\n            const m = moment(new Date(value));\n            m.locale(this.translate.getBrowserLang());\n            return m.format(options.hash.format);\n        });\n    }\n\n    private registerNumberFormat() {\n        Handlebars.registerHelper('numberFormat', (value, options) => {\n            const formatter = new Intl.NumberFormat(this.translate.getBrowserLang(), options.hash);\n            return formatter.format(value);\n        });\n    }\n\n    private registerNow() {\n        const that = this;\n        Handlebars.registerHelper('now', function (options) {\n            return that.time.currentTime().valueOf();\n        })\n    }\n\n    private registerPreserveSpace() {\n        Handlebars.registerHelper(\"preserveSpace\", function (value, options) {\n            return value.replace(/ /g, '\\u00A0')\n        });\n    }\n}\n\nfunction sortOnKey(key){\n    return function(a,b){\n        if(typeof  a[key] == 'string' && typeof b[key] == 'string'){\n            if(a[key]b[key])\n                return 1\n            return 0;\n        }else if(typeof  a[key] == 'number' && typeof b[key] == 'number'){\n            return a[key]-b[key];\n        }\n        return 0;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/I18n.html":{"url":"classes/I18n.html","title":"class - I18n","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  I18n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/i18n.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(key: string, parameters?: Map)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/i18n.model.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                    Map\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Map} from \"@ofModel/map\";\n\nexport class I18n {\n    /* istanbul ignore next */\n    constructor(\n        readonly key: string,\n        readonly parameters?: Map) {\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/IconComponent.html":{"url":"components/IconComponent.html","title":"component - IconComponent","body":"\n                   \n\n\n\n\n\n  Components\n  IconComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/icon/icon.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-icon\n            \n\n            \n                styleUrls\n                icon.component.scss\n            \n\n\n\n            \n                templateUrl\n                icon.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                iconPath\n                            \n                            \n                                size\n                            \n                            \n                                sprites\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                big\n                            \n                            \n                                dark\n                            \n                            \n                                icon\n                            \n                            \n                                light\n                            \n                            \n                                medium\n                            \n                            \n                                small\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(platformLocation: PlatformLocation)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/icon/icon.component.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        platformLocation\n                                                  \n                                                        \n                                                                    PlatformLocation\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        big\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dark\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:22\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        icon\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:18\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        light\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        medium\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        small\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:19\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:32\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            iconPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sprites\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/icon/icon.component.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, Input, OnInit} from '@angular/core';\nimport {PlatformLocation} from \"@angular/common\";\n\n@Component({\n  selector: 'of-icon',\n  templateUrl:'icon.component.html',\n  styleUrls: ['icon.component.scss']\n})\nexport class IconComponent implements OnInit {\n\n  @Input() icon:string;\n  @Input() small:boolean;\n  @Input() medium:boolean;\n  @Input() big:boolean;\n  @Input() dark:boolean;\n  @Input() light:boolean;\n  size:string;\n  sprites:string;\n  iconPath:string;\n  constructor(platformLocation:PlatformLocation) {\n      let baseHref = platformLocation.getBaseHrefFromDOM();\n      this.iconPath = (baseHref?baseHref:'/')+'assets/images/icons/'\n  }\n\n  ngOnInit() {\n    this.big = this.big != undefined;\n    this.medium = this.medium != undefined && !this.big;\n    this.small = this.small != undefined && !this.medium;\n    this.dark = this.dark != undefined;\n    this.light = this.light != undefined && ! this.dark;\n    let size = this.big?'big':this.medium?'medium':'small'\n    switch (size) {\n        case 'big':\n          this.size = '64px';\n          break;\n        case 'medium':\n          this.size = '32px';\n          break;\n         default:\n          this.size = '16px';\n    }\n    if(this.dark||this.light){\n      this.sprites='sprites-mono.svg'\n    }else{\n      this.sprites='sprites.svg'\n    }\n  }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  \n\n\n    \n\n    \n                \n                    icon.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n@import \"~assets/styles/_variables.scss\";\n\n.dark{\n  fill: $dark;\n}\n.light{\n  fill: $light;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'IconComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/IframeDisplayComponent.html":{"url":"components/IframeDisplayComponent.html","title":"component - IframeDisplayComponent","body":"\n                   \n\n\n\n\n\n  Components\n  IframeDisplayComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/thirdparty/iframedisplay.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-iframedisplay\n            \n\n            \n                styleUrls\n                ./iframedisplay.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./iframedisplay.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _currentSelection\n                            \n                            \n                                    Private\n                                _menu_entry_id\n                            \n                            \n                                    Private\n                                _menu_id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getMenuById\n                            \n                            \n                                getMenuEntryById\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    menu_id\n                                \n                                \n                                    menu_entry_id\n                                \n                                \n                                    selectedThirdMenu\n                                \n                                \n                                    selectedThirdMenuEntry\n                                \n                                \n                                    iframeURL\n                                \n                                \n                                    safeIframeURL\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, sanitizer: DomSanitizer)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/thirdparty/iframedisplay.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sanitizer\n                                                  \n                                                        \n                                                                    DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMenuById\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMenuById(menu_id: string, thirdMenus: ThirdMenu[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/thirdparty/iframedisplay.component.ts:95\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        menu_id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        thirdMenus\n                                                        \n                                                                    ThirdMenu[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ThirdMenu[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMenuEntryById\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMenuEntryById(menu_entry_id: string, thirdMenu: ThirdMenu)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/thirdparty/iframedisplay.component.ts:101\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        menu_entry_id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        thirdMenu\n                                                        \n                                                                    ThirdMenu\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ThirdMenuEntry[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/thirdparty/iframedisplay.component.ts:38\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _currentSelection\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/thirdparty/iframedisplay.component.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _menu_entry_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/thirdparty/iframedisplay.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _menu_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/thirdparty/iframedisplay.component.ts:30\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        menu_id\n                    \n                \n\n                \n                    \n                        getmenu_id()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/thirdparty/iframedisplay.component.ts:69\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        menu_entry_id\n                    \n                \n\n                \n                    \n                        getmenu_entry_id()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/thirdparty/iframedisplay.component.ts:73\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedThirdMenu\n                    \n                \n\n                \n                    \n                        getselectedThirdMenu()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/thirdparty/iframedisplay.component.ts:77\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedThirdMenuEntry\n                    \n                \n\n                \n                    \n                        getselectedThirdMenuEntry()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/thirdparty/iframedisplay.component.ts:81\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        iframeURL\n                    \n                \n\n                \n                    \n                        getiframeURL()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/thirdparty/iframedisplay.component.ts:85\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        safeIframeURL\n                    \n                \n\n                \n                    \n                        getsafeIframeURL()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/thirdparty/iframedisplay.component.ts:89\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport {\n  selectMenuStateMenu,\n  selectMenuStateSelectedMenuEntryId,\n  selectMenuStateSelectedMenuId\n} from \"@ofSelectors/menu.selectors\";\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"@ofStore/index\";\nimport {ThirdMenu, ThirdMenuEntry} from \"@ofModel/thirds.model\";\nimport {DomSanitizer, SafeUrl} from \"@angular/platform-browser\";\nimport {map, pluck} from \"rxjs/operators\";\nimport {combineLatest} from \"rxjs/internal/observable/combineLatest\";\nimport {withLatestFrom} from \"rxjs/internal/operators/withLatestFrom\";\n\n@Component({\n  selector: 'of-iframedisplay',\n  templateUrl: './iframedisplay.component.html',\n  styleUrls: ['./iframedisplay.component.scss']\n})\nexport class IframeDisplayComponent implements OnInit {\n\n  private _menu_id : Observable;\n  private _menu_entry_id : Observable;\n  private _currentSelection: Observable;\n\n  constructor(private store: Store,\n              private sanitizer: DomSanitizer\n  ) { }\n\n  ngOnInit() {\n    this._menu_id=this.store.select(selectMenuStateSelectedMenuId);\n    this._menu_entry_id=this.store.select(selectMenuStateSelectedMenuEntryId);\n\n    //TODO Init currentSelection in separate function, handle undefined / not found better\n    this._currentSelection=combineLatest(this.menu_id,this.menu_entry_id) //Emit a [menu_entry_id,menu_entry_id] array every time any of them is updated\n        .pipe(\n            withLatestFrom(this.store.select(selectMenuStateMenu)), //Add latest emitted value from selectMenuStateMenu to emission [menu_entry_id, menu_entry_id, thirdMenus]\n            map((currentSelection: [[string,string],ThirdMenu[]]) => {\n              let selectedThirdMenu: ThirdMenu;\n              let selectedThirdMenuEntry: ThirdMenuEntry;\n              let selectedURL: string;\n              if(!this.getMenuById(currentSelection[0][0],currentSelection[1])[0]) { //If no ThirdMenu with this id exists\n                selectedThirdMenu = undefined;\n                selectedThirdMenuEntry = undefined;\n                selectedURL = undefined;\n              } else {\n                selectedThirdMenu = this.getMenuById(currentSelection[0][0],currentSelection[1])[0]\n                if(!this.getMenuEntryById(currentSelection[0][1],selectedThirdMenu)[0]){ //If no ThirdMenuEntry with this id exists\n                  selectedThirdMenuEntry = undefined;\n                  selectedURL = undefined;\n                } else {\n                  selectedThirdMenuEntry = this.getMenuEntryById(currentSelection[0][1],selectedThirdMenu)[0];\n                  selectedURL = selectedThirdMenuEntry.url;\n                }\n              }\n              return {selectedThirdMenu: selectedThirdMenu, selectedThirdMenuEntry: selectedThirdMenuEntry, selectedURL: selectedURL};\n            }\n        ))\n  }\n\n  get menu_id(): Observable {\n    return this._menu_id;\n  }\n\n  get menu_entry_id(): Observable {\n    return this._menu_entry_id;\n  }\n\n  get selectedThirdMenu() {\n    return this._currentSelection.pipe(pluck('selectedThirdMenu'));\n  }\n\n  get selectedThirdMenuEntry() {\n    return this._currentSelection.pipe(pluck('selectedThirdMenuEntry'));\n  }\n\n  get iframeURL(): Observable {\n    return this._currentSelection.pipe(pluck('selectedURL'));\n  }\n\n  get safeIframeURL(): Observable {\n    return this.iframeURL.pipe(map(url => {\n        return this.sanitizer.bypassSecurityTrustResourceUrl(url)\n    }))\n  }\n\n  getMenuById(menu_id: string, thirdMenus: ThirdMenu[]): ThirdMenu[]{ //Assuming it should only return 0 or 1 ThirdMenus\n    return thirdMenus.filter((thirdMenu: ThirdMenu) => {\n      return thirdMenu.id === menu_id;\n    })\n  }\n\n  getMenuEntryById(menu_entry_id: string, thirdMenu: ThirdMenu): ThirdMenuEntry[]{\n    return thirdMenu.entries.filter((menuEntry: ThirdMenuEntry) => {\n      return menuEntry.id === menu_entry_id;\n    })\n  }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n\n  \n\n    \n      \n    \n\n    \n      \n        No iframe URL to display.\n      \n    \n\n  \n\n  \n    \n      There is no third-party menu entry with the id {{(menu_entry_id|async)}} in third-party menu {{(menu_id|async)}}.\n    \n  \n\n\n\n\n  \n    There is no third-party menu with the id {{(menu_id|async)}}.\n  \n\n\n\n    \n\n    \n                \n                    ./iframedisplay.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                  No iframe URL to display.                        There is no third-party menu entry with the id {{(menu_entry_id|async)}} in third-party menu {{(menu_id|async)}}.            There is no third-party menu with the id {{(menu_id|async)}}.  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'IframeDisplayComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InitAuthStatus.html":{"url":"classes/InitAuthStatus.html","title":"class - InitAuthStatus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InitAuthStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                It aims to validate the current authentication if exists.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/authentication.actions.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.InitAuthStatus\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:39\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\nimport {Message} from \"@ofModel/message.model\";\n\nexport enum AuthenticationActionTypes {\n    InitAuthStatus = '[Authentication] Init Authentication Status',\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\n/**\n * Authentication success payload\n */\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class InitAuthStatus implements Action {\n    readonly type = AuthenticationActionTypes.InitAuthStatus;\n    /* istanbul ignore next */\n    constructor(public payload:{code: string}){}\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: PayloadForSuccessfulAuthentication) {}\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Message }) {}\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    /* istanbul ignore next */\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n    InitAuthStatus\n    | AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InitFilters.html":{"url":"classes/InitFilters.html","title":"class - InitFilters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InitFilters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/feed.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/feed.actions.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/feed.actions.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : FeedActionTypes.InitFilter\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/feed.actions.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Filter} from \"@ofModel/feed-filter.model\";\nimport {FilterType} from \"@ofServices/filter.service\";\n\nexport enum FeedActionTypes {\n    ApplyFilter = '[Feed] Change filter Status',\n    InitFilter = '[Feed] Init filter',\n}\n\nexport class ApplyFilter implements Action {\n    readonly type = FeedActionTypes.ApplyFilter;\n    /* istanbul ignore next */\n    constructor(public payload:{name: FilterType, active: boolean, status: any}){}\n}\n\nexport class InitFilters implements Action {\n    readonly type = FeedActionTypes.InitFilter;\n\n    /* istanbul ignore next */\n    constructor(public payload:{filters: Map}){}\n}\n\nexport type FeedActions =\n    InitFilters\n    | ApplyFilter;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Input.html":{"url":"classes/Input.html","title":"class - Input","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Input\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/thirds.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: InputType, name: string, label: I18n, value: string, mandatory: boolean, maxLength: number, rows: number, values: ParameterListItem[], selectedValues: string[], unSelectedValues: string[])\n                    \n                \n                        \n                            \n                                Defined in src/app/model/thirds.model.ts:98\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                    InputType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mandatory\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rows\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    ParameterListItem[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        selectedValues\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        unSelectedValues\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Card, Detail} from \"@ofModel/card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map as OfMap} from \"@ofModel/map\";\n\nexport class Third{\n    /* istanbul ignore next */\n    constructor(\n        readonly name:string,\n        readonly version:string,\n        readonly i18nLabelKey: string,\n        readonly templates?:string[],\n        readonly csses?:string[],\n        readonly locales?:string[],\n        readonly menuEntries?:ThirdMenuEntry[],\n        readonly processes?:OfMap\n    ){}\n\n    public extractState(card:Card):State{\n        if(card.process && this.processes[card.process]) {\n            const process = this.processes[card.process];\n            if(card.state && process.states[card.state]) {\n               return process.states[card.state];\n            }\n        }\n        return null;\n    }\n}\n\nexport class ThirdMenuEntry{\n    /* istanbul ignore next */\n    constructor(\n        readonly id:string,\n        readonly label: string,\n        readonly url: string\n    ){}\n}\n\nexport class ThirdMenu{\n    /* istanbul ignore next */\n    constructor(\n        readonly id: string,\n        readonly version: string,\n        readonly label: string,\n        readonly entries: ThirdMenuEntry[]){}\n}\n\nexport class Process{\n    /* istanbul ignore next */\n    constructor(\n        readonly states?:OfMap\n    ){}\n}\n\nexport class State{\n    /* istanbul ignore next */\n    constructor(\n        readonly details?:Detail[],\n        readonly actions?:OfMap\n    ){}\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    /* istanbul ignore next */\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    /* istanbul ignore next */\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    /* istanbul ignore next */\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LightCardEffects.html":{"url":"injectables/LightCardEffects.html","title":"injectable - LightCardEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LightCardEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/light-card.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loadById\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, thirdService: ThirdsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/light-card.effects.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        thirdService\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadById\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            ofType(LightCardActionTypes.LoadLightCardsSuccess),\n            switchMap((action:LoadLightCardsSuccess)=>\n                    this.thirdService.loadI18nForLightCards(action.payload.lightCards)\n                        .pipe(\n                            tap(test=>console.log(`loaded lightCards:${test}`)),\n                            catchError((err,caught)=>{\n                                console.error(`i18 loading failed for card publishers`);\n                                console.error(err);\n                                return of(false);\n                            })\n                        )),\n            map(\n                ()=>{\n                    return new LoadLightCardsExtendedData();\n                }\n            )\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/light-card.effects.ts:30\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {Observable, of} from 'rxjs';\nimport {catchError, map, switchMap} from 'rxjs/operators';\nimport {AppState} from \"@ofStore/index\";\nimport {LightCardActionTypes, LoadLightCardsExtendedData, LoadLightCardsSuccess} from \"@ofActions/light-card.actions\";\nimport {ThirdsService} from \"@ofServices/thirds.service\";\nimport {tap} from \"rxjs/internal/operators/tap\";\n\n// those effects are unused for the moment\n@Injectable()\nexport class LightCardEffects {\n\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private thirdService: ThirdsService\n    ) {\n    }\n\n    @Effect()\n    loadById: Observable = this.actions$\n        .pipe(\n            ofType(LightCardActionTypes.LoadLightCardsSuccess),\n            switchMap((action:LoadLightCardsSuccess)=>\n                    this.thirdService.loadI18nForLightCards(action.payload.lightCards)\n                        .pipe(\n                            tap(test=>console.log(`loaded lightCards:${test}`)),\n                            catchError((err,caught)=>{\n                                console.error(`i18 loading failed for card publishers`);\n                                console.error(err);\n                                return of(false);\n                            })\n                        )),\n            map(\n                ()=>{\n                    return new LoadLightCardsExtendedData();\n                }\n            )\n        );\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadCard.html":{"url":"classes/LoadCard.html","title":"class - LoadCard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/card.actions.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CardActionTypes.LoadCard\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Card} from '@ofModel/card.model';\n\nexport enum CardActionTypes {\n    ClearCard = '[Card] Clear',\n    LoadCard = '[Card] Load Card',\n    LoadCardSuccess = '[Card] Load Card Success',\n    LoadCardFailure = '[Card] Load Card Fail',\n    HandleUnexpectedError = '[Card] Handle unexpected error related to card issue'\n}\n// needed by NGRX entities\nexport class ClearCard implements Action {\n    readonly type = CardActionTypes.ClearCard;\n}\nexport class LoadCard implements Action {\n    readonly type = CardActionTypes.LoadCard;\n\n    /* istanbul ignore next */\n    constructor(public payload: { id: string }) {}\n}\nexport class LoadCardFailure implements Action {\n    readonly type = CardActionTypes.LoadCardFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {}\n}\n\nexport class LoadCardSuccess implements Action {\n    readonly type = CardActionTypes.LoadCardSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { card: Card }) {}\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = CardActionTypes.HandleUnexpectedError;\n\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {}\n}\n\nexport type CardActions =\n    ClearCard\n    | LoadCard\n    | LoadCardSuccess\n    | LoadCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadCardFailure.html":{"url":"classes/LoadCardFailure.html","title":"class - LoadCardFailure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadCardFailure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/card.actions.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CardActionTypes.LoadCardFailure\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Card} from '@ofModel/card.model';\n\nexport enum CardActionTypes {\n    ClearCard = '[Card] Clear',\n    LoadCard = '[Card] Load Card',\n    LoadCardSuccess = '[Card] Load Card Success',\n    LoadCardFailure = '[Card] Load Card Fail',\n    HandleUnexpectedError = '[Card] Handle unexpected error related to card issue'\n}\n// needed by NGRX entities\nexport class ClearCard implements Action {\n    readonly type = CardActionTypes.ClearCard;\n}\nexport class LoadCard implements Action {\n    readonly type = CardActionTypes.LoadCard;\n\n    /* istanbul ignore next */\n    constructor(public payload: { id: string }) {}\n}\nexport class LoadCardFailure implements Action {\n    readonly type = CardActionTypes.LoadCardFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {}\n}\n\nexport class LoadCardSuccess implements Action {\n    readonly type = CardActionTypes.LoadCardSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { card: Card }) {}\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = CardActionTypes.HandleUnexpectedError;\n\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {}\n}\n\nexport type CardActions =\n    ClearCard\n    | LoadCard\n    | LoadCardSuccess\n    | LoadCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadCardSuccess.html":{"url":"classes/LoadCardSuccess.html","title":"class - LoadCardSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadCardSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/card.actions.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CardActionTypes.LoadCardSuccess\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/card.actions.ts:36\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Card} from '@ofModel/card.model';\n\nexport enum CardActionTypes {\n    ClearCard = '[Card] Clear',\n    LoadCard = '[Card] Load Card',\n    LoadCardSuccess = '[Card] Load Card Success',\n    LoadCardFailure = '[Card] Load Card Fail',\n    HandleUnexpectedError = '[Card] Handle unexpected error related to card issue'\n}\n// needed by NGRX entities\nexport class ClearCard implements Action {\n    readonly type = CardActionTypes.ClearCard;\n}\nexport class LoadCard implements Action {\n    readonly type = CardActionTypes.LoadCard;\n\n    /* istanbul ignore next */\n    constructor(public payload: { id: string }) {}\n}\nexport class LoadCardFailure implements Action {\n    readonly type = CardActionTypes.LoadCardFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {}\n}\n\nexport class LoadCardSuccess implements Action {\n    readonly type = CardActionTypes.LoadCardSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { card: Card }) {}\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = CardActionTypes.HandleUnexpectedError;\n\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {}\n}\n\nexport type CardActions =\n    ClearCard\n    | LoadCard\n    | LoadCardSuccess\n    | LoadCardFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadConfig.html":{"url":"classes/LoadConfig.html","title":"class - LoadConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/config.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConfigActionTypes.LoadConfig\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/config.actions.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\n\nexport enum ConfigActionTypes {\n    LoadConfig = '[Config] Load Config',\n    LoadConfigSuccess = '[Config] Load Config Success',\n    LoadConfigFailure = '[Config] Load Config Fail',\n    HandleUnexpectedError = '[Config] Handle unexpected error related to configuration issue'\n}\n// needed by NGRX entities\nexport class LoadConfig implements Action {\n    readonly type = ConfigActionTypes.LoadConfig;\n}\nexport class LoadConfigFailure implements Action {\n    readonly type = ConfigActionTypes.LoadConfigFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadConfigSuccess implements Action {\n    readonly type = ConfigActionTypes.LoadConfigSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { config: any }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = ConfigActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type ConfigActions =\n    LoadConfig\n    | LoadConfigSuccess\n    | LoadConfigFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadConfigFailure.html":{"url":"classes/LoadConfigFailure.html","title":"class - LoadConfigFailure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadConfigFailure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/config.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/config.actions.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/config.actions.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConfigActionTypes.LoadConfigFailure\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/config.actions.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\n\nexport enum ConfigActionTypes {\n    LoadConfig = '[Config] Load Config',\n    LoadConfigSuccess = '[Config] Load Config Success',\n    LoadConfigFailure = '[Config] Load Config Fail',\n    HandleUnexpectedError = '[Config] Handle unexpected error related to configuration issue'\n}\n// needed by NGRX entities\nexport class LoadConfig implements Action {\n    readonly type = ConfigActionTypes.LoadConfig;\n}\nexport class LoadConfigFailure implements Action {\n    readonly type = ConfigActionTypes.LoadConfigFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadConfigSuccess implements Action {\n    readonly type = ConfigActionTypes.LoadConfigSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { config: any }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = ConfigActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type ConfigActions =\n    LoadConfig\n    | LoadConfigSuccess\n    | LoadConfigFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadConfigSuccess.html":{"url":"classes/LoadConfigSuccess.html","title":"class - LoadConfigSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadConfigSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/config.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/config.actions.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/config.actions.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConfigActionTypes.LoadConfigSuccess\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/config.actions.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\n\nexport enum ConfigActionTypes {\n    LoadConfig = '[Config] Load Config',\n    LoadConfigSuccess = '[Config] Load Config Success',\n    LoadConfigFailure = '[Config] Load Config Fail',\n    HandleUnexpectedError = '[Config] Handle unexpected error related to configuration issue'\n}\n// needed by NGRX entities\nexport class LoadConfig implements Action {\n    readonly type = ConfigActionTypes.LoadConfig;\n}\nexport class LoadConfigFailure implements Action {\n    readonly type = ConfigActionTypes.LoadConfigFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadConfigSuccess implements Action {\n    readonly type = ConfigActionTypes.LoadConfigSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { config: any }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = ConfigActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type ConfigActions =\n    LoadConfig\n    | LoadConfigSuccess\n    | LoadConfigFailure\n    | HandleUnexpectedError;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadLightCards.html":{"url":"classes/LoadLightCards.html","title":"class - LoadLightCards","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadLightCards\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.LoadLightCards\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    EmptyLightCards = '[LCard] Empty',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class EmptyLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.EmptyLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError\n    | EmptyLightCards;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadLightCardsExtendedData.html":{"url":"classes/LoadLightCardsExtendedData.html","title":"class - LoadLightCardsExtendedData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadLightCardsExtendedData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:42\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.LoadLightCardsExtendedData\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:42\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    EmptyLightCards = '[LCard] Empty',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class EmptyLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.EmptyLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError\n    | EmptyLightCards;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadLightCardsFailure.html":{"url":"classes/LoadLightCardsFailure.html","title":"class - LoadLightCardsFailure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadLightCardsFailure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.LoadLightCardsFailure\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:50\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    EmptyLightCards = '[LCard] Empty',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class EmptyLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.EmptyLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError\n    | EmptyLightCards;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadLightCardsSuccess.html":{"url":"classes/LoadLightCardsSuccess.html","title":"class - LoadLightCardsSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadLightCardsSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.LoadLightCardsSuccess\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    EmptyLightCards = '[LCard] Empty',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class EmptyLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.EmptyLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError\n    | EmptyLightCards;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMenu.html":{"url":"classes/LoadMenu.html","title":"class - LoadMenu","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMenu\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/menu.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/menu.actions.ts:20\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : MenuActionTypes.LoadMenu\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\n\nexport enum MenuActionTypes {\n    LoadMenu = '[Menu] Load Menu',\n    LoadMenuSuccess = '[Menu] Load Menu Success',\n    LoadMenuFailure = '[Menu] Load Menu Fail',\n    HandleUnexpectedError = '[Menu] Handle unexpected error',\n    UpdateSelectedMenu = '[Menu] Update Selected Menu',\n}\n// needed by NGRX entities\nexport class LoadMenu implements Action {\n    readonly type = MenuActionTypes.LoadMenu;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\nexport class LoadMenuFailure implements Action {\n    readonly type = MenuActionTypes.LoadMenuFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadMenuSuccess implements Action {\n    readonly type = MenuActionTypes.LoadMenuSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { menu: ThirdMenu[] }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    readonly type = MenuActionTypes.HandleUnexpectedError;\n\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\n/**\n * Action used to update the state with the selected menu\n */\n//TODO Describe usage (cf authentication example)\nexport class UpdateSelectedMenu implements Action {\n    readonly type = MenuActionTypes.UpdateSelectedMenu;\n\n    /* istanbul ignore next */\n    constructor(public payload: {menu_id: string, menu_entry_id: string}) {}\n}\n\nexport type MenuActions =\n    LoadMenu\n    | LoadMenuSuccess\n    | LoadMenuFailure\n    | HandleUnexpectedError\n    | UpdateSelectedMenu;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMenuFailure.html":{"url":"classes/LoadMenuFailure.html","title":"class - LoadMenuFailure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMenuFailure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/menu.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/menu.actions.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : MenuActionTypes.LoadMenuFailure\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\n\nexport enum MenuActionTypes {\n    LoadMenu = '[Menu] Load Menu',\n    LoadMenuSuccess = '[Menu] Load Menu Success',\n    LoadMenuFailure = '[Menu] Load Menu Fail',\n    HandleUnexpectedError = '[Menu] Handle unexpected error',\n    UpdateSelectedMenu = '[Menu] Update Selected Menu',\n}\n// needed by NGRX entities\nexport class LoadMenu implements Action {\n    readonly type = MenuActionTypes.LoadMenu;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\nexport class LoadMenuFailure implements Action {\n    readonly type = MenuActionTypes.LoadMenuFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadMenuSuccess implements Action {\n    readonly type = MenuActionTypes.LoadMenuSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { menu: ThirdMenu[] }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    readonly type = MenuActionTypes.HandleUnexpectedError;\n\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\n/**\n * Action used to update the state with the selected menu\n */\n//TODO Describe usage (cf authentication example)\nexport class UpdateSelectedMenu implements Action {\n    readonly type = MenuActionTypes.UpdateSelectedMenu;\n\n    /* istanbul ignore next */\n    constructor(public payload: {menu_id: string, menu_entry_id: string}) {}\n}\n\nexport type MenuActions =\n    LoadMenu\n    | LoadMenuSuccess\n    | LoadMenuFailure\n    | HandleUnexpectedError\n    | UpdateSelectedMenu;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMenuSuccess.html":{"url":"classes/LoadMenuSuccess.html","title":"class - LoadMenuSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMenuSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/menu.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/menu.actions.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : MenuActionTypes.LoadMenuSuccess\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\n\nexport enum MenuActionTypes {\n    LoadMenu = '[Menu] Load Menu',\n    LoadMenuSuccess = '[Menu] Load Menu Success',\n    LoadMenuFailure = '[Menu] Load Menu Fail',\n    HandleUnexpectedError = '[Menu] Handle unexpected error',\n    UpdateSelectedMenu = '[Menu] Update Selected Menu',\n}\n// needed by NGRX entities\nexport class LoadMenu implements Action {\n    readonly type = MenuActionTypes.LoadMenu;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\nexport class LoadMenuFailure implements Action {\n    readonly type = MenuActionTypes.LoadMenuFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadMenuSuccess implements Action {\n    readonly type = MenuActionTypes.LoadMenuSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { menu: ThirdMenu[] }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    readonly type = MenuActionTypes.HandleUnexpectedError;\n\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\n/**\n * Action used to update the state with the selected menu\n */\n//TODO Describe usage (cf authentication example)\nexport class UpdateSelectedMenu implements Action {\n    readonly type = MenuActionTypes.UpdateSelectedMenu;\n\n    /* istanbul ignore next */\n    constructor(public payload: {menu_id: string, menu_entry_id: string}) {}\n}\n\nexport type MenuActions =\n    LoadMenu\n    | LoadMenuSuccess\n    | LoadMenuFailure\n    | HandleUnexpectedError\n    | UpdateSelectedMenu;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/login/login.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-login\n            \n\n\n            \n                styles\n                .btn-primary {margin-right: 8px;}\n            \n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                codeProvider\n                            \n                            \n                                hide\n                            \n                            \n                                loginMessage\n                            \n                            \n                                useCodeFlow$\n                            \n                            \n                                userForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                codeFlow\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSubmit\n                            \n                            \n                                resetForm\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, service: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/login/login.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            codeFlow\n                            \n                            \n                        \n                    \n                \n                \n                    \ncodeFlow()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:63\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:36\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onSubmit\n                            \n                            \n                        \n                    \n                \n                \n                    \nonSubmit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:51\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            resetForm\n                            \n                            \n                        \n                    \n                \n                \n                    \nresetForm()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:59\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            codeProvider\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hide\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loginMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Message\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            useCodeFlow$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/login/login.component.ts:28\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {Store} from '@ngrx/store';\nimport {TryToLogIn} from '@ofActions/authentication.actions';\nimport {AppState} from '@ofStore/index';\nimport {buildConfigSelector} from \"@ofSelectors/config.selectors\";\nimport {filter, map} from \"rxjs/operators\";\nimport {Observable} from \"rxjs\";\nimport {AuthenticationService} from \"@ofServices/authentication.service\";\nimport {selectMessage} from \"@ofSelectors/authentication.selectors\";\nimport {Message, MessageLevel} from \"@ofModel/message.model\";\n\n@Component({\n    selector: 'of-login',\n    templateUrl: './login.component.html',\n    styles: ['.btn-primary {margin-right: 8px;}']\n})\nexport class LoginComponent implements OnInit {\n\n    hide: boolean;\n    userForm: FormGroup;\n    useCodeFlow$: Observable;\n    loginMessage: Message;\n    // codeProvider$: Observable;\n    codeProvider: any;\n    /* istanbul ignore next */\n    constructor( private store: Store, private service: AuthenticationService) {}\n\n    ngOnInit() {\n        this.useCodeFlow$ = this.store.select(buildConfigSelector('security.oauth2.flow.mode'))\n            .pipe(map(flowMode=>flowMode === 'CODE'));\n        this.store.select(selectMessage).pipe(filter(m=>m!=null && m.level==MessageLevel.ERROR))\n            .subscribe(m=>this.loginMessage=m);\n        this.store.select(buildConfigSelector('security.oauth2.flow.provider'))\n            .subscribe(provider=>this.codeProvider={name:provider});\n        this.hide = true;\n        this.userForm = new FormGroup({\n                identifier: new FormControl(''),\n                password: new FormControl('')\n            }\n        );\n    }\n\n    onSubmit(): void {\n        if (this.userForm.valid) {\n            const username = this.userForm.get('identifier').value;\n            const password = this.userForm.get('password').value;\n            this.store.dispatch(new TryToLogIn({username: username, password: password}));\n        }\n    }\n\n    resetForm(): void {\n        this.userForm.reset();\n    }\n\n    codeFlow(): void{\n        this.service.moveToCodeFlowLoginPage();\n    }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n    \n        \n            \n                \n                    login.login\n                    \n                    \n                        login.password\n                        \n                    \n                    \n                        login.submit.password\n                        login.reset\n                    \n                \n                \n                    \n                    login.submit.code\n                    \n                \n            \n            {{loginMessage.i18n.key|translate:loginMessage.i18n.parameters}}\n        \n    \n\n\n    \n\n    \n            .btn-primary {margin-right: 8px;}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                            login.login                                                                login.password                                                                                        login.submit.password                        login.reset                                                                                            login.submit.code                                                            {{loginMessage.i18n.key|translate:loginMessage.i18n.parameters}}            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Map.html":{"url":"classes/Map.html","title":"class - Map","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Map\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/map.ts\n        \n\n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    T\n\n                    \n                \n                        \n                            \n                                Defined in src/app/model/map.ts:8\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        export class Map {\n    [key: string]: T;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MenuEffects.html":{"url":"injectables/MenuEffects.html","title":"injectable - MenuEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MenuEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/effects/menu.effects.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                load\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, actions$: Actions, service: ThirdsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/effects/menu.effects.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            load\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this.actions$\n        .pipe(\n            ofType(MenuActionTypes.LoadMenu),\n            switchMap(action => this.service.computeThirdsMenu()),\n            switchMap(menu=>zip(of(menu),this.service.loadI18nForMenuEntries(menu)\n                .pipe(\n                    catchError((err,caught)=>{\n                        console.error(err);\n                        return of(false);\n                    })\n                ))),\n            map(array =>\n                new LoadMenuSuccess({menu: array[0]})\n            ),\n            catchError((err, caught) => {\n                console.error(err);\n                this.store.dispatch(new LoadMenuFailure(err));\n                return caught;\n            })\n        )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/effects/menu.effects.ts:29\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {Observable, of, zip} from 'rxjs';\nimport {catchError, map, switchMap} from 'rxjs/operators';\nimport {AppState} from \"@ofStore/index\";\nimport {LoadCard} from \"@ofActions/card.actions\";\nimport {ThirdsService} from \"@ofServices/thirds.service\";\nimport {LoadMenuFailure, LoadMenuSuccess, MenuActionTypes} from \"@ofActions/menu.actions\";\n\n@Injectable()\nexport class MenuEffects {\n\n    /* istanbul ignore next */\n    constructor(private store: Store,\n                private actions$: Actions,\n                private service: ThirdsService\n    ) {\n    }\n\n    @Effect()\n    load: Observable = this.actions$\n        .pipe(\n            ofType(MenuActionTypes.LoadMenu),\n            switchMap(action => this.service.computeThirdsMenu()),\n            switchMap(menu=>zip(of(menu),this.service.loadI18nForMenuEntries(menu)\n                .pipe(\n                    catchError((err,caught)=>{\n                        console.error(err);\n                        return of(false);\n                    })\n                ))),\n            map(array =>\n                new LoadMenuSuccess({menu: array[0]})\n            ),\n            catchError((err, caught) => {\n                console.error(err);\n                this.store.dispatch(new LoadMenuFailure(err));\n                return caught;\n            })\n        );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MenuState.html":{"url":"interfaces/MenuState.html","title":"interface - MenuState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MenuState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/menu.state.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        loading\n                                \n                                \n                                        menu\n                                \n                                \n                                        selected_menu_entry_id\n                                \n                                \n                                        selected_menu_id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                    \n                                \n                                \n                                    \n                                        loading:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        menu\n                                    \n                                \n                                \n                                    \n                                        menu:     ThirdMenu[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ThirdMenu[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected_menu_entry_id\n                                    \n                                \n                                \n                                    \n                                        selected_menu_entry_id:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected_menu_id\n                                    \n                                \n                                \n                                    \n                                        selected_menu_id:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {ThirdMenu} from \"@ofModel/thirds.model\";\n\nexport interface MenuState{\n    menu: ThirdMenu[],\n    loading: boolean,\n    error:string,\n    selected_menu_id: string,\n    selected_menu_entry_id: string\n}\n\nexport const menuInitialState: MenuState = {\n    menu:[],\n    loading: false,\n    error:null,\n    selected_menu_id: null,\n    selected_menu_entry_id: null\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Message.html":{"url":"classes/Message.html","title":"class - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/message.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, level, i18n?: I18n)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/message.model.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        level\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {I18n} from \"@ofModel/i18n.model\";\n\nexport class Message {\n\n    /* istanbul ignore next */\n    constructor(\n        readonly message: string,\n        readonly level = MessageLevel.DEBUG,\n        readonly i18n?: I18n,\n    ){}\n}\n\nexport enum MessageLevel {\n    ERROR, INFO, DEBUG\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavbarComponent.html":{"url":"components/NavbarComponent.html","title":"component - NavbarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NavbarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/navbar/navbar.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-navbar\n            \n\n\n\n\n            \n                templateUrl\n                ./navbar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _thirdMenus\n                            \n                            \n                                currentPath\n                            \n                            \n                                expandedMenu\n                            \n                            \n                                navbarCollapsed\n                            \n                            \n                                navigationRoutes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logOut\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                toggleMenu\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    thirdMenus\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/navbar/navbar.component.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logOut\n                            \n                            \n                        \n                    \n                \n                \n                    \nlogOut()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:50\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:36\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleMenu\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleMenu(index: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:58\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        index\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _thirdMenus\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expandedMenu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     boolean[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            navbarCollapsed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            navigationRoutes\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : navigationRoutes\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/navbar/navbar.component.ts:28\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        thirdMenus\n                    \n                \n\n                \n                    \n                        getthirdMenus()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/navbar/navbar.component.ts:54\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\nimport {navigationRoutes} from '../../app-routing.module';\nimport {Store} from '@ngrx/store';\nimport {TryToLogOut} from '@ofActions/authentication.actions';\nimport {AppState} from '@ofStore/index';\nimport {selectCurrentUrl} from '@ofSelectors/router.selectors';\nimport {LoadMenu} from \"@ofActions/menu.actions\";\nimport {selectMenuStateMenu} from \"@ofSelectors/menu.selectors\";\nimport {Observable} from \"rxjs\";\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\nimport {tap} from \"rxjs/operators\";\nimport * as _ from 'lodash';\n\n@Component({\n  selector: 'of-navbar',\n  templateUrl: './navbar.component.html',\n})\nexport class NavbarComponent implements OnInit {\n\n    navbarCollapsed = true;\n    navigationRoutes = navigationRoutes;\n    currentPath: any;\n    private _thirdMenus: Observable;\n    expandedMenu:boolean[]=[];\n\n    constructor(private store: Store) {\n    }\n\n    ngOnInit() {\n        this.store.select(selectCurrentUrl).subscribe(url=>{\n            if(url)\n                this.currentPath = url.split('/')[1];\n        });\n        this._thirdMenus=this.store.select(selectMenuStateMenu)\n            .pipe(tap(menus=>{\n                this.expandedMenu=new Array(menus.length);\n                _.fill(this.expandedMenu,false);\n            }));\n        this.store.dispatch(new LoadMenu());\n    }\n\n\n    logOut(){\n        this.store.dispatch(new TryToLogOut());\n    }\n\n    get thirdMenus(){\n        return this._thirdMenus;\n    }\n\n    toggleMenu(index:number){\n        this.expandedMenu[index]=!this.expandedMenu[index];\n        if(this.expandedMenu[index])\n            setTimeout(()=>this.expandedMenu[index]=false,5000);\n    }\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  \n    \n      \n    \n  \n  \n    \n  \n  \n    \n      \n      \n        {{'menu.'+link.path}}\n      \n      \n      1\">\n        \n        1\"\n                translate\n        >{{tMenu.id}}.{{tMenu.version}}.{{tMenu.label}}\n        1\"\n             [ngbCollapse]=\"!expandedMenu[index]\">\n          \n            \n              {{tMenu.id}}.{{tMenu.version}}.{{entry.label}}\n            \n              \n            \n          \n        \n        \n        \n          {{tMenu.id}}.{{tMenu.version}}.{{tMenu.entries[0].label}}\n          \n            \n          \n        \n      \n      \n        \n          menu.logout\n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                    {{\\'menu.\\'+link.path}}                  1\">                1\"                translate        >{{tMenu.id}}.{{tMenu.version}}.{{tMenu.label}}        1\"             [ngbCollapse]=\"!expandedMenu[index]\">                                    {{tMenu.id}}.{{tMenu.version}}.{{entry.label}}                                                                                  {{tMenu.id}}.{{tMenu.version}}.{{tMenu.entries[0].label}}                                                                      menu.logout                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavbarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NoSelectionComponent.html":{"url":"components/NoSelectionComponent.html","title":"component - NoSelectionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NoSelectionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/components/no-selection/no-selection.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-no-selection\n            \n\n\n\n\n            \n                templateUrl\n                ./no-selection.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/components/no-selection/no-selection.component.ts:14\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/no-selection/no-selection.component.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'of-no-selection',\n  templateUrl: './no-selection.component.html',\n})\nexport class NoSelectionComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  no-selection works!\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  no-selection works!'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NoSelectionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParameterListItem.html":{"url":"classes/ParameterListItem.html","title":"class - ParameterListItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParameterListItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/thirds.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(label: I18n, value: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/thirds.model.ts:115\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                    I18n\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Card, Detail} from \"@ofModel/card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map as OfMap} from \"@ofModel/map\";\n\nexport class Third{\n    /* istanbul ignore next */\n    constructor(\n        readonly name:string,\n        readonly version:string,\n        readonly i18nLabelKey: string,\n        readonly templates?:string[],\n        readonly csses?:string[],\n        readonly locales?:string[],\n        readonly menuEntries?:ThirdMenuEntry[],\n        readonly processes?:OfMap\n    ){}\n\n    public extractState(card:Card):State{\n        if(card.process && this.processes[card.process]) {\n            const process = this.processes[card.process];\n            if(card.state && process.states[card.state]) {\n               return process.states[card.state];\n            }\n        }\n        return null;\n    }\n}\n\nexport class ThirdMenuEntry{\n    /* istanbul ignore next */\n    constructor(\n        readonly id:string,\n        readonly label: string,\n        readonly url: string\n    ){}\n}\n\nexport class ThirdMenu{\n    /* istanbul ignore next */\n    constructor(\n        readonly id: string,\n        readonly version: string,\n        readonly label: string,\n        readonly entries: ThirdMenuEntry[]){}\n}\n\nexport class Process{\n    /* istanbul ignore next */\n    constructor(\n        readonly states?:OfMap\n    ){}\n}\n\nexport class State{\n    /* istanbul ignore next */\n    constructor(\n        readonly details?:Detail[],\n        readonly actions?:OfMap\n    ){}\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    /* istanbul ignore next */\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    /* istanbul ignore next */\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    /* istanbul ignore next */\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PayloadForSuccessfulAuthentication.html":{"url":"classes/PayloadForSuccessfulAuthentication.html","title":"class - PayloadForSuccessfulAuthentication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PayloadForSuccessfulAuthentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Authentication success payload\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clientId\n                            \n                            \n                                    Public\n                                expirationDate\n                            \n                            \n                                    Public\n                                identifier\n                            \n                            \n                                    Public\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(identifier: string, clientId: Guid, token: string, expirationDate: Date)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/authentication.actions.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        identifier\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clientId\n                                                  \n                                                        \n                                                                    Guid\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        token\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        expirationDate\n                                                  \n                                                        \n                                                                    Date\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            clientId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Guid\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            expirationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            identifier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\nimport {Message} from \"@ofModel/message.model\";\n\nexport enum AuthenticationActionTypes {\n    InitAuthStatus = '[Authentication] Init Authentication Status',\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\n/**\n * Authentication success payload\n */\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class InitAuthStatus implements Action {\n    readonly type = AuthenticationActionTypes.InitAuthStatus;\n    /* istanbul ignore next */\n    constructor(public payload:{code: string}){}\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: PayloadForSuccessfulAuthentication) {}\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Message }) {}\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    /* istanbul ignore next */\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n    InitAuthStatus\n    | AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Process.html":{"url":"classes/Process.html","title":"class - Process","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Process\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/thirds.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(states?: OfMap)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/thirds.model.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        states\n                                                  \n                                                        \n                                                                    OfMap\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Card, Detail} from \"@ofModel/card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map as OfMap} from \"@ofModel/map\";\n\nexport class Third{\n    /* istanbul ignore next */\n    constructor(\n        readonly name:string,\n        readonly version:string,\n        readonly i18nLabelKey: string,\n        readonly templates?:string[],\n        readonly csses?:string[],\n        readonly locales?:string[],\n        readonly menuEntries?:ThirdMenuEntry[],\n        readonly processes?:OfMap\n    ){}\n\n    public extractState(card:Card):State{\n        if(card.process && this.processes[card.process]) {\n            const process = this.processes[card.process];\n            if(card.state && process.states[card.state]) {\n               return process.states[card.state];\n            }\n        }\n        return null;\n    }\n}\n\nexport class ThirdMenuEntry{\n    /* istanbul ignore next */\n    constructor(\n        readonly id:string,\n        readonly label: string,\n        readonly url: string\n    ){}\n}\n\nexport class ThirdMenu{\n    /* istanbul ignore next */\n    constructor(\n        readonly id: string,\n        readonly version: string,\n        readonly label: string,\n        readonly entries: ThirdMenuEntry[]){}\n}\n\nexport class Process{\n    /* istanbul ignore next */\n    constructor(\n        readonly states?:OfMap\n    ){}\n}\n\nexport class State{\n    /* istanbul ignore next */\n    constructor(\n        readonly details?:Detail[],\n        readonly actions?:OfMap\n    ){}\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    /* istanbul ignore next */\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    /* istanbul ignore next */\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    /* istanbul ignore next */\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RejectLogIn.html":{"url":"classes/RejectLogIn.html","title":"class - RejectLogIn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RejectLogIn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used to notify the store that the authentication is not possible.\nEmmited by {AuthenticationEffect} in the following {Observable} @members:\n\nTryToLogin;\nCheckAuthentication\nand in the handleRejectedLogin @method called by the ChecAuthentication {Observable}\n\nUsed in the {function} reducer of the {authentication.reducer.ts} file to create a new state\nwithout any authentication information and containing a message about login rejection\nby filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/authentication.actions.ts:109\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:112\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.RejectLogIn\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:109\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\nimport {Message} from \"@ofModel/message.model\";\n\nexport enum AuthenticationActionTypes {\n    InitAuthStatus = '[Authentication] Init Authentication Status',\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\n/**\n * Authentication success payload\n */\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class InitAuthStatus implements Action {\n    readonly type = AuthenticationActionTypes.InitAuthStatus;\n    /* istanbul ignore next */\n    constructor(public payload:{code: string}){}\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: PayloadForSuccessfulAuthentication) {}\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Message }) {}\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    /* istanbul ignore next */\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n    InitAuthStatus\n    | AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RouterStateUrl.html":{"url":"classes/RouterStateUrl.html","title":"class - RouterStateUrl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RouterStateUrl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/states/router.state.ts\n        \n\n            \n                Description\n            \n            \n                The RouterStateSerializer takes the current RouterStateSnapshot\nand returns any pertinent information needed. The snapshot contains\nall information about the state of the router at the given point in time.\nThe entire snapshot is complex and not always needed. In this case, you only\nneed the URL and query parameters from the snapshot in the store. Other items could be\nreturned such as route parameters and static route data.\nsource: https://github.com/briebug/ngrx-complex-forms\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string, params: Params, queryParams: Params)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/states/router.state.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                    Params\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryParams\n                                                  \n                                                        \n                                                                    Params\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {RouterStateSerializer} from \"@ngrx/router-store\";\nimport {ActivatedRouteSnapshot, Params, RouterStateSnapshot} from \"@angular/router\";\n\nexport const initialState = {\n    state: {\n        url: window.location.pathname,\n        params: {},\n        queryParams: {}\n    },\n    navigationId: 0\n}\n\n/**\n * The RouterStateSerializer takes the current RouterStateSnapshot\n * and returns any pertinent information needed. The snapshot contains\n * all information about the state of the router at the given point in time.\n * The entire snapshot is complex and not always needed. In this case, you only\n * need the URL and query parameters from the snapshot in the store. Other items could be\n * returned such as route parameters and static route data.\n *\n * source: https://github.com/briebug/ngrx-complex-forms\n *\n */\n\nexport class RouterStateUrl {\n    /* istanbul ignore next */\n    constructor(\n        readonly url: string,\n        readonly params: Params,\n        readonly queryParams: Params) {\n    }\n}\n\nexport class CustomRouterStateSerializer\n    implements RouterStateSerializer {\n    serialize(routerState: RouterStateSnapshot): RouterStateUrl {\n        const {url} = routerState;\n        const params = this.extractParams(routerState.root);\n        const queryParams = routerState.root.queryParams;\n        return new RouterStateUrl(url, params, queryParams);\n    }\n\n    private extractParams(state: ActivatedRouteSnapshot): Params {\n        let params: Params = {...state.params};\n        for (let child of state.children) {\n            params = {...params, ...this.extractParams(child)}\n        }\n        return params;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectLightCard.html":{"url":"classes/SelectLightCard.html","title":"class - SelectLightCard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectLightCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:59\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.SelectLightCard\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:59\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    EmptyLightCards = '[LCard] Empty',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class EmptyLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.EmptyLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError\n    | EmptyLightCards;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ServicesModule.html":{"url":"modules/ServicesModule.html","title":"module - ServicesModule","body":"\n                   \n\n\n\n\n    Modules\n    ServicesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ServicesModule\n\n\n\ncluster_ServicesModule_providers\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\n\n\nServicesModule\n\nServicesModule\n\nServicesModule -->\n\nAuthenticationService->ServicesModule\n\n\n\n\n\nCardService\n\nCardService\n\nServicesModule -->\n\nCardService->ServicesModule\n\n\n\n\n\nConfigService\n\nConfigService\n\nServicesModule -->\n\nConfigService->ServicesModule\n\n\n\n\n\nFilterService\n\nFilterService\n\nServicesModule -->\n\nFilterService->ServicesModule\n\n\n\n\n\nThirdsService\n\nThirdsService\n\nServicesModule -->\n\nThirdsService->ServicesModule\n\n\n\n\n\nTimeService\n\nTimeService\n\nServicesModule -->\n\nTimeService->ServicesModule\n\n\n\n\n\nTokenInjector\n\nTokenInjector\n\nServicesModule -->\n\nTokenInjector->ServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/services/services.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            CardService\n                        \n                        \n                            ConfigService\n                        \n                        \n                            FilterService\n                        \n                        \n                            ThirdsService\n                        \n                        \n                            TimeService\n                        \n                        \n                            TokenInjector\n                        \n                    \n                \n            \n        \n\n        \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            forRoot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        forRoot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/services.module.ts:42\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     ModuleWithProviders\n\n                            \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {ModuleWithProviders, NgModule, Optional, SkipSelf} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HTTP_INTERCEPTORS} from '@angular/common/http';\nimport {AuthenticationService} from './authentication.service';\nimport {TokenInjector} from './interceptors.service';\n// import {AuthenticationGuard} from './guard.service';\nimport {CardService} from './card.service';\nimport {GuidService} from \"@ofServices/guid.service\";\nimport {TimeService} from \"@ofServices/time.service\";\nimport {ThirdsService} from \"@ofServices/thirds.service\";\nimport {FilterService} from \"@ofServices/filter.service\";\nimport {ConfigService} from \"@ofServices/config.service\";\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    providers: [\n        ConfigService,\n        CardService,\n        AuthenticationService,\n        TimeService,\n        ThirdsService,\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: TokenInjector,\n            multi: true\n        },\n        GuidService,\n        FilterService\n\n    ]\n})\nexport class ServicesModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ServicesModule\n        };\n    }\n\n    constructor(\n        @Optional()\n        @SkipSelf()\n            parentModule: ServicesModule\n    ) {\n        if (parentModule) {\n            throw new Error(\n                'ServicesModule is already loaded. Import it in the AppModule only'\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/thirds.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(details?: Detail[], actions?: OfMap)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/thirds.model.ts:54\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        details\n                                                  \n                                                        \n                                                                    Detail[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions\n                                                  \n                                                        \n                                                                    OfMap\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Card, Detail} from \"@ofModel/card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map as OfMap} from \"@ofModel/map\";\n\nexport class Third{\n    /* istanbul ignore next */\n    constructor(\n        readonly name:string,\n        readonly version:string,\n        readonly i18nLabelKey: string,\n        readonly templates?:string[],\n        readonly csses?:string[],\n        readonly locales?:string[],\n        readonly menuEntries?:ThirdMenuEntry[],\n        readonly processes?:OfMap\n    ){}\n\n    public extractState(card:Card):State{\n        if(card.process && this.processes[card.process]) {\n            const process = this.processes[card.process];\n            if(card.state && process.states[card.state]) {\n               return process.states[card.state];\n            }\n        }\n        return null;\n    }\n}\n\nexport class ThirdMenuEntry{\n    /* istanbul ignore next */\n    constructor(\n        readonly id:string,\n        readonly label: string,\n        readonly url: string\n    ){}\n}\n\nexport class ThirdMenu{\n    /* istanbul ignore next */\n    constructor(\n        readonly id: string,\n        readonly version: string,\n        readonly label: string,\n        readonly entries: ThirdMenuEntry[]){}\n}\n\nexport class Process{\n    /* istanbul ignore next */\n    constructor(\n        readonly states?:OfMap\n    ){}\n}\n\nexport class State{\n    /* istanbul ignore next */\n    constructor(\n        readonly details?:Detail[],\n        readonly actions?:OfMap\n    ){}\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    /* istanbul ignore next */\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    /* istanbul ignore next */\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    /* istanbul ignore next */\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StateModule.html":{"url":"modules/StateModule.html","title":"module - StateModule","body":"\n                   \n\n\n\n\n    Modules\n    StateModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StateModule\n\n\n\ncluster_StateModule_imports\n\n\n\n\n!environment\n\n!environment\n\n\n\nStateModule\n\nStateModule\n\nStateModule -->\n\n!environment->StateModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/store/state.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            !environment\n                        \n                    \n                \n            \n        \n\n        \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            forRoot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        forRoot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/store/state.module.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     ModuleWithProviders\n\n                            \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport {appEffects, appReducer, storeConfig} from './index';\nimport {environment} from '@env/environment';\nimport {StoreDevtoolsModule} from '@ngrx/store-devtools';\nimport {NavigationActionTiming, RouterStateSerializer, StoreRouterConnectingModule} from '@ngrx/router-store';\nimport {CustomRouterStateSerializer} from '@ofStore/states/router.state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StoreModule.forRoot(appReducer, storeConfig),\n    StoreRouterConnectingModule.forRoot({\n        navigationActionTiming: NavigationActionTiming.PostActivation,\n        serializer: CustomRouterStateSerializer\n    }),\n    EffectsModule.forRoot(appEffects),\n    !environment.production ? StoreDevtoolsModule.instrument() : [],\n  ],\n  declarations: [],\n    providers:[{provide:'configRetryDelay',useValue:5000}]\n})\nexport class StateModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: StateModule\n      ,\n      providers: [\n        /**\n         * The `RouterStateSnapshot` provided by the `Router` is a large complex structure.\n         * A custom RouterStateSerializer is used to parse the `RouterStateSnapshot` provided\n         * by `@ngrx/router-store` to include only the desired pieces of the snapshot.\n         */\n        {provide: RouterStateSerializer, useClass: CustomRouterStateSerializer}\n      ]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Third.html":{"url":"classes/Third.html","title":"class - Third","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Third\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/thirds.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                extractState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, version: string, i18nLabelKey: string, templates?: string[], csses?: string[], locales?: string[], menuEntries?: ThirdMenuEntry[], processes?: OfMap)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/thirds.model.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        version\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18nLabelKey\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templates\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        csses\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        locales\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        menuEntries\n                                                  \n                                                        \n                                                                    ThirdMenuEntry[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        processes\n                                                  \n                                                        \n                                                                    OfMap\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            extractState\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        extractState(card: Card)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/model/thirds.model.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        card\n                                                        \n                                                                    Card\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     State\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Card, Detail} from \"@ofModel/card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map as OfMap} from \"@ofModel/map\";\n\nexport class Third{\n    /* istanbul ignore next */\n    constructor(\n        readonly name:string,\n        readonly version:string,\n        readonly i18nLabelKey: string,\n        readonly templates?:string[],\n        readonly csses?:string[],\n        readonly locales?:string[],\n        readonly menuEntries?:ThirdMenuEntry[],\n        readonly processes?:OfMap\n    ){}\n\n    public extractState(card:Card):State{\n        if(card.process && this.processes[card.process]) {\n            const process = this.processes[card.process];\n            if(card.state && process.states[card.state]) {\n               return process.states[card.state];\n            }\n        }\n        return null;\n    }\n}\n\nexport class ThirdMenuEntry{\n    /* istanbul ignore next */\n    constructor(\n        readonly id:string,\n        readonly label: string,\n        readonly url: string\n    ){}\n}\n\nexport class ThirdMenu{\n    /* istanbul ignore next */\n    constructor(\n        readonly id: string,\n        readonly version: string,\n        readonly label: string,\n        readonly entries: ThirdMenuEntry[]){}\n}\n\nexport class Process{\n    /* istanbul ignore next */\n    constructor(\n        readonly states?:OfMap\n    ){}\n}\n\nexport class State{\n    /* istanbul ignore next */\n    constructor(\n        readonly details?:Detail[],\n        readonly actions?:OfMap\n    ){}\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    /* istanbul ignore next */\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    /* istanbul ignore next */\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    /* istanbul ignore next */\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThirdMenu.html":{"url":"classes/ThirdMenu.html","title":"class - ThirdMenu","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThirdMenu\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/thirds.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, version: string, label: string, entries: ThirdMenuEntry[])\n                    \n                \n                        \n                            \n                                Defined in src/app/model/thirds.model.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        version\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    ThirdMenuEntry[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Card, Detail} from \"@ofModel/card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map as OfMap} from \"@ofModel/map\";\n\nexport class Third{\n    /* istanbul ignore next */\n    constructor(\n        readonly name:string,\n        readonly version:string,\n        readonly i18nLabelKey: string,\n        readonly templates?:string[],\n        readonly csses?:string[],\n        readonly locales?:string[],\n        readonly menuEntries?:ThirdMenuEntry[],\n        readonly processes?:OfMap\n    ){}\n\n    public extractState(card:Card):State{\n        if(card.process && this.processes[card.process]) {\n            const process = this.processes[card.process];\n            if(card.state && process.states[card.state]) {\n               return process.states[card.state];\n            }\n        }\n        return null;\n    }\n}\n\nexport class ThirdMenuEntry{\n    /* istanbul ignore next */\n    constructor(\n        readonly id:string,\n        readonly label: string,\n        readonly url: string\n    ){}\n}\n\nexport class ThirdMenu{\n    /* istanbul ignore next */\n    constructor(\n        readonly id: string,\n        readonly version: string,\n        readonly label: string,\n        readonly entries: ThirdMenuEntry[]){}\n}\n\nexport class Process{\n    /* istanbul ignore next */\n    constructor(\n        readonly states?:OfMap\n    ){}\n}\n\nexport class State{\n    /* istanbul ignore next */\n    constructor(\n        readonly details?:Detail[],\n        readonly actions?:OfMap\n    ){}\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    /* istanbul ignore next */\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    /* istanbul ignore next */\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    /* istanbul ignore next */\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThirdMenuEntry.html":{"url":"classes/ThirdMenuEntry.html","title":"class - ThirdMenuEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThirdMenuEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/model/thirds.model.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, label: string, url: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/model/thirds.model.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Card, Detail} from \"@ofModel/card.model\";\nimport {I18n} from \"@ofModel/i18n.model\";\nimport {Map as OfMap} from \"@ofModel/map\";\n\nexport class Third{\n    /* istanbul ignore next */\n    constructor(\n        readonly name:string,\n        readonly version:string,\n        readonly i18nLabelKey: string,\n        readonly templates?:string[],\n        readonly csses?:string[],\n        readonly locales?:string[],\n        readonly menuEntries?:ThirdMenuEntry[],\n        readonly processes?:OfMap\n    ){}\n\n    public extractState(card:Card):State{\n        if(card.process && this.processes[card.process]) {\n            const process = this.processes[card.process];\n            if(card.state && process.states[card.state]) {\n               return process.states[card.state];\n            }\n        }\n        return null;\n    }\n}\n\nexport class ThirdMenuEntry{\n    /* istanbul ignore next */\n    constructor(\n        readonly id:string,\n        readonly label: string,\n        readonly url: string\n    ){}\n}\n\nexport class ThirdMenu{\n    /* istanbul ignore next */\n    constructor(\n        readonly id: string,\n        readonly version: string,\n        readonly label: string,\n        readonly entries: ThirdMenuEntry[]){}\n}\n\nexport class Process{\n    /* istanbul ignore next */\n    constructor(\n        readonly states?:OfMap\n    ){}\n}\n\nexport class State{\n    /* istanbul ignore next */\n    constructor(\n        readonly details?:Detail[],\n        readonly actions?:OfMap\n    ){}\n}\n\nexport enum ActionType {\n    EXTERNAL,\n    JNLP,\n    URI\n\n}\n\nexport class Action {\n    /* istanbul ignore next */\n    constructor(\n        readonly type: ActionType,\n        readonly label: I18n,\n        readonly hidden: boolean = false,\n        readonly buttonStyle: string = '',\n        readonly contentStyle: string = '',\n        readonly inputs: Input[] = [],\n        readonly lockAction: boolean = false,\n        readonly lockCard: boolean = false,\n        readonly updateState: boolean = false,\n        readonly updateStateBeforeAction: boolean = false,\n        readonly called: boolean = false,\n        readonly needsConfirm: boolean = false,\n    ) {\n    }\n}\n\nexport enum InputType {\n    TEXT,\n    LIST,\n    LIST_RADIO,\n    SWITCH_LIST,\n    LONGTEXT,\n    BOOLEAN,\n    STATIC\n}\n\nexport class Input {\n    /* istanbul ignore next */\n    constructor(\n        readonly type: InputType,\n        readonly name: string,\n        readonly label: I18n,\n        readonly value: string,\n        readonly mandatory: boolean,\n        readonly maxLength: number,\n        readonly rows: number,\n        readonly values: ParameterListItem[],\n        readonly selectedValues: string[],\n        readonly unSelectedValues: string[],\n    ) {\n    }\n}\n\nexport class ParameterListItem {\n    /* istanbul ignore next */\n    constructor(\n        readonly label: I18n,\n        readonly value: string,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ThirdpartyModule.html":{"url":"modules/ThirdpartyModule.html","title":"module - ThirdpartyModule","body":"\n                   \n\n\n\n\n    Modules\n    ThirdpartyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ThirdpartyModule\n\n\n\ncluster_ThirdpartyModule_declarations\n\n\n\ncluster_ThirdpartyModule_imports\n\n\n\n\nIframeDisplayComponent\n\nIframeDisplayComponent\n\n\n\nThirdpartyModule\n\nThirdpartyModule\n\nThirdpartyModule -->\n\nIframeDisplayComponent->ThirdpartyModule\n\n\n\n\n\nThirdpartyRoutingModule\n\nThirdpartyRoutingModule\n\nThirdpartyModule -->\n\nThirdpartyRoutingModule->ThirdpartyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/thirdparty/thirdparty.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            IframeDisplayComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ThirdpartyRoutingModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IframeDisplayComponent } from './iframedisplay.component';\nimport {ThirdpartyRoutingModule} from \"./thirdparty-routing.module\";\n\n@NgModule({\n  declarations: [IframeDisplayComponent],\n  imports: [\n    CommonModule,\n    ThirdpartyRoutingModule\n  ]\n})\nexport class ThirdpartyModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ThirdpartyRoutingModule.html":{"url":"modules/ThirdpartyRoutingModule.html","title":"module - ThirdpartyRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    ThirdpartyRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/thirdparty/thirdparty-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nimport {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {IframeDisplayComponent} from \"./iframedisplay.component\";\n\nconst routes: Routes = [\n    {\n        path: ':menu_id/:menu_entry_id',\n        component: IframeDisplayComponent\n    }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ThirdpartyRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThirdsI18nLoader.html":{"url":"classes/ThirdsI18nLoader.html","title":"class - ThirdsI18nLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThirdsI18nLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/thirds.service.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        TranslateLoader\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTranslation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(thirdsService: ThirdsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/thirds.service.ts:193\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        thirdsService\n                                                  \n                                                        \n                                                                    ThirdsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTranslation\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTranslation(lang: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:197\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lang\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable, Injector} from '@angular/core';\nimport {HttpClient, HttpParams, HttpUrlEncodingCodec} from \"@angular/common/http\";\nimport {environment} from \"../../environments/environment\";\nimport {AuthenticationService} from \"@ofServices/authentication.service\";\nimport {EMPTY, from, merge, Observable, of, throwError} from \"rxjs\";\nimport {TranslateLoader, TranslateService} from \"@ngx-translate/core\";\nimport {catchError, filter, map, mergeMap, reduce, switchMap, tap} from \"rxjs/operators\";\nimport * as _ from 'lodash';\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"../store/index\";\nimport {LightCard} from \"../model/light-card.model\";\nimport {Third, ThirdMenu} from \"@ofModel/thirds.model\";\n\n@Injectable()\nexport class ThirdsService {\n    readonly thirdsUrl: string;\n    private loadedI18n: string[] = [];\n    private loadingI18n: string[] = [];\n    private urlCleaner: HttpUrlEncodingCodec;\n    private thirdCache = new Map();\n\n    constructor(private httpClient: HttpClient,\n                private authenticationService: AuthenticationService,\n                private store: Store,\n                private $injector: Injector,\n    ) {\n        this.urlCleaner = new HttpUrlEncodingCodec();\n        this.thirdsUrl = `${environment.urls.thirds}`;\n    }\n\n    queryThird(thirdName:string, version:string):Observable {\n        const key = `${thirdName}.${version}`;\n        let third = this.thirdCache.get(key);\n        if(third){\n            return of(third);\n        }\n        return this.fetchThird(thirdName,version)\n            .pipe(\n                tap(t=>Object.setPrototypeOf(t,Third.prototype)),\n                tap(t=>this.thirdCache.set(key,t))\n            );\n    }\n\n    private fetchThird(publisher: string, version: string): Observable {\n        const params = new HttpParams()\n            .set(\"version\", version);\n        return this.httpClient.get(`${this.thirdsUrl}/${publisher}/`,{\n            params\n        });\n    }\n\n    fetchHbsTemplate(publisher: string, version: string, name: string, locale: string): Observable {\n        const params = new HttpParams()\n                .set(\"locale\", locale)\n                .set(\"version\", version);\n        return this.httpClient.get(`${this.thirdsUrl}/${publisher}/templates/${name}`,{\n            params,\n            responseType: 'text'\n        });\n    }\n\n    computeThirdCssUrl(publisher: string, styleName: string, version: string){\n        //manage url character encoding\n        const resourceUrl = this.urlCleaner.encodeValue(`${this.thirdsUrl}/${publisher}/css/${styleName}`);\n        const versionParam = new HttpParams().set('version',version);\n        return `${resourceUrl}?${versionParam.toString()}`;\n    }\n\n    fetchI18nJson(publisher: string, version: string, locales: string[]): Observable {\n        let previous: Observable;\n        for (let locale of locales) {\n            const params = new HttpParams()\n                .set(\"locale\", locale)\n                .set(\"version\", version);\n            const httpCall = this.httpClient.get(`${this.thirdsUrl}/${publisher}/i18n`, {\n                params\n            }).pipe(\n                map(r => {\n                        const object = {};\n                        object[locale] = {};\n                        object[locale][publisher] = {};\n                        object[locale][publisher][version] = r;\n                        return object;\n                    }\n                ));\n            if (previous) {\n                previous = merge(previous, httpCall);\n            } else {\n                previous = httpCall;\n            }\n        }\n        if (previous == null) {\n            return EMPTY;\n        }\n        const result = previous.pipe(\n            reduce((acc, val) => _.merge(acc,val))\n        );\n\n        return result;\n    }\n\n    computeThirdsMenu(): Observable{\n        return this.httpClient.get(`${this.thirdsUrl}/`).pipe(\n            switchMap(ts=>from(ts)),\n            filter((t:Third)=>!(!t.menuEntries)),\n            map(t=>\n                new ThirdMenu(t.name, t.version, t.i18nLabelKey, t.menuEntries)\n            ),\n            reduce((menus:ThirdMenu[],menu:ThirdMenu)=>{\n                menus.push(menu);\n                return menus;\n            },[])\n        );\n    }\n\n    loadI18nForLightCards(cards:LightCard[]){\n        let observable = from(cards).pipe(\n            map(card=> card.publisher + '###' + card.publisherVersion));\n        return this.subscribeToLoadI18n(observable);\n    }\n\n    loadI18nForMenuEntries(menus:ThirdMenu[]){\n        const observable = from(menus).pipe(\n            map(menu=> menu.id + '###' + menu.version)\n        );\n        return this.subscribeToLoadI18n(observable);\n    }\n\n    private subscribeToLoadI18n(observable) {\n        return observable\n            .pipe(\n                reduce((ids: string[], id: string) => {\n                    ids.push(id);\n                    return ids;\n                }, []),\n                switchMap((ids:string[]) => {\n                    let work = _.uniq(ids);\n                    work = _.difference(work, this.loadingI18n)\n                    return from(_.difference(work, this.loadedI18n))\n                }),\n                mergeMap((id: string) => {\n                    this.loadingI18n.push(id);\n                    const input = id.split('###');\n\n                    let publisher = input[0];\n                    let version = input[1];\n                    return this.fetchI18nJson(publisher, version, this.translate().getLangs())\n                        .pipe(map(trans => {\n                                return {id: id, translation: trans};\n                            }),\n                            catchError(err => {\n                                _.remove(this.loadingI18n, id);\n                                return throwError(err);\n                            })\n                        );\n                }),\n                reduce((acc, val) => _.merge(acc,val)),\n                map(\n                    (result:any) => {\n                        let langs = this.translate().getLangs();\n                        for (let lang of langs) {\n                            let translationElement = result.translation[lang];\n                            if (translationElement) {\n                                this.translate().setTranslation(lang, translationElement, true);\n                                // needed otherwise only one translation apply\n                                this.translate().use(lang);\n                            }\n                        }\n                        _.remove(this.loadingI18n, result.id);\n                        this.loadedI18n.push(result.id);\n                        return true;\n                    }\n                ),\n                catchError((error,caught )=>{\n                    console.error('something went wrong during translation',error);\n                    return caught;\n                })\n            )\n    }\n\n    private translate(): TranslateService {\n        return this.$injector.get(TranslateService);\n    }\n}\n\nexport class ThirdsI18nLoader implements TranslateLoader {\n\n    constructor(thirdsService: ThirdsService) {}\n\n    getTranslation(lang: string): Observable {\n        return of({});\n    }\n\n}\n\nexport function ThirdsI18nLoaderFactory(thirdsService: ThirdsService): TranslateLoader {\n    return new ThirdsI18nLoader(thirdsService);\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThirdsService.html":{"url":"injectables/ThirdsService.html","title":"injectable - ThirdsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ThirdsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/thirds.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                loadedI18n\n                            \n                            \n                                    Private\n                                loadingI18n\n                            \n                            \n                                    Private\n                                thirdCache\n                            \n                            \n                                    Readonly\n                                thirdsUrl\n                            \n                            \n                                    Private\n                                urlCleaner\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                computeThirdCssUrl\n                            \n                            \n                                computeThirdsMenu\n                            \n                            \n                                fetchHbsTemplate\n                            \n                            \n                                fetchI18nJson\n                            \n                            \n                                    Private\n                                fetchThird\n                            \n                            \n                                loadI18nForLightCards\n                            \n                            \n                                loadI18nForMenuEntries\n                            \n                            \n                                queryThird\n                            \n                            \n                                    Private\n                                subscribeToLoadI18n\n                            \n                            \n                                    Private\n                                translate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient, authenticationService: AuthenticationService, store: Store, $injector: Injector)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/thirds.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                    AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        $injector\n                                                  \n                                                        \n                                                                    Injector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            computeThirdCssUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomputeThirdCssUrl(publisher: string, styleName: string, version: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:69\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publisher\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        styleName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        version\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            computeThirdsMenu\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomputeThirdsMenu()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:109\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchHbsTemplate\n                            \n                            \n                        \n                    \n                \n                \n                    \nfetchHbsTemplate(publisher: string, version: string, name: string, locale: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:59\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publisher\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        version\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        locale\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchI18nJson\n                            \n                            \n                        \n                    \n                \n                \n                    \nfetchI18nJson(publisher: string, version: string, locales: string[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:76\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publisher\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        version\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        locales\n                                                        \n                                                                    string[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fetchThird\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        fetchThird(publisher: string, version: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:51\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publisher\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        version\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadI18nForLightCards\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadI18nForLightCards(cards: LightCard[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:123\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cards\n                                                        \n                                                                    LightCard[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadI18nForMenuEntries\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadI18nForMenuEntries(menus: ThirdMenu[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:129\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        menus\n                                                        \n                                                                    ThirdMenu[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            queryThird\n                            \n                            \n                        \n                    \n                \n                \n                    \nqueryThird(thirdName: string, version: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:38\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        thirdName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        version\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscribeToLoadI18n\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        subscribeToLoadI18n(observable)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:136\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        observable\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            translate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        translate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:188\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     TranslateService\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loadedI18n\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loadingI18n\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            thirdCache\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            thirdsUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            urlCleaner\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HttpUrlEncodingCodec\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/thirds.service.ts:26\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable, Injector} from '@angular/core';\nimport {HttpClient, HttpParams, HttpUrlEncodingCodec} from \"@angular/common/http\";\nimport {environment} from \"../../environments/environment\";\nimport {AuthenticationService} from \"@ofServices/authentication.service\";\nimport {EMPTY, from, merge, Observable, of, throwError} from \"rxjs\";\nimport {TranslateLoader, TranslateService} from \"@ngx-translate/core\";\nimport {catchError, filter, map, mergeMap, reduce, switchMap, tap} from \"rxjs/operators\";\nimport * as _ from 'lodash';\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"../store/index\";\nimport {LightCard} from \"../model/light-card.model\";\nimport {Third, ThirdMenu} from \"@ofModel/thirds.model\";\n\n@Injectable()\nexport class ThirdsService {\n    readonly thirdsUrl: string;\n    private loadedI18n: string[] = [];\n    private loadingI18n: string[] = [];\n    private urlCleaner: HttpUrlEncodingCodec;\n    private thirdCache = new Map();\n\n    constructor(private httpClient: HttpClient,\n                private authenticationService: AuthenticationService,\n                private store: Store,\n                private $injector: Injector,\n    ) {\n        this.urlCleaner = new HttpUrlEncodingCodec();\n        this.thirdsUrl = `${environment.urls.thirds}`;\n    }\n\n    queryThird(thirdName:string, version:string):Observable {\n        const key = `${thirdName}.${version}`;\n        let third = this.thirdCache.get(key);\n        if(third){\n            return of(third);\n        }\n        return this.fetchThird(thirdName,version)\n            .pipe(\n                tap(t=>Object.setPrototypeOf(t,Third.prototype)),\n                tap(t=>this.thirdCache.set(key,t))\n            );\n    }\n\n    private fetchThird(publisher: string, version: string): Observable {\n        const params = new HttpParams()\n            .set(\"version\", version);\n        return this.httpClient.get(`${this.thirdsUrl}/${publisher}/`,{\n            params\n        });\n    }\n\n    fetchHbsTemplate(publisher: string, version: string, name: string, locale: string): Observable {\n        const params = new HttpParams()\n                .set(\"locale\", locale)\n                .set(\"version\", version);\n        return this.httpClient.get(`${this.thirdsUrl}/${publisher}/templates/${name}`,{\n            params,\n            responseType: 'text'\n        });\n    }\n\n    computeThirdCssUrl(publisher: string, styleName: string, version: string){\n        //manage url character encoding\n        const resourceUrl = this.urlCleaner.encodeValue(`${this.thirdsUrl}/${publisher}/css/${styleName}`);\n        const versionParam = new HttpParams().set('version',version);\n        return `${resourceUrl}?${versionParam.toString()}`;\n    }\n\n    fetchI18nJson(publisher: string, version: string, locales: string[]): Observable {\n        let previous: Observable;\n        for (let locale of locales) {\n            const params = new HttpParams()\n                .set(\"locale\", locale)\n                .set(\"version\", version);\n            const httpCall = this.httpClient.get(`${this.thirdsUrl}/${publisher}/i18n`, {\n                params\n            }).pipe(\n                map(r => {\n                        const object = {};\n                        object[locale] = {};\n                        object[locale][publisher] = {};\n                        object[locale][publisher][version] = r;\n                        return object;\n                    }\n                ));\n            if (previous) {\n                previous = merge(previous, httpCall);\n            } else {\n                previous = httpCall;\n            }\n        }\n        if (previous == null) {\n            return EMPTY;\n        }\n        const result = previous.pipe(\n            reduce((acc, val) => _.merge(acc,val))\n        );\n\n        return result;\n    }\n\n    computeThirdsMenu(): Observable{\n        return this.httpClient.get(`${this.thirdsUrl}/`).pipe(\n            switchMap(ts=>from(ts)),\n            filter((t:Third)=>!(!t.menuEntries)),\n            map(t=>\n                new ThirdMenu(t.name, t.version, t.i18nLabelKey, t.menuEntries)\n            ),\n            reduce((menus:ThirdMenu[],menu:ThirdMenu)=>{\n                menus.push(menu);\n                return menus;\n            },[])\n        );\n    }\n\n    loadI18nForLightCards(cards:LightCard[]){\n        let observable = from(cards).pipe(\n            map(card=> card.publisher + '###' + card.publisherVersion));\n        return this.subscribeToLoadI18n(observable);\n    }\n\n    loadI18nForMenuEntries(menus:ThirdMenu[]){\n        const observable = from(menus).pipe(\n            map(menu=> menu.id + '###' + menu.version)\n        );\n        return this.subscribeToLoadI18n(observable);\n    }\n\n    private subscribeToLoadI18n(observable) {\n        return observable\n            .pipe(\n                reduce((ids: string[], id: string) => {\n                    ids.push(id);\n                    return ids;\n                }, []),\n                switchMap((ids:string[]) => {\n                    let work = _.uniq(ids);\n                    work = _.difference(work, this.loadingI18n)\n                    return from(_.difference(work, this.loadedI18n))\n                }),\n                mergeMap((id: string) => {\n                    this.loadingI18n.push(id);\n                    const input = id.split('###');\n\n                    let publisher = input[0];\n                    let version = input[1];\n                    return this.fetchI18nJson(publisher, version, this.translate().getLangs())\n                        .pipe(map(trans => {\n                                return {id: id, translation: trans};\n                            }),\n                            catchError(err => {\n                                _.remove(this.loadingI18n, id);\n                                return throwError(err);\n                            })\n                        );\n                }),\n                reduce((acc, val) => _.merge(acc,val)),\n                map(\n                    (result:any) => {\n                        let langs = this.translate().getLangs();\n                        for (let lang of langs) {\n                            let translationElement = result.translation[lang];\n                            if (translationElement) {\n                                this.translate().setTranslation(lang, translationElement, true);\n                                // needed otherwise only one translation apply\n                                this.translate().use(lang);\n                            }\n                        }\n                        _.remove(this.loadingI18n, result.id);\n                        this.loadedI18n.push(result.id);\n                        return true;\n                    }\n                ),\n                catchError((error,caught )=>{\n                    console.error('something went wrong during translation',error);\n                    return caught;\n                })\n            )\n    }\n\n    private translate(): TranslateService {\n        return this.$injector.get(TranslateService);\n    }\n}\n\nexport class ThirdsI18nLoader implements TranslateLoader {\n\n    constructor(thirdsService: ThirdsService) {}\n\n    getTranslation(lang: string): Observable {\n        return of({});\n    }\n\n}\n\nexport function ThirdsI18nLoaderFactory(thirdsService: ThirdsService): TranslateLoader {\n    return new ThirdsI18nLoader(thirdsService);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThirdsServiceMock.html":{"url":"classes/ThirdsServiceMock.html","title":"class - ThirdsServiceMock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThirdsServiceMock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tests/mocks/thirds.service.mock.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                computeThirdsMenu\n                            \n                            \n                                loadI18nForMenuEntries\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            computeThirdsMenu\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomputeThirdsMenu()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/tests/mocks/thirds.service.mock.ts:5\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadI18nForMenuEntries\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadI18nForMenuEntries()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/tests/mocks/thirds.service.mock.ts:14\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Observable, of} from \"rxjs\";\nimport {ThirdMenu, ThirdMenuEntry} from \"@ofModel/thirds.model\";\n\nexport class ThirdsServiceMock {\n    computeThirdsMenu(): Observable{\n        return of([new ThirdMenu('t1', '1', 'tLabel1', [\n            new ThirdMenuEntry('id1', 'label1', 'link1'),\n            new ThirdMenuEntry('id2', 'label2', 'link2'),\n        ]),\n            new ThirdMenu('t2', '1', 'tLabel2', [\n                new ThirdMenuEntry('id3', 'label3', 'link3'),\n            ])])\n    }\n    loadI18nForMenuEntries(){return of(true)}\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimeFilterComponent.html":{"url":"components/TimeFilterComponent.html","title":"component - TimeFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TimeFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-time-filter\n            \n\n\n\n\n            \n                templateUrl\n                ./time-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _filter$\n                            \n                            \n                                    Private\n                                ngUnsubscribe$\n                            \n                            \n                                timeFilterForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createFormGroup\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    filter$\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, timeService: TimeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timeService\n                                                  \n                                                        \n                                                                    TimeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            createFormGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        createFormGroup()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts:90\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts:40\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts:45\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _filter$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ngUnsubscribe$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timeFilterForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts:33\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        filter$\n                    \n                \n\n                \n                    \n                        getfilter$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts:29\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport {buildFilterSelector} from \"@ofSelectors/feed.selectors\";\nimport {FilterType} from \"@ofServices/filter.service\";\nimport {Filter} from \"@ofModel/feed-filter.model\";\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"@ofStore/index\";\nimport {Observable, Subject, timer} from \"rxjs\";\nimport {debounce, distinctUntilChanged, first, takeUntil} from \"rxjs/operators\";\nimport * as _ from \"lodash\";\nimport {ApplyFilter} from \"@ofActions/feed.actions\";\nimport {TimeService} from \"@ofServices/time.service\";\n\n@Component({\n    selector: 'of-time-filter',\n    templateUrl: './time-filter.component.html'\n})\nexport class TimeFilterComponent implements OnInit, OnDestroy {\n    private ngUnsubscribe$ = new Subject();\n    private _filter$: Observable;\n\n    get filter$(): Observable {\n        return this._filter$;\n    }\n\n    timeFilterForm: FormGroup;\n\n    constructor(private store: Store,\n                private timeService: TimeService) {\n        this.timeFilterForm = this.createFormGroup();\n    }\n\n    ngOnDestroy() {\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n    }\n\n    ngOnInit() {\n        this._filter$ = this.store.select(buildFilterSelector(FilterType.TIME_FILTER));\n        this._filter$.pipe(takeUntil(this.ngUnsubscribe$)).subscribe((next: Filter) => {\n            if (next) {\n                if (this.timeService.parseString(this.timeFilterForm.get('start').value).valueOf() != next.status.start) {\n                    if(!!next.status.start)\n                        this.timeFilterForm.get('start').setValue(this.timeService.asInputString(next.status.start));\n                    else\n                        this.timeFilterForm.get('start').setValue(null);\n                }\n                if (this.timeService.parseString(this.timeFilterForm.get('end').value).valueOf() != next.status.end) {\n                    if(!!next.status.end)\n                        this.timeFilterForm.get('end').setValue(this.timeService.asInputString(next.status.end));\n                    else\n                        this.timeFilterForm.get('end').setValue(null);\n                }\n            } else {\n                if (!!this.timeFilterForm.get('start').value)\n                    this.timeFilterForm.get('start').setValue(null);\n                if (!!this.timeFilterForm.get('end').value)\n                    this.timeFilterForm.get('end').setValue(null);\n            }\n        });\n        this._filter$.pipe(first(), takeUntil(this.ngUnsubscribe$)).subscribe(() => {\n            this.timeFilterForm\n                .valueChanges\n                .pipe(\n                    takeUntil(this.ngUnsubscribe$),\n                    distinctUntilChanged((formA, formB) => {\n                        return _.isEqual(formA, formB);\n                    }),\n                    debounce(() => timer(500)))\n                .subscribe(form => this.store.dispatch(\n                    new ApplyFilter({\n                        name: FilterType.TIME_FILTER,\n                        active: !!form.start || !!form.end,\n                        status: {\n                            start: form.start ? this.timeService.parseString(form.start).valueOf() : null,\n                            end: form.end ? this.timeService.parseString(form.end).valueOf() : null\n                        }\n                    }))\n                );\n        });\n    }\n\n    private createFormGroup() {\n        return new FormGroup({\n            start: new FormControl(),\n            end: new FormControl()\n        }, {updateOn: 'change'});\n    }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n  \n    \n      \n        feed.filters.time.start.label\n        \n      \n      \n        feed.filters.time.end.label\n        \n      \n    \n  \n  feed.filters.time.title\n  \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    feed.filters.time.start.label                            feed.filters.time.end.label                      feed.filters.time.title        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimeFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimeLineComponent.html":{"url":"components/TimeLineComponent.html","title":"component - TimeLineComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TimeLineComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/components/time-line/time-line.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-time-line\n            \n\n\n\n\n            \n                templateUrl\n                ./time-line.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/components/time-line/time-line.component.ts:14\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/time-line/time-line.component.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'of-time-line',\n  templateUrl: './time-line.component.html',\n})\nexport class TimeLineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n  Time Line goes here\n  \n  \n  \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Time Line goes here        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimeLineComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeService.html":{"url":"injectables/TimeService.html","title":"injectable - TimeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/time.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                asInputString\n                            \n                            \n                                    Public\n                                currentTime\n                            \n                            \n                                    Public\n                                parseString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/time.service.ts:12\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            asInputString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        asInputString(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/time.service.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            currentTime\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        currentTime()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/time.service.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     moment.Moment\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            parseString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        parseString(value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/time.service.ts:21\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     moment.Moment\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport * as moment from 'moment-timezone';\n\n@Injectable()\nexport class TimeService {\n\n    constructor() {\n    }\n\n    public currentTime(): moment.Moment {\n        return moment();\n    }\n\n    public parseString(value: string): moment.Moment {\n        return moment(value,'YYYY-MM-DDTHH:mm');\n    }\n\n    public asInputString(value: number): string {\n        return moment(value).format('YYYY-MM-DDTHH:mm:ss.SSS');\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/TokenInjector.html":{"url":"interceptors/TokenInjector.html","title":"interceptor - TokenInjector","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  TokenInjector\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/interceptors.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addAuthHeadersIfNecessary\n                            \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/interceptors.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                    AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            addAuthHeadersIfNecessary\n                            \n                            \n                        \n                    \n                \n                \n                    \naddAuthHeadersIfNecessary(request: HttpRequest)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/interceptors.service.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                        \n                                                                    HttpRequest\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     HttpRequest\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intercept\n                            \n                            \n                        \n                    \n                \n                \n                    \nintercept(request: HttpRequest, next: HttpHandler)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/services/interceptors.service.ts:20\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                        \n                                                                    HttpRequest\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        next\n                                                        \n                                                                    HttpHandler\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {AuthenticationService} from './authentication.service';\n\n@Injectable()\nexport class TokenInjector implements HttpInterceptor {\n    /* istanbul ignore next */\n    constructor(private authenticationService: AuthenticationService) {\n    }\n\n    /* istanbul ignore next */\n    intercept(request: HttpRequest, next: HttpHandler): Observable> {\n        return next.handle(this.addAuthHeadersIfNecessary(request));\n    }\n\n\n    addAuthHeadersIfNecessary(request: HttpRequest): HttpRequest {\n        const url = request.url;\n\n        const notCheckTokenRequest = !(url.endsWith('/auth/check_token') || url.endsWith('/auth/token') || url.endsWith('/auth/code'));\n        if (notCheckTokenRequest) {\n            const update = {setHeaders: AuthenticationService.getSecurityHeader()};\n            request = request.clone(update);\n        }\n        return request;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TryToLogIn.html":{"url":"classes/TryToLogIn.html","title":"class - TryToLogIn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TryToLogIn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used to push login/password pair to the authentication service\nEmitted by {LoginComponent} in the onSubmit @method which is called\nwhen the user click on the Login button of the login page form.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/authentication.actions.ts:78\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:81\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.TryToLogIn\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:78\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\nimport {Message} from \"@ofModel/message.model\";\n\nexport enum AuthenticationActionTypes {\n    InitAuthStatus = '[Authentication] Init Authentication Status',\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\n/**\n * Authentication success payload\n */\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class InitAuthStatus implements Action {\n    readonly type = AuthenticationActionTypes.InitAuthStatus;\n    /* istanbul ignore next */\n    constructor(public payload:{code: string}){}\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: PayloadForSuccessfulAuthentication) {}\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Message }) {}\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    /* istanbul ignore next */\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n    InitAuthStatus\n    | AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TryToLogOut.html":{"url":"classes/TryToLogOut.html","title":"class - TryToLogOut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TryToLogOut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/authentication.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used when the user logout\nEmitted by {NavbarComponent} win the logOut @method which is called\nwhen the user click on the logOut button of the navbar\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : AuthenticationActionTypes.TryToLogOut\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/authentication.actions.ts:92\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {Guid} from 'guid-typescript';\nimport {Message} from \"@ofModel/message.model\";\n\nexport enum AuthenticationActionTypes {\n    InitAuthStatus = '[Authentication] Init Authentication Status',\n    CheckAuthenticationStatus = '[Authentication] Check Authentication Status',\n    AcceptLogIn = '[Authentication] Accept the user log in attempt',\n    RejectLogIn = '[Authentication] Reject the user log in attempt',\n    TryToLogIn = '[Authentication] Try to log the user in',\n    TryToLogOut = '[Authentication] Try to log the user out',\n    AcceptLogOut = '[Authentication] Accept the user log out attempt',\n    AcceptLogOutSuccess = '[Authentication] Success Accept the user log out attempt',\n}\n\n/**\n * Authentication success payload\n */\nexport class PayloadForSuccessfulAuthentication {\n    constructor(public identifier: string,\n                public clientId: Guid,\n                public token: string,\n                public expirationDate: Date) {\n    }\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class InitAuthStatus implements Action {\n    readonly type = AuthenticationActionTypes.InitAuthStatus;\n    /* istanbul ignore next */\n    constructor(public payload:{code: string}){}\n}\n\n/**\n * It aims to validate the current authentication if exists.\n *\n */\nexport class CheckAuthenticationStatus implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.CheckAuthenticationStatus;\n}\n\n/**\n * Action used to update the state with the authentication information\n *\n * Emitted by {AuthenticationEffects} in the following {Observable} @members:\n *  * TryToLogIn\n *  * CheckAuthentication via handleLogInAttempt @method\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * containing the authentication information by filtering on the {AuthenticationActionTypes.AcceptLogIn} type.\n *\n */\nexport class AcceptLogIn implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: PayloadForSuccessfulAuthentication) {}\n}\n\n/**\n * Action used to push login/password pair to the authentication service\n *\n * Emitted by {LoginComponent} in the onSubmit @method which is called\n * when the user click on the `Login` button of the login page form.\n */\nexport class TryToLogIn implements Action {\n    readonly type= AuthenticationActionTypes.TryToLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: {username: string, password: string}){}\n}\n\n/**\n * Action used when the user logout\n *\n * Emitted by {NavbarComponent} win the logOut @method which is called\n * when the user click on the `logOut` button of the `navbar`\n */\nexport class TryToLogOut implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.TryToLogOut;\n}\n\n/**\n * Action used to notify the store that the authentication is not possible.\n *\n * Emmited by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogin`;\n *  *  `CheckAuthentication`\n *  and in the `handleRejectedLogin` @method called by the `ChecAuthentication` {Observable}\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information and containing a message about login rejection\n * by filtering on the {AuthenticationActionTypes.RejectLogIn} type.\n *\n */\nexport class RejectLogIn implements Action {\n    readonly type = AuthenticationActionTypes.RejectLogIn;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Message }) {}\n}\n\n/**\n * Action used to removes authentication information of the system and thus logOut the user.\n *\n * Emitted by {AuthenticationEffect} in the following {Observable} @members:\n *  * `TryToLogOut`\n *  * `RejectLogInAttempt`\n *\n *  Consume by {AuthenticationEffect} in the `AcceptLogOut` {Observable} @member\n *\n */\nexport class AcceptLogOut implements Action {\n    readonly type = AuthenticationActionTypes.AcceptLogOut;\n\n    /* istanbul ignore next */\n    constructor(){}\n}\n\n/**\n * Action used to notify the store to remove authentication information\n *\n * Emitted by {AuthenticationEffect} in `AcceptLogOut` {Observable} @member.\n *\n * Used in the {function} reducer of the {authentication.reducer.ts} file to create a new state\n * without any authentication information by filtering on the {AuthenticationActionTypes.AcceptLogOut} type.\n */\nexport class AcceptLogOutSuccess implements Action {\n    /* istanbul ignore next */\n    readonly type = AuthenticationActionTypes.AcceptLogOutSuccess;\n}\n\nexport type AuthenticationActions =\n    InitAuthStatus\n    | AcceptLogIn\n    | RejectLogIn\n    | TryToLogIn\n    | TryToLogOut\n    | CheckAuthenticationStatus\n    | AcceptLogOut\n    | AcceptLogOutSuccess;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TypeFilterComponent.html":{"url":"components/TypeFilterComponent.html","title":"component - TypeFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TypeFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                of-type-filter\n            \n\n            \n                styleUrls\n                ./type-filter.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./type-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _filter$\n                            \n                            \n                                    Private\n                                ngUnsubscribe$\n                            \n                            \n                                typeFilterForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createFormGroup\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    filter$\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            createFormGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        createFormGroup()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts:53\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts:59\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _filter$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ngUnsubscribe$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            typeFilterForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts:28\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        filter$\n                    \n                \n\n                \n                    \n                        getfilter$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts:32\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Observable, Subject, timer} from \"rxjs\";\nimport {Filter} from \"@ofModel/feed-filter.model\";\nimport {Store} from \"@ngrx/store\";\nimport {AppState} from \"@ofStore/index\";\nimport {buildFilterSelector} from \"@ofSelectors/feed.selectors\";\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport {debounce, distinctUntilChanged, first, takeUntil} from \"rxjs/operators\";\nimport {ApplyFilter} from \"@ofActions/feed.actions\";\nimport * as _ from 'lodash';\nimport {FilterType} from \"@ofServices/filter.service\";\n\n\n@Component({\n    selector: 'of-type-filter',\n    templateUrl: './type-filter.component.html',\n    styleUrls: ['./type-filter.component.scss']\n})\nexport class TypeFilterComponent implements OnInit, OnDestroy {\n    private ngUnsubscribe$ = new Subject();\n    typeFilterForm: FormGroup;\n\n    private _filter$: Observable;\n\n    get filter$(): Observable{\n        return this._filter$;\n    }\n\n    // set filter$(filter: Observable) {\n    //     this._filter$ = filter;\n    // }\n\n    constructor(private store: Store) {\n        this.typeFilterForm = this.createFormGroup();\n    }\n\n    private createFormGroup() {\n        return new FormGroup({\n            alarm: new FormControl(),\n            action: new FormControl(),\n            question: new FormControl(),\n            notification: new FormControl()\n        },{updateOn: 'change'});\n    }\n\n    ngOnDestroy() {\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n    }\n\n\n    ngOnInit() {\n        this._filter$ = this.store.select(buildFilterSelector(FilterType.TYPE_FILTER));\n        this._filter$.pipe(takeUntil(this.ngUnsubscribe$)).subscribe((next: Filter) => {\n            if (next) {\n                this.typeFilterForm.get('alarm').setValue(!next.active || next.status.alarm);\n                this.typeFilterForm.get('action').setValue(!next.active || next.status.action);\n                this.typeFilterForm.get('question').setValue(!next.active || next.status.question);\n                this.typeFilterForm.get('notification').setValue(!next.active || next.status.notification);\n            } else {\n                this.typeFilterForm.get('alarm').setValue(true);\n                this.typeFilterForm.get('action').setValue(true);\n                this.typeFilterForm.get('question').setValue(true);\n                this.typeFilterForm.get('notification').setValue(true);\n            }\n        });\n        this._filter$.pipe(first(),takeUntil(this.ngUnsubscribe$)).subscribe(()=>{\n            this.typeFilterForm\n                .valueChanges\n                .pipe(\n                    takeUntil(this.ngUnsubscribe$),\n                    distinctUntilChanged((formA, formB)=>{\n                        return _.isEqual(formA,formB);\n                    }),\n                    debounce(() => timer(500)))\n                .subscribe(form => this.store.dispatch(\n                    new ApplyFilter({\n                        name: FilterType.TYPE_FILTER,\n                        active: !(form.alarm && form.action && form.question && form.notification),\n                        status: form\n                    }))\n                );\n        });\n    }\n\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n    \n        \n            \n                \n                feed.filters.type.alarm.label\n            \n            \n                \n                feed.filters.type.action.label\n            \n            \n                \n                feed.filters.type.question.label\n            \n            \n                \n                feed.filters.type.notification.label\n            \n        \n    \n    feed.filters.type.title\n    \n        \n            \n                \n                \n            \n            \n                \n                \n            \n        \n    \n\n\n    \n\n    \n                \n                    ./type-filter.component.scss\n                \n                /* Copyright (c) 2018, RTE (http://www.rte-france.com)\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n@import \"~assets/styles/_variables.scss\";\n\n$cell-width: 10;\n\n.type-selections {\n  display: table;\n  width: $cell-width * 2px;\n  height: $cell-width * 2px;\n}\n\n.type-row {\n  display: table-row;\n}\n\n.type-cell {\n  display: table-cell;\n}\n\n/deep/ .popover {\n  background-color: $dark;\n  .popover-header {\n    color: $light;\n    background-color: $dark;\n  }\n  .popover-body {\n    color: $light;\n  }\n  .arrow::after{\n    border-right-color: $dark;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                        feed.filters.type.alarm.label                                                        feed.filters.type.action.label                                                        feed.filters.type.question.label                                                        feed.filters.type.notification.label                            feed.filters.type.title                                                                                                                                        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'of-root'},{'name': 'ArchivesComponent', 'selector': 'of-archives'},{'name': 'CardComponent', 'selector': 'of-card'},{'name': 'CardDetailsComponent', 'selector': 'of-card-details'},{'name': 'CardListComponent', 'selector': 'of-card-list'},{'name': 'DetailComponent', 'selector': 'of-detail'},{'name': 'DetailsComponent', 'selector': 'of-details'},{'name': 'FeedComponent', 'selector': 'of-cards'},{'name': 'FiltersComponent', 'selector': 'of-filters'},{'name': 'IconComponent', 'selector': 'of-icon'},{'name': 'IframeDisplayComponent', 'selector': 'of-iframedisplay'},{'name': 'LoginComponent', 'selector': 'of-login'},{'name': 'NavbarComponent', 'selector': 'of-navbar'},{'name': 'NoSelectionComponent', 'selector': 'of-no-selection'},{'name': 'TimeFilterComponent', 'selector': 'of-time-filter'},{'name': 'TimeLineComponent', 'selector': 'of-time-line'},{'name': 'TypeFilterComponent', 'selector': 'of-type-filter'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TypeFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSelectedMenu.html":{"url":"classes/UpdateSelectedMenu.html","title":"class - UpdateSelectedMenu","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSelectedMenu\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/menu.actions.ts\n        \n\n            \n                Description\n            \n            \n                Action used to update the state with the selected menu\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/menu.actions.ts:56\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : MenuActionTypes.UpdateSelectedMenu\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/menu.actions.ts:56\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {ThirdMenu} from \"@ofModel/thirds.model\";\n\nexport enum MenuActionTypes {\n    LoadMenu = '[Menu] Load Menu',\n    LoadMenuSuccess = '[Menu] Load Menu Success',\n    LoadMenuFailure = '[Menu] Load Menu Fail',\n    HandleUnexpectedError = '[Menu] Handle unexpected error',\n    UpdateSelectedMenu = '[Menu] Update Selected Menu',\n}\n// needed by NGRX entities\nexport class LoadMenu implements Action {\n    readonly type = MenuActionTypes.LoadMenu;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\nexport class LoadMenuFailure implements Action {\n    readonly type = MenuActionTypes.LoadMenuFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class LoadMenuSuccess implements Action {\n    readonly type = MenuActionTypes.LoadMenuSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { menu: ThirdMenu[] }) {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    readonly type = MenuActionTypes.HandleUnexpectedError;\n\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\n/**\n * Action used to update the state with the selected menu\n */\n//TODO Describe usage (cf authentication example)\nexport class UpdateSelectedMenu implements Action {\n    readonly type = MenuActionTypes.UpdateSelectedMenu;\n\n    /* istanbul ignore next */\n    constructor(public payload: {menu_id: string, menu_entry_id: string}) {}\n}\n\nexport type MenuActions =\n    LoadMenu\n    | LoadMenuSuccess\n    | LoadMenuFailure\n    | HandleUnexpectedError\n    | UpdateSelectedMenu;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatedSubscription.html":{"url":"classes/UpdatedSubscription.html","title":"class - UpdatedSubscription","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatedSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/actions/light-card.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/store/actions/light-card.actions.ts:74\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardActionTypes.UpdatedSubscription\n                        \n                    \n                        \n                            \n                                    Defined in src/app/store/actions/light-card.actions.ts:74\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Action} from '@ngrx/store';\nimport {LightCard} from '@ofModel/light-card.model';\n\nexport enum LightCardActionTypes {\n    LoadLightCards = '[LCard] Load',\n    EmptyLightCards = '[LCard] Empty',\n    LoadLightCardsSuccess = '[LCard] Load Success',\n    LoadLightCardsExtendedData = '[LCard] Load Extended Data',\n    LoadLightCardsFailure = '[LCard] Load Fail',\n    SelectLightCard = '[LCard] Select One',\n    AddLightCardFailure = '[LCard] Add Light Card Fail',\n    UpdatedSubscription = '[LCard] UpdateSubscription',\n    HandleUnexpectedError = '[LCard] Handle unexpected error related to authentication issue',\n}\n// needed by NGRX entities\nexport class LoadLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.LoadLightCards;\n}\n\nexport class EmptyLightCards implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.EmptyLightCards;\n}\n\nexport class LoadLightCardsSuccess implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsSuccess;\n\n    /* istanbul ignore next */\n    constructor(public payload: { lightCards: LightCard[] }) {\n    }\n}\n\nexport class LoadLightCardsExtendedData implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsExtendedData;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class LoadLightCardsFailure implements Action {\n    readonly type = LightCardActionTypes.LoadLightCardsFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class SelectLightCard implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.SelectLightCard;\n    /* istanbul ignore next */\n    constructor(public payload: {selectedCardId:string}){}\n\n}\n\nexport class AddLightCardFailure implements Action {\n    readonly type = LightCardActionTypes.AddLightCardFailure;\n\n    /* istanbul ignore next */\n    constructor(public payload: { error: Error }) {\n    }\n}\n\nexport class UpdatedSubscription implements Action {\n    readonly type = LightCardActionTypes.UpdatedSubscription;\n\n    /* istanbul ignore next */\n    constructor() {\n    }\n}\n\nexport class HandleUnexpectedError implements Action {\n    /* istanbul ignore next */\n    readonly type = LightCardActionTypes.HandleUnexpectedError;\n    /* istanbul ignore next */\n    constructor(public payload: {error: Error}) {\n\n    }\n}\n\nexport type LightCardActions =\n    LoadLightCards\n    | LoadLightCardsSuccess\n    | LoadLightCardsFailure\n    | SelectLightCard\n    | AddLightCardFailure\n    | UpdatedSubscription\n    | HandleUnexpectedError\n    | EmptyLightCards;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/app/components/icon/icon.component.ts\n            \n            component\n            IconComponent\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/app/components/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/components/navbar/navbar.component.ts\n            \n            component\n            NavbarComponent\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/model/card.model.ts\n            \n            class\n            Card\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/card.model.ts\n            \n            class\n            Detail\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/feed-filter.model.ts\n            \n            class\n            Filter\n            \n                50 %\n                (4/8)\n            \n        \n        \n            \n                \n                src/app/model/i18n.model.ts\n            \n            class\n            I18n\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/map.ts\n            \n            class\n            Map\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/model/message.model.ts\n            \n            class\n            Message\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/thirds.model.ts\n            \n            class\n            Action\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/thirds.model.ts\n            \n            class\n            Input\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/thirds.model.ts\n            \n            class\n            ParameterListItem\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/thirds.model.ts\n            \n            class\n            Process\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/thirds.model.ts\n            \n            class\n            State\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/thirds.model.ts\n            \n            class\n            Third\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/model/thirds.model.ts\n            \n            class\n            ThirdMenu\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/model/thirds.model.ts\n            \n            class\n            ThirdMenuEntry\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/modules/archives/archives.component.ts\n            \n            component\n            ArchivesComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/modules/cards/components/card-details/card-details.component.ts\n            \n            component\n            CardDetailsComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/modules/cards/components/card/card.component.ts\n            \n            component\n            CardComponent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/modules/cards/components/detail/detail.component.ts\n            \n            component\n            DetailComponent\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/app/modules/cards/components/details/details.component.ts\n            \n            component\n            DetailsComponent\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/modules/cards/services/handlebars.service.ts\n            \n            injectable\n            HandlebarsService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/app/modules/cards/services/handlebars.service.ts\n            \n            function\n            sortOnKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/modules/feed/components/card-list/card-list.component.ts\n            \n            component\n            CardListComponent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/modules/feed/components/card-list/filters/filters.component.ts\n            \n            component\n            FiltersComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/modules/feed/components/card-list/filters/time-filter/time-filter.component.ts\n            \n            component\n            TimeFilterComponent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/modules/feed/components/card-list/filters/type-filter/type-filter.component.ts\n            \n            component\n            TypeFilterComponent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/modules/feed/components/no-selection/no-selection.component.ts\n            \n            component\n            NoSelectionComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/modules/feed/components/time-line/time-line.component.ts\n            \n            component\n            TimeLineComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/modules/feed/feed.component.ts\n            \n            component\n            FeedComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/modules/thirdparty/iframedisplay.component.ts\n            \n            component\n            IframeDisplayComponent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/services/authentication.service.ts\n            \n            class\n            AuthObject\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/services/authentication.service.ts\n            \n            class\n            CheckTokenResponse\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/services/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                44 %\n                (11/25)\n            \n        \n        \n            \n                \n                src/app/services/authentication.service.ts\n            \n            function\n            isInTheFuture\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/services/authentication.service.ts\n            \n            variable\n            ONE_SECOND\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/services/card.service.ts\n            \n            injectable\n            CardService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/services/config.service.ts\n            \n            injectable\n            ConfigService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/services/filter.service.ts\n            \n            injectable\n            FilterService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/services/guid.service.ts\n            \n            class\n            GuidService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/services/interceptors.service.ts\n            \n            interceptor\n            TokenInjector\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/services/thirds.service.ts\n            \n            class\n            ThirdsI18nLoader\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/services/thirds.service.ts\n            \n            injectable\n            ThirdsService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/app/services/thirds.service.ts\n            \n            function\n            ThirdsI18nLoaderFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/services/time.service.ts\n            \n            injectable\n            TimeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            AcceptLogIn\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            AcceptLogOut\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            AcceptLogOutSuccess\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            CheckAuthenticationStatus\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            InitAuthStatus\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            PayloadForSuccessfulAuthentication\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            RejectLogIn\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            TryToLogIn\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/authentication.actions.ts\n            \n            class\n            TryToLogOut\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/store/actions/card.actions.ts\n            \n            class\n            ClearCard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/store/actions/card.actions.ts\n            \n            class\n            HandleUnexpectedError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/card.actions.ts\n            \n            class\n            LoadCard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/card.actions.ts\n            \n            class\n            LoadCardFailure\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/card.actions.ts\n            \n            class\n            LoadCardSuccess\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/config.actions.ts\n            \n            class\n            HandleUnexpectedError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/config.actions.ts\n            \n            class\n            LoadConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/store/actions/config.actions.ts\n            \n            class\n            LoadConfigFailure\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/config.actions.ts\n            \n            class\n            LoadConfigSuccess\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/feed.actions.ts\n            \n            class\n            ApplyFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/feed.actions.ts\n            \n            class\n            InitFilters\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            AddLightCardFailure\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            EmptyLightCards\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            HandleUnexpectedError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            LoadLightCards\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            LoadLightCardsExtendedData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            LoadLightCardsFailure\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            LoadLightCardsSuccess\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            SelectLightCard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/light-card.actions.ts\n            \n            class\n            UpdatedSubscription\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/actions/menu.actions.ts\n            \n            class\n            HandleUnexpectedError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/menu.actions.ts\n            \n            class\n            LoadMenu\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/actions/menu.actions.ts\n            \n            class\n            LoadMenuFailure\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/menu.actions.ts\n            \n            class\n            LoadMenuSuccess\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/actions/menu.actions.ts\n            \n            class\n            UpdateSelectedMenu\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/store/effects/authentication.effects.ts\n            \n            injectable\n            AuthenticationEffects\n            \n                63 %\n                (7/11)\n            \n        \n        \n            \n                \n                src/app/store/effects/card-operation.effects.ts\n            \n            injectable\n            CardOperationEffects\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/effects/card.effects.ts\n            \n            injectable\n            CardEffects\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/effects/config.effects.ts\n            \n            injectable\n            ConfigEffects\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/app/store/effects/custom-router.effects.ts\n            \n            injectable\n            CustomRouterEffects\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/effects/feed-filters.effects.ts\n            \n            injectable\n            FeedFiltersEffects\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/effects/light-card.effects.ts\n            \n            injectable\n            LightCardEffects\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/effects/menu.effects.ts\n            \n            injectable\n            MenuEffects\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/index.ts\n            \n            interface\n            AppState\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/store/index.ts\n            \n            variable\n            appEffects\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/index.ts\n            \n            variable\n            appMetaReducers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/index.ts\n            \n            variable\n            appReducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/index.ts\n            \n            variable\n            storeConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            variable\n            getExpirationDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            variable\n            getExpirationTime\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            variable\n            getIdentifier\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            variable\n            getToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/authentication.reducer.ts\n            \n            variable\n            UTC_beginning_time\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/card.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/card.reducer.ts\n            \n            variable\n            getSelectedId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/config.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/light-card.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/menu.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/reducers/menu.reducer.ts\n            \n            variable\n            getSelectedId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/authentication.selectors.ts\n            \n            variable\n            selectAuthenticationState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/authentication.selectors.ts\n            \n            variable\n            selectCode\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/authentication.selectors.ts\n            \n            variable\n            selectExpirationTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/authentication.selectors.ts\n            \n            variable\n            selectMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/card.selectors.ts\n            \n            variable\n            selectCardState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/card.selectors.ts\n            \n            variable\n            selectCardStateSelected\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/card.selectors.ts\n            \n            variable\n            selectCardStateSelectedDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/card.selectors.ts\n            \n            variable\n            selectCardStateSelectedId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/config.selectors.ts\n            \n            function\n            buildConfigSelector\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/config.selectors.ts\n            \n            variable\n            selectConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/config.selectors.ts\n            \n            variable\n            selectConfigData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/config.selectors.ts\n            \n            variable\n            selectConfigLoaded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/config.selectors.ts\n            \n            variable\n            selectConfigRetry\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/config.selectors.ts\n            \n            variable\n            selectMaxedRetries\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            function\n            buildFilterSelector\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectActiveFiltersArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectFilter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectFilteredFeed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectLastCards\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectLightCardSelection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/feed.selectors.ts\n            \n            variable\n            selectLightCardsState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/menu.selectors.ts\n            \n            variable\n            selectMenuState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/menu.selectors.ts\n            \n            variable\n            selectMenuStateMenu\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/menu.selectors.ts\n            \n            variable\n            selectMenuStateSelectedMenuEntryId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/menu.selectors.ts\n            \n            variable\n            selectMenuStateSelectedMenuId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/router.selectors.ts\n            \n            variable\n            selectCurrentUrl\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/selectors/router.selectors.ts\n            \n            variable\n            selectRouterState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/authentication.state.ts\n            \n            interface\n            AuthState\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/store/states/authentication.state.ts\n            \n            variable\n            authInitialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/card.state.ts\n            \n            interface\n            CardState\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/store/states/card.state.ts\n            \n            variable\n            cardInitialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/config.state.ts\n            \n            interface\n            ConfigState\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/store/states/config.state.ts\n            \n            variable\n            CONFIG_LOAD_MAX_RETRIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/config.state.ts\n            \n            variable\n            configInitialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/feed.state.ts\n            \n            interface\n            CardFeedState\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/store/states/feed.state.ts\n            \n            function\n            sortByStartDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/feed.state.ts\n            \n            variable\n            feedInitialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/feed.state.ts\n            \n            variable\n            LightCardAdapter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/menu.state.ts\n            \n            interface\n            MenuState\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/store/states/menu.state.ts\n            \n            variable\n            menuInitialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/store/states/router.state.ts\n            \n            class\n            CustomRouterStateSerializer\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/store/states/router.state.ts\n            \n            class\n            RouterStateUrl\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/store/states/router.state.ts\n            \n            variable\n            initialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/translate.config.ts\n            \n            function\n            HttpLoaderFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/translate.config.ts\n            \n            variable\n            i18nPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/translate.config.ts\n            \n            variable\n            prodI18nPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/translate.config.ts\n            \n            variable\n            translateConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.vps.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            context\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            require\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            appendFixedLengthAlphanumericValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            forcePositiveAndOneMinimum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            generateRandomArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            generateRandomPositiveIntegerWithinRangeWithOneAsMinimum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getFixedLengthAlphanumericValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getOneRandomAddCardOperation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getOneRandomCard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getOneRandomCardDetail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getOneRandomCardWithRandomDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getOneRandomLigthCard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getOneRandomThird\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getPositiveRandomNumberWithinRange\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getRandomActions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getRandomAlphanumericValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getRandomCardDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getRandomI18nData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getRandomIndex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getRandomMenu\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getRandomThird\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            getSeveralRandomLightCards\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            handleMaxAgainstMin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/helpers.ts\n            \n            function\n            pickARandomItemOfAnEnum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tests/mocks/thirds.service.mock.ts\n            \n            class\n            ThirdsServiceMock\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^7.2.2\n        \n            @angular/common : ^7.2.2\n        \n            @angular/compiler : ^7.2.2\n        \n            @angular/core : ^7.2.2\n        \n            @angular/forms : ^7.2.2\n        \n            @angular/http : ^7.2.2\n        \n            @angular/platform-browser : ^7.2.2\n        \n            @angular/platform-browser-dynamic : ^7.2.2\n        \n            @angular/router : ^7.2.2\n        \n            @fortawesome/angular-fontawesome : ^0.3.0\n        \n            @fortawesome/fontawesome-svg-core : ^1.2.17\n        \n            @fortawesome/free-solid-svg-icons : ^5.8.1\n        \n            @ng-bootstrap/ng-bootstrap : ^4.0.0\n        \n            @ngrx/effects : ^7.1.0\n        \n            @ngrx/entity : ^7.1.0\n        \n            @ngrx/router-store : ^7.1.0\n        \n            @ngrx/store : ^7.1.0\n        \n            @ngrx/store-devtools : ^7.1.0\n        \n            @ngx-translate/core : ^11.0.1\n        \n            @ngx-translate/http-loader : ^4.0.0\n        \n            @types/jwt-decode : ^2.2.1\n        \n            bootstrap : ^4.2.1\n        \n            core-js : ^2.6.3\n        \n            guid-typescript : ^1.0.9\n        \n            handlebars : ^4.0.12\n        \n            jwt-decode : ^2.2.0\n        \n            lodash : ^4.17.11\n        \n            moment : ^2.24.0\n        \n            moment-timezone : ^0.5.25\n        \n            ng-event-source : ^1.0.14\n        \n            ngrx-router : ^2.0.1\n        \n            rxjs : ^6.3.3\n        \n            svg-pan-zoom : ^3.6.0\n        \n            tslib : ^1.9.3\n        \n            zone.js : ^0.8.29\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActionType   (src/.../thirds.model.ts)\n                        \n                        \n                            AuthenticationActionTypes   (src/.../authentication.actions.ts)\n                        \n                        \n                            CardActionTypes   (src/.../card.actions.ts)\n                        \n                        \n                            CardOperationType   (src/.../card-operation.model.ts)\n                        \n                        \n                            ConfigActionTypes   (src/.../config.actions.ts)\n                        \n                        \n                            FeedActionTypes   (src/.../feed.actions.ts)\n                        \n                        \n                            FilterType   (src/.../filter.service.ts)\n                        \n                        \n                            InputType   (src/.../thirds.model.ts)\n                        \n                        \n                            LightCardActionTypes   (src/.../light-card.actions.ts)\n                        \n                        \n                            LocalStorageAuthContent   (src/.../authentication.service.ts)\n                        \n                        \n                            MenuActionTypes   (src/.../menu.actions.ts)\n                        \n                        \n                            MessageLevel   (src/.../message.model.ts)\n                        \n                        \n                            Severity   (src/.../light-card.model.ts)\n                        \n                        \n                            Sound   (src/.../light-card.model.ts)\n                        \n                        \n                            TitlePosition   (src/.../card.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/model/thirds.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ActionType\n                    \n                \n                        \n                            \n                                 EXTERNAL\n                            \n                        \n                        \n                            \n                                 JNLP\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        InputType\n                    \n                \n                        \n                            \n                                 TEXT\n                            \n                        \n                        \n                            \n                                 LIST\n                            \n                        \n                        \n                            \n                                 LIST_RADIO\n                            \n                        \n                        \n                            \n                                 SWITCH_LIST\n                            \n                        \n                        \n                            \n                                 LONGTEXT\n                            \n                        \n                        \n                            \n                                 BOOLEAN\n                            \n                        \n                        \n                            \n                                 STATIC\n                            \n                        \n            \n        \n\n    src/app/store/actions/authentication.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthenticationActionTypes\n                    \n                \n                        \n                            \n                                 InitAuthStatus\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Init Authentication Status\n                            \n                        \n                        \n                            \n                                 CheckAuthenticationStatus\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Check Authentication Status\n                            \n                        \n                        \n                            \n                                 AcceptLogIn\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Accept the user log in attempt\n                            \n                        \n                        \n                            \n                                 RejectLogIn\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Reject the user log in attempt\n                            \n                        \n                        \n                            \n                                 TryToLogIn\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Try to log the user in\n                            \n                        \n                        \n                            \n                                 TryToLogOut\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Try to log the user out\n                            \n                        \n                        \n                            \n                                 AcceptLogOut\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Accept the user log out attempt\n                            \n                        \n                        \n                            \n                                 AcceptLogOutSuccess\n                            \n                        \n                        \n                            \n                                Value : [Authentication] Success Accept the user log out attempt\n                            \n                        \n            \n        \n\n    src/app/store/actions/card.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        CardActionTypes\n                    \n                \n                        \n                            \n                                 ClearCard\n                            \n                        \n                        \n                            \n                                Value : [Card] Clear\n                            \n                        \n                        \n                            \n                                 LoadCard\n                            \n                        \n                        \n                            \n                                Value : [Card] Load Card\n                            \n                        \n                        \n                            \n                                 LoadCardSuccess\n                            \n                        \n                        \n                            \n                                Value : [Card] Load Card Success\n                            \n                        \n                        \n                            \n                                 LoadCardFailure\n                            \n                        \n                        \n                            \n                                Value : [Card] Load Card Fail\n                            \n                        \n                        \n                            \n                                 HandleUnexpectedError\n                            \n                        \n                        \n                            \n                                Value : [Card] Handle unexpected error related to card issue\n                            \n                        \n            \n        \n\n    src/app/model/card-operation.model.ts\n    \n        \n            \n                \n                    \n                        \n                        CardOperationType\n                    \n                \n                        \n                            \n                                 ADD\n                            \n                        \n                        \n                            \n                                Value : ADD\n                            \n                        \n                        \n                            \n                                 UPDATE\n                            \n                        \n                        \n                            \n                                Value : UPDATE\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n            \n        \n\n    src/app/store/actions/config.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        ConfigActionTypes\n                    \n                \n                        \n                            \n                                 LoadConfig\n                            \n                        \n                        \n                            \n                                Value : [Config] Load Config\n                            \n                        \n                        \n                            \n                                 LoadConfigSuccess\n                            \n                        \n                        \n                            \n                                Value : [Config] Load Config Success\n                            \n                        \n                        \n                            \n                                 LoadConfigFailure\n                            \n                        \n                        \n                            \n                                Value : [Config] Load Config Fail\n                            \n                        \n                        \n                            \n                                 HandleUnexpectedError\n                            \n                        \n                        \n                            \n                                Value : [Config] Handle unexpected error related to configuration issue\n                            \n                        \n            \n        \n\n    src/app/store/actions/feed.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        FeedActionTypes\n                    \n                \n                        \n                            \n                                 ApplyFilter\n                            \n                        \n                        \n                            \n                                Value : [Feed] Change filter Status\n                            \n                        \n                        \n                            \n                                 InitFilter\n                            \n                        \n                        \n                            \n                                Value : [Feed] Init filter\n                            \n                        \n            \n        \n\n    src/app/services/filter.service.ts\n    \n        \n            \n                \n                    \n                        \n                        FilterType\n                    \n                \n                        \n                            \n                                 TYPE_FILTER\n                            \n                        \n                        \n                            \n                                 RECIPIENT_FILTER\n                            \n                        \n                        \n                            \n                                 TIME_FILTER\n                            \n                        \n                        \n                            \n                                 TEST_FILTER\n                            \n                        \n            \n        \n\n    src/app/store/actions/light-card.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        LightCardActionTypes\n                    \n                \n                        \n                            \n                                 LoadLightCards\n                            \n                        \n                        \n                            \n                                Value : [LCard] Load\n                            \n                        \n                        \n                            \n                                 EmptyLightCards\n                            \n                        \n                        \n                            \n                                Value : [LCard] Empty\n                            \n                        \n                        \n                            \n                                 LoadLightCardsSuccess\n                            \n                        \n                        \n                            \n                                Value : [LCard] Load Success\n                            \n                        \n                        \n                            \n                                 LoadLightCardsExtendedData\n                            \n                        \n                        \n                            \n                                Value : [LCard] Load Extended Data\n                            \n                        \n                        \n                            \n                                 LoadLightCardsFailure\n                            \n                        \n                        \n                            \n                                Value : [LCard] Load Fail\n                            \n                        \n                        \n                            \n                                 SelectLightCard\n                            \n                        \n                        \n                            \n                                Value : [LCard] Select One\n                            \n                        \n                        \n                            \n                                 AddLightCardFailure\n                            \n                        \n                        \n                            \n                                Value : [LCard] Add Light Card Fail\n                            \n                        \n                        \n                            \n                                 UpdatedSubscription\n                            \n                        \n                        \n                            \n                                Value : [LCard] UpdateSubscription\n                            \n                        \n                        \n                            \n                                 HandleUnexpectedError\n                            \n                        \n                        \n                            \n                                Value : [LCard] Handle unexpected error related to authentication issue\n                            \n                        \n            \n        \n\n    src/app/services/authentication.service.ts\n    \n        \n            \n                \n                    \n                        \n                        LocalStorageAuthContent\n                    \n                \n                        \n                            \n                                 token\n                            \n                        \n                        \n                            \n                                Value : token\n                            \n                        \n                        \n                            \n                                 expirationDate\n                            \n                        \n                        \n                            \n                                Value : expirationDate\n                            \n                        \n                        \n                            \n                                 identifier\n                            \n                        \n                        \n                            \n                                Value : identifier\n                            \n                        \n                        \n                            \n                                 clientId\n                            \n                        \n                        \n                            \n                                Value : clientId\n                            \n                        \n            \n        \n\n    src/app/store/actions/menu.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        MenuActionTypes\n                    \n                \n                        \n                            \n                                 LoadMenu\n                            \n                        \n                        \n                            \n                                Value : [Menu] Load Menu\n                            \n                        \n                        \n                            \n                                 LoadMenuSuccess\n                            \n                        \n                        \n                            \n                                Value : [Menu] Load Menu Success\n                            \n                        \n                        \n                            \n                                 LoadMenuFailure\n                            \n                        \n                        \n                            \n                                Value : [Menu] Load Menu Fail\n                            \n                        \n                        \n                            \n                                 HandleUnexpectedError\n                            \n                        \n                        \n                            \n                                Value : [Menu] Handle unexpected error\n                            \n                        \n                        \n                            \n                                 UpdateSelectedMenu\n                            \n                        \n                        \n                            \n                                Value : [Menu] Update Selected Menu\n                            \n                        \n            \n        \n\n    src/app/model/message.model.ts\n    \n        \n            \n                \n                    \n                        \n                        MessageLevel\n                    \n                \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                 INFO\n                            \n                        \n                        \n                            \n                                 DEBUG\n                            \n                        \n            \n        \n\n    src/app/model/light-card.model.ts\n    \n        \n            \n                \n                    \n                        \n                        Severity\n                    \n                \n                        \n                            \n                                 ALARM\n                            \n                        \n                        \n                            \n                                Value : ALARM\n                            \n                        \n                        \n                            \n                                 ACTION\n                            \n                        \n                        \n                            \n                                Value : ACTION\n                            \n                        \n                        \n                            \n                                 NOTIFICATION\n                            \n                        \n                        \n                            \n                                Value : NOTIFICATION\n                            \n                        \n                        \n                            \n                                 QUESTION\n                            \n                        \n                        \n                            \n                                Value : QUESTION\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Sound\n                    \n                \n                        \n                            \n                                 NOTIFICATION\n                            \n                        \n                        \n                            \n                                 QUESTION\n                            \n                        \n            \n        \n\n    src/app/model/card.model.ts\n    \n        \n            \n                \n                    \n                        \n                        TitlePosition\n                    \n                \n                        \n                            \n                                 UP\n                            \n                        \n                        \n                            \n                                 DOWN\n                            \n                        \n                        \n                            \n                                 NONE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_ArchivesModule\n\n\n\ncluster_ArchivesModule_declarations\n\n\n\ncluster_ArchivesModule_imports\n\n\n\ncluster_CardsModule\n\n\n\ncluster_CardsModule_declarations\n\n\n\ncluster_CardsModule_exports\n\n\n\ncluster_CardsModule_providers\n\n\n\ncluster_FeedModule\n\n\n\ncluster_FeedModule_declarations\n\n\n\ncluster_FeedModule_imports\n\n\n\ncluster_FeedModule_exports\n\n\n\ncluster_ServicesModule\n\n\n\ncluster_ServicesModule_providers\n\n\n\ncluster_StateModule\n\n\n\ncluster_StateModule_imports\n\n\n\ncluster_ThirdpartyModule\n\n\n\ncluster_ThirdpartyModule_declarations\n\n\n\ncluster_ThirdpartyModule_imports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nIconComponent\n\nIconComponent\n\nAppModule -->\n\nIconComponent->AppModule\n\n\n\n\n\nLoginComponent\n\nLoginComponent\n\nAppModule -->\n\nLoginComponent->AppModule\n\n\n\n\n\nNavbarComponent\n\nNavbarComponent\n\nAppModule -->\n\nNavbarComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nServicesModule\n\nServicesModule\n\nAppModule -->\n\nServicesModule->AppModule\n\n\n\n\n\nStateModule\n\nStateModule\n\nAppModule -->\n\nStateModule->AppModule\n\n\n\n\n\nArchivesComponent\n\nArchivesComponent\n\n\n\nArchivesModule\n\nArchivesModule\n\nArchivesModule -->\n\nArchivesComponent->ArchivesModule\n\n\n\n\n\nArchivesRoutingModule\n\nArchivesRoutingModule\n\nArchivesModule -->\n\nArchivesRoutingModule->ArchivesModule\n\n\n\n\n\nCardComponent\n\nCardComponent\n\n\n\nCardsModule\n\nCardsModule\n\nCardsModule -->\n\nCardComponent->CardsModule\n\n\n\n\n\nCardDetailsComponent\n\nCardDetailsComponent\n\nCardsModule -->\n\nCardDetailsComponent->CardsModule\n\n\n\n\n\nDetailComponent\n\nDetailComponent\n\nCardsModule -->\n\nDetailComponent->CardsModule\n\n\n\n\n\nDetailsComponent\n\nDetailsComponent\n\nCardsModule -->\n\nDetailsComponent->CardsModule\n\n\n\n\n\nCardComponent \n\nCardComponent \n\nCardComponent  -->\n\nCardsModule->CardComponent \n\n\n\n\n\nCardDetailsComponent \n\nCardDetailsComponent \n\nCardDetailsComponent  -->\n\nCardsModule->CardDetailsComponent \n\n\n\n\n\nDetailComponent \n\nDetailComponent \n\nDetailComponent  -->\n\nCardsModule->DetailComponent \n\n\n\n\n\nDetailsComponent \n\nDetailsComponent \n\nDetailsComponent  -->\n\nCardsModule->DetailsComponent \n\n\n\n\n\nFeedModule\n\nFeedModule\n\nFeedModule -->\n\nCardsModule->FeedModule\n\n\n\n\n\nHandlebarsService\n\nHandlebarsService\n\nCardsModule -->\n\nHandlebarsService->CardsModule\n\n\n\n\n\nCardListComponent\n\nCardListComponent\n\nFeedModule -->\n\nCardListComponent->FeedModule\n\n\n\n\n\nFeedComponent\n\nFeedComponent\n\nFeedModule -->\n\nFeedComponent->FeedModule\n\n\n\n\n\nFiltersComponent\n\nFiltersComponent\n\nFeedModule -->\n\nFiltersComponent->FeedModule\n\n\n\n\n\nNoSelectionComponent\n\nNoSelectionComponent\n\nFeedModule -->\n\nNoSelectionComponent->FeedModule\n\n\n\n\n\nTimeFilterComponent\n\nTimeFilterComponent\n\nFeedModule -->\n\nTimeFilterComponent->FeedModule\n\n\n\n\n\nTimeLineComponent\n\nTimeLineComponent\n\nFeedModule -->\n\nTimeLineComponent->FeedModule\n\n\n\n\n\nTypeFilterComponent\n\nTypeFilterComponent\n\nFeedModule -->\n\nTypeFilterComponent->FeedModule\n\n\n\n\n\nFeedComponent \n\nFeedComponent \n\nFeedComponent  -->\n\nFeedModule->FeedComponent \n\n\n\n\n\nFeedRoutingModule\n\nFeedRoutingModule\n\nFeedModule -->\n\nFeedRoutingModule->FeedModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nServicesModule -->\n\nAuthenticationService->ServicesModule\n\n\n\n\n\nCardService\n\nCardService\n\nServicesModule -->\n\nCardService->ServicesModule\n\n\n\n\n\nConfigService\n\nConfigService\n\nServicesModule -->\n\nConfigService->ServicesModule\n\n\n\n\n\nFilterService\n\nFilterService\n\nServicesModule -->\n\nFilterService->ServicesModule\n\n\n\n\n\nThirdsService\n\nThirdsService\n\nServicesModule -->\n\nThirdsService->ServicesModule\n\n\n\n\n\nTimeService\n\nTimeService\n\nServicesModule -->\n\nTimeService->ServicesModule\n\n\n\n\n\nTokenInjector\n\nTokenInjector\n\nServicesModule -->\n\nTokenInjector->ServicesModule\n\n\n\n\n\n!environment\n\n!environment\n\nStateModule -->\n\n!environment->StateModule\n\n\n\n\n\nIframeDisplayComponent\n\nIframeDisplayComponent\n\n\n\nThirdpartyModule\n\nThirdpartyModule\n\nThirdpartyModule -->\n\nIframeDisplayComponent->ThirdpartyModule\n\n\n\n\n\nThirdpartyRoutingModule\n\nThirdpartyRoutingModule\n\nThirdpartyModule -->\n\nThirdpartyRoutingModule->ThirdpartyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    17 Components\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    55 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        19 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArchivesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArchivesRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CardsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FeedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FeedRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ServicesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StateModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ThirdpartyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ThirdpartyRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthenticationActions   (src/.../authentication.actions.ts)\n                        \n                        \n                            CardActions   (src/.../card.actions.ts)\n                        \n                        \n                            ConfigActions   (src/.../config.actions.ts)\n                        \n                        \n                            FeedActions   (src/.../feed.actions.ts)\n                        \n                        \n                            LightCardActions   (src/.../light-card.actions.ts)\n                        \n                        \n                            MenuActions   (src/.../menu.actions.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/store/actions/authentication.actions.ts\n    \n    \n        \n            \n                \n                    \n                    AuthenticationActions\n                \n            \n            \n                \n                        InitAuthStatus | AcceptLogIn | RejectLogIn | TryToLogIn | TryToLogOut | CheckAuthenticationStatus | AcceptLogOut | AcceptLogOutSuccess\n\n                \n            \n        \n    \n    src/app/store/actions/card.actions.ts\n    \n    \n        \n            \n                \n                    \n                    CardActions\n                \n            \n            \n                \n                        ClearCard | LoadCard | LoadCardSuccess | LoadCardFailure | HandleUnexpectedError\n\n                \n            \n        \n    \n    src/app/store/actions/config.actions.ts\n    \n    \n        \n            \n                \n                    \n                    ConfigActions\n                \n            \n            \n                \n                        LoadConfig | LoadConfigSuccess | LoadConfigFailure | HandleUnexpectedError\n\n                \n            \n        \n    \n    src/app/store/actions/feed.actions.ts\n    \n    \n        \n            \n                \n                    \n                    FeedActions\n                \n            \n            \n                \n                        InitFilters | ApplyFilter\n\n                \n            \n        \n    \n    src/app/store/actions/light-card.actions.ts\n    \n    \n        \n            \n                \n                    \n                    LightCardActions\n                \n            \n            \n                \n                        LoadLightCards | LoadLightCardsSuccess | LoadLightCardsFailure | SelectLightCard | AddLightCardFailure | UpdatedSubscription | HandleUnexpectedError | EmptyLightCards\n\n                \n            \n        \n    \n    src/app/store/actions/menu.actions.ts\n    \n    \n        \n            \n                \n                    \n                    MenuActions\n                \n            \n            \n                \n                        LoadMenu | LoadMenuSuccess | LoadMenuFailure | HandleUnexpectedError | UpdateSelectedMenu\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appEffects   (src/.../index.ts)\n                        \n                        \n                            appMetaReducers   (src/.../index.ts)\n                        \n                        \n                            appReducer   (src/.../index.ts)\n                        \n                        \n                            authInitialState   (src/.../authentication.state.ts)\n                        \n                        \n                            cardInitialState   (src/.../card.state.ts)\n                        \n                        \n                            CONFIG_LOAD_MAX_RETRIES   (src/.../config.state.ts)\n                        \n                        \n                            configInitialState   (src/.../config.state.ts)\n                        \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            environment   (src/.../environment.vps.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            feedInitialState   (src/.../feed.state.ts)\n                        \n                        \n                            getExpirationDate   (src/.../authentication.reducer.ts)\n                        \n                        \n                            getExpirationTime   (src/.../authentication.reducer.ts)\n                        \n                        \n                            getIdentifier   (src/.../authentication.reducer.ts)\n                        \n                        \n                            getSelectedId   (src/.../card.reducer.ts)\n                        \n                        \n                            getSelectedId   (src/.../menu.reducer.ts)\n                        \n                        \n                            getToken   (src/.../authentication.reducer.ts)\n                        \n                        \n                            i18nPath   (src/.../translate.config.ts)\n                        \n                        \n                            initialState   (src/.../router.state.ts)\n                        \n                        \n                            LightCardAdapter   (src/.../feed.state.ts)\n                        \n                        \n                            menuInitialState   (src/.../menu.state.ts)\n                        \n                        \n                            ONE_SECOND   (src/.../authentication.service.ts)\n                        \n                        \n                            prodI18nPath   (src/.../translate.config.ts)\n                        \n                        \n                               (src/.../feed.selectors.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                        \n                            selectActiveFiltersArray   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectAuthenticationState   (src/.../authentication.selectors.ts)\n                        \n                        \n                            selectCardState   (src/.../card.selectors.ts)\n                        \n                        \n                            selectCardStateSelected   (src/.../card.selectors.ts)\n                        \n                        \n                            selectCardStateSelectedDetails   (src/.../card.selectors.ts)\n                        \n                        \n                            selectCardStateSelectedId   (src/.../card.selectors.ts)\n                        \n                        \n                            selectCode   (src/.../authentication.selectors.ts)\n                        \n                        \n                            selectConfig   (src/.../config.selectors.ts)\n                        \n                        \n                            selectConfigData   (src/.../config.selectors.ts)\n                        \n                        \n                            selectConfigLoaded   (src/.../config.selectors.ts)\n                        \n                        \n                            selectConfigRetry   (src/.../config.selectors.ts)\n                        \n                        \n                            selectCurrentUrl   (src/.../router.selectors.ts)\n                        \n                        \n                            selectExpirationTime   (src/.../authentication.selectors.ts)\n                        \n                        \n                            selectFilter   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectFilteredFeed   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectLastCards   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectLightCardSelection   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectLightCardsState   (src/.../feed.selectors.ts)\n                        \n                        \n                            selectMaxedRetries   (src/.../config.selectors.ts)\n                        \n                        \n                            selectMenuState   (src/.../menu.selectors.ts)\n                        \n                        \n                            selectMenuStateMenu   (src/.../menu.selectors.ts)\n                        \n                        \n                            selectMenuStateSelectedMenuEntryId   (src/.../menu.selectors.ts)\n                        \n                        \n                            selectMenuStateSelectedMenuId   (src/.../menu.selectors.ts)\n                        \n                        \n                            selectMessage   (src/.../authentication.selectors.ts)\n                        \n                        \n                            selectRouterState   (src/.../router.selectors.ts)\n                        \n                        \n                            storeConfig   (src/.../index.ts)\n                        \n                        \n                            translateConfig   (src/.../translate.config.ts)\n                        \n                        \n                            UTC_beginning_time   (src/.../authentication.reducer.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/store/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            appEffects\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    CardEffects,\n    ConfigEffects,\n    CardOperationEffects,\n    RouterEffects,\n    CustomRouterEffects,\n    AuthenticationEffects,\n    MenuEffects,\n    LightCardEffects,\n    FeedFiltersEffects]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            appMetaReducers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MetaReducer[]\n\n                        \n                    \n                    \n                        \n                            Default value : !environment.production\n    ? [storeFreeze]\n    : []\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            appReducer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ActionReducerMap\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    router: fromRouter.routerReducer,\n    feed: lightCardReducer,\n    authentication: authenticationReducer,\n    card: cardReducer,\n    menu: menuReducer,\n    config: configReducer\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            storeConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    metaReducers: appMetaReducers,\n    // initialState: {\n    //     router: routerInitialState,\n    // }\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/authentication.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            authInitialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     AuthState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    code: null,\n    identifier: null,\n    clientId: null,\n    token: null,\n    expirationDate: new Date(0),\n    message: null\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/card.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cardInitialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CardState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    selected: null,\n    loading: false,\n    error: null\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/config.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CONFIG_LOAD_MAX_RETRIES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 5\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configInitialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ConfigState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    config:{},\n    loading: false,\n    loaded: false,\n    error: null,\n    retry: 0\n}\n                        \n                    \n\n\n            \n        \n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.vps.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false,\n    urls: {\n      authentication: '',\n        auth: 'http://opfab.rte-europe.com:2002/auth',\n        cards: 'http://opfab.rte-europe.com:2002/cards',\n        archives : '',\n        thirds: 'http://opfab.rte-europe.com:2002/thirds',\n        config: 'http://opfab.rte-europe.com:2002/config'\n    }\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false,\n    urls: {\n      authentication: '',\n        auth: 'http://localhost:2002/auth',\n        cards: 'http://localhost:2002/cards',\n        archives : '',\n        thirds: 'http://localhost:2002/thirds',\n        config: 'http://localhost:2002/config'\n    }\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true,\n    urls: {\n        authentication: '',\n        auth: '/auth',\n        cards: '/cards',\n        archives : '',\n        thirds: '/thirds',\n        config: '/config'\n    }\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/feed.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            feedInitialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CardFeedState\n\n                        \n                    \n                    \n                        \n                            Default value : LightCardAdapter.getInitialState(\n    {\n        selectedCardId: null,\n        lastCards: [],\n        loading: false,\n        error: '',\n        filters: new Map()\n    })\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LightCardAdapter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EntityAdapter\n\n                        \n                    \n                    \n                        \n                            Default value : createEntityAdapter({\n    sortComparer:sortByStartDate\n})\n                        \n                    \n\n\n            \n        \n\n    src/app/store/reducers/authentication.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getExpirationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: AuthState) => state.expirationDate\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getExpirationTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: AuthState) => {\n    const expirationDate = getExpirationDate(state);\n    const token = getToken(state);\n    if (token && expirationDate) {\n        return expirationDate.getTime();\n    } else {\n        return UTC_beginning_time;\n    }\n}\n                        \n                    \n\n                \n                    \n                        return the stored expiration time otherwise the beginning\nof the UTC time which should be always in the past.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getIdentifier\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: AuthState) => state.identifier\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: AuthState) => state.token\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            UTC_beginning_time\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n\n\n            \n        \n\n    src/app/store/reducers/card.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getSelectedId\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: CardFeedState) => state.selectedCardId\n                        \n                    \n\n\n            \n        \n\n    src/app/store/reducers/menu.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getSelectedId\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: CardFeedState) => state.selectedCardId\n                        \n                    \n\n\n            \n        \n\n    src/app/translate.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            i18nPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"/assets/i18n/\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            prodI18nPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"/ui/assets/i18n/\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            translateConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TranslateModuleConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n    }\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/router.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            initialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    state: {\n        url: window.location.pathname,\n        params: {},\n        queryParams: {}\n    },\n    navigationId: 0\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/store/states/menu.state.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            menuInitialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MenuState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    menu:[],\n    loading: false,\n    error:null,\n    selected_menu_id: null,\n    selected_menu_entry_id: null\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/services/authentication.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ONE_SECOND\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1000\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/feed.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LightCardAdapter.getSelectors(selectLightCardsState)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectActiveFiltersArray\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectFilter,\n    (filters) =>{\n      let result = [];\n      for(let v of filters.values()) {\n        if(v.active)\n          result.push(v);\n      }\n      return result;\n    })\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectFilter\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectLightCardsState,\n    state => state.filters)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectFilteredFeed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectFeed,selectActiveFiltersArray,\n    (feed:LightCard[],filters:Filter[])=>{\n    if(filters && filters.length>0)\n      return feed.filter(card=>Filter.chainFilter(card,filters));\n    else return feed;\n    })\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectLastCards\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectLightCardsState,\n    state => state.lastCards)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectLightCardSelection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(\n    selectLightCardsState,\n    state => state.selectedCardId)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectLightCardsState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state:AppState) => state.feed\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/authentication.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            selectAuthenticationState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createFeatureSelector('authentication')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectCode\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectAuthenticationState, (authState)=>authState.code)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectExpirationTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectAuthenticationState, fromAuthentication.getExpirationTime)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectAuthenticationState, (authState)=>authState.message)\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/card.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            selectCardState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state:AppState) => state.card\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectCardStateSelected\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectCardState, (cardState:CardState)=> cardState.selected)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectCardStateSelectedDetails\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectCardStateSelected, (card:Card)=> {\n    return card==null?null:card.details;\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectCardStateSelectedId\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectCardStateSelected, (card:Card)=> {\n    return card==null?null:card.id;\n})\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/config.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            selectConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state:AppState) => state.config\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectConfigData\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectConfig, (configState:ConfigState)=> configState.config)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectConfigLoaded\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectConfig, (configState:ConfigState)=> configState.loaded)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectConfigRetry\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectConfig, (configState:ConfigState)=> configState.retry)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectMaxedRetries\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectConfigRetry, (retries:number)=> retries >= CONFIG_LOAD_MAX_RETRIES)\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/router.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            selectCurrentUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectRouterState,\n    (router) => {\n        if (router)\n            return router.state && router.state.url\n        return null;\n    })\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectRouterState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createFeatureSelector('router')\n                        \n                    \n\n\n            \n        \n\n    src/app/store/selectors/menu.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            selectMenuState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state:AppState) => state.menu\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectMenuStateMenu\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectMenuState, (menuState:MenuState)=> menuState.menu)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectMenuStateSelectedMenuEntryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectMenuState, (menuState:MenuState)=> menuState.selected_menu_entry_id)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectMenuStateSelectedMenuId\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(selectMenuState, (menuState:MenuState)=> menuState.selected_menu_id)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
